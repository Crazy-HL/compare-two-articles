{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * 从信息框元素中提取结构化文本数据\r\n * @param {HTMLElement} infoboxElement - 信息框DOM元素\r\n * @returns {Object} 结构化数据\r\n */\nexport function extractInfoboxData(infoboxElement) {\n  if (!infoboxElement) return null;\n  const result = {\n    metadata: {\n      title: infoboxElement.querySelector('caption')?.textContent.trim() || '',\n      className: infoboxElement.className\n    },\n    attributes: {},\n    rawFields: []\n  };\n\n  // 提取所有属性行（包含th和td的行）\n  const rows = infoboxElement.querySelectorAll('tr:has(th):has(td)');\n  rows.forEach(row => {\n    const th = row.querySelector('th');\n    const td = row.querySelector('td');\n    if (th && td) {\n      const label = normalizeFieldLabel(th.textContent);\n      const value = cleanFieldValue(td.textContent);\n      const links = extractTextLinks(td);\n\n      // 结构化存储\n      result.attributes[label] = value;\n      result.rawFields.push({\n        label,\n        value,\n        links\n      });\n\n      // 存储链接信息\n      if (links.length > 0) {\n        result.attributes[`${label}_links`] = links;\n      }\n    }\n  });\n  return result;\n}\n\n/**\r\n * 分类标准化信息框数据\r\n * @param {Object} rawData - 原始提取的数据\r\n * @returns {Object} 分类后的结构化数据\r\n */\nexport function classifyInfoboxData(rawData) {\n  if (!rawData) return null;\n  const classified = {\n    identifiers: {},\n    // 名称、代号等\n    temporal: {},\n    // 日期、年代等\n    quantitative: {},\n    // 数字+单位\n    relational: {},\n    // 包含链接的字段\n    categorical: {},\n    // 类型、类别\n    other: {} // 未分类字段\n  };\n  const {\n    attributes\n  } = rawData;\n\n  // 字段类型识别规则\n  const FIELD_RULES = [{\n    type: 'identifiers',\n    pattern: /名称|全称|简称|别称|代号|称谓|称呼|中文名|英文名/\n  }, {\n    type: 'temporal',\n    pattern: /时间|日期|年|月|日|时代|时期|朝代|纪元|成立|创立|建立|诞生/\n  }, {\n    type: 'quantitative',\n    pattern: /数|量|面积|人口|高度|长度|重量|深度|距离|金额|价格|海拔|速度/\n  }, {\n    type: 'relational',\n    pattern: /属于|位于|上级|下级|父亲|母亲|子公司|母公司|隶属|包含/\n  }, {\n    type: 'categorical',\n    pattern: /类型|类别|种类|分类|性质|级别|等级|状态|形式/\n  }];\n\n  // 分类处理每个字段\n  for (const [label, value] of Object.entries(attributes)) {\n    if (label.endsWith('_links')) continue;\n    let fieldType = 'other';\n    for (const rule of FIELD_RULES) {\n      if (rule.pattern.test(label)) {\n        fieldType = rule.type;\n        break;\n      }\n    }\n\n    // 如果有链接则优先作为关系型字段\n    if (attributes[`${label}_links`]) {\n      fieldType = 'relational';\n    }\n\n    // 根据类型处理值\n    switch (fieldType) {\n      case 'temporal':\n        classified.temporal[label] = parseTemporalValue(value);\n        break;\n      case 'quantitative':\n        classified.quantitative[label] = parseQuantitativeValue(value);\n        break;\n      default:\n        classified[fieldType][label] = value;\n    }\n  }\n  return classified;\n}\n\n// 辅助函数：标准化字段标签\nfunction normalizeFieldLabel(label) {\n  return label.trim().replace(/[:：]\\s*$/, '') // 移除结尾冒号\n  .replace(/\\s+/g, ' ') // 合并空格\n  .replace(/[[\\]]/g, ''); // 移除方括号\n}\n\n// 辅助函数：清理字段值\nfunction cleanFieldValue(value) {\n  return value.trim().replace(/\\[\\d+\\]/g, '') // 移除引用标记[1]\n  .replace(/\\s+/g, ' ') // 合并空格\n  .replace(/^[:：]\\s*/, '') // 移除开头冒号\n  .replace(/\\u00A0/g, ' '); // 替换不间断空格\n}\n\n// 辅助函数：提取文本链接\nfunction extractTextLinks(element) {\n  return Array.from(element.querySelectorAll('a')).filter(a => a.href && !a.href.includes('#')).map(a => ({\n    text: a.textContent.trim(),\n    href: a.href,\n    isWikiLink: a.href.includes('wikipedia.org/wiki/')\n  }));\n}\n\n// 辅助函数：解析时间类值\nfunction parseTemporalValue(value) {\n  // 提取年份范围（如\"1999-2001\"）\n  const rangeMatch = value.match(/(\\d{4})\\s*[至\\-~]\\s*(\\d{4})/);\n  if (rangeMatch) {\n    return {\n      original: value,\n      startYear: parseInt(rangeMatch[1]),\n      endYear: parseInt(rangeMatch[2]),\n      type: 'year_range'\n    };\n  }\n\n  // 提取单个年份（如\"2001年\"）\n  const yearMatch = value.match(/(\\d{4})年?/);\n  if (yearMatch) {\n    return {\n      original: value,\n      year: parseInt(yearMatch[1]),\n      type: 'year'\n    };\n  }\n\n  // 提取完整日期（如\"2001年1月1日\"）\n  const dateMatch = value.match(/(\\d{4})年(\\d{1,2})月(\\d{1,2})日?/);\n  if (dateMatch) {\n    return {\n      original: value,\n      year: parseInt(dateMatch[1]),\n      month: parseInt(dateMatch[2]),\n      day: parseInt(dateMatch[3]),\n      type: 'full_date'\n    };\n  }\n  return {\n    original: value\n  };\n}\n\n// 辅助函数：解析量化值\nfunction parseQuantitativeValue(value) {\n  // 匹配数字和单位（支持千分位逗号和中文单位）\n  const match = value.match(/([0-9,\\.]+)\\s*([^\\d\\s,\\.]+)?/);\n  if (!match) return {\n    original: value\n  };\n  const numValue = parseFloat(match[1].replace(/,/g, ''));\n  const unit = match[2]?.trim() || '';\n\n  // 标准化常见单位\n  const standardizedUnit = standardizeUnit(unit);\n  return {\n    original: value,\n    value: numValue,\n    unit: standardizedUnit,\n    normalized: `${numValue} ${standardizedUnit}`\n  };\n}\n\n// 辅助函数：标准化单位\nfunction standardizeUnit(unit) {\n  const unitMap = {\n    '平方公里': 'km²',\n    '平方千米': 'km²',\n    'km2': 'km²',\n    '千米': 'km',\n    '公里': 'km',\n    '米': 'm',\n    '万人': '×10⁴人',\n    '亿人': '×10⁸人',\n    '吨': 't',\n    '千克': 'kg',\n    '克': 'g'\n  };\n  return unitMap[unit] || unit;\n}","map":{"version":3,"names":["extractInfoboxData","infoboxElement","result","metadata","title","querySelector","textContent","trim","className","attributes","rawFields","rows","querySelectorAll","forEach","row","th","td","label","normalizeFieldLabel","value","cleanFieldValue","links","extractTextLinks","push","length","classifyInfoboxData","rawData","classified","identifiers","temporal","quantitative","relational","categorical","other","FIELD_RULES","type","pattern","Object","entries","endsWith","fieldType","rule","test","parseTemporalValue","parseQuantitativeValue","replace","element","Array","from","filter","a","href","includes","map","text","isWikiLink","rangeMatch","match","original","startYear","parseInt","endYear","yearMatch","year","dateMatch","month","day","numValue","parseFloat","unit","standardizedUnit","standardizeUnit","normalized","unitMap"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/js/wikiInfoboxParser.js"],"sourcesContent":["/**\r\n * 从信息框元素中提取结构化文本数据\r\n * @param {HTMLElement} infoboxElement - 信息框DOM元素\r\n * @returns {Object} 结构化数据\r\n */\r\nexport function extractInfoboxData(infoboxElement) {\r\n  if (!infoboxElement) return null;\r\n\r\n  const result = {\r\n    metadata: {\r\n      title: infoboxElement.querySelector('caption')?.textContent.trim() || '',\r\n      className: infoboxElement.className\r\n    },\r\n    attributes: {},\r\n    rawFields: []\r\n  };\r\n\r\n  // 提取所有属性行（包含th和td的行）\r\n  const rows = infoboxElement.querySelectorAll('tr:has(th):has(td)');\r\n  \r\n  rows.forEach(row => {\r\n    const th = row.querySelector('th');\r\n    const td = row.querySelector('td');\r\n    \r\n    if (th && td) {\r\n      const label = normalizeFieldLabel(th.textContent);\r\n      const value = cleanFieldValue(td.textContent);\r\n      const links = extractTextLinks(td);\r\n      \r\n      // 结构化存储\r\n      result.attributes[label] = value;\r\n      result.rawFields.push({ label, value, links });\r\n      \r\n      // 存储链接信息\r\n      if (links.length > 0) {\r\n        result.attributes[`${label}_links`] = links;\r\n      }\r\n    }\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * 分类标准化信息框数据\r\n * @param {Object} rawData - 原始提取的数据\r\n * @returns {Object} 分类后的结构化数据\r\n */\r\nexport function classifyInfoboxData(rawData) {\r\n  if (!rawData) return null;\r\n\r\n  const classified = {\r\n    identifiers: {},  // 名称、代号等\r\n    temporal: {},     // 日期、年代等\r\n    quantitative: {}, // 数字+单位\r\n    relational: {},   // 包含链接的字段\r\n    categorical: {},  // 类型、类别\r\n    other: {}         // 未分类字段\r\n  };\r\n\r\n  const { attributes } = rawData;\r\n  \r\n  // 字段类型识别规则\r\n  const FIELD_RULES = [\r\n    { type: 'identifiers', pattern: /名称|全称|简称|别称|代号|称谓|称呼|中文名|英文名/ },\r\n    { type: 'temporal', pattern: /时间|日期|年|月|日|时代|时期|朝代|纪元|成立|创立|建立|诞生/ },\r\n    { type: 'quantitative', pattern: /数|量|面积|人口|高度|长度|重量|深度|距离|金额|价格|海拔|速度/ },\r\n    { type: 'relational', pattern: /属于|位于|上级|下级|父亲|母亲|子公司|母公司|隶属|包含/ },\r\n    { type: 'categorical', pattern: /类型|类别|种类|分类|性质|级别|等级|状态|形式/ }\r\n  ];\r\n\r\n  // 分类处理每个字段\r\n  for (const [label, value] of Object.entries(attributes)) {\r\n    if (label.endsWith('_links')) continue;\r\n    \r\n    let fieldType = 'other';\r\n    for (const rule of FIELD_RULES) {\r\n      if (rule.pattern.test(label)) {\r\n        fieldType = rule.type;\r\n        break;\r\n      }\r\n    }\r\n    \r\n    // 如果有链接则优先作为关系型字段\r\n    if (attributes[`${label}_links`]) {\r\n      fieldType = 'relational';\r\n    }\r\n    \r\n    // 根据类型处理值\r\n    switch(fieldType) {\r\n      case 'temporal':\r\n        classified.temporal[label] = parseTemporalValue(value);\r\n        break;\r\n      case 'quantitative':\r\n        classified.quantitative[label] = parseQuantitativeValue(value);\r\n        break;\r\n      default:\r\n        classified[fieldType][label] = value;\r\n    }\r\n  }\r\n  \r\n  return classified;\r\n}\r\n\r\n// 辅助函数：标准化字段标签\r\nfunction normalizeFieldLabel(label) {\r\n  return label.trim()\r\n    .replace(/[:：]\\s*$/, '')    // 移除结尾冒号\r\n    .replace(/\\s+/g, ' ')       // 合并空格\r\n    .replace(/[[\\]]/g, '');     // 移除方括号\r\n}\r\n\r\n// 辅助函数：清理字段值\r\nfunction cleanFieldValue(value) {\r\n  return value.trim()\r\n    .replace(/\\[\\d+\\]/g, '')    // 移除引用标记[1]\r\n    .replace(/\\s+/g, ' ')       // 合并空格\r\n    .replace(/^[:：]\\s*/, '')   // 移除开头冒号\r\n    .replace(/\\u00A0/g, ' ');   // 替换不间断空格\r\n}\r\n\r\n// 辅助函数：提取文本链接\r\nfunction extractTextLinks(element) {\r\n  return Array.from(element.querySelectorAll('a'))\r\n    .filter(a => a.href && !a.href.includes('#'))\r\n    .map(a => ({\r\n      text: a.textContent.trim(),\r\n      href: a.href,\r\n      isWikiLink: a.href.includes('wikipedia.org/wiki/')\r\n    }));\r\n}\r\n\r\n// 辅助函数：解析时间类值\r\nfunction parseTemporalValue(value) {\r\n  // 提取年份范围（如\"1999-2001\"）\r\n  const rangeMatch = value.match(/(\\d{4})\\s*[至\\-~]\\s*(\\d{4})/);\r\n  if (rangeMatch) {\r\n    return {\r\n      original: value,\r\n      startYear: parseInt(rangeMatch[1]),\r\n      endYear: parseInt(rangeMatch[2]),\r\n      type: 'year_range'\r\n    };\r\n  }\r\n  \r\n  // 提取单个年份（如\"2001年\"）\r\n  const yearMatch = value.match(/(\\d{4})年?/);\r\n  if (yearMatch) {\r\n    return {\r\n      original: value,\r\n      year: parseInt(yearMatch[1]),\r\n      type: 'year'\r\n    };\r\n  }\r\n  \r\n  // 提取完整日期（如\"2001年1月1日\"）\r\n  const dateMatch = value.match(/(\\d{4})年(\\d{1,2})月(\\d{1,2})日?/);\r\n  if (dateMatch) {\r\n    return {\r\n      original: value,\r\n      year: parseInt(dateMatch[1]),\r\n      month: parseInt(dateMatch[2]),\r\n      day: parseInt(dateMatch[3]),\r\n      type: 'full_date'\r\n    };\r\n  }\r\n  \r\n  return { original: value };\r\n}\r\n\r\n// 辅助函数：解析量化值\r\nfunction parseQuantitativeValue(value) {\r\n  // 匹配数字和单位（支持千分位逗号和中文单位）\r\n  const match = value.match(/([0-9,\\.]+)\\s*([^\\d\\s,\\.]+)?/);\r\n  if (!match) return { original: value };\r\n  \r\n  const numValue = parseFloat(match[1].replace(/,/g, ''));\r\n  const unit = match[2]?.trim() || '';\r\n  \r\n  // 标准化常见单位\r\n  const standardizedUnit = standardizeUnit(unit);\r\n  \r\n  return {\r\n    original: value,\r\n    value: numValue,\r\n    unit: standardizedUnit,\r\n    normalized: `${numValue} ${standardizedUnit}`\r\n  };\r\n}\r\n\r\n// 辅助函数：标准化单位\r\nfunction standardizeUnit(unit) {\r\n  const unitMap = {\r\n    '平方公里': 'km²',\r\n    '平方千米': 'km²',\r\n    'km2': 'km²',\r\n    '千米': 'km',\r\n    '公里': 'km',\r\n    '米': 'm',\r\n    '万人': '×10⁴人',\r\n    '亿人': '×10⁸人',\r\n    '吨': 't',\r\n    '千克': 'kg',\r\n    '克': 'g'\r\n  };\r\n  \r\n  return unitMap[unit] || unit;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}