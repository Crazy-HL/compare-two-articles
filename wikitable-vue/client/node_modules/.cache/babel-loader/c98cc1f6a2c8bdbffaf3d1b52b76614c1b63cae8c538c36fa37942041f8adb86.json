{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-2e65ee1c\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"div0 selectContent2\",\n  id: \"div3\"\n};\nconst _hoisted_2 = [\"innerHTML\"];\nconst _hoisted_3 = {\n  key: 0,\n  class: \"structure-visualization\"\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h3\", null, \"文章结构可视化：\", -1 /* HOISTED */));\nconst _hoisted_5 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", {\n    innerHTML: $setup.div3Content,\n    class: \"showHtml\"\n  }, null, 8 /* PROPS */, _hoisted_2), _createCommentVNode(\" 添加结构可视化按钮 \"), _createElementVNode(\"button\", {\n    onClick: $setup.generateStructureVisualization\n  }, \"生成结构可视化\"), _createCommentVNode(\" 显示结构可视化图 \"), $setup.structureImage ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_hoisted_4, _createElementVNode(\"img\", {\n    src: 'data:image/png;base64,' + $setup.structureImage,\n    alt: \"结构可视化图\"\n  }, null, 8 /* PROPS */, _hoisted_5)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","id","key","_createElementVNode","_createElementBlock","_hoisted_1","innerHTML","$setup","div3Content","_hoisted_2","_createCommentVNode","onClick","generateStructureVisualization","structureImage","_hoisted_3","_hoisted_4","src","alt","_hoisted_5"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\Div3.vue"],"sourcesContent":["<template>\r\n\t<div class=\"div0 selectContent2\" id=\"div3\">\r\n\t\t<div v-html=\"div3Content\" class=\"showHtml\"></div>\r\n\t\t<!-- 添加结构可视化按钮 -->\r\n\t\t<button @click=\"generateStructureVisualization\">生成结构可视化</button>\r\n\t\t<!-- 显示结构可视化图 -->\r\n\t\t<div v-if=\"structureImage\" class=\"structure-visualization\">\r\n\t\t\t<h3>文章结构可视化：</h3>\r\n\t\t\t<img\r\n\t\t\t\t:src=\"'data:image/png;base64,' + structureImage\"\r\n\t\t\t\talt=\"结构可视化图\" />\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted, nextTick } from \"vue\";\r\n\timport MouseSelection from \"@/js/mouse_selection\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\r\n\tconst div3Content = ref(\"\");\r\n\tconst structureImage = ref(\"\"); // 用来存储结构可视化图像\r\n\r\n\tonMounted(async () => {\r\n\t\tconst src = \"https://baike.baidu.com/item/%E5%94%90%E6%9C%9D/53699\";\r\n\t\tawait showHtml(src, div3Content);\r\n\r\n\t\tnextTick(() => {\r\n\t\t\tMouseSelection.start({\r\n\t\t\t\trangeSelector: \".selectContent2\",\r\n\t\t\t\tcustomId: \"div3\"\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t// 只对 div3 绑定 mouseup 事件\r\n\t\tdocument\r\n\t\t\t.querySelector(\"#div3\")\r\n\t\t\t.addEventListener(\"mouseup\", handleSelection);\r\n\t});\r\n\r\n\tonUnmounted(() => {\r\n\t\t// 解绑事件，防止内存泄漏\r\n\t\tdocument\r\n\t\t\t.querySelector(\"#div3\")\r\n\t\t\t.removeEventListener(\"mouseup\", handleSelection);\r\n\t});\r\n\r\n\tfunction handleSelection() {\r\n\t\tMouseSelection.selectionChangeFun(selectContent => {\r\n\t\t\tif (selectContent) {\r\n\t\t\t\tconsole.log(\"选中的内容来自 Div3:\", selectContent);\r\n\t\t\t\tbus.emit(\"div3Event\", selectContent);\r\n\t\t\t}\r\n\t\t}, \"div3\");\r\n\t}\r\n\r\n\tasync function showHtml(src, area) {\r\n\t\ttry {\r\n\t\t\tapi.get(\"html\", { url: src }, data => {\r\n\t\t\t\tarea.value = htmlToDom(data);\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(\"请求失败：\", err.message);\r\n\t\t\tarea.value = \"\";\r\n\t\t}\r\n\t}\r\n\r\n\tfunction htmlToDom(html) {\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\treturn doc.documentElement.outerHTML;\r\n\t}\r\n\r\n\t// 生成文章结构可视化\r\n\tasync function generateStructureVisualization() {\r\n\t\ttry {\r\n\t\t\tconst textToAnalyze = div3Content.value;\r\n\t\t\tif (!textToAnalyze) {\r\n\t\t\t\talert(\"请先加载文章！\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tapi.post(\r\n\t\t\t\t\"structure_visualization\", // 假设后端接口是 'structure_visualization'\r\n\t\t\t\t{ text: textToAnalyze },\r\n\t\t\t\tdata => {\r\n\t\t\t\t\tif (data.structure_image) {\r\n\t\t\t\t\t\tstructureImage.value = data.structure_image;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.error(\"结构可视化失败:\", data.error);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"请求失败:\", error);\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style scoped>\r\n\t#div3 {\r\n\t\twidth: 30%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t}\r\n\r\n\t.showHtml {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tborder: 1px solid #ccc;\r\n\t\toverflow: auto;\r\n\t}\r\n\r\n\t.structure-visualization {\r\n\t\tmargin-top: 20px;\r\n\t\tborder: 1px solid #ccc;\r\n\t\tpadding: 10px;\r\n\t\tbackground-color: #f9f9f9;\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,KAAK,EAAC,qBAAqB;EAACC,EAAE,EAAC;;mBADrC;;EAAAC,GAAA;EAM6BF,KAAK,EAAC;;gEAChCG,mBAAA,CAAiB,YAAb,UAAQ;mBAPf;;uBACCC,mBAAA,CAWM,OAXNC,UAWM,GAVLF,mBAAA,CAAiD;IAA5CG,SAAoB,EAAZC,MAAA,CAAAC,WAAW;IAAER,KAAK,EAAC;0BAFlCS,UAAA,GAGEC,mBAAA,eAAkB,EAClBP,mBAAA,CAAgE;IAAvDQ,OAAK,EAAEJ,MAAA,CAAAK;EAA8B,GAAE,SAAO,GACvDF,mBAAA,cAAiB,EACNH,MAAA,CAAAM,cAAc,I,cAAzBT,mBAAA,CAKM,OALNU,UAKM,GAJLC,UAAiB,EACjBZ,mBAAA,CAEgB;IADda,GAAG,6BAA6BT,MAAA,CAAAM,cAAc;IAC/CI,GAAG,EAAC;0BAVRC,UAAA,E,KAAAR,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}