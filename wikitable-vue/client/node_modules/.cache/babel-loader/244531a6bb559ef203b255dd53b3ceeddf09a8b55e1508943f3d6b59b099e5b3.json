{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed, watch, onMounted } from \"vue\";\nimport SparklineChart from \"./SparklineChart.vue\";\nexport default {\n  __name: 'CompareTable',\n  props: {\n    div1RawData: String,\n    div3RawData: String\n  },\n  emits: [\"error\"],\n  setup(__props, _ref) {\n    let {\n      expose: __expose,\n      emit: __emit\n    } = _ref;\n    __expose();\n    const props = __props;\n    const emit = __emit;\n    const processedTable1 = ref({\n      title: \"表格1\",\n      rows: [],\n      columns: [],\n      timeSeriesData: {}\n    });\n    const processedTable2 = ref({\n      title: \"表格2\",\n      rows: [],\n      columns: [],\n      timeSeriesData: {}\n    });\n    const mounted = ref(false);\n    const hasData = computed(() => {\n      return props.div1RawData && props.div3RawData && processedTable1.value.columns.length > 0 && processedTable2.value.columns.length > 0;\n    });\n    const commonAttributes = computed(() => {\n      const attrs1 = processedTable1.value.rows || [];\n      const attrs2 = processedTable2.value.rows || [];\n      return attrs1.filter(attr => attrs2.includes(attr) && (hasDataForAttribute(processedTable1.value, attr) || hasDataForAttribute(processedTable2.value, attr)));\n    });\n    const handleChartError = error => {\n      console.error(\"图表组件报错:\", error);\n      emit(\"error\", error);\n    };\n    function parseTableToStandardJSON(html) {\n      let defaultTitle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"未命名表格\";\n      const result = {\n        title: extractTitleFromHTML(html) || defaultTitle,\n        rows: [],\n        columns: [],\n        timeSeriesData: {}\n      };\n      try {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(html, \"text/html\");\n        const table = doc.querySelector(\"table\");\n        if (!table) return result;\n\n        // 提取表头\n        const headerCells = table.querySelector(\"tr\")?.children || [];\n        result.rows = Array.from(headerCells).map(cell => {\n          return cell.textContent.replace(/[\\n†*]/g, \"\").trim().replace(/\\s+/g, \" \");\n        });\n\n        // 检查是否有Year列\n        const yearColumnIndex = result.rows.findIndex(header => header.toLowerCase().includes(\"year\"));\n        const hasYearColumn = yearColumnIndex !== -1;\n\n        // 辅助函数：清理年份格式\n        const cleanYear = yearStr => {\n          if (!yearStr) return null;\n          let cleaned = yearStr.toString().replace(/[†*]/g, \"\").trim();\n          if (/^\\d{4}[\\u2013\\u2014-]\\d{2}$/.test(cleaned)) {\n            const startYear = cleaned.substring(0, 4);\n            return parseInt(startYear);\n          }\n          const yearMatch = cleaned.match(/\\d{4}/);\n          return yearMatch ? parseInt(yearMatch[0]) : null;\n        };\n\n        // 辅助函数：检查是否是合并单元格行\n        const isMergedRow = row => {\n          const cells = Array.from(row.children);\n          return cells.some((cell, index) => index < 2 && (cell.hasAttribute(\"rowspan\") || cell.hasAttribute(\"colspan\")));\n        };\n\n        // 提取数据行\n        const dataRows = Array.from(table.querySelectorAll(\"tr:not(:first-child)\"));\n        dataRows.forEach(row => {\n          const cells = Array.from(row.children);\n          if (cells.length === 0) return;\n          if (isMergedRow(row)) {\n            console.log(\"跳过合并行:\", row.textContent.trim());\n            return;\n          }\n          const recordName = cells[0].textContent.trim();\n          const recordData = {};\n          result.rows.forEach((header, index) => {\n            if (index < cells.length) {\n              let value = cells[index].textContent.trim();\n              if (index === yearColumnIndex) {\n                value = cleanYear(value);\n              } else {\n                value = smartValueConversion(value);\n              }\n              recordData[header] = value;\n            }\n          });\n          if (!hasYearColumn || hasYearColumn && recordData.Year) {\n            result.columns.push({\n              name: recordName,\n              data: recordData\n            });\n            if (hasYearColumn && recordData.Year) {\n              const year = recordData.Year;\n              result.rows.forEach(header => {\n                if (header === \"Year\" || typeof recordData[header] !== \"number\") {\n                  return;\n                }\n                if (!result.timeSeriesData[header]) {\n                  result.timeSeriesData[header] = [];\n                }\n                result.timeSeriesData[header].push({\n                  year: year,\n                  value: recordData[header],\n                  recordName: recordName\n                });\n              });\n            }\n          } else {\n            console.log(\"跳过无效Year的行:\", recordName);\n          }\n        });\n        if (hasYearColumn) {\n          Object.keys(result.timeSeriesData).forEach(attr => {\n            result.timeSeriesData[attr].sort((a, b) => a.year - b.year);\n          });\n        }\n        return result;\n      } catch (error) {\n        console.error(\"表格解析错误:\", error);\n        emit(\"error\", error);\n        return result;\n      }\n    }\n    function smartValueConversion(rawValue) {\n      if (!rawValue || [\"-\", \"—\", \"N/A\"].includes(rawValue)) return null;\n      if (/^\\.\\d+$/.test(rawValue)) return parseFloat(rawValue);\n      const numericValue = parseFloat(rawValue.replace(/[^\\d.-]/g, \"\"));\n      if (!isNaN(numericValue)) return numericValue;\n      if (/(\\d{4}-\\d{2}-\\d{2})|(\\d{2}\\/\\d{2}\\/\\d{4})/.test(rawValue)) {\n        return rawValue;\n      }\n      if ([\"true\", \"false\"].includes(rawValue.toLowerCase())) {\n        return rawValue.toLowerCase() === \"true\";\n      }\n      return rawValue;\n    }\n    function extractTitleFromHTML(html) {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(html, \"text/html\");\n      return doc.querySelector(\"h1, h2, h3, h4, caption\")?.textContent.trim() || null;\n    }\n    function getAttributeDescription(attr) {\n      const hints = {\n        \"%\": \"百分比数据\",\n        Rate: \"比率\",\n        Amount: \"数量\",\n        Total: \"总计\",\n        Count: \"计数\",\n        Date: \"日期\",\n        Time: \"时间\",\n        Avg_: \"平均值 \",\n        Max_: \"最大值 \",\n        Min_: \"最小值 \",\n        Qty: \"数量\",\n        Amt: \"金额\",\n        Pct: \"百分比\"\n      };\n      for (const [key, hint] of Object.entries(hints)) {\n        if (attr.includes(key)) {\n          return hint.startsWith(\" \") ? `${attr}${hint}` : `${hint} (${attr})`;\n        }\n      }\n      return attr;\n    }\n    function hasDataForAttribute(table, attr) {\n      return table.timeSeriesData[attr]?.length > 0;\n    }\n    function getAverage(table, attr) {\n      const values = table.timeSeriesData[attr]?.map(item => item.value) || [];\n      return values.length ? (values.reduce((a, b) => a + b, 0) / values.length).toFixed(2) : \"N/A\";\n    }\n    function getMax(table, attr) {\n      const values = table.timeSeriesData[attr]?.map(item => item.value) || [];\n      return values.length ? Math.max(...values).toFixed(2) : \"N/A\";\n    }\n    async function sendToBackend() {\n      try {\n        const response = await api.post(\"table_attributes\", {\n          table1: processedTable1.value,\n          table2: processedTable2.value\n        });\n        console.log(\"分析结果:\", response);\n      } catch (error) {\n        console.error(\"API请求失败:\", error);\n        emit(\"error\", error);\n      }\n    }\n    onMounted(() => {\n      mounted.value = true;\n    });\n    watch(() => props.div1RawData, html => {\n      if (!mounted.value) return;\n      if (html) {\n        processedTable1.value = parseTableToStandardJSON(html, \"表格1\");\n        if (props.div3RawData) sendToBackend();\n      } else {\n        processedTable1.value = {\n          title: \"表格1\",\n          rows: [],\n          columns: [],\n          timeSeriesData: {}\n        };\n      }\n    }, {\n      immediate: true\n    });\n    watch(() => props.div3RawData, html => {\n      if (!mounted.value) return;\n      if (html) {\n        processedTable2.value = parseTableToStandardJSON(html, \"表格2\");\n        if (props.div1RawData) sendToBackend();\n      } else {\n        processedTable2.value = {\n          title: \"表格2\",\n          rows: [],\n          columns: [],\n          timeSeriesData: {}\n        };\n      }\n    }, {\n      immediate: true\n    });\n    const __returned__ = {\n      props,\n      emit,\n      processedTable1,\n      processedTable2,\n      mounted,\n      hasData,\n      commonAttributes,\n      handleChartError,\n      parseTableToStandardJSON,\n      smartValueConversion,\n      extractTitleFromHTML,\n      getAttributeDescription,\n      hasDataForAttribute,\n      getAverage,\n      getMax,\n      sendToBackend,\n      ref,\n      computed,\n      watch,\n      onMounted,\n      SparklineChart\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","watch","onMounted","SparklineChart","props","__props","emit","__emit","processedTable1","title","rows","columns","timeSeriesData","processedTable2","mounted","hasData","div1RawData","div3RawData","value","length","commonAttributes","attrs1","attrs2","filter","attr","includes","hasDataForAttribute","handleChartError","error","console","parseTableToStandardJSON","html","defaultTitle","arguments","undefined","result","extractTitleFromHTML","parser","DOMParser","doc","parseFromString","table","querySelector","headerCells","children","Array","from","map","cell","textContent","replace","trim","yearColumnIndex","findIndex","header","toLowerCase","hasYearColumn","cleanYear","yearStr","cleaned","toString","test","startYear","substring","parseInt","yearMatch","match","isMergedRow","row","cells","some","index","hasAttribute","dataRows","querySelectorAll","forEach","log","recordName","recordData","smartValueConversion","Year","push","name","data","year","Object","keys","sort","a","b","rawValue","parseFloat","numericValue","isNaN","getAttributeDescription","hints","Rate","Amount","Total","Count","Date","Time","Avg_","Max_","Min_","Qty","Amt","Pct","key","hint","entries","startsWith","getAverage","values","item","reduce","toFixed","getMax","Math","max","sendToBackend","response","api","post","table1","table2","immediate"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/CompareTable.vue"],"sourcesContent":["<template>\r\n\t<div class=\"compare-container\">\r\n\t\t<div v-if=\"hasData\" class=\"table-grid\">\r\n\t\t\t<!-- 表头 -->\r\n\t\t\t<div class=\"header left-column\">{{ processedTable1.title }}</div>\r\n\t\t\t<div class=\"header middle-column\">对比属性</div>\r\n\t\t\t<div class=\"header right-column\">{{ processedTable2.title }}</div>\r\n\r\n\t\t\t<!-- 数据行 -->\r\n\t\t\t<template v-for=\"attr in commonAttributes\" :key=\"attr\">\r\n\t\t\t\t<div class=\"cell left-column\">\r\n\t\t\t\t\t<template v-if=\"hasDataForAttribute(processedTable1, attr)\">\r\n\t\t\t\t\t\t<SparklineChart\r\n\t\t\t\t\t\t\t:data=\"processedTable1.timeSeriesData[attr] || []\"\r\n\t\t\t\t\t\t\t:compare-data=\"processedTable2.timeSeriesData[attr]\"\r\n\t\t\t\t\t\t\t:width=\"120\"\r\n\t\t\t\t\t\t\t:height=\"60\"\r\n\t\t\t\t\t\t\t:show-year-markers=\"true\"\r\n\t\t\t\t\t\t\t@error=\"handleChartError\" />\r\n\t\t\t\t\t\t<div class=\"stats-summary\">\r\n\t\t\t\t\t\t\t平均: {{ getAverage(processedTable1, attr) }} | 最大:\r\n\t\t\t\t\t\t\t{{ getMax(processedTable1, attr) }}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</template>\r\n\t\t\t\t\t<div v-else class=\"no-data\">无数据</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div class=\"cell middle-column\">\r\n\t\t\t\t\t<div class=\"attribute-name\">{{ attr }}</div>\r\n\t\t\t\t\t<div class=\"attribute-desc\">{{ getAttributeDescription(attr) }}</div>\r\n\t\t\t\t\t<div class=\"original-field\">字段名: {{ attr }}</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div class=\"cell right-column\">\r\n\t\t\t\t\t<template v-if=\"hasDataForAttribute(processedTable2, attr)\">\r\n\t\t\t\t\t\t<SparklineChart\r\n\t\t\t\t\t\t\t:data=\"processedTable2.timeSeriesData[attr] || []\"\r\n\t\t\t\t\t\t\t:compare-data=\"processedTable1.timeSeriesData[attr]\"\r\n\t\t\t\t\t\t\t:width=\"120\"\r\n\t\t\t\t\t\t\t:height=\"60\"\r\n\t\t\t\t\t\t\t:show-year-markers=\"true\"\r\n\t\t\t\t\t\t\t@error=\"handleChartError\" />\r\n\t\t\t\t\t\t<div class=\"stats-summary\">\r\n\t\t\t\t\t\t\t平均: {{ getAverage(processedTable2, attr) }} | 最大:\r\n\t\t\t\t\t\t\t{{ getMax(processedTable2, attr) }}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</template>\r\n\t\t\t\t\t<div v-else class=\"no-data\">无数据</div>\r\n\t\t\t\t</div>\r\n\t\t\t</template>\r\n\t\t</div>\r\n\t\t<div v-else class=\"empty-state\">\r\n\t\t\t<div>请先从左/右侧选择两个表格进行对比</div>\r\n\t\t\t<div class=\"format-tip\">支持任意HTML表格格式，自动识别数据结构</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, watch, onMounted } from \"vue\";\r\n\timport SparklineChart from \"./SparklineChart.vue\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdiv1RawData: String,\r\n\t\tdiv3RawData: String\r\n\t});\r\n\r\n\tconst emit = defineEmits([\"error\"]);\r\n\r\n\tconst processedTable1 = ref({\r\n\t\ttitle: \"表格1\",\r\n\t\trows: [],\r\n\t\tcolumns: [],\r\n\t\ttimeSeriesData: {}\r\n\t});\r\n\tconst processedTable2 = ref({\r\n\t\ttitle: \"表格2\",\r\n\t\trows: [],\r\n\t\tcolumns: [],\r\n\t\ttimeSeriesData: {}\r\n\t});\r\n\tconst mounted = ref(false);\r\n\r\n\tconst hasData = computed(() => {\r\n\t\treturn (\r\n\t\t\tprops.div1RawData &&\r\n\t\t\tprops.div3RawData &&\r\n\t\t\tprocessedTable1.value.columns.length > 0 &&\r\n\t\t\tprocessedTable2.value.columns.length > 0\r\n\t\t);\r\n\t});\r\n\r\n\tconst commonAttributes = computed(() => {\r\n\t\tconst attrs1 = processedTable1.value.rows || [];\r\n\t\tconst attrs2 = processedTable2.value.rows || [];\r\n\t\treturn attrs1.filter(\r\n\t\t\tattr =>\r\n\t\t\t\tattrs2.includes(attr) &&\r\n\t\t\t\t(hasDataForAttribute(processedTable1.value, attr) ||\r\n\t\t\t\t\thasDataForAttribute(processedTable2.value, attr))\r\n\t\t);\r\n\t});\r\n\r\n\tconst handleChartError = error => {\r\n\t\tconsole.error(\"图表组件报错:\", error);\r\n\t\temit(\"error\", error);\r\n\t};\r\n\r\n\tfunction parseTableToStandardJSON(html, defaultTitle = \"未命名表格\") {\r\n\t\tconst result = {\r\n\t\t\ttitle: extractTitleFromHTML(html) || defaultTitle,\r\n\t\t\trows: [],\r\n\t\t\tcolumns: [],\r\n\t\t\ttimeSeriesData: {}\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\t\tconst table = doc.querySelector(\"table\");\r\n\t\t\tif (!table) return result;\r\n\r\n\t\t\t// 提取表头\r\n\t\t\tconst headerCells = table.querySelector(\"tr\")?.children || [];\r\n\t\t\tresult.rows = Array.from(headerCells).map(cell => {\r\n\t\t\t\treturn cell.textContent\r\n\t\t\t\t\t.replace(/[\\n†*]/g, \"\")\r\n\t\t\t\t\t.trim()\r\n\t\t\t\t\t.replace(/\\s+/g, \" \");\r\n\t\t\t});\r\n\r\n\t\t\t// 检查是否有Year列\r\n\t\t\tconst yearColumnIndex = result.rows.findIndex(header =>\r\n\t\t\t\theader.toLowerCase().includes(\"year\")\r\n\t\t\t);\r\n\t\t\tconst hasYearColumn = yearColumnIndex !== -1;\r\n\r\n\t\t\t// 辅助函数：清理年份格式\r\n\t\t\tconst cleanYear = yearStr => {\r\n\t\t\t\tif (!yearStr) return null;\r\n\r\n\t\t\t\tlet cleaned = yearStr.toString().replace(/[†*]/g, \"\").trim();\r\n\r\n\t\t\t\tif (/^\\d{4}[\\u2013\\u2014-]\\d{2}$/.test(cleaned)) {\r\n\t\t\t\t\tconst startYear = cleaned.substring(0, 4);\r\n\t\t\t\t\treturn parseInt(startYear);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst yearMatch = cleaned.match(/\\d{4}/);\r\n\t\t\t\treturn yearMatch ? parseInt(yearMatch[0]) : null;\r\n\t\t\t};\r\n\r\n\t\t\t// 辅助函数：检查是否是合并单元格行\r\n\t\t\tconst isMergedRow = row => {\r\n\t\t\t\tconst cells = Array.from(row.children);\r\n\t\t\t\treturn cells.some(\r\n\t\t\t\t\t(cell, index) =>\r\n\t\t\t\t\t\tindex < 2 &&\r\n\t\t\t\t\t\t(cell.hasAttribute(\"rowspan\") || cell.hasAttribute(\"colspan\"))\r\n\t\t\t\t);\r\n\t\t\t};\r\n\r\n\t\t\t// 提取数据行\r\n\t\t\tconst dataRows = Array.from(\r\n\t\t\t\ttable.querySelectorAll(\"tr:not(:first-child)\")\r\n\t\t\t);\r\n\r\n\t\t\tdataRows.forEach(row => {\r\n\t\t\t\tconst cells = Array.from(row.children);\r\n\t\t\t\tif (cells.length === 0) return;\r\n\r\n\t\t\t\tif (isMergedRow(row)) {\r\n\t\t\t\t\tconsole.log(\"跳过合并行:\", row.textContent.trim());\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst recordName = cells[0].textContent.trim();\r\n\t\t\t\tconst recordData = {};\r\n\r\n\t\t\t\tresult.rows.forEach((header, index) => {\r\n\t\t\t\t\tif (index < cells.length) {\r\n\t\t\t\t\t\tlet value = cells[index].textContent.trim();\r\n\t\t\t\t\t\tif (index === yearColumnIndex) {\r\n\t\t\t\t\t\t\tvalue = cleanYear(value);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvalue = smartValueConversion(value);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\trecordData[header] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!hasYearColumn || (hasYearColumn && recordData.Year)) {\r\n\t\t\t\t\tresult.columns.push({\r\n\t\t\t\t\t\tname: recordName,\r\n\t\t\t\t\t\tdata: recordData\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tif (hasYearColumn && recordData.Year) {\r\n\t\t\t\t\t\tconst year = recordData.Year;\r\n\r\n\t\t\t\t\t\tresult.rows.forEach(header => {\r\n\t\t\t\t\t\t\tif (header === \"Year\" || typeof recordData[header] !== \"number\") {\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (!result.timeSeriesData[header]) {\r\n\t\t\t\t\t\t\t\tresult.timeSeriesData[header] = [];\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tresult.timeSeriesData[header].push({\r\n\t\t\t\t\t\t\t\tyear: year,\r\n\t\t\t\t\t\t\t\tvalue: recordData[header],\r\n\t\t\t\t\t\t\t\trecordName: recordName\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log(\"跳过无效Year的行:\", recordName);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (hasYearColumn) {\r\n\t\t\t\tObject.keys(result.timeSeriesData).forEach(attr => {\r\n\t\t\t\t\tresult.timeSeriesData[attr].sort((a, b) => a.year - b.year);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"表格解析错误:\", error);\r\n\t\t\temit(\"error\", error);\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction smartValueConversion(rawValue) {\r\n\t\tif (!rawValue || [\"-\", \"—\", \"N/A\"].includes(rawValue)) return null;\r\n\t\tif (/^\\.\\d+$/.test(rawValue)) return parseFloat(rawValue);\r\n\r\n\t\tconst numericValue = parseFloat(rawValue.replace(/[^\\d.-]/g, \"\"));\r\n\t\tif (!isNaN(numericValue)) return numericValue;\r\n\r\n\t\tif (/(\\d{4}-\\d{2}-\\d{2})|(\\d{2}\\/\\d{2}\\/\\d{4})/.test(rawValue)) {\r\n\t\t\treturn rawValue;\r\n\t\t}\r\n\r\n\t\tif ([\"true\", \"false\"].includes(rawValue.toLowerCase())) {\r\n\t\t\treturn rawValue.toLowerCase() === \"true\";\r\n\t\t}\r\n\r\n\t\treturn rawValue;\r\n\t}\r\n\r\n\tfunction extractTitleFromHTML(html) {\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\treturn (\r\n\t\t\tdoc.querySelector(\"h1, h2, h3, h4, caption\")?.textContent.trim() || null\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getAttributeDescription(attr) {\r\n\t\tconst hints = {\r\n\t\t\t\"%\": \"百分比数据\",\r\n\t\t\tRate: \"比率\",\r\n\t\t\tAmount: \"数量\",\r\n\t\t\tTotal: \"总计\",\r\n\t\t\tCount: \"计数\",\r\n\t\t\tDate: \"日期\",\r\n\t\t\tTime: \"时间\",\r\n\t\t\tAvg_: \"平均值 \",\r\n\t\t\tMax_: \"最大值 \",\r\n\t\t\tMin_: \"最小值 \",\r\n\t\t\tQty: \"数量\",\r\n\t\t\tAmt: \"金额\",\r\n\t\t\tPct: \"百分比\"\r\n\t\t};\r\n\r\n\t\tfor (const [key, hint] of Object.entries(hints)) {\r\n\t\t\tif (attr.includes(key)) {\r\n\t\t\t\treturn hint.startsWith(\" \") ? `${attr}${hint}` : `${hint} (${attr})`;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn attr;\r\n\t}\r\n\r\n\tfunction hasDataForAttribute(table, attr) {\r\n\t\treturn table.timeSeriesData[attr]?.length > 0;\r\n\t}\r\n\r\n\tfunction getAverage(table, attr) {\r\n\t\tconst values = table.timeSeriesData[attr]?.map(item => item.value) || [];\r\n\t\treturn values.length\r\n\t\t\t? (values.reduce((a, b) => a + b, 0) / values.length).toFixed(2)\r\n\t\t\t: \"N/A\";\r\n\t}\r\n\r\n\tfunction getMax(table, attr) {\r\n\t\tconst values = table.timeSeriesData[attr]?.map(item => item.value) || [];\r\n\t\treturn values.length ? Math.max(...values).toFixed(2) : \"N/A\";\r\n\t}\r\n\r\n\tasync function sendToBackend() {\r\n\t\ttry {\r\n\t\t\tconst response = await api.post(\"table_attributes\", {\r\n\t\t\t\ttable1: processedTable1.value,\r\n\t\t\t\ttable2: processedTable2.value\r\n\t\t\t});\r\n\t\t\tconsole.log(\"分析结果:\", response);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"API请求失败:\", error);\r\n\t\t\temit(\"error\", error);\r\n\t\t}\r\n\t}\r\n\r\n\tonMounted(() => {\r\n\t\tmounted.value = true;\r\n\t});\r\n\r\n\twatch(\r\n\t\t() => props.div1RawData,\r\n\t\thtml => {\r\n\t\t\tif (!mounted.value) return;\r\n\t\t\tif (html) {\r\n\t\t\t\tprocessedTable1.value = parseTableToStandardJSON(html, \"表格1\");\r\n\t\t\t\tif (props.div3RawData) sendToBackend();\r\n\t\t\t} else {\r\n\t\t\t\tprocessedTable1.value = {\r\n\t\t\t\t\ttitle: \"表格1\",\r\n\t\t\t\t\trows: [],\r\n\t\t\t\t\tcolumns: [],\r\n\t\t\t\t\ttimeSeriesData: {}\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\twatch(\r\n\t\t() => props.div3RawData,\r\n\t\thtml => {\r\n\t\t\tif (!mounted.value) return;\r\n\t\t\tif (html) {\r\n\t\t\t\tprocessedTable2.value = parseTableToStandardJSON(html, \"表格2\");\r\n\t\t\t\tif (props.div1RawData) sendToBackend();\r\n\t\t\t} else {\r\n\t\t\t\tprocessedTable2.value = {\r\n\t\t\t\t\ttitle: \"表格2\",\r\n\t\t\t\t\trows: [],\r\n\t\t\t\t\tcolumns: [],\r\n\t\t\t\t\ttimeSeriesData: {}\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n</script>\r\n\r\n<style scoped>\r\n\t.compare-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tmin-height: 300px;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tfont-family: system-ui, -apple-system, sans-serif;\r\n\t}\r\n\r\n\t.table-grid {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: 1fr 1fr 1fr;\r\n\t\tgap: 1px;\r\n\t\tbackground: #e0e0e0;\r\n\t\tflex: 1;\r\n\t\toverflow-y: auto;\r\n\t\tmin-height: 200px;\r\n\t}\r\n\r\n\t.header {\r\n\t\tpadding: 12px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n\t\tposition: sticky;\r\n\t\ttop: 0;\r\n\t\tz-index: 1;\r\n\t}\r\n\r\n\t.cell {\r\n\t\tpadding: 16px;\r\n\t\tbackground: white;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tmin-height: 120px;\r\n\t\tborder-bottom: 1px solid #f0f0f0;\r\n\t\toverflow: hidden;\r\n\t}\r\n\r\n\t.left-column {\r\n\t\tborder-right: 1px solid #e0e0e0;\r\n\t}\r\n\r\n\t.right-column {\r\n\t\tborder-left: 1px solid #e0e0e0;\r\n\t}\r\n\r\n\t.attribute-name {\r\n\t\tfont-weight: 600;\r\n\t\tmargin-bottom: 4px;\r\n\t\tcolor: #2c3e50;\r\n\t\tfont-size: 1.1em;\r\n\t\ttext-align: center;\r\n\t\tword-break: break-word;\r\n\t\tmax-width: 100%;\r\n\t}\r\n\r\n\t.attribute-desc {\r\n\t\tfont-size: 0.9em;\r\n\t\tcolor: #3498db;\r\n\t\tmargin-bottom: 6px;\r\n\t\ttext-align: center;\r\n\t\tword-break: break-word;\r\n\t\tmax-width: 100%;\r\n\t}\r\n\r\n\t.original-field {\r\n\t\tfont-size: 0.7em;\r\n\t\tcolor: #95a5a6;\r\n\t\tfont-family: monospace;\r\n\t\tmargin-top: 4px;\r\n\t\ttext-align: center;\r\n\t\tword-break: break-all;\r\n\t}\r\n\r\n\t.stats-summary {\r\n\t\tmargin-top: 8px;\r\n\t\tfont-size: 0.85em;\r\n\t\tcolor: #34495e;\r\n\t\ttext-align: center;\r\n\t\tline-height: 1.5;\r\n\t\tword-break: keep-all;\r\n\t\twhite-space: nowrap;\r\n\t}\r\n\r\n\t.no-data {\r\n\t\tcolor: #95a5a6;\r\n\t\tfont-style: italic;\r\n\t\tfont-size: 0.9em;\r\n\t\ttext-align: center;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t.empty-state {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\theight: 100%;\r\n\t\tcolor: #7f8c8d;\r\n\t\tgap: 12px;\r\n\t\tpadding: 20px;\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t.format-tip {\r\n\t\tfont-size: 0.9em;\r\n\t\tcolor: #bdc3c7;\r\n\t\tmax-width: 300px;\r\n\t\ttext-align: center;\r\n\t\tword-break: break-word;\r\n\t}\r\n\r\n\t.table-grid::-webkit-scrollbar {\r\n\t\twidth: 8px;\r\n\t}\r\n\r\n\t.table-grid::-webkit-scrollbar-thumb {\r\n\t\tbackground: #95a5a6;\r\n\t\tborder-radius: 4px;\r\n\t}\r\n\r\n\t.table-grid::-webkit-scrollbar-track {\r\n\t\tbackground: #ecf0f1;\r\n\t}\r\n\r\n\t@media (max-width: 768px) {\r\n\t\t.table-grid {\r\n\t\t\tgrid-template-columns: 1fr;\r\n\t\t}\r\n\r\n\t\t.header {\r\n\t\t\tdisplay: none;\r\n\t\t}\r\n\r\n\t\t.cell {\r\n\t\t\tmin-height: auto;\r\n\t\t\tpadding: 12px;\r\n\t\t}\r\n\r\n\t\t.attribute-name,\r\n\t\t.attribute-desc,\r\n\t\t.original-field {\r\n\t\t\twhite-space: normal;\r\n\t\t\tword-break: break-word;\r\n\t\t}\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}