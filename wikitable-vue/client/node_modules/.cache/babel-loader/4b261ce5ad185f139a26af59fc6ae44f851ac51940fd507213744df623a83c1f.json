{"ast":null,"code":"/**\r\n * 维基百科Infobox解析器\r\n * 提取结构化数据并规范化数值\r\n */\nexport function parseInfoboxForComparison(infoboxElement) {\n  // 默认数据结构\n  const defaultResult = {\n    title: \"\",\n    type: \"\",\n    data: {\n      sections: {}\n    }\n  };\n  if (!infoboxElement) return JSON.parse(JSON.stringify(defaultResult));\n\n  // 创建深拷贝的默认结构\n  const result = JSON.parse(JSON.stringify(defaultResult));\n  try {\n    result.title = extractTitle(infoboxElement) || defaultResult.title;\n    result.type = detectInfoboxType(infoboxElement) || defaultResult.type;\n    let currentSection = \"基本信息\";\n    const rows = infoboxElement.querySelectorAll('tr');\n    rows.forEach(row => {\n      // 处理section标题行\n      if (row.querySelector('th[colspan=\"2\"]')) {\n        currentSection = cleanText(row.textContent) || currentSection;\n        result.data.sections[currentSection] = {};\n        return;\n      }\n\n      // 处理普通数据行\n      const th = row.querySelector('th');\n      const td = row.querySelector('td');\n      if (!th || !td) return;\n      const key = cleanFieldName(th.textContent);\n      const value = extractValueFromText(cleanText(td.textContent));\n      if (key && value !== null) {\n        // 确保section存在\n        if (!result.data.sections[currentSection]) {\n          result.data.sections[currentSection] = {};\n        }\n        result.data.sections[currentSection][key] = value;\n      }\n    });\n  } catch (error) {\n    console.error(\"Infobox解析错误:\", error);\n    return JSON.parse(JSON.stringify(defaultResult));\n  }\n  return result;\n}\n\n/**\r\n * 从文本中提取规范化值\r\n */\nfunction extractValueFromText(text) {\n  if (!text) return null;\n\n  // 1. 处理百分比 (6.8%)\n  const percentMatch = text.match(/(\\d+\\.?\\d*)%/);\n  if (percentMatch) return parseFloat(percentMatch[1]);\n\n  // 2. 处理货币值 ($4.19 trillion, ¥429,501)\n  const currencyMatch = text.match(/(\\$|¥|€|£)?\\s*([\\d,\\.]+)\\s*(万|亿|万亿|trillion|billion|million)?/i);\n  if (currencyMatch) {\n    let value = parseFloat(currencyMatch[2].replace(/,/g, ''));\n\n    // 处理中文单位\n    if (currencyMatch[3] === '万') value *= 1e4;\n    if (currencyMatch[3] === '亿') value *= 1e8;\n    if (currencyMatch[3] === '万亿') value *= 1e12;\n\n    // 处理英文单位\n    const unit = currencyMatch[3]?.toLowerCase();\n    if (unit === 'million') value *= 1e6;\n    if (unit === 'billion') value *= 1e9;\n    if (unit === 'trillion') value *= 1e12;\n    return value;\n  }\n\n  // 3. 处理纯数字 (123,456.78)\n  const numberMatch = text.match(/^[\\d,\\.]+$/);\n  if (numberMatch) return parseFloat(text.replace(/,/g, ''));\n\n  // 4. 处理排名 (第5名)\n  const rankMatch = text.match(/第\\s*([零一二三四五六七八九十百千万\\d]+)\\s*名/);\n  if (rankMatch) return chineseToNumber(rankMatch[1]);\n\n  // 5. 默认返回文本\n  return text;\n}\n\n/**\r\n * 中文数字转阿拉伯数字\r\n */\nfunction chineseToNumber(chinese) {\n  const map = {\n    零: 0,\n    一: 1,\n    二: 2,\n    三: 3,\n    四: 4,\n    五: 5,\n    六: 6,\n    七: 7,\n    八: 8,\n    九: 9,\n    十: 10,\n    百: 100,\n    千: 1000,\n    万: 10000\n  };\n  if (/^\\d+$/.test(chinese)) return parseInt(chinese);\n  let result = 0;\n  let temp = 0;\n  for (let i = 0; i < chinese.length; i++) {\n    const char = chinese[i];\n    if (map[char] < 10) {\n      temp = map[char];\n    } else {\n      result += temp * map[char];\n      temp = 0;\n    }\n  }\n  return result + temp;\n}\n\n/**\r\n * 提取标题\r\n */\nfunction extractTitle(element) {\n  const sources = [() => element.querySelector('caption')?.textContent, () => element.querySelector('.infobox-title')?.textContent, () => element.querySelector('th[colspan=\"2\"]')?.textContent];\n  for (const source of sources) {\n    try {\n      const title = cleanText(source());\n      if (title) return title;\n    } catch (e) {\n      console.debug(\"标题提取失败:\", e);\n    }\n  }\n  return \"无标题\";\n}\n\n/**\r\n * 检测Infobox类型\r\n */\nfunction detectInfoboxType(element) {\n  try {\n    const classText = `${element.className} ${element.textContent}`.toLowerCase();\n    if (/country|nation|state|国家/.test(classText)) return \"国家\";\n    if (/economy|经济/.test(classText)) return \"经济\";\n  } catch (e) {\n    console.debug(\"类型检测失败:\", e);\n  }\n  return \"其他\";\n}\n\n/**\r\n * 清理字段名\r\n */\nfunction cleanFieldName(text) {\n  return cleanText(text).replace(/[:：]$/, '').replace(/\\s+/g, ' ').trim();\n}\n\n/**\r\n * 清理文本\r\n */\nfunction cleanText(text) {\n  return (text || \"\").replace(/\\[\\d+\\]/g, '') // 去除引用标记[1]\n  .replace(/\\s+/g, ' ') // 合并空格\n  .replace(/[[\\]]/g, '') // 去除方括号\n  .trim();\n}","map":{"version":3,"names":["parseInfoboxForComparison","infoboxElement","defaultResult","title","type","data","sections","JSON","parse","stringify","result","extractTitle","detectInfoboxType","currentSection","rows","querySelectorAll","forEach","row","querySelector","cleanText","textContent","th","td","key","cleanFieldName","value","extractValueFromText","error","console","text","percentMatch","match","parseFloat","currencyMatch","replace","unit","toLowerCase","numberMatch","rankMatch","chineseToNumber","chinese","map","零","一","二","三","四","五","六","七","八","九","十","百","千","万","test","parseInt","temp","i","length","char","element","sources","source","e","debug","classText","className","trim"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/js/wikiInfoboxParser.js"],"sourcesContent":["/**\r\n * 维基百科Infobox解析器\r\n * 提取结构化数据并规范化数值\r\n */\r\nexport function parseInfoboxForComparison(infoboxElement) {\r\n    // 默认数据结构\r\n    const defaultResult = { \r\n        title: \"\", \r\n        type: \"\", \r\n        data: { sections: {} } \r\n    };\r\n    \r\n    if (!infoboxElement) return JSON.parse(JSON.stringify(defaultResult));\r\n\r\n    // 创建深拷贝的默认结构\r\n    const result = JSON.parse(JSON.stringify(defaultResult));\r\n    \r\n    try {\r\n        result.title = extractTitle(infoboxElement) || defaultResult.title;\r\n        result.type = detectInfoboxType(infoboxElement) || defaultResult.type;\r\n\r\n        let currentSection = \"基本信息\";\r\n        const rows = infoboxElement.querySelectorAll('tr');\r\n\r\n        rows.forEach(row => {\r\n            // 处理section标题行\r\n            if (row.querySelector('th[colspan=\"2\"]')) {\r\n                currentSection = cleanText(row.textContent) || currentSection;\r\n                result.data.sections[currentSection] = {};\r\n                return;\r\n            }\r\n\r\n            // 处理普通数据行\r\n            const th = row.querySelector('th');\r\n            const td = row.querySelector('td');\r\n            if (!th || !td) return;\r\n\r\n            const key = cleanFieldName(th.textContent);\r\n            const value = extractValueFromText(cleanText(td.textContent));\r\n\r\n            if (key && value !== null) {\r\n                // 确保section存在\r\n                if (!result.data.sections[currentSection]) {\r\n                    result.data.sections[currentSection] = {};\r\n                }\r\n                result.data.sections[currentSection][key] = value;\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Infobox解析错误:\", error);\r\n        return JSON.parse(JSON.stringify(defaultResult));\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * 从文本中提取规范化值\r\n */\r\nfunction extractValueFromText(text) {\r\n    if (!text) return null;\r\n\r\n    // 1. 处理百分比 (6.8%)\r\n    const percentMatch = text.match(/(\\d+\\.?\\d*)%/);\r\n    if (percentMatch) return parseFloat(percentMatch[1]);\r\n\r\n    // 2. 处理货币值 ($4.19 trillion, ¥429,501)\r\n    const currencyMatch = text.match(/(\\$|¥|€|£)?\\s*([\\d,\\.]+)\\s*(万|亿|万亿|trillion|billion|million)?/i);\r\n    if (currencyMatch) {\r\n        let value = parseFloat(currencyMatch[2].replace(/,/g, ''));\r\n        \r\n        // 处理中文单位\r\n        if (currencyMatch[3] === '万') value *= 1e4;\r\n        if (currencyMatch[3] === '亿') value *= 1e8;\r\n        if (currencyMatch[3] === '万亿') value *= 1e12;\r\n        \r\n        // 处理英文单位\r\n        const unit = currencyMatch[3]?.toLowerCase();\r\n        if (unit === 'million') value *= 1e6;\r\n        if (unit === 'billion') value *= 1e9;\r\n        if (unit === 'trillion') value *= 1e12;\r\n        \r\n        return value;\r\n    }\r\n\r\n    // 3. 处理纯数字 (123,456.78)\r\n    const numberMatch = text.match(/^[\\d,\\.]+$/);\r\n    if (numberMatch) return parseFloat(text.replace(/,/g, ''));\r\n\r\n    // 4. 处理排名 (第5名)\r\n    const rankMatch = text.match(/第\\s*([零一二三四五六七八九十百千万\\d]+)\\s*名/);\r\n    if (rankMatch) return chineseToNumber(rankMatch[1]);\r\n\r\n    // 5. 默认返回文本\r\n    return text;\r\n}\r\n\r\n/**\r\n * 中文数字转阿拉伯数字\r\n */\r\nfunction chineseToNumber(chinese) {\r\n    const map = { \r\n        零:0, 一:1, 二:2, 三:3, 四:4, 五:5, \r\n        六:6, 七:7, 八:8, 九:9, 十:10,\r\n        百:100, 千:1000, 万:10000\r\n    };\r\n    \r\n    if (/^\\d+$/.test(chinese)) return parseInt(chinese);\r\n    \r\n    let result = 0;\r\n    let temp = 0;\r\n    \r\n    for (let i = 0; i < chinese.length; i++) {\r\n        const char = chinese[i];\r\n        if (map[char] < 10) {\r\n            temp = map[char];\r\n        } else {\r\n            result += temp * map[char];\r\n            temp = 0;\r\n        }\r\n    }\r\n    \r\n    return result + temp;\r\n}\r\n\r\n/**\r\n * 提取标题\r\n */\r\nfunction extractTitle(element) {\r\n    const sources = [\r\n        () => element.querySelector('caption')?.textContent,\r\n        () => element.querySelector('.infobox-title')?.textContent,\r\n        () => element.querySelector('th[colspan=\"2\"]')?.textContent\r\n    ];\r\n    \r\n    for (const source of sources) {\r\n        try {\r\n            const title = cleanText(source());\r\n            if (title) return title;\r\n        } catch (e) {\r\n            console.debug(\"标题提取失败:\", e);\r\n        }\r\n    }\r\n    return \"无标题\";\r\n}\r\n\r\n/**\r\n * 检测Infobox类型\r\n */\r\nfunction detectInfoboxType(element) {\r\n    try {\r\n        const classText = `${element.className} ${element.textContent}`.toLowerCase();\r\n        if (/country|nation|state|国家/.test(classText)) return \"国家\";\r\n        if (/economy|经济/.test(classText)) return \"经济\";\r\n    } catch (e) {\r\n        console.debug(\"类型检测失败:\", e);\r\n    }\r\n    return \"其他\";\r\n}\r\n\r\n/**\r\n * 清理字段名\r\n */\r\nfunction cleanFieldName(text) {\r\n    return cleanText(text)\r\n        .replace(/[:：]$/, '')\r\n        .replace(/\\s+/g, ' ')\r\n        .trim();\r\n}\r\n\r\n/**\r\n * 清理文本\r\n */\r\nfunction cleanText(text) {\r\n    return (text || \"\")\r\n        .replace(/\\[\\d+\\]/g, '')      // 去除引用标记[1]\r\n        .replace(/\\s+/g, ' ')         // 合并空格\r\n        .replace(/[[\\]]/g, '')        // 去除方括号\r\n        .trim();\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}