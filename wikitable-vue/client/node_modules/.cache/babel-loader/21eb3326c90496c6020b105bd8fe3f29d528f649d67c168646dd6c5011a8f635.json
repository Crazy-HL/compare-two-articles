{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createVNode as _createVNode, normalizeClass as _normalizeClass, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-62c843dc\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = [\"id\"];\nexport function render(_ctx, _cache) {\n  const _component_LoadingSpinner = _resolveComponent(\"LoadingSpinner\");\n  const _component_ErrorDisplay = _resolveComponent(\"ErrorDisplay\");\n  const _component_WikipediaContent = _resolveComponent(\"WikipediaContent\");\n  const _component_TextPopup = _resolveComponent(\"TextPopup\");\n  const _component_ArticleOutline = _resolveComponent(\"ArticleOutline\");\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass(['div0', _ctx.selectContentClass]),\n    id: _ctx.divId,\n    ref: \"divRef\"\n  }, [_createElementVNode(\"h1\", null, _toDisplayString(_ctx.props.pageTitle), 1 /* TEXT */), _ctx.loading ? (_openBlock(), _createBlock(_component_LoadingSpinner, {\n    key: 0\n  })) : _ctx.error ? (_openBlock(), _createBlock(_component_ErrorDisplay, {\n    key: 1,\n    message: _ctx.error,\n    onRetry: _ctx.fetchWikipediaContent\n  }, null, 8 /* PROPS */, [\"message\", \"onRetry\"])) : (_openBlock(), _createBlock(_component_WikipediaContent, {\n    key: 2,\n    content: _ctx.pageHtml,\n    onSelect: _ctx.handleSelection\n  }, null, 8 /* PROPS */, [\"content\", \"onSelect\"])), _createVNode(_component_TextPopup, {\n    visible: _ctx.showPopup[_ctx.divId],\n    content: _ctx.selectedText[_ctx.divId],\n    containerClass: _ctx.divId === 'div1' ? 'chart-container1' : 'chart-container2',\n    containerRef: _ctx.divRef,\n    onClose: _ctx.closePopup\n  }, null, 8 /* PROPS */, [\"visible\", \"content\", \"containerClass\", \"containerRef\", \"onClose\"]), _createVNode(_component_ArticleOutline, {\n    content: _ctx.pageHtml,\n    divId: _ctx.divId\n  }, null, 8 /* PROPS */, [\"content\", \"divId\"])], 10 /* CLASS, PROPS */, _hoisted_1);\n}","map":{"version":3,"names":["_createElementBlock","class","_normalizeClass","_ctx","selectContentClass","id","divId","ref","_createElementVNode","_toDisplayString","props","pageTitle","loading","_createBlock","_component_LoadingSpinner","key","error","_component_ErrorDisplay","message","onRetry","fetchWikipediaContent","_component_WikipediaContent","content","pageHtml","onSelect","handleSelection","_createVNode","_component_TextPopup","visible","showPopup","selectedText","containerClass","containerRef","divRef","onClose","closePopup","_component_ArticleOutline","_hoisted_1"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\ParentComponent.vue"],"sourcesContent":["<template>\r\n\t<div :class=\"['div0', selectContentClass]\" :id=\"divId\" ref=\"divRef\">\r\n\t\t<h1>{{ props.pageTitle }}</h1>\r\n\r\n\t\t<LoadingSpinner v-if=\"loading\" />\r\n\r\n\t\t<ErrorDisplay\r\n\t\t\tv-else-if=\"error\"\r\n\t\t\t:message=\"error\"\r\n\t\t\t@retry=\"fetchWikipediaContent\" />\r\n\r\n\t\t<WikipediaContent v-else :content=\"pageHtml\" @select=\"handleSelection\" />\r\n\r\n\t\t<TextPopup\r\n\t\t\t:visible=\"showPopup[divId]\"\r\n\t\t\t:content=\"selectedText[divId]\"\r\n\t\t\t:containerClass=\"\r\n\t\t\t\tdivId === 'div1' ? 'chart-container1' : 'chart-container2'\r\n\t\t\t\"\r\n\t\t\t:containerRef=\"divRef\"\r\n\t\t\t@close=\"closePopup\" />\r\n\r\n\t\t<ArticleOutline :content=\"pageHtml\" :divId=\"divId\" />\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted, nextTick } from \"vue\";\r\n\timport LoadingSpinner from \"./LoadingSpinner.vue\";\r\n\timport ErrorDisplay from \"./ErrorDisplay.vue\";\r\n\timport WikipediaContent from \"./WikipediaContent.vue\";\r\n\timport TextPopup from \"./TextPopup.vue\";\r\n\timport ArticleOutline from \"./ArticleOutline.vue\";\r\n\timport * as d3 from \"d3\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\timport { parseInfoboxForComparison } from \"@/js/wikiInfoboxParser\";\r\n\r\n\tconst props = defineProps({\r\n\t  pageTitle: String,\r\n\t  divId: String,\r\n\t  selectContentClass: String,\r\n\t  linkedOutline: Array\r\n\t});\r\n\r\n\tconst pageHtml = ref(\"\");\r\n\tconst loading = ref(true);\r\n\tconst error = ref(\"\");\r\n\tconst selectedText = ref({});\r\n\tconst showPopup = ref({});\r\n\tconst divRef = ref(null);\r\n\tconst highlightedParagraphs = ref({});\r\n\r\n\tconst fetchWikipediaContent = async () => {\r\n\t  try {\r\n\t    const apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(\r\n\t      props.pageTitle\r\n\t    )}`;\r\n\t    const response = await fetch(apiUrl);\r\n\t    if (!response.ok) throw new Error(\"Failed to fetch data\");\r\n\r\n\t    const html = await response.text();\r\n\t    const parser = new DOMParser();\r\n\t    const doc = parser.parseFromString(html, \"text/html\");\r\n\r\n\t    const infobox = doc.querySelector(\".infobox, .sidebar, .toccolours\");\r\n\t    const comparisonData = parseInfoboxForComparison(infobox);\r\n\t    const sidebar = doc.querySelector(\".sidebar\");\r\n\t    if (sidebar) sidebar.remove();\r\n\r\n\t    bus.emit(`${props.divId}_InfoboxData`, comparisonData);\r\n\r\n\t    const headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\r\n\t    headings.forEach((heading, index) => {\r\n\t      const uniqueId = `heading-${index}-${props.divId}`;\r\n\t      heading.id = uniqueId;\r\n\t    });\r\n\r\n\t    const tables = doc.querySelectorAll(\"table\");\r\n\t    tables.forEach(table => {\r\n\t      table.classList.add(\"custom-table\");\r\n\t    });\r\n\r\n\t    const styles = Array.from(doc.querySelectorAll('link[rel=\"stylesheet\"]'));\r\n\t    styles.forEach(link => {\r\n\t      if (!document.querySelector(`link[href=\"${link.href}\"]`)) {\r\n\t        const styleTag = document.createElement(\"link\");\r\n\t        styleTag.rel = \"stylesheet\";\r\n\t        styleTag.href = link.href;\r\n\t        document.head.appendChild(styleTag);\r\n\t      }\r\n\t    });\r\n\r\n\t    const contentElement = doc.querySelector(\"body\");\r\n\t    if (!contentElement) throw new Error(\"Content not found\");\r\n\r\n\t    pageHtml.value = contentElement.innerHTML;\r\n\t    injectWikipediaStyles();\r\n\t  } catch (err) {\r\n\t    error.value = \"Error fetching Wikipedia content: \" + err.message;\r\n\t    console.error(\"获取维基百科内容失败:\", err);\r\n\t  } finally {\r\n\t    loading.value = false;\r\n\t  }\r\n\t};\r\n\r\n\tconst injectWikipediaStyles = () => {\r\n\t  const wikipediaStyles = [\r\n\t    \"https://en.wikipedia.org/w/load.php?modules=site.styles\",\r\n\t    \"https://en.wikipedia.org/w/load.php?modules=ext.cite.styles\",\r\n\t    \"https://en.wikipedia.org/w/load.php?modules=ext.scribunto.styles\",\r\n\t    \"https://en.wikipedia.org/w/load.php?modules=skins.vector.styles\"\r\n\t  ];\r\n\r\n\t  wikipediaStyles.forEach(url => {\r\n\t    if (!document.querySelector(`link[href=\"${url}\"]`)) {\r\n\t      const styleTag = document.createElement(\"link\");\r\n\t      styleTag.rel = \"stylesheet\";\r\n\t      styleTag.href = url;\r\n\t      document.head.appendChild(styleTag);\r\n\t    }\r\n\t  });\r\n\t};\r\n\r\n\tconst handleHoverInfobox = ({ fieldKey, infoboxTitle }) => {\r\n\t  if (props.pageTitle !== infoboxTitle) return;\r\n\r\n\t  const infobox = divRef.value.querySelector(\r\n\t    \".infobox, .sidebar, .toccolours\"\r\n\t  );\r\n\t  if (!infobox) return;\r\n\r\n\t  clearInfoboxHighlights();\r\n\r\n\t  const rows = infobox.querySelectorAll(\"tr\");\r\n\t  for (const row of rows) {\r\n\t    const th = row.querySelector(\"th\");\r\n\t    if (th && th.textContent.trim() === fieldKey) {\r\n\t      row.classList.add(\"infobox-highlight\");\r\n\t      break;\r\n\t    }\r\n\t  }\r\n\t};\r\n\r\n\tconst handleUnhoverInfobox = () => {\r\n\t  clearInfoboxHighlights();\r\n\t};\r\n\r\n\tconst clearInfoboxHighlights = () => {\r\n\t  const infobox = divRef.value.querySelector(\r\n\t    \".infobox, .sidebar, .toccolours\"\r\n\t  );\r\n\t  if (infobox) {\r\n\t    infobox.querySelectorAll(\".infobox-highlight\").forEach(row => {\r\n\t      row.classList.remove(\"infobox-highlight\");\r\n\t    });\r\n\t  }\r\n\t};\r\n\r\n\tconst handleSelection = content => {\r\n\t  const isTable = /<table.*?>.*?<\\/table>/s.test(content);\r\n\t  const selection = window.getSelection();\r\n\t  if (!selection || selection.rangeCount === 0) return;\r\n\r\n\t  const range = selection.getRangeAt(0);\r\n\t  const selectedNodes = range.cloneContents().childNodes;\r\n\r\n\t  let sourceId = undefined;\r\n\t  for (const node of selectedNodes) {\r\n\t    if (\r\n\t      node.nodeType === Node.ELEMENT_NODE &&\r\n\t      /^h[1-6]$/i.test(node.tagName)\r\n\t    ) {\r\n\t      sourceId = node.id;\r\n\t      break;\r\n\t    }\r\n\t  }\r\n\r\n\t  if (!sourceId) {\r\n\t    let startElement = range.startContainer;\r\n\t    while (startElement && !/^h[1-6]$/i.test(startElement.tagName)) {\r\n\t      startElement = startElement.parentElement;\r\n\t    }\r\n\t    sourceId = startElement ? startElement.id : undefined;\r\n\t  }\r\n\r\n\t  if (!sourceId) {\r\n\t    selectedText.value[props.divId] = content;\r\n\t    bus.emit(`${props.divId}_Event`, { content });\r\n\t    showPopup.value[props.divId] = true;\r\n\t    nextTick(() => {\r\n\t      updatePopupPosition();\r\n\t    });\r\n\t    return;\r\n\t  }\r\n\r\n\t  handleSelectionWithSourceId(content, sourceId, isTable);\r\n\t};\r\n\r\n\tconst handleSelectionWithSourceId = (content, sourceId, isTable) => {\r\n\t  selectedText.value[props.divId] = content;\r\n\t  bus.emit(`${props.divId}_Event`, { content });\r\n\t  showPopup.value[props.divId] = true;\r\n\r\n\t  if (isTable) {\r\n\t    const { linkedItem, chapterContent } = extractLinkedChapterContent(\r\n\t      sourceId,\r\n\t      props.divId\r\n\t    );\r\n\r\n\t    if (linkedItem && chapterContent) {\r\n\t      const otherContainerId = props.divId === \"div1\" ? \"div3\" : \"div1\";\r\n\t      const targetId =\r\n\t        props.divId === \"div1\" ? linkedItem.rightId : linkedItem.leftId;\r\n\r\n\t      const targetElement = document.getElementById(targetId);\r\n\t      if (targetElement) {\r\n\t        targetElement.scrollIntoView({ behavior: \"smooth\" });\r\n\t      }\r\n\r\n\t      bus.emit(`${otherContainerId}_Event`, { content: chapterContent });\r\n\t      bus.emit(`${otherContainerId}Event`, {\r\n\t        content: chapterContent,\r\n\t        sourceId: sourceId\r\n\t      });\r\n\t    }\r\n\t  }\r\n\r\n\t  nextTick(() => {\r\n\t    updatePopupPosition();\r\n\t  });\r\n\t};\r\n\r\n\tconst closePopup = () => {\r\n\t  showPopup.value[props.divId] = false;\r\n\t  selectedText.value[props.divId] = \"\";\r\n\t  const container =\r\n\t    props.divId === \"div1\" ? \".chart-container1\" : \".chart-container2\";\r\n\t  d3.select(container).html(\"\");\r\n\t};\r\n\r\n\tconst updatePopupPosition = () => {\r\n\t  if (showPopup.value[props.divId] && divRef.value) {\r\n\t    const popup = divRef.value.querySelector(\".text-popup\");\r\n\t    const overlay = divRef.value.querySelector(\".overlay\");\r\n\t    if (popup && overlay) {\r\n\t      const rect = divRef.value.getBoundingClientRect();\r\n\t      const scrollTop = divRef.value.scrollTop;\r\n\t      const scrollLeft = divRef.value.scrollLeft;\r\n\r\n\t      overlay.style.top = `${scrollTop}px`;\r\n\t      overlay.style.left = `${scrollLeft}px`;\r\n\t      overlay.style.width = `${divRef.value.clientWidth}px`;\r\n\t      overlay.style.height = `${divRef.value.clientHeight}px`;\r\n\r\n\t      popup.style.top = `${rect.height / 2 + scrollTop}px`;\r\n\t      popup.style.left = `${rect.width / 2 + scrollLeft}px`;\r\n\t    }\r\n\t  }\r\n\t};\r\n\r\n\tconst extractLinkedChapterContent = (sourceId, sourceContainerId) => {\r\n\t  if (!props.linkedOutline) {\r\n\t    return { linkedItem: null, chapterContent: \"\" };\r\n\t  }\r\n\r\n\t  const linkedItem = props.linkedOutline.find(\r\n\t    linked => linked.leftId === sourceId || linked.rightId === sourceId\r\n\t  );\r\n\t  if (!linkedItem) {\r\n\t    return { linkedItem: null, chapterContent: \"\" };\r\n\t  }\r\n\r\n\t  const targetContainerId = sourceContainerId === \"div1\" ? \"div3\" : \"div1\";\r\n\t  const targetId =\r\n\t    sourceContainerId === \"div1\" ? linkedItem.rightId : linkedItem.leftId;\r\n\r\n\t  const targetContainer = document.getElementById(targetContainerId);\r\n\t  if (!targetContainer) {\r\n\t    return { linkedItem: null, chapterContent: \"\" };\r\n\t  }\r\n\r\n\t  const targetElement = targetContainer.querySelector(`#${targetId}`);\r\n\t  if (!targetElement) {\r\n\t    return { linkedItem: null, chapterContent: \"\" };\r\n\t  }\r\n\r\n\t  let chapterContent = \"\";\r\n\t  let currentNode = targetElement;\r\n\r\n\t  while (currentNode) {\r\n\t    if (\r\n\t      currentNode !== targetElement &&\r\n\t      currentNode.nodeType === Node.ELEMENT_NODE &&\r\n\t      /^h[1-6]$/i.test(currentNode.tagName)\r\n\t    ) {\r\n\t      break;\r\n\t    }\r\n\r\n\t    if (\r\n\t      currentNode.nodeType === Node.ELEMENT_NODE ||\r\n\t      currentNode.nodeType === Node.TEXT_NODE\r\n\t    ) {\r\n\t      chapterContent += currentNode.outerHTML || currentNode.textContent;\r\n\t    }\r\n\r\n\t    currentNode = currentNode.nextSibling;\r\n\t  }\r\n\r\n\t  return { linkedItem, chapterContent };\r\n\t};\r\n\r\n\t// 新增的大段文字高亮功能\r\n\tconst highlightParagraphs = (fieldKey) => {\r\n\t  clearHighlights();\r\n\r\n\t  if (!divRef.value) return;\r\n\r\n\t  // 1. 尝试精准匹配（优先使用大段文本匹配）\r\n\t  const exactMatches = getExactMatchesForField(fieldKey);\r\n\t  if (exactMatches.length > 0) {\r\n\t    for (const match of exactMatches) {\r\n\t      if (match.length > 100) { // 超长文本使用段落匹配\r\n\t        if (highlightParagraphByContent(match)) {\r\n\t          return;\r\n\t        }\r\n\t      } else if (match.length > 20) { // 中等长度使用改进的文本匹配\r\n\t        if (highlightLargeText(match)) {\r\n\t          return;\r\n\t        }\r\n\t      } else { // 短文本使用原始方法\r\n\t        highlightExactText(match);\r\n\t        return;\r\n\t      }\r\n\t    }\r\n\t  }\r\n\r\n\t  // 2. 模糊匹配\r\n\t  highlightFuzzyMatches(fieldKey);\r\n\t};\r\n\r\n\tconst highlightLargeText = (textToHighlight) => {\r\n\t  const contentElement = divRef.value.querySelector('.wikipedia-content');\r\n\t  if (!contentElement) return false;\r\n\r\n\t  const tempDiv = document.createElement('div');\r\n\t  tempDiv.innerHTML = contentElement.innerHTML;\r\n\r\n\t  const processNode = (node) => {\r\n\t    if (node.nodeType === Node.TEXT_NODE) {\r\n\t      const text = node.nodeValue;\r\n\t      if (text.includes(textToHighlight)) {\r\n\t        const parent = node.parentNode;\r\n\t        const html = parent.innerHTML;\r\n\r\n\t        const highlightedHtml = html.replace(\r\n\t          new RegExp(escapeRegExp(textToHighlight),\r\n\t          `<span class=\"highlight-exact\">${textToHighlight}</span>`\r\n\t        );\r\n\r\n\t        parent.innerHTML = highlightedHtml;\r\n\t        return true;\r\n\t      }\r\n\t    } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n\t      for (let i = 0; i < node.childNodes.length; i++) {\r\n\t        if (processNode(node.childNodes[i])) {\r\n\t          return true;\r\n\t        }\r\n\t      }\r\n\t    }\r\n\t    return false;\r\n\t  };\r\n\r\n\t  let found = false;\r\n\t  for (let i = 0; i < tempDiv.childNodes.length; i++) {\r\n\t    if (processNode(tempDiv.childNodes[i])) {\r\n\t      found = true;\r\n\t      break;\r\n\t    }\r\n\t  }\r\n\r\n\t  if (found) {\r\n\t    contentElement.innerHTML = tempDiv.innerHTML;\r\n\r\n\t    const highlights = contentElement.querySelectorAll('.highlight-exact');\r\n\t    if (!highlightedParagraphs.value[props.divId]) {\r\n\t      highlightedParagraphs.value[props.divId] = [];\r\n\t    }\r\n\t    highlightedParagraphs.value[props.divId].push(...highlights);\r\n\r\n\t    if (highlights.length > 0) {\r\n\t      highlights[0].scrollIntoView({\r\n\t        behavior: 'smooth',\r\n\t        block: 'center'\r\n\t      });\r\n\t    }\r\n\t  }\r\n\r\n\t  return found;\r\n\t};\r\n\r\n\tconst highlightParagraphByContent = (paragraphText) => {\r\n\t  const contentElement = divRef.value.querySelector('.wikipedia-content');\r\n\t  if (!contentElement) return false;\r\n\r\n\t  const paragraphs = contentElement.querySelectorAll('p');\r\n\t  let found = false;\r\n\r\n\t  for (const paragraph of paragraphs) {\r\n\t    if (paragraph.textContent.includes(paragraphText)) {\r\n\t      const html = paragraph.innerHTML;\r\n\t      const highlightedHtml = html.replace(\r\n\t        new RegExp(escapeRegExp(paragraphText), 'gi'),\r\n\t        `<span class=\"highlight-exact\">$&</span>`\r\n\t      );\r\n\r\n\t      paragraph.innerHTML = highlightedHtml;\r\n\t      found = true;\r\n\r\n\t      if (!highlightedParagraphs.value[props.divId]) {\r\n\t        highlightedParagraphs.value[props.divId] = [];\r\n\t      }\r\n\t      highlightedParagraphs.value[props.divId].push(...paragraph.querySelectorAll('.highlight-exact'));\r\n\r\n\t      paragraph.scrollIntoView({\r\n\t        behavior: 'smooth',\r\n\t        block: 'center'\r\n\t      });\r\n\r\n\t      break;\r\n\t    }\r\n\t  }\r\n\r\n\t  return found;\r\n\t};\r\n\r\n\tconst highlightExactText = (textToHighlight) => {\r\n\t  const contentElement = divRef.value.querySelector('.wikipedia-content');\r\n\t  if (!contentElement) return;\r\n\r\n\t  const walker = document.createTreeWalker(\r\n\t    contentElement,\r\n\t    NodeFilter.SHOW_TEXT,\r\n\t    null,\r\n\t    false\r\n\t  );\r\n\r\n\t  let node;\r\n\t  while (node = walker.nextNode()) {\r\n\t    if (node.nodeValue.includes(textToHighlight)) {\r\n\t      const span = document.createElement('span');\r\n\t      span.className = 'highlight-exact';\r\n\t      const text = node.nodeValue;\r\n\t      const newText = document.createTextNode(text);\r\n\t      span.appendChild(newText);\r\n\r\n\t      node.parentNode.replaceChild(span, node);\r\n\r\n\t      if (!highlightedParagraphs.value[props.divId]) {\r\n\t        highlightedParagraphs.value[props.divId] = [];\r\n\t      }\r\n\t      highlightedParagraphs.value[props.divId].push(span);\r\n\t    }\r\n\t  }\r\n\t};\r\n\r\n\tconst highlightFuzzyMatches = (fieldKey) => {\r\n\t  const contentElement = divRef.value.querySelector('.wikipedia-content');\r\n\t  if (!contentElement) return;\r\n\r\n\t  const { keywords, secondaryKeywords } = getKeywordsForField(fieldKey);\r\n\r\n\t  let found = false;\r\n\t  for (const keyword of keywords) {\r\n\t    if (highlightLargeText(keyword)) {\r\n\t      found = true;\r\n\t      break;\r\n\t    }\r\n\t  }\r\n\r\n\t  if (!found) {\r\n\t    for (const keyword of secondaryKeywords) {\r\n\t      if (highlightLargeText(keyword)) {\r\n\t        found = true;\r\n\t        break;\r\n\t      }\r\n\t    }\r\n\t  }\r\n\r\n\t  if (!found) {\r\n\t    const simpleKeywords = [fieldKey.toLowerCase()];\r\n\t    for (const keyword of simpleKeywords) {\r\n\t      highlightExactText(keyword);\r\n\t    }\r\n\t  }\r\n\t};\r\n\r\n\tconst getExactMatchesForField = (fieldKey) => {\r\n\t  // 这里可以替换为从后端API获取\r\n\t  const exactMatchesMap = {\r\n\t    'GDP': ['gross domestic product', 'GDP'],\r\n\t    'Population': ['population', 'inhabitants'],\r\n\t    'GDP growth': ['economic growth', 'GDP growth'],\r\n\t    // 其他字段的精准匹配内容\r\n\t  };\r\n\r\n\t  return exactMatchesMap[fieldKey] || [];\r\n\t};\r\n\r\n\tconst getKeywordsForField = (fieldKey) => {\r\n\t  const keywordsMap = {\r\n\t    'GDP': {\r\n\t      keywords: ['gross domestic product', 'economic output', 'economy size'],\r\n\t      secondaryKeywords: ['GDP', 'economic', 'production']\r\n\t    },\r\n\t    'Population': {\r\n\t      keywords: ['population', 'inhabitants', 'residents'],\r\n\t      secondaryKeywords: ['people', 'citizens', 'demographics']\r\n\t    },\r\n\t    // 其他字段\r\n\t  };\r\n\r\n\t  return keywordsMap[fieldKey] || {\r\n\t    keywords: [fieldKey.toLowerCase()],\r\n\t    secondaryKeywords: []\r\n\t  };\r\n\t};\r\n\r\n\tconst escapeRegExp = (string) => {\r\n\t  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n\t};\r\n\r\n\tconst clearHighlights = () => {\r\n\t  if (!highlightedParagraphs.value[props.divId]) return;\r\n\r\n\t  highlightedParagraphs.value[props.divId].forEach(highlight => {\r\n\t    if (highlight.parentNode) {\r\n\t      const textNode = document.createTextNode(highlight.textContent);\r\n\t      highlight.parentNode.replaceChild(textNode, highlight);\r\n\t    }\r\n\t  });\r\n\r\n\t  highlightedParagraphs.value[props.divId] = [];\r\n\t};\r\n\r\n\tonMounted(() => {\r\n\t  fetchWikipediaContent();\r\n\r\n\t  if (divRef.value) {\r\n\t    divRef.value.addEventListener(\"scroll\", updatePopupPosition);\r\n\t  }\r\n\r\n\t  const hoverEvent = `hover-${\r\n\t    props.divId === \"div1\" ? \"left\" : \"right\"\r\n\t  }-infobox`;\r\n\t  const unhoverEvent = `unhover-${\r\n\t    props.divId === \"div1\" ? \"left\" : \"right\"\r\n\t  }-infobox`;\r\n\r\n\t  bus.on(hoverEvent, handleHoverInfobox);\r\n\t  bus.on(unhoverEvent, handleUnhoverInfobox);\r\n\r\n\t  bus.on(`${props.divId}Event`, ({ content, sourceId }) => {\r\n\t    selectedText.value[props.divId] = content;\r\n\t    showPopup.value[props.divId] = true;\r\n\t    nextTick(() => {\r\n\t      updatePopupPosition();\r\n\t    });\r\n\t  });\r\n\r\n\t  // 新增事件监听\r\n\t  bus.on(`highlight-${props.divId}-paragraphs`, highlightParagraphs);\r\n\t  bus.on(`clear-${props.divId}-highlights`, clearHighlights);\r\n\t});\r\n\r\n\tonUnmounted(() => {\r\n\t  if (divRef.value) {\r\n\t    divRef.value.removeEventListener(\"scroll\", updatePopupPosition);\r\n\t  }\r\n\r\n\t  const hoverEvent = `hover-${\r\n\t    props.divId === \"div1\" ? \"left\" : \"right\"\r\n\t  }-infobox`;\r\n\t  const unhoverEvent = `unhover-${\r\n\t    props.divId === \"div1\" ? \"left\" : \"right\"\r\n\t  }-infobox`;\r\n\r\n\t  bus.off(hoverEvent, handleHoverInfobox);\r\n\t  bus.off(unhoverEvent, handleUnhoverInfobox);\r\n\t  bus.off(`${props.divId}Event`);\r\n\r\n\t  // 移除新增事件监听\r\n\t  bus.off(`highlight-${props.divId}-paragraphs`, highlightParagraphs);\r\n\t  bus.off(`clear-${props.divId}-highlights`, clearHighlights);\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\th1 {\r\n\t\ttext-align: center;\r\n\t\tmargin-bottom: 20px;\r\n\t\tcolor: #2c3e50;\r\n\t}\r\n\r\n\t.div0 {\r\n\t\tposition: relative;\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t\tmargin: 10px;\r\n\t}\r\n\r\n\t#div1,\r\n\t#div3 {\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t\tmargin: 10px;\r\n\t}\r\n\r\n\t.showHtml {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\toverflow: auto;\r\n\t}\r\n\r\n\t::selection {\r\n\t\tbackground-color: rgba(255, 255, 0, 0.3);\r\n\t\tcolor: inherit;\r\n\t}\r\n</style>\r\n\r\n<style>\r\n\t.infobox tr.infobox-highlight th,\r\n\t.infobox tr.infobox-highlight td,\r\n\t.sidebar tr.infobox-highlight th,\r\n\t.sidebar tr.infobox-highlight td,\r\n\t.toccolours tr.infobox-highlight th,\r\n\t.toccolours tr.infobox-highlight td {\r\n\t\tbackground-color: #fffacd !important;\r\n\t\tbox-shadow: 0 0 8px rgba(255, 235, 59, 0.8) !important;\r\n\t\ttransition: all 0.15s ease !important;\r\n\t}\r\n\r\n\t.highlight-exact {\r\n\t\tbackground-color: rgba(255, 235, 59, 0.6);\r\n\t\tpadding: 2px 0;\r\n\t\tborder-radius: 3px;\r\n\t\tbox-shadow: 0 0 0 2px rgba(255, 235, 59, 0.3);\r\n\t\ttransition: all 0.3s ease;\r\n\t}\r\n\r\n\t.highlight-fuzzy {\r\n\t\tbackground-color: rgba(255, 152, 0, 0.4);\r\n\t\tpadding: 2px 0;\r\n\t\tborder-radius: 3px;\r\n\t\ttransition: all 0.3s ease;\r\n\t}\r\n\r\n\tp:hover .highlight-exact {\r\n\t\tbackground-color: rgba(255, 235, 59, 0.8);\r\n\t\ttransform: scale(1.01);\r\n\t}\r\n</style>\r\n"],"mappings":";;mBAAA;;;;;;;uBACCA,mBAAA,CAsBM;IAtBAC,KAAK,EADZC,eAAA,UACuBC,IAAA,CAAAC,kBAAkB;IAAIC,EAAE,EAAEF,IAAA,CAAAG,KAAK;IAAEC,GAAG,EAAC;MAC1DC,mBAAA,CAA8B,YAAAC,gBAAA,CAAvBN,IAAA,CAAAO,KAAK,CAACC,SAAS,kBAEAR,IAAA,CAAAS,OAAO,I,cAA7BC,YAAA,CAAiCC,yBAAA;IAJnCC,GAAA;EAAA,MAOcZ,IAAA,CAAAa,KAAK,I,cADjBH,YAAA,CAGkCI,uBAAA;IATpCF,GAAA;IAQIG,OAAO,EAAEf,IAAA,CAAAa,KAAK;IACdG,OAAK,EAAEhB,IAAA,CAAAiB;oEAETP,YAAA,CAAyEQ,2BAAA;IAX3EN,GAAA;IAW4BO,OAAO,EAAEnB,IAAA,CAAAoB,QAAQ;IAAGC,QAAM,EAAErB,IAAA,CAAAsB;qDAEtDC,YAAA,CAOuBC,oBAAA;IANrBC,OAAO,EAAEzB,IAAA,CAAA0B,SAAS,CAAC1B,IAAA,CAAAG,KAAK;IACxBgB,OAAO,EAAEnB,IAAA,CAAA2B,YAAY,CAAC3B,IAAA,CAAAG,KAAK;IAC3ByB,cAAc,EAAQ5B,IAAA,CAAAG,KAAK;IAG3B0B,YAAY,EAAE7B,IAAA,CAAA8B,MAAM;IACpBC,OAAK,EAAE/B,IAAA,CAAAgC;gGAETT,YAAA,CAAqDU,yBAAA;IAApCd,OAAO,EAAEnB,IAAA,CAAAoB,QAAQ;IAAGjB,KAAK,EAAEH,IAAA,CAAAG;yEAtB9C+B,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}