{"ast":null,"code":"class TextSelectionTool {\n  constructor(options) {\n    // 默认配置\n    this.options = Object.assign({\n      selector: document.body,\n      // 要在其中进行选择的区域，默认为整个文档\n      buttonId: null,\n      // 重置按钮的ID，若为空则不启用\n      outputId: null,\n      // 显示提取结果的容器ID，若为空则不显示\n      boxStyle: {\n        // 矩形框样式\n        border: '2px dashed rgba(0, 0, 0, 0.7)',\n        backgroundColor: 'rgba(0, 0, 0, 0.1)'\n      }\n    }, options);\n\n    // 初始化组件\n    this.init();\n  }\n  init() {\n    // 获取要操作的 DOM 元素\n    this.selectionBox = document.createElement('div');\n    this.selectionBox.style.position = 'absolute';\n    this.selectionBox.style.display = 'none';\n    this.selectionBox.className = 'selection-box';\n    Object.assign(this.selectionBox.style, this.options.boxStyle);\n    document.body.appendChild(this.selectionBox);\n    console.log('options=>', this.options);\n    // 获取输出区域\n    if (this.options.outputId) {\n      this.outputDiv = document.getElementById(this.options.outputId);\n    } else {\n      this.outputDiv = null;\n    }\n\n    // 鼠标按下、移动和松开事件\n    this.isMouseDown = false;\n    this.startX = 0;\n    this.startY = 0;\n\n    // 绑定事件\n    this.bindEvents();\n\n    // 如果有按钮，绑定重置按钮事件\n    if (this.options.buttonId) {\n      this.resetBtn = document.getElementById(this.options.buttonId);\n      if (this.resetBtn) {\n        this.resetBtn.addEventListener('click', () => this.reset());\n      }\n    }\n  }\n  bindEvents() {\n    this.options.selector.addEventListener('mousedown', e => this.onMouseDown(e));\n    this.options.selector.addEventListener('mousemove', e => this.onMouseMove(e));\n    this.options.selector.addEventListener('mouseup', e => this.onMouseUp(e));\n  }\n  onMouseDown(e) {\n    // 记录鼠标按下位置\n    this.isMouseDown = true;\n    this.startX = e.pageX;\n    this.startY = e.pageY;\n    console.log('ok');\n    // 显示选择框\n    this.selectionBox.style.display = 'block';\n    this.selectionBox.style.left = `${this.startX}px`;\n    this.selectionBox.style.top = `${this.startY}px`;\n    this.selectionBox.style.width = '0px';\n    this.selectionBox.style.height = '0px';\n  }\n  onMouseMove(e) {\n    if (!this.isMouseDown) return;\n\n    // 更新选择框大小\n    let width = e.pageX - this.startX;\n    let height = e.pageY - this.startY;\n    this.selectionBox.style.width = Math.abs(width) + 'px';\n    this.selectionBox.style.height = Math.abs(height) + 'px';\n\n    // 调整选择框位置\n    this.selectionBox.style.left = width < 0 ? e.pageX + 'px' : this.startX + 'px';\n    this.selectionBox.style.top = height < 0 ? e.pageY + 'px' : this.startY + 'px';\n    console.log('11');\n  }\n  onMouseUp(e) {\n    if (!this.isMouseDown) return;\n    this.isMouseDown = false;\n\n    // 获取矩形框的坐标和尺寸\n    let rect = this.selectionBox.getBoundingClientRect();\n\n    // 提取文本\n    this.extractTextFromRectangle(rect);\n\n    // 隐藏选择框\n    this.selectionBox.style.display = 'none';\n  }\n  extractTextFromRectangle(rect) {\n    let selectedText = \"\";\n    let elements = document.body.getElementsByTagName('*');\n    for (let element of elements) {\n      let elementRect = element.getBoundingClientRect();\n\n      // 检查当前元素是否与矩形框相交\n      if (this.isIntersect(elementRect, rect)) {\n        selectedText += element.innerText + \"\\n\";\n      }\n    }\n\n    // 如果指定了输出区域，显示提取的文本\n    if (this.outputDiv) {\n      this.outputDiv.textContent = selectedText ? selectedText : \"未选中任何文本！\";\n    }\n  }\n  isIntersect(rect1, rect2) {\n    // 判断两个矩形是否相交\n    return !(rect1.right < rect2.left || rect1.left > rect2.right || rect1.bottom < rect2.top || rect1.top > rect2.bottom);\n  }\n  reset() {\n    // 重置选择框和输出区域\n    this.selectionBox.style.display = 'none';\n    if (this.outputDiv) {\n      this.outputDiv.textContent = '';\n    }\n  }\n}","map":{"version":3,"names":["TextSelectionTool","constructor","options","Object","assign","selector","document","body","buttonId","outputId","boxStyle","border","backgroundColor","init","selectionBox","createElement","style","position","display","className","appendChild","console","log","outputDiv","getElementById","isMouseDown","startX","startY","bindEvents","resetBtn","addEventListener","reset","e","onMouseDown","onMouseMove","onMouseUp","pageX","pageY","left","top","width","height","Math","abs","rect","getBoundingClientRect","extractTextFromRectangle","selectedText","elements","getElementsByTagName","element","elementRect","isIntersect","innerText","textContent","rect1","rect2","right","bottom"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/textSelectionTool.js"],"sourcesContent":["class TextSelectionTool {\r\n  constructor(options) {\r\n      // 默认配置\r\n      this.options = Object.assign({\r\n          selector: document.body, // 要在其中进行选择的区域，默认为整个文档\r\n          buttonId: null,          // 重置按钮的ID，若为空则不启用\r\n          outputId: null,          // 显示提取结果的容器ID，若为空则不显示\r\n          boxStyle: {              // 矩形框样式\r\n              border: '2px dashed rgba(0, 0, 0, 0.7)',\r\n              backgroundColor: 'rgba(0, 0, 0, 0.1)'\r\n          }\r\n      }, options);\r\n\r\n      // 初始化组件\r\n      this.init();\r\n  }\r\n\r\n  init() {\r\n      // 获取要操作的 DOM 元素\r\n      this.selectionBox = document.createElement('div');\r\n      this.selectionBox.style.position = 'absolute';\r\n      this.selectionBox.style.display = 'none';\r\n      this.selectionBox.className = 'selection-box';\r\n      Object.assign(this.selectionBox.style, this.options.boxStyle);\r\n      document.body.appendChild(this.selectionBox);\r\n    console.log('options=>',this.options);\r\n      // 获取输出区域\r\n      if (this.options.outputId) {\r\n          this.outputDiv = document.getElementById(this.options.outputId);\r\n      } else {\r\n          this.outputDiv = null;\r\n      }\r\n\r\n      // 鼠标按下、移动和松开事件\r\n      this.isMouseDown = false;\r\n      this.startX = 0;\r\n      this.startY = 0;\r\n\r\n      // 绑定事件\r\n      this.bindEvents();\r\n\r\n      // 如果有按钮，绑定重置按钮事件\r\n      if (this.options.buttonId) {\r\n          this.resetBtn = document.getElementById(this.options.buttonId);\r\n          if (this.resetBtn) {\r\n              this.resetBtn.addEventListener('click', () => this.reset());\r\n          }\r\n      }\r\n  }\r\n\r\n  bindEvents() {\r\n      this.options.selector.addEventListener('mousedown', (e) => this.onMouseDown(e));\r\n      this.options.selector.addEventListener('mousemove', (e) => this.onMouseMove(e));\r\n      this.options.selector.addEventListener('mouseup', (e) => this.onMouseUp(e));\r\n  }\r\n\r\n  onMouseDown(e) {\r\n      // 记录鼠标按下位置\r\n      this.isMouseDown = true;\r\n      this.startX = e.pageX;\r\n      this.startY = e.pageY;\r\n    console.log('ok');\r\n      // 显示选择框\r\n      this.selectionBox.style.display = 'block';\r\n      this.selectionBox.style.left = `${this.startX}px`;\r\n      this.selectionBox.style.top = `${this.startY}px`;\r\n      this.selectionBox.style.width = '0px';\r\n      this.selectionBox.style.height = '0px';\r\n  }\r\n\r\n  onMouseMove(e) {\r\n      if (!this.isMouseDown) return;\r\n\r\n      // 更新选择框大小\r\n      let width = e.pageX - this.startX;\r\n      let height = e.pageY - this.startY;\r\n\r\n      this.selectionBox.style.width = Math.abs(width) + 'px';\r\n      this.selectionBox.style.height = Math.abs(height) + 'px';\r\n\r\n      // 调整选择框位置\r\n      this.selectionBox.style.left = width < 0 ? e.pageX + 'px' : this.startX + 'px';\r\n      this.selectionBox.style.top = height < 0 ? e.pageY + 'px' : this.startY + 'px';\r\n      console.log('11');\r\n  }\r\n\r\n  onMouseUp(e) {\r\n      if (!this.isMouseDown) return;\r\n\r\n      this.isMouseDown = false;\r\n\r\n      // 获取矩形框的坐标和尺寸\r\n      let rect = this.selectionBox.getBoundingClientRect();\r\n\r\n      // 提取文本\r\n      this.extractTextFromRectangle(rect);\r\n\r\n      // 隐藏选择框\r\n      this.selectionBox.style.display = 'none';\r\n  }\r\n\r\n  extractTextFromRectangle(rect) {\r\n      let selectedText = \"\";\r\n      let elements = document.body.getElementsByTagName('*');\r\n      \r\n      for (let element of elements) {\r\n          let elementRect = element.getBoundingClientRect();\r\n          \r\n          // 检查当前元素是否与矩形框相交\r\n          if (this.isIntersect(elementRect, rect)) {\r\n              selectedText += element.innerText + \"\\n\";\r\n          }\r\n      }\r\n\r\n      // 如果指定了输出区域，显示提取的文本\r\n      if (this.outputDiv) {\r\n          this.outputDiv.textContent = selectedText ? selectedText : \"未选中任何文本！\";\r\n      }\r\n  }\r\n\r\n  isIntersect(rect1, rect2) {\r\n      // 判断两个矩形是否相交\r\n      return !(rect1.right < rect2.left || rect1.left > rect2.right ||\r\n               rect1.bottom < rect2.top || rect1.top > rect2.bottom);\r\n  }\r\n\r\n  reset() {\r\n      // 重置选择框和输出区域\r\n      this.selectionBox.style.display = 'none';\r\n      if (this.outputDiv) {\r\n          this.outputDiv.textContent = '';\r\n      }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}