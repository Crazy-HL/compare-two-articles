{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as d3 from \"d3\";\nexport default {\n  data() {\n    return {\n      jsonData: '{\"A\": 10, \"B\": 20, \"C\": 30, \"D\": 40}',\n      // 默认 JSON 数据\n      visualizationType: \"\",\n      // 推荐的可视化类型\n      selectedVisualizationType: \"bar\",\n      // 用户选择的可视化类型\n      chartData: {} // 用于存储图表数据\n    };\n  },\n  methods: {\n    // 获取后端推荐的可视化类型\n    async fetchRecommendation() {\n      try {\n        const response = await fetch(\"http://localhost:8888/recommend_visualization\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            data: JSON.parse(this.jsonData)\n          })\n        });\n        const result = await response.json();\n        this.visualizationType = result.visualization_type;\n        this.chartData = result.data;\n        this.$nextTick(() => {\n          this.renderChart(); // 确保 DOM 更新后渲染图表\n        });\n      } catch (error) {\n        console.error(\"获取推荐失败：\", error);\n      }\n    },\n    // 手动渲染图表\n    renderChart() {\n      const chartElement = this.$refs.chart;\n      if (!chartElement) {\n        console.error(\"图表容器未找到\");\n        return;\n      }\n\n      // 清空之前的图表\n      chartElement.innerHTML = \"\";\n      const svg = d3.select(chartElement).append(\"svg\").attr(\"width\", 500).attr(\"height\", 500);\n      const data = Object.entries(this.chartData);\n\n      // 根据用户选择的可视化类型渲染图表\n      switch (this.selectedVisualizationType) {\n        case \"bar\":\n          this.renderBarChart(svg, data);\n          break;\n        case \"line\":\n          this.renderLineChart(svg, data);\n          break;\n        case \"pie\":\n          this.renderPieChart(svg, data);\n          break;\n        case \"scatter\":\n          this.renderScatterChart(svg, data);\n          break;\n        case \"treemap\":\n          this.renderTreemap(svg, data);\n          break;\n        case \"AUTO\":\n          this.renderAuto(svg, data);\n        default:\n          console.error(\"未知的可视化类型：\", this.selectedVisualizationType);\n      }\n    },\n    // 渲染柱状图\n    renderBarChart(svg, data) {\n      svg.selectAll(\"rect\").data(data).enter().append(\"rect\").attr(\"x\", (d, i) => i * 100).attr(\"y\", d => 500 - d[1] * 10).attr(\"width\", 50).attr(\"height\", d => d[1] * 10).attr(\"fill\", \"blue\");\n    },\n    // 渲染折线图（line）\n    renderLineChart(data, options) {\n      if (!this.$refs.chart) {\n        console.error(\"图表容器未找到\");\n        return;\n      }\n      console.log(\"渲染折线图数据:\", data);\n      const margin = {\n        top: 20,\n        right: 100,\n        bottom: 50,\n        left: 50\n      };\n      const width = 800 - margin.left - margin.right;\n      const height = 400 - margin.top - margin.bottom;\n\n      // 清空之前的图表\n      d3.select(this.$refs.chart).html(\"\");\n\n      // 创建 SVG 容器\n      const svg = d3.select(this.$refs.chart).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n      const labels = data.labels;\n      const datasets = data.datasets;\n\n      // 检查数据\n      console.log(\"labels:\", labels);\n      console.log(\"datasets:\", datasets);\n\n      // 设置 X 轴比例尺\n      const x = d3.scaleBand().domain(labels).range([0, width]).padding(0.1);\n\n      // 设置 Y 轴比例尺\n      const y = d3.scaleLinear().domain([0, d3.max(datasets.flatMap(d => d.data))]).range([height, 0]);\n      console.log(\"X 比例尺 domain:\", x.domain());\n      console.log(\"X 比例尺 range:\", x.range());\n      console.log(\"Y 比例尺 domain:\", y.domain());\n      console.log(\"Y 比例尺 range:\", y.range());\n\n      // 添加 X 轴\n      svg.append(\"g\").attr(\"transform\", `translate(0,${height})`).call(d3.axisBottom(x)).selectAll(\"text\").attr(\"transform\", \"rotate(-45)\").style(\"text-anchor\", \"end\");\n\n      // 添加 Y 轴\n      svg.append(\"g\").call(d3.axisLeft(y));\n\n      // 添加 X 轴标题\n      svg.append(\"text\").attr(\"x\", width / 2).attr(\"y\", height + margin.bottom - 10).style(\"text-anchor\", \"middle\").text(options.scales.x.title.text);\n\n      // 添加 Y 轴标题\n      svg.append(\"text\").attr(\"transform\", \"rotate(-90)\").attr(\"x\", -height / 2).attr(\"y\", -margin.left + 20).style(\"text-anchor\", \"middle\").text(options.scales.y.title.text);\n\n      // 绘制折线\n      datasets.forEach(dataset => {\n        const line = d3.line().x((d, i) => {\n          const xValue = x(labels[i]) + x.bandwidth() / 2;\n          if (isNaN(xValue)) {\n            console.error(\"无效的 x 值:\", xValue, \"labels[i]:\", labels[i]);\n          }\n          return xValue;\n        }).y(d => {\n          const yValue = y(d);\n          if (isNaN(yValue)) {\n            console.error(\"无效的 y 值:\", yValue, \"d:\", d);\n          }\n          return yValue;\n        });\n        svg.append(\"path\").datum(dataset.data).attr(\"fill\", \"none\").attr(\"stroke\", dataset.borderColor).attr(\"stroke-width\", 2).attr(\"d\", line);\n\n        // 添加数据点\n        svg.selectAll(`.dot-${CSS.escape(dataset.label)}`).data(dataset.data).enter().append(\"circle\").attr(\"cx\", (d, i) => {\n          const cxValue = x(labels[i]) + x.bandwidth() / 2;\n          if (isNaN(cxValue)) {\n            console.error(\"无效的 cx 值:\", cxValue, \"labels[i]:\", labels[i]);\n          }\n          return cxValue;\n        }).attr(\"cy\", d => {\n          const cyValue = y(d);\n          if (isNaN(cyValue)) {\n            console.error(\"无效的 cy 值:\", cyValue, \"d:\", d);\n          }\n          return cyValue;\n        }).attr(\"r\", 4).attr(\"fill\", dataset.borderColor);\n      });\n\n      // 添加图例\n      const legend = svg.append(\"g\").attr(\"class\", \"legend\").attr(\"transform\", `translate(${width + margin.right - 100}, 20)`);\n      datasets.forEach((dataset, index) => {\n        const legendItem = legend.append(\"g\").attr(\"transform\", `translate(0, ${index * 20})`);\n\n        // 添加颜色方块\n        legendItem.append(\"rect\").attr(\"width\", 18).attr(\"height\", 18).attr(\"fill\", dataset.borderColor);\n\n        // 添加标签\n        legendItem.append(\"text\").attr(\"x\", 24).attr(\"y\", 9).attr(\"dy\", \"0.35em\").text(dataset.label);\n      });\n    },\n    // 渲染饼图\n    renderPieChart(svg, data) {\n      const pie = d3.pie().value(d => d[1]);\n      const arcs = pie(data);\n      const arc = d3.arc().innerRadius(0).outerRadius(200);\n      const g = svg.append(\"g\").attr(\"transform\", \"translate(250, 250)\");\n      g.selectAll(\"path\").data(arcs).enter().append(\"path\").attr(\"d\", arc).attr(\"fill\", (d, i) => d3.schemeCategory10[i]);\n    },\n    // 渲染散点图\n    renderScatterChart(svg, data) {\n      svg.selectAll(\"circle\").data(data).enter().append(\"circle\").attr(\"cx\", (d, i) => i * 100).attr(\"cy\", d => 500 - d[1] * 10).attr(\"r\", 5).attr(\"fill\", \"red\");\n    },\n    // 渲染树状图\n    renderTreemap(svg, data) {\n      const root = d3.hierarchy({\n        children: data\n      }).sum(d => d[1]); // 使用数据的值作为权重\n\n      const treemap = d3.treemap().size([500, 500]) // 设置树状图的大小\n      .padding(1);\n      treemap(root);\n      const cells = svg.selectAll(\"g\").data(root.leaves()).enter().append(\"g\").attr(\"transform\", d => `translate(${d.x0},${d.y0})`);\n      cells.append(\"rect\").attr(\"width\", d => d.x1 - d.x0).attr(\"height\", d => d.y1 - d.y0).attr(\"fill\", (d, i) => d3.schemeCategory10[i % 10]);\n      cells.append(\"text\").attr(\"x\", 5).attr(\"y\", 20).text(d => d.data[0]); // 显示标签\n    },\n    // 渲染AUTO\n    renderAuto(svg, data) {\n      //维度\n      const dms = {\n        width: 100,\n        height: 500,\n        margin: {\n          top: 50,\n          bottom: 50,\n          right: 100,\n          left: 100\n        }\n      };\n      dms.contentWidth = dms.width - dms.margin.left - dms.margin.right;\n      dms.contentHeight = dms.height - dms.margin.top - dms.margin.bottom;\n      //整个盒子\n      const box = svg.attr(\"id\", \"box\").attr(\"width\", dms.width).attr(\"height\", dms.height);\n      //内容区\n      const content = box.append(\"g\").attr(\"id\", \"content\").style(\"transform\", `translate(${dms.margin.left}px,${dms.margin.top}px)`);\n      const circles = content.append(\"g\").attr(\"class\", \"circles\");\n      const paths = content.append(\"g\").attr(\"class\", \"paths\");\n      const up_lines = content.append(\"g\");\n      const down_lines = content.append(\"g\");\n      const transverse_lines = paths.append(\"g\").attr(\"class\", \"transverse_lines\");\n      const rects = content.append(\"g\").attr(\"class\", \"circles\");\n      let root;\n      root = d3.hierarchy(data);\n      root = d3.tree().size([dms.contentWidth, dms.contentHeight])(root);\n      console.log(\"root:\", root);\n      render(root);\n      function render(data) {\n        let levelObj = {};\n        let level = [];\n        let kData = data.descendants();\n        for (let i = 0; i < kData.length; i++) {\n          kData[i].key = i;\n        }\n        kData.forEach(d => {\n          if (d.parent) {\n            // 检查 levelObj 对象中是否已经存在以 d.parent.key 为键的数组\n            if (!levelObj[d.parent.key]) {\n              // 如果不存在，创建一个空数组\n              levelObj[d.parent.key] = [];\n            }\n          }\n        });\n        kData.forEach(d => {\n          if (d.parent) {\n            // 直接使用 d.parent.key 作为键，向 levelObj 对象中的数组添加元素\n            levelObj[d.parent.key].push([d.x, d.y]);\n          }\n        });\n        //把对象转成数组\n        level = Object.values(levelObj);\n        //画线\n        down_lines.selectAll(\"path\")\n        //.links 生成一个包含源节点和目标节点信息的数组\n        .data(data.links()).join(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 1.5)\n        //画下竖线\n        .attr(\"d\", d => {\n          // console.log('root:',d.source.x);\n          return `M${d.source.x},${d.source.y + 50},${d.source.x},${d.target.y - 20}`;\n        });\n\n        //画上竖线\n        up_lines.selectAll(\"path\")\n        //.links 生成一个包含源节点和目标节点信息的数组\n        .data(data.links()).join(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 1.5).attr(\"d\", d => {\n          return `M${d.target.x},${d.target.y},${d.target.x},${d.target.y - 20}`;\n        });\n        //画每一层的大横线\n        transverse_lines.selectAll(\"path\").data(level).join(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 1.5).attr(\"d\", d => {\n          const startX = d[0][0];\n          const y = d[0][1] - 20;\n          const endX = d[d.length - 1][0];\n          return `M${startX},${y} L${endX},${y}`;\n        });\n\n        //画矩形\n        circles.selectAll().data(root.descendants()).join(\"rect\").attr(\"x\", d => d.x - 5).attr(\"y\", d => d.y).attr(\"width\", 10).attr(\"height\", 50).attr(\"stroke-width\", 3).attr(\"fill\", d => {\n          if (d.depth === 0) {\n            return \"blue\";\n          } else {\n            if (d.data.attitude == \"y\") {\n              return \"green\";\n            } else {\n              return \"red\";\n            }\n          }\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["d3","data","jsonData","visualizationType","selectedVisualizationType","chartData","methods","fetchRecommendation","response","fetch","method","headers","body","JSON","stringify","parse","result","json","visualization_type","$nextTick","renderChart","error","console","chartElement","$refs","chart","innerHTML","svg","select","append","attr","Object","entries","renderBarChart","renderLineChart","renderPieChart","renderScatterChart","renderTreemap","renderAuto","selectAll","enter","d","i","options","log","margin","top","right","bottom","left","width","height","html","labels","datasets","x","scaleBand","domain","range","padding","y","scaleLinear","max","flatMap","call","axisBottom","style","axisLeft","text","scales","title","forEach","dataset","line","xValue","bandwidth","isNaN","yValue","datum","borderColor","CSS","escape","label","cxValue","cyValue","legend","index","legendItem","pie","value","arcs","arc","innerRadius","outerRadius","g","schemeCategory10","root","hierarchy","children","sum","treemap","size","cells","leaves","x0","y0","x1","y1","dms","contentWidth","contentHeight","box","content","circles","paths","up_lines","down_lines","transverse_lines","rects","tree","render","levelObj","level","kData","descendants","length","key","parent","push","values","links","join","source","target","startX","endX","depth","attitude"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\Vis.vue"],"sourcesContent":["<template>\r\n\t<div>\r\n\t\t<!-- <h1>Data Visualization with D3.js</h1> -->\r\n\t\t<div>\r\n\t\t\t<label for=\"jsonData\">输入 JSON 数据：</label>\r\n\t\t\t<textarea id=\"jsonData\" v-model=\"jsonData\" rows=\"5\" cols=\"50\"></textarea>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<label for=\"visualizationType\">选择可视化类型：</label>\r\n\t\t\t<select id=\"visualizationType\" v-model=\"selectedVisualizationType\">\r\n\t\t\t\t<option value=\"bar\">柱状图 (Bar Chart)</option>\r\n\t\t\t\t<option value=\"line\">折线图 (Line Chart)</option>\r\n\t\t\t\t<option value=\"pie\">饼图 (Pie Chart)</option>\r\n\t\t\t\t<option value=\"scatter\">散点图 (Scatter Plot)</option>\r\n\t\t\t\t<option value=\"treemap\">树状图 (Treemap)</option>\r\n\t\t\t\t<option value=\"AUTO\">论证单元树 (AUTO)</option>\r\n\t\t\t</select>\r\n\t\t</div>\r\n\t\t<button @click=\"fetchRecommendation\">获取可视化推荐</button>\r\n\t\t<button @click=\"renderChart\">手动渲染图表</button>\r\n\t\t<div v-if=\"visualizationType\">\r\n\t\t\t<h2>推荐的可视化类型：{{ visualizationType }}</h2>\r\n\t\t\t<div ref=\"chart\"></div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\n\timport * as d3 from \"d3\";\r\n\r\n\texport default {\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t\tjsonData: '{\"A\": 10, \"B\": 20, \"C\": 30, \"D\": 40}', // 默认 JSON 数据\r\n\t\t\t\tvisualizationType: \"\", // 推荐的可视化类型\r\n\t\t\t\tselectedVisualizationType: \"bar\", // 用户选择的可视化类型\r\n\t\t\t\tchartData: {} // 用于存储图表数据\r\n\t\t\t};\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\t// 获取后端推荐的可视化类型\r\n\t\t\tasync fetchRecommendation() {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst response = await fetch(\r\n\t\t\t\t\t\t\"http://localhost:8888/recommend_visualization\",\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tmethod: \"POST\",\r\n\t\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\t\t\t\tdata: JSON.parse(this.jsonData)\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\t\tconst result = await response.json();\r\n\t\t\t\t\tthis.visualizationType = result.visualization_type;\r\n\t\t\t\t\tthis.chartData = result.data;\r\n\t\t\t\t\tthis.$nextTick(() => {\r\n\t\t\t\t\t\tthis.renderChart(); // 确保 DOM 更新后渲染图表\r\n\t\t\t\t\t});\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tconsole.error(\"获取推荐失败：\", error);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t// 手动渲染图表\r\n\t\t\trenderChart() {\r\n\t\t\t\tconst chartElement = this.$refs.chart;\r\n\t\t\t\tif (!chartElement) {\r\n\t\t\t\t\tconsole.error(\"图表容器未找到\");\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 清空之前的图表\r\n\t\t\t\tchartElement.innerHTML = \"\";\r\n\r\n\t\t\t\tconst svg = d3\r\n\t\t\t\t\t.select(chartElement)\r\n\t\t\t\t\t.append(\"svg\")\r\n\t\t\t\t\t.attr(\"width\", 500)\r\n\t\t\t\t\t.attr(\"height\", 500);\r\n\r\n\t\t\t\tconst data = Object.entries(this.chartData);\r\n\r\n\t\t\t\t// 根据用户选择的可视化类型渲染图表\r\n\t\t\t\tswitch (this.selectedVisualizationType) {\r\n\t\t\t\t\tcase \"bar\":\r\n\t\t\t\t\t\tthis.renderBarChart(svg, data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"line\":\r\n\t\t\t\t\t\tthis.renderLineChart(svg, data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"pie\":\r\n\t\t\t\t\t\tthis.renderPieChart(svg, data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"scatter\":\r\n\t\t\t\t\t\tthis.renderScatterChart(svg, data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"treemap\":\r\n\t\t\t\t\t\tthis.renderTreemap(svg, data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"AUTO\":\r\n\t\t\t\t\t\tthis.renderAuto(svg, data);\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tconsole.error(\"未知的可视化类型：\", this.selectedVisualizationType);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t// 渲染柱状图\r\n\t\t\trenderBarChart(svg, data) {\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.selectAll(\"rect\")\r\n\t\t\t\t\t.data(data)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"rect\")\r\n\t\t\t\t\t.attr(\"x\", (d, i) => i * 100)\r\n\t\t\t\t\t.attr(\"y\", d => 500 - d[1] * 10)\r\n\t\t\t\t\t.attr(\"width\", 50)\r\n\t\t\t\t\t.attr(\"height\", d => d[1] * 10)\r\n\t\t\t\t\t.attr(\"fill\", \"blue\");\r\n\t\t\t},\r\n\t\t\t// 渲染折线图（line）\r\n\t\t\trenderLineChart(data, options) {\r\n\t\t\t\tif (!this.$refs.chart) {\r\n\t\t\t\t\tconsole.error(\"图表容器未找到\");\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.log(\"渲染折线图数据:\", data);\r\n\r\n\t\t\t\tconst margin = { top: 20, right: 100, bottom: 50, left: 50 };\r\n\t\t\t\tconst width = 800 - margin.left - margin.right;\r\n\t\t\t\tconst height = 400 - margin.top - margin.bottom;\r\n\r\n\t\t\t\t// 清空之前的图表\r\n\t\t\t\td3.select(this.$refs.chart).html(\"\");\r\n\r\n\t\t\t\t// 创建 SVG 容器\r\n\t\t\t\tconst svg = d3\r\n\t\t\t\t\t.select(this.$refs.chart)\r\n\t\t\t\t\t.append(\"svg\")\r\n\t\t\t\t\t.attr(\"width\", width + margin.left + margin.right)\r\n\t\t\t\t\t.attr(\"height\", height + margin.top + margin.bottom)\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n\t\t\t\tconst labels = data.labels;\r\n\t\t\t\tconst datasets = data.datasets;\r\n\r\n\t\t\t\t// 检查数据\r\n\t\t\t\tconsole.log(\"labels:\", labels);\r\n\t\t\t\tconsole.log(\"datasets:\", datasets);\r\n\r\n\t\t\t\t// 设置 X 轴比例尺\r\n\t\t\t\tconst x = d3.scaleBand().domain(labels).range([0, width]).padding(0.1);\r\n\r\n\t\t\t\t// 设置 Y 轴比例尺\r\n\t\t\t\tconst y = d3\r\n\t\t\t\t\t.scaleLinear()\r\n\t\t\t\t\t.domain([0, d3.max(datasets.flatMap(d => d.data))])\r\n\t\t\t\t\t.range([height, 0]);\r\n\r\n\t\t\t\tconsole.log(\"X 比例尺 domain:\", x.domain());\r\n\t\t\t\tconsole.log(\"X 比例尺 range:\", x.range());\r\n\t\t\t\tconsole.log(\"Y 比例尺 domain:\", y.domain());\r\n\t\t\t\tconsole.log(\"Y 比例尺 range:\", y.range());\r\n\r\n\t\t\t\t// 添加 X 轴\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"transform\", `translate(0,${height})`)\r\n\t\t\t\t\t.call(d3.axisBottom(x))\r\n\t\t\t\t\t.selectAll(\"text\")\r\n\t\t\t\t\t.attr(\"transform\", \"rotate(-45)\")\r\n\t\t\t\t\t.style(\"text-anchor\", \"end\");\r\n\r\n\t\t\t\t// 添加 Y 轴\r\n\t\t\t\tsvg.append(\"g\").call(d3.axisLeft(y));\r\n\r\n\t\t\t\t// 添加 X 轴标题\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.append(\"text\")\r\n\t\t\t\t\t.attr(\"x\", width / 2)\r\n\t\t\t\t\t.attr(\"y\", height + margin.bottom - 10)\r\n\t\t\t\t\t.style(\"text-anchor\", \"middle\")\r\n\t\t\t\t\t.text(options.scales.x.title.text);\r\n\r\n\t\t\t\t// 添加 Y 轴标题\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.append(\"text\")\r\n\t\t\t\t\t.attr(\"transform\", \"rotate(-90)\")\r\n\t\t\t\t\t.attr(\"x\", -height / 2)\r\n\t\t\t\t\t.attr(\"y\", -margin.left + 20)\r\n\t\t\t\t\t.style(\"text-anchor\", \"middle\")\r\n\t\t\t\t\t.text(options.scales.y.title.text);\r\n\r\n\t\t\t\t// 绘制折线\r\n\t\t\t\tdatasets.forEach(dataset => {\r\n\t\t\t\t\tconst line = d3\r\n\t\t\t\t\t\t.line()\r\n\t\t\t\t\t\t.x((d, i) => {\r\n\t\t\t\t\t\t\tconst xValue = x(labels[i]) + x.bandwidth() / 2;\r\n\t\t\t\t\t\t\tif (isNaN(xValue)) {\r\n\t\t\t\t\t\t\t\tconsole.error(\"无效的 x 值:\", xValue, \"labels[i]:\", labels[i]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn xValue;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.y(d => {\r\n\t\t\t\t\t\t\tconst yValue = y(d);\r\n\t\t\t\t\t\t\tif (isNaN(yValue)) {\r\n\t\t\t\t\t\t\t\tconsole.error(\"无效的 y 值:\", yValue, \"d:\", d);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn yValue;\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\tsvg\r\n\t\t\t\t\t\t.append(\"path\")\r\n\t\t\t\t\t\t.datum(dataset.data)\r\n\t\t\t\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t\t\t\t.attr(\"stroke\", dataset.borderColor)\r\n\t\t\t\t\t\t.attr(\"stroke-width\", 2)\r\n\t\t\t\t\t\t.attr(\"d\", line);\r\n\r\n\t\t\t\t\t// 添加数据点\r\n\t\t\t\t\tsvg\r\n\t\t\t\t\t\t.selectAll(`.dot-${CSS.escape(dataset.label)}`)\r\n\t\t\t\t\t\t.data(dataset.data)\r\n\t\t\t\t\t\t.enter()\r\n\t\t\t\t\t\t.append(\"circle\")\r\n\t\t\t\t\t\t.attr(\"cx\", (d, i) => {\r\n\t\t\t\t\t\t\tconst cxValue = x(labels[i]) + x.bandwidth() / 2;\r\n\t\t\t\t\t\t\tif (isNaN(cxValue)) {\r\n\t\t\t\t\t\t\t\tconsole.error(\r\n\t\t\t\t\t\t\t\t\t\"无效的 cx 值:\",\r\n\t\t\t\t\t\t\t\t\tcxValue,\r\n\t\t\t\t\t\t\t\t\t\"labels[i]:\",\r\n\t\t\t\t\t\t\t\t\tlabels[i]\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn cxValue;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.attr(\"cy\", d => {\r\n\t\t\t\t\t\t\tconst cyValue = y(d);\r\n\t\t\t\t\t\t\tif (isNaN(cyValue)) {\r\n\t\t\t\t\t\t\t\tconsole.error(\"无效的 cy 值:\", cyValue, \"d:\", d);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn cyValue;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.attr(\"r\", 4)\r\n\t\t\t\t\t\t.attr(\"fill\", dataset.borderColor);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// 添加图例\r\n\t\t\t\tconst legend = svg\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"class\", \"legend\")\r\n\t\t\t\t\t.attr(\"transform\", `translate(${width + margin.right - 100}, 20)`);\r\n\r\n\t\t\t\tdatasets.forEach((dataset, index) => {\r\n\t\t\t\t\tconst legendItem = legend\r\n\t\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t\t.attr(\"transform\", `translate(0, ${index * 20})`);\r\n\r\n\t\t\t\t\t// 添加颜色方块\r\n\t\t\t\t\tlegendItem\r\n\t\t\t\t\t\t.append(\"rect\")\r\n\t\t\t\t\t\t.attr(\"width\", 18)\r\n\t\t\t\t\t\t.attr(\"height\", 18)\r\n\t\t\t\t\t\t.attr(\"fill\", dataset.borderColor);\r\n\r\n\t\t\t\t\t// 添加标签\r\n\t\t\t\t\tlegendItem\r\n\t\t\t\t\t\t.append(\"text\")\r\n\t\t\t\t\t\t.attr(\"x\", 24)\r\n\t\t\t\t\t\t.attr(\"y\", 9)\r\n\t\t\t\t\t\t.attr(\"dy\", \"0.35em\")\r\n\t\t\t\t\t\t.text(dataset.label);\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\t// 渲染饼图\r\n\t\t\trenderPieChart(svg, data) {\r\n\t\t\t\tconst pie = d3.pie().value(d => d[1]);\r\n\r\n\t\t\t\tconst arcs = pie(data);\r\n\r\n\t\t\t\tconst arc = d3.arc().innerRadius(0).outerRadius(200);\r\n\r\n\t\t\t\tconst g = svg.append(\"g\").attr(\"transform\", \"translate(250, 250)\");\r\n\r\n\t\t\t\tg.selectAll(\"path\")\r\n\t\t\t\t\t.data(arcs)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"path\")\r\n\t\t\t\t\t.attr(\"d\", arc)\r\n\t\t\t\t\t.attr(\"fill\", (d, i) => d3.schemeCategory10[i]);\r\n\t\t\t},\r\n\t\t\t// 渲染散点图\r\n\t\t\trenderScatterChart(svg, data) {\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.selectAll(\"circle\")\r\n\t\t\t\t\t.data(data)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"circle\")\r\n\t\t\t\t\t.attr(\"cx\", (d, i) => i * 100)\r\n\t\t\t\t\t.attr(\"cy\", d => 500 - d[1] * 10)\r\n\t\t\t\t\t.attr(\"r\", 5)\r\n\t\t\t\t\t.attr(\"fill\", \"red\");\r\n\t\t\t},\r\n\t\t\t// 渲染树状图\r\n\t\t\trenderTreemap(svg, data) {\r\n\t\t\t\tconst root = d3.hierarchy({ children: data }).sum(d => d[1]); // 使用数据的值作为权重\r\n\r\n\t\t\t\tconst treemap = d3\r\n\t\t\t\t\t.treemap()\r\n\t\t\t\t\t.size([500, 500]) // 设置树状图的大小\r\n\t\t\t\t\t.padding(1);\r\n\r\n\t\t\t\ttreemap(root);\r\n\r\n\t\t\t\tconst cells = svg\r\n\t\t\t\t\t.selectAll(\"g\")\r\n\t\t\t\t\t.data(root.leaves())\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"transform\", d => `translate(${d.x0},${d.y0})`);\r\n\r\n\t\t\t\tcells\r\n\t\t\t\t\t.append(\"rect\")\r\n\t\t\t\t\t.attr(\"width\", d => d.x1 - d.x0)\r\n\t\t\t\t\t.attr(\"height\", d => d.y1 - d.y0)\r\n\t\t\t\t\t.attr(\"fill\", (d, i) => d3.schemeCategory10[i % 10]);\r\n\r\n\t\t\t\tcells\r\n\t\t\t\t\t.append(\"text\")\r\n\t\t\t\t\t.attr(\"x\", 5)\r\n\t\t\t\t\t.attr(\"y\", 20)\r\n\t\t\t\t\t.text(d => d.data[0]); // 显示标签\r\n\t\t\t},\r\n\t\t\t// 渲染AUTO\r\n\t\t\trenderAuto(svg, data) {\r\n\t\t\t\t//维度\r\n\t\t\t\tconst dms = {\r\n\t\t\t\t\twidth: 100,\r\n\t\t\t\t\theight: 500,\r\n\t\t\t\t\tmargin: {\r\n\t\t\t\t\t\ttop: 50,\r\n\t\t\t\t\t\tbottom: 50,\r\n\t\t\t\t\t\tright: 100,\r\n\t\t\t\t\t\tleft: 100\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tdms.contentWidth = dms.width - dms.margin.left - dms.margin.right;\r\n\t\t\t\tdms.contentHeight = dms.height - dms.margin.top - dms.margin.bottom;\r\n\t\t\t\t//整个盒子\r\n\t\t\t\tconst box = svg\r\n\t\t\t\t\t.attr(\"id\", \"box\")\r\n\t\t\t\t\t.attr(\"width\", dms.width)\r\n\t\t\t\t\t.attr(\"height\", dms.height);\r\n\t\t\t\t//内容区\r\n\t\t\t\tconst content = box\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"id\", \"content\")\r\n\t\t\t\t\t.style(\r\n\t\t\t\t\t\t\"transform\",\r\n\t\t\t\t\t\t`translate(${dms.margin.left}px,${dms.margin.top}px)`\r\n\t\t\t\t\t);\r\n\t\t\t\tconst circles = content.append(\"g\").attr(\"class\", \"circles\");\r\n\t\t\t\tconst paths = content.append(\"g\").attr(\"class\", \"paths\");\r\n\t\t\t\tconst up_lines = content.append(\"g\");\r\n\t\t\t\tconst down_lines = content.append(\"g\");\r\n\t\t\t\tconst transverse_lines = paths\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"class\", \"transverse_lines\");\r\n\t\t\t\tconst rects = content.append(\"g\").attr(\"class\", \"circles\");\r\n\t\t\t\tlet root;\r\n\r\n\t\t\t\troot = d3.hierarchy(data);\r\n\t\t\t\troot = d3.tree().size([dms.contentWidth, dms.contentHeight])(root);\r\n\t\t\t\tconsole.log(\"root:\", root);\r\n\t\t\t\trender(root);\r\n\r\n\t\t\t\tfunction render(data) {\r\n\t\t\t\t\tlet levelObj = {};\r\n\t\t\t\t\tlet level = [];\r\n\t\t\t\t\tlet kData = data.descendants();\r\n\t\t\t\t\tfor (let i = 0; i < kData.length; i++) {\r\n\t\t\t\t\t\tkData[i].key = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tkData.forEach(d => {\r\n\t\t\t\t\t\tif (d.parent) {\r\n\t\t\t\t\t\t\t// 检查 levelObj 对象中是否已经存在以 d.parent.key 为键的数组\r\n\t\t\t\t\t\t\tif (!levelObj[d.parent.key]) {\r\n\t\t\t\t\t\t\t\t// 如果不存在，创建一个空数组\r\n\t\t\t\t\t\t\t\tlevelObj[d.parent.key] = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tkData.forEach(d => {\r\n\t\t\t\t\t\tif (d.parent) {\r\n\t\t\t\t\t\t\t// 直接使用 d.parent.key 作为键，向 levelObj 对象中的数组添加元素\r\n\t\t\t\t\t\t\tlevelObj[d.parent.key].push([d.x, d.y]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//把对象转成数组\r\n\t\t\t\t\tlevel = Object.values(levelObj);\r\n\t\t\t\t\t//画线\r\n\t\t\t\t\tdown_lines\r\n\t\t\t\t\t\t.selectAll(\"path\")\r\n\t\t\t\t\t\t//.links 生成一个包含源节点和目标节点信息的数组\r\n\t\t\t\t\t\t.data(data.links())\r\n\t\t\t\t\t\t.join(\"path\")\r\n\t\t\t\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t\t\t\t.attr(\"stroke\", \"black\")\r\n\t\t\t\t\t\t.attr(\"stroke-width\", 1.5)\r\n\t\t\t\t\t\t//画下竖线\r\n\t\t\t\t\t\t.attr(\"d\", d => {\r\n\t\t\t\t\t\t\t// console.log('root:',d.source.x);\r\n\t\t\t\t\t\t\treturn `M${d.source.x},${d.source.y + 50},${d.source.x},${\r\n\t\t\t\t\t\t\t\td.target.y - 20\r\n\t\t\t\t\t\t\t}`;\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t//画上竖线\r\n\t\t\t\t\tup_lines\r\n\t\t\t\t\t\t.selectAll(\"path\")\r\n\t\t\t\t\t\t//.links 生成一个包含源节点和目标节点信息的数组\r\n\t\t\t\t\t\t.data(data.links())\r\n\t\t\t\t\t\t.join(\"path\")\r\n\t\t\t\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t\t\t\t.attr(\"stroke\", \"black\")\r\n\t\t\t\t\t\t.attr(\"stroke-width\", 1.5)\r\n\t\t\t\t\t\t.attr(\"d\", d => {\r\n\t\t\t\t\t\t\treturn `M${d.target.x},${d.target.y},${d.target.x},${\r\n\t\t\t\t\t\t\t\td.target.y - 20\r\n\t\t\t\t\t\t\t}`;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t//画每一层的大横线\r\n\t\t\t\t\ttransverse_lines\r\n\t\t\t\t\t\t.selectAll(\"path\")\r\n\t\t\t\t\t\t.data(level)\r\n\t\t\t\t\t\t.join(\"path\")\r\n\t\t\t\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t\t\t\t.attr(\"stroke\", \"black\")\r\n\t\t\t\t\t\t.attr(\"stroke-width\", 1.5)\r\n\t\t\t\t\t\t.attr(\"d\", d => {\r\n\t\t\t\t\t\t\tconst startX = d[0][0];\r\n\t\t\t\t\t\t\tconst y = d[0][1] - 20;\r\n\t\t\t\t\t\t\tconst endX = d[d.length - 1][0];\r\n\t\t\t\t\t\t\treturn `M${startX},${y} L${endX},${y}`;\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t//画矩形\r\n\t\t\t\t\tcircles\r\n\t\t\t\t\t\t.selectAll()\r\n\t\t\t\t\t\t.data(root.descendants())\r\n\t\t\t\t\t\t.join(\"rect\")\r\n\t\t\t\t\t\t.attr(\"x\", d => d.x - 5)\r\n\t\t\t\t\t\t.attr(\"y\", d => d.y)\r\n\t\t\t\t\t\t.attr(\"width\", 10)\r\n\t\t\t\t\t\t.attr(\"height\", 50)\r\n\t\t\t\t\t\t.attr(\"stroke-width\", 3)\r\n\t\t\t\t\t\t.attr(\"fill\", d => {\r\n\t\t\t\t\t\t\tif (d.depth === 0) {\r\n\t\t\t\t\t\t\t\treturn \"blue\";\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tif (d.data.attitude == \"y\") {\r\n\t\t\t\t\t\t\t\t\treturn \"green\";\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\treturn \"red\";\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n</script>\r\n\r\n<style scoped>\r\n\ttextarea {\r\n\t\tmargin-bottom: 20px;\r\n\t}\r\n\tbutton {\r\n\t\tmargin-bottom: 20px;\r\n\t}\r\n\t.chart {\r\n\t\tmargin: 20px;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}