{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createVNode as _createVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-ea6f3360\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"compare-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"table-grid\"\n};\nconst _hoisted_3 = {\n  class: \"header left-column\"\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"header middle-column\"\n}, \"对比属性\", -1 /* HOISTED */));\nconst _hoisted_5 = {\n  class: \"header right-column\"\n};\nconst _hoisted_6 = {\n  class: \"cell left-column\"\n};\nconst _hoisted_7 = {\n  class: \"stats-summary\"\n};\nconst _hoisted_8 = {\n  class: \"cell middle-column\"\n};\nconst _hoisted_9 = {\n  class: \"attribute-name\"\n};\nconst _hoisted_10 = {\n  class: \"attribute-desc\"\n};\nconst _hoisted_11 = {\n  class: \"cell right-column\"\n};\nconst _hoisted_12 = {\n  class: \"stats-summary\"\n};\nconst _hoisted_13 = {\n  key: 1,\n  class: \"empty-state\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$setup.hasData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createCommentVNode(\" 表头 \"), _createElementVNode(\"div\", _hoisted_3, _toDisplayString($setup.table1Name), 1 /* TEXT */), _hoisted_4, _createElementVNode(\"div\", _hoisted_5, _toDisplayString($setup.table2Name), 1 /* TEXT */), _createCommentVNode(\" 数据行 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.commonAttributes, attr => {\n    return _openBlock(), _createElementBlock(_Fragment, {\n      key: attr\n    }, [_createElementVNode(\"div\", _hoisted_6, [_createVNode($setup[\"SparklineChart\"], {\n      data: $setup.getSparklineData($setup.processedTable1, attr)\n    }, null, 8 /* PROPS */, [\"data\"]), _createElementVNode(\"div\", _hoisted_7, \" 平均: \" + _toDisplayString($setup.getAverage($setup.processedTable1.data[attr])), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, _toDisplayString(attr), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_10, _toDisplayString($setup.getAttributeDesc(attr)), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_11, [_createVNode($setup[\"SparklineChart\"], {\n      data: $setup.getSparklineData($setup.processedTable2, attr)\n    }, null, 8 /* PROPS */, [\"data\"]), _createElementVNode(\"div\", _hoisted_12, \" 平均: \" + _toDisplayString($setup.getAverage($setup.processedTable2.data[attr])), 1 /* TEXT */)])], 64 /* STABLE_FRAGMENT */);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_13, \"请先从左/右侧选择两个表格进行对比\"))]);\n}","map":{"version":3,"names":["class","key","_createElementVNode","_createElementBlock","_hoisted_1","$setup","hasData","_hoisted_2","_createCommentVNode","_hoisted_3","_toDisplayString","table1Name","_hoisted_4","_hoisted_5","table2Name","_Fragment","_renderList","commonAttributes","attr","_hoisted_6","_createVNode","data","getSparklineData","processedTable1","_hoisted_7","getAverage","_hoisted_8","_hoisted_9","_hoisted_10","getAttributeDesc","_hoisted_11","processedTable2","_hoisted_12","_hoisted_13"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\CompareTable.vue"],"sourcesContent":["<template>\r\n\t<div class=\"compare-container\">\r\n\t\t<div v-if=\"hasData\" class=\"table-grid\">\r\n\t\t\t<!-- 表头 -->\r\n\t\t\t<div class=\"header left-column\">{{ table1Name }}</div>\r\n\t\t\t<div class=\"header middle-column\">对比属性</div>\r\n\t\t\t<div class=\"header right-column\">{{ table2Name }}</div>\r\n\r\n\t\t\t<!-- 数据行 -->\r\n\t\t\t<template v-for=\"attr in commonAttributes\" :key=\"attr\">\r\n\t\t\t\t<div class=\"cell left-column\">\r\n\t\t\t\t\t<SparklineChart :data=\"getSparklineData(processedTable1, attr)\" />\r\n\t\t\t\t\t<div class=\"stats-summary\">\r\n\t\t\t\t\t\t平均: {{ getAverage(processedTable1.data[attr]) }}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div class=\"cell middle-column\">\r\n\t\t\t\t\t<div class=\"attribute-name\">{{ attr }}</div>\r\n\t\t\t\t\t<div class=\"attribute-desc\">{{ getAttributeDesc(attr) }}</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div class=\"cell right-column\">\r\n\t\t\t\t\t<SparklineChart :data=\"getSparklineData(processedTable2, attr)\" />\r\n\t\t\t\t\t<div class=\"stats-summary\">\r\n\t\t\t\t\t\t平均: {{ getAverage(processedTable2.data[attr]) }}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</template>\r\n\t\t</div>\r\n\t\t<div v-else class=\"empty-state\">请先从左/右侧选择两个表格进行对比</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, watch } from \"vue\";\r\n\timport SparklineChart from \"./SparklineChart.vue\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdiv1RawData: String,\r\n\t\tdiv3RawData: String\r\n\t});\r\n\r\n\t// 表格处理状态\r\n\tconst processedTable1 = ref({ data: {}, years: [], attributes: [] });\r\n\tconst processedTable2 = ref({ data: {}, years: [], attributes: [] });\r\n\tconst table1Name = ref(\"表格1\");\r\n\tconst table2Name = ref(\"表格2\");\r\n\r\n\t// 计算属性\r\n\tconst hasData = computed(() => {\r\n\t\treturn props.div1RawData && props.div3RawData;\r\n\t});\r\n\r\n\tconst commonAttributes = computed(() => {\r\n\t\treturn processedTable1.value.attributes.filter(attr =>\r\n\t\t\tprocessedTable2.value.attributes.includes(attr)\r\n\t\t);\r\n\t});\r\n\r\n\t// 监听数据变化\r\n\twatch(\r\n\t\t() => props.div1RawData,\r\n\t\thtml => {\r\n\t\t\tif (props.div1RawData && props.div3RawData) table_json();\r\n\t\t\tif (html) processedTable1.value = parseTableData(html);\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\twatch(\r\n\t\t() => props.div3RawData,\r\n\t\thtml => {\r\n\t\t\tif (html) processedTable2.value = parseTableData(html);\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\tasync function table_json() {\r\n\t\ttry {\r\n\t\t\tconsole.log(\"后端接口调用中~\");\r\n\t\t\tapi.post(\r\n\t\t\t\t\"table_attributes\",\r\n\t\t\t\t{ table1: props.div1RawData, table2: props.div3RawData },\r\n\t\t\t\tdata => {\r\n\t\t\t\t\tif (data.error) {\r\n\t\t\t\t\t\tconsole.error(\"后端返回的错误:\", data.error);\r\n\t\t\t\t\t\talert(`处理文章内容时出错: ${data.message}`);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconsole.log(\"table_json:\", data);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"处理TABLE_JSON时出错:\", error);\r\n\t\t\talert(\"处理TABLE_JSON时出错，请稍后重试\");\r\n\t\t}\r\n\t}\r\n\t// 表格解析方法\r\n\tconst parseTableData = html => {\r\n\t\tconst result = { data: {}, years: [], attributes: [] };\r\n\t\tif (!html) return result;\r\n\r\n\t\ttry {\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\t\tconst table = doc.querySelector(\"table\");\r\n\t\t\tif (!table) return result;\r\n\r\n\t\t\t// 提取表头\r\n\t\t\tconst headers = Array.from(table.querySelectorAll(\"th\")).map(th => {\r\n\t\t\t\tconst abbr = th.querySelector(\"abbr\");\r\n\t\t\t\treturn abbr ? abbr.title : th.textContent.trim();\r\n\t\t\t});\r\n\t\t\tresult.attributes = headers.slice(2); // 跳过前两列(Year, Team)\r\n\r\n\t\t\t// 初始化数据结构\r\n\t\t\tresult.attributes.forEach(attr => {\r\n\t\t\t\tresult.data[attr] = [];\r\n\t\t\t});\r\n\r\n\t\t\t// 提取行数据\r\n\t\t\tArray.from(table.querySelectorAll(\"tr:not(:first-child)\")).forEach(tr => {\r\n\t\t\t\tconst cells = Array.from(tr.querySelectorAll(\"td\"));\r\n\t\t\t\tif (cells.length < headers.length) return;\r\n\r\n\t\t\t\t// 提取年份\r\n\t\t\t\tconst yearMatch = cells[0].textContent.match(/(\\d{4})/);\r\n\t\t\t\tif (yearMatch) result.years.push(yearMatch[1]);\r\n\r\n\t\t\t\t// 提取统计数据\r\n\t\t\t\tresult.attributes.forEach((attr, idx) => {\r\n\t\t\t\t\tconst value = parseFloat(\r\n\t\t\t\t\t\tcells[idx + 2].textContent.replace(/[^\\d.-]/g, \"\")\r\n\t\t\t\t\t);\r\n\t\t\t\t\tresult.data[attr].push(isNaN(value) ? 0 : value);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\treturn result;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"表格解析错误:\", error);\r\n\t\t\treturn result;\r\n\t\t}\r\n\t};\r\n\r\n\t// 辅助方法\r\n\tconst getSparklineData = (table, attr) => {\r\n\t\treturn {\r\n\t\t\tvalues: table.data[attr] || [],\r\n\t\t\tlabels: table.years || []\r\n\t\t};\r\n\t};\r\n\r\n\tconst getAverage = values => {\r\n\t\tif (!values?.length) return \"N/A\";\r\n\t\tconst sum = values.reduce((a, b) => a + b, 0);\r\n\t\treturn (sum / values.length).toFixed(2);\r\n\t};\r\n\r\n\tconst getAttributeDesc = attr => {\r\n\t\tconst descMap = {\r\n\t\t\tPPG: \"场均得分\",\r\n\t\t\tAPG: \"场均助攻\",\r\n\t\t\tRPG: \"场均篮板\",\r\n\t\t\t\"FG%\": \"投篮命中率\",\r\n\t\t\t\"3P%\": \"三分命中率\",\r\n\t\t\t\"FT%\": \"罚球命中率\"\r\n\t\t};\r\n\t\treturn descMap[attr] || \"\";\r\n\t};\r\n</script>\r\n\r\n<style scoped>\r\n\t.compare-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\r\n\t.table-grid {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: 1fr 1fr 1fr;\r\n\t\tgap: 1px;\r\n\t\tbackground: #eee;\r\n\t\tflex: 1;\r\n\t}\r\n\r\n\t.header {\r\n\t\tpadding: 12px;\r\n\t\tbackground: #f8f9fa;\r\n\t\tfont-weight: 500;\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t.cell {\r\n\t\tpadding: 16px;\r\n\t\tbackground: white;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t}\r\n\r\n\t.left-column {\r\n\t\tborder-right: 1px solid #eee;\r\n\t}\r\n\r\n\t.right-column {\r\n\t\tborder-left: 1px solid #eee;\r\n\t}\r\n\r\n\t.attribute-name {\r\n\t\tfont-weight: 500;\r\n\t\tmargin-bottom: 4px;\r\n\t}\r\n\r\n\t.attribute-desc {\r\n\t\tfont-size: 0.8em;\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.stats-summary {\r\n\t\tmargin-top: 8px;\r\n\t\tfont-size: 0.9em;\r\n\t\tcolor: #333;\r\n\t}\r\n\r\n\t.empty-state {\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\theight: 100%;\r\n\t\tcolor: #999;\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,KAAK,EAAC;AAAmB;;EAD/BC,GAAA;EAEsBD,KAAK,EAAC;;;EAEpBA,KAAK,EAAC;AAAoB;gEAC/BE,mBAAA,CAA4C;EAAvCF,KAAK,EAAC;AAAsB,GAAC,MAAI;;EACjCA,KAAK,EAAC;AAAqB;;EAI1BA,KAAK,EAAC;AAAkB;;EAEvBA,KAAK,EAAC;AAAe;;EAKtBA,KAAK,EAAC;AAAoB;;EACzBA,KAAK,EAAC;AAAgB;;EACtBA,KAAK,EAAC;AAAgB;;EAGvBA,KAAK,EAAC;AAAmB;;EAExBA,KAAK,EAAC;AAAe;;EAxB/BC,GAAA;EA8BcD,KAAK,EAAC;;;uBA7BnBG,mBAAA,CA8BM,OA9BNC,UA8BM,GA7BMC,MAAA,CAAAC,OAAO,I,cAAlBH,mBAAA,CA2BM,OA3BNI,UA2BM,GA1BLC,mBAAA,QAAW,EACXN,mBAAA,CAAsD,OAAtDO,UAAsD,EAAAC,gBAAA,CAAnBL,MAAA,CAAAM,UAAU,kBAC7CC,UAA4C,EAC5CV,mBAAA,CAAuD,OAAvDW,UAAuD,EAAAH,gBAAA,CAAnBL,MAAA,CAAAS,UAAU,kBAE9CN,mBAAA,SAAY,G,kBACZL,mBAAA,CAmBWY,SAAA,QA5BdC,WAAA,CAS4BX,MAAA,CAAAY,gBAAgB,EAAxBC,IAAI;yBATxBf,mBAAA,CAAAY,SAAA;MAAAd,GAAA,EASoDiB;IAAI,IACpDhB,mBAAA,CAKM,OALNiB,UAKM,GAJLC,YAAA,CAAkEf,MAAA;MAAjDgB,IAAI,EAAEhB,MAAA,CAAAiB,gBAAgB,CAACjB,MAAA,CAAAkB,eAAe,EAAEL,IAAI;uCAC7DhB,mBAAA,CAEM,OAFNsB,UAEM,EAFqB,OACtB,GAAAd,gBAAA,CAAGL,MAAA,CAAAoB,UAAU,CAACpB,MAAA,CAAAkB,eAAe,CAACF,IAAI,CAACH,IAAI,mB,GAI7ChB,mBAAA,CAGM,OAHNwB,UAGM,GAFLxB,mBAAA,CAA4C,OAA5CyB,UAA4C,EAAAjB,gBAAA,CAAbQ,IAAI,kBACnChB,mBAAA,CAA8D,OAA9D0B,WAA8D,EAAAlB,gBAAA,CAA/BL,MAAA,CAAAwB,gBAAgB,CAACX,IAAI,kB,GAGrDhB,mBAAA,CAKM,OALN4B,WAKM,GAJLV,YAAA,CAAkEf,MAAA;MAAjDgB,IAAI,EAAEhB,MAAA,CAAAiB,gBAAgB,CAACjB,MAAA,CAAA0B,eAAe,EAAEb,IAAI;uCAC7DhB,mBAAA,CAEM,OAFN8B,WAEM,EAFqB,OACtB,GAAAtB,gBAAA,CAAGL,MAAA,CAAAoB,UAAU,CAACpB,MAAA,CAAA0B,eAAe,CAACV,IAAI,CAACH,IAAI,mB;qDAK/Cf,mBAAA,CAAuD,OAAvD8B,WAAuD,EAAvB,mBAAiB,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}