{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { ref, computed, onMounted } from \"vue\";\nimport SimpleChart from \"./SimpleChart.vue\";\nimport FullChart from \"./FullChart.vue\";\nimport bus from \"@/js/eventBus.js\";\nexport default {\n  __name: 'CompareTable',\n  props: {\n    div1RawData: Object,\n    div3RawData: Object\n  },\n  emits: [\"compareAttribute\"],\n  setup(__props, _ref) {\n    let {\n      expose: __expose,\n      emit: __emit\n    } = _ref;\n    __expose();\n    const props = __props;\n    const emit = __emit;\n\n    // 状态变量\n    const leftInfobox = ref({\n      title: \"\",\n      type: \"\",\n      data: {}\n    });\n    const rightInfobox = ref({\n      title: \"\",\n      type: \"\",\n      data: {}\n    });\n    const showFullChartModal = ref(false);\n    const currentChart = ref({\n      title: \"\",\n      field: {},\n      data: []\n    });\n    const showSortingHeatmap = ref(true);\n\n    // 可比较字段配置\n    const COMPARABLE_FIELDS = [{\n      key: \"GDP\",\n      type: \"number\",\n      typeLabel: \"数值(万亿美元)\",\n      visualization: \"bar-chart\",\n      legend: \"国内生产总值（单位：万亿美元）\"\n    }, {\n      key: \"Population\",\n      type: \"number\",\n      typeLabel: \"数值(人)\",\n      visualization: \"bar-chart\",\n      legend: \"人口数量（单位：亿人）\"\n    }, {\n      key: \"GDP growth\",\n      type: \"percentage\",\n      typeLabel: \"百分比(%)\",\n      visualization: \"line-chart\",\n      legend: \"GDP年增长率（%）\"\n    }, {\n      key: \"Inflation (CPI)\",\n      type: \"percentage\",\n      typeLabel: \"百分比(%)\",\n      visualization: \"pie-chart\",\n      legend: \"消费者价格指数变化\"\n    }, {\n      key: \"Labor force by occupation\",\n      type: \"percentage\",\n      typeLabel: \"百分比(%)\",\n      visualization: \"pie-chart\",\n      legend: \"劳动力分布比例\"\n    }, {\n      key: \"GDP rank\",\n      type: \"text\",\n      typeLabel: \"文本\",\n      visualization: \"text-only\",\n      legend: \"全球GDP排名\"\n    }];\n\n    // 调试数据导出\n    const exportDebugData = () => {\n      const debugData = {\n        timestamp: new Date().toISOString(),\n        leftInfobox: JSON.parse(JSON.stringify(leftInfobox.value)),\n        rightInfobox: JSON.parse(JSON.stringify(rightInfobox.value)),\n        comparableFields: comparableFields.value,\n        sortedFields: sortedFieldsWithScores.value.map(f => ({\n          ...f,\n          leftValue: getField(leftInfobox.value, f.key),\n          rightValue: getField(rightInfobox.value, f.key)\n        }))\n      };\n      console.log(\"DEBUG DATA:\", debugData);\n      const blob = new Blob([JSON.stringify(debugData, null, 2)], {\n        type: \"application/json\"\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = `comparison-debug-${new Date().getTime()}.json`;\n      a.click();\n    };\n\n    // 获取字段原始值（用于调试显示）\n    const getFieldValue = (infobox, fieldKey) => {\n      if (!infobox?.data) return \"N/A\";\n      const deepSearch = sections => {\n        for (const section of Object.values(sections)) {\n          if (section[fieldKey] !== undefined) {\n            return section[fieldKey];\n          }\n          if (section.children) {\n            const result = deepSearch(section.children);\n            if (result !== undefined) return result;\n          }\n        }\n        return \"N/A\";\n      };\n      return deepSearch(infobox.data) || \"N/A\";\n    };\n\n    // 增强版getField函数（带数据清洗和调试）\n    const getField = (infobox, fieldKey) => {\n      if (!infobox?.data) {\n        console.warn(`[${fieldKey}] infobox数据为空`);\n        return [];\n      }\n\n      // 深度搜索字段\n      const deepSearch = sections => {\n        for (const section of Object.values(sections)) {\n          if (section[fieldKey] !== undefined) {\n            // 数据清洗逻辑\n            const rawValue = section[fieldKey];\n            let cleanedValue = String(rawValue).replace(/\\(.*?\\)/g, \"\") // 移除括号内容\n            .replace(/[^\\d.-]/g, \"\") // 保留数字、小数点和负号\n            .trim();\n\n            // 处理百分比值\n            if (fieldKey.toLowerCase().includes(\"growth\") || fieldKey.toLowerCase().includes(\"inflation\")) {\n              cleanedValue = cleanedValue.replace(/%/g, \"\");\n            }\n\n            // 处理货币值\n            if (fieldKey.toLowerCase().includes(\"gdp\")) {\n              cleanedValue = cleanedValue.replace(/[^\\d.-]/g, \"\");\n            }\n            const numericValue = parseFloat(cleanedValue);\n            console.log(`[${fieldKey}] 原始值: \"${rawValue}\" → 清洗后: \"${cleanedValue}\" → 数值: ${numericValue}`);\n            return isNaN(numericValue) ? [] : [numericValue];\n          }\n          if (section.children) {\n            const result = deepSearch(section.children);\n            if (result.length) return result;\n          }\n        }\n        return [];\n      };\n      const result = deepSearch(infobox.data);\n      if (!result.length) {\n        console.warn(`[${fieldKey}] 未找到有效数据`);\n      }\n      return result;\n    };\n\n    // 计算差异分数（带完整调试）\n    const calculateDifferenceScore = field => {\n      const leftData = getField(leftInfobox.value, field.key);\n      const rightData = getField(rightInfobox.value, field.key);\n      console.groupCollapsed(`[SCORE] 计算字段: ${field.key}`);\n      console.log(\"左侧数据:\", leftData, \"原始值:\", getFieldValue(leftInfobox.value, field.key));\n      console.log(\"右侧数据:\", rightData, \"原始值:\", getFieldValue(rightInfobox.value, field.key));\n      let score = 0;\n      try {\n        if (!leftData.length || !rightData.length) {\n          console.warn(\"数据不全，返回0分\");\n          return 0;\n        }\n\n        // 文本类型处理\n        if (field.type === \"text\") {\n          const leftVal = getFieldValue(leftInfobox.value, field.key);\n          const rightVal = getFieldValue(rightInfobox.value, field.key);\n          score = leftVal === rightVal ? 1 : 5;\n          console.log(`文本比较: \"${leftVal}\" vs \"${rightVal}\" → 得分: ${score}`);\n          return score;\n        }\n\n        // 数值类型处理\n        const leftVal = leftData[0];\n        const rightVal = rightData[0];\n        console.log(`解析数值: ${leftVal} vs ${rightVal}`);\n        const absDiff = Math.abs(leftVal - rightVal);\n        console.log(`绝对差异: ${absDiff}`);\n\n        // 获取权重\n        const weight = getFieldWeight(field.key);\n        console.log(`字段权重: ${weight}`);\n\n        // 基础得分\n        score = 10 + absDiff * weight;\n        console.log(`基础得分: ${score}`);\n\n        // 趋势判断\n        if (leftVal > 0 && rightVal < 0 || leftVal < 0 && rightVal > 0) {\n          score += 50;\n          console.log(\"趋势相反 +50\");\n        } else if (leftVal > 0 && rightVal > 0 || leftVal < 0 && rightVal < 0) {\n          console.log(\"趋势相同\");\n        }\n\n        // 特殊比例\n        if (field.key.toLowerCase().includes(\"per capita\") || field.key.toLowerCase().includes(\"ratio\")) {\n          score += 30;\n          console.log(\"特殊比例 +30\");\n        }\n      } catch (e) {\n        console.error(\"计算分数时出错:\", e);\n        score = 0;\n      }\n      console.log(`最终得分: ${score}`);\n      console.groupEnd();\n      return score;\n    };\n\n    // 增强字段权重匹配\n    const getFieldWeight = fieldKey => {\n      const weightMap = {\n        gdp: 2.0,\n        population: 1.5,\n        growth: 1.8,\n        inflation: 1.3,\n        labor: 1.2,\n        \"per capita\": 1.6,\n        ratio: 1.4,\n        rank: 0.8 // 排名类权重较低\n      };\n      const lowerKey = fieldKey.toLowerCase();\n      for (const [keyword, weight] of Object.entries(weightMap)) {\n        if (lowerKey.includes(keyword)) {\n          console.log(`权重匹配: ${fieldKey} → ${keyword} (${weight})`);\n          return weight;\n        }\n      }\n      return 1;\n    };\n\n    // 热力图颜色计算\n    const getHeatmapColor = score => {\n      const maxScore = 100;\n      const ratio = Math.min(Math.max(score, 0) / maxScore, 1);\n      const hue = (1 - ratio) * 120; // 绿色(120)到红色(0)\n      return `hsl(${hue}, 80%, ${85 - ratio * 25}%)`;\n    };\n\n    // 计算带分数的排序字段\n    const sortedFieldsWithScores = computed(() => {\n      if (!comparableFields.value.length) return [];\n      const fieldsWithScores = comparableFields.value.map(field => {\n        const score = calculateDifferenceScore(field);\n        return {\n          ...field,\n          score: score,\n          leftValue: getFieldValue(leftInfobox.value, field.key),\n          rightValue: getFieldValue(rightInfobox.value, field.key)\n        };\n      });\n\n      // 排序规则：数值类型 > 文本类型，同类型按分数降序\n      return fieldsWithScores.sort((a, b) => {\n        if (a.type !== \"text\" && b.type === \"text\") return -1;\n        if (a.type === \"text\" && b.type !== \"text\") return 1;\n        return b.score - a.score;\n      });\n    });\n\n    // 不带调试信息的排序字段\n    const sortedFields = computed(() => {\n      return sortedFieldsWithScores.value.map(_ref2 => {\n        let {\n          score,\n          leftValue,\n          rightValue,\n          ...rest\n        } = _ref2;\n        return rest;\n      });\n    });\n\n    // 可比较字段过滤\n    const comparableFields = computed(() => {\n      return COMPARABLE_FIELDS.filter(field => {\n        const leftVal = getField(leftInfobox.value, field.key);\n        const rightVal = getField(rightInfobox.value, field.key);\n        const hasData = leftVal.length > 0 || rightVal.length > 0;\n        if (!hasData) {\n          console.warn(`[${field.key}] 无有效数据，已过滤`);\n        }\n        return hasData;\n      });\n    });\n\n    // 其余原有方法保持不变\n    const showFullChart = (infobox, field) => {\n      currentChart.value = {\n        title: infobox.title,\n        field: field,\n        data: getField(infobox, field.key)\n      };\n      showFullChartModal.value = true;\n    };\n    const closeFullChart = () => {\n      showFullChartModal.value = false;\n    };\n    const hoverInfobox = (infobox, fieldKey, side) => {\n      bus.emit(`hover-${side}-infobox`, {\n        fieldKey,\n        infoboxTitle: infobox.title\n      });\n      const divId = side === \"left\" ? \"div1\" : \"div3\";\n      bus.emit(`highlight-${divId}-paragraphs`, fieldKey);\n    };\n    const unhoverInfobox = side => {\n      bus.emit(`unhover-${side}-infobox`);\n      const divId = side === \"left\" ? \"div1\" : \"div3\";\n      bus.emit(`clear-${divId}-highlights`);\n    };\n    const hoverBothInfoboxes = fieldKey => {\n      hoverInfobox(leftInfobox.value, fieldKey, \"left\");\n      hoverInfobox(rightInfobox.value, fieldKey, \"right\");\n    };\n    const unhoverBothInfoboxes = () => {\n      unhoverInfobox(\"left\");\n      unhoverInfobox(\"right\");\n    };\n    const handleMiddleColumnClick = field => {\n      emit(\"compareAttribute\", {\n        fieldKey: field.key,\n        leftData: getField(leftInfobox.value, field.key),\n        rightData: getField(rightInfobox.value, field.key),\n        leftTitle: leftInfobox.value.title,\n        rightTitle: rightInfobox.value.title,\n        fieldType: field.type,\n        fieldLabel: field.typeLabel\n      });\n      bus.emit(\"highlight-div1-paragraphs\", field.key);\n      bus.emit(\"highlight-div3-paragraphs\", field.key);\n    };\n    const showCombinedChart = field => {\n      const leftData = getField(leftInfobox.value, field.key);\n      const rightData = getField(rightInfobox.value, field.key);\n      currentChart.value = {\n        title: `合并图表 - ${field.key}`,\n        field: field,\n        data: [...leftData, ...rightData]\n      };\n      showFullChartModal.value = true;\n    };\n    const processInfoboxData = data => {\n      if (!data) return {\n        title: \"\",\n        type: \"\",\n        data: {}\n      };\n      return {\n        title: data.title || \"无标题\",\n        type: data.type || \"未知类型\",\n        data: data.sections || {}\n      };\n    };\n    onMounted(() => {\n      bus.on(\"div1_InfoboxData\", data => {\n        console.log(\"接收到左侧Infobox数据:\", data);\n        leftInfobox.value = processInfoboxData(data);\n      });\n      bus.on(\"div3_InfoboxData\", data => {\n        console.log(\"接收到右侧Infobox数据:\", data);\n        rightInfobox.value = processInfoboxData(data);\n      });\n    });\n    const __returned__ = {\n      props,\n      emit,\n      leftInfobox,\n      rightInfobox,\n      showFullChartModal,\n      currentChart,\n      showSortingHeatmap,\n      COMPARABLE_FIELDS,\n      exportDebugData,\n      getFieldValue,\n      getField,\n      calculateDifferenceScore,\n      getFieldWeight,\n      getHeatmapColor,\n      sortedFieldsWithScores,\n      sortedFields,\n      comparableFields,\n      showFullChart,\n      closeFullChart,\n      hoverInfobox,\n      unhoverInfobox,\n      hoverBothInfoboxes,\n      unhoverBothInfoboxes,\n      handleMiddleColumnClick,\n      showCombinedChart,\n      processInfoboxData,\n      ref,\n      computed,\n      onMounted,\n      SimpleChart,\n      FullChart,\n      get bus() {\n        return bus;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","SimpleChart","FullChart","bus","props","__props","emit","__emit","leftInfobox","title","type","data","rightInfobox","showFullChartModal","currentChart","field","showSortingHeatmap","COMPARABLE_FIELDS","key","typeLabel","visualization","legend","exportDebugData","debugData","timestamp","Date","toISOString","JSON","parse","stringify","value","comparableFields","sortedFields","sortedFieldsWithScores","map","f","leftValue","getField","rightValue","console","log","blob","Blob","url","URL","createObjectURL","a","document","createElement","href","download","getTime","click","getFieldValue","infobox","fieldKey","deepSearch","sections","section","Object","values","undefined","children","result","warn","rawValue","cleanedValue","String","replace","trim","toLowerCase","includes","numericValue","parseFloat","isNaN","length","calculateDifferenceScore","leftData","rightData","groupCollapsed","score","leftVal","rightVal","absDiff","Math","abs","weight","getFieldWeight","e","error","groupEnd","weightMap","gdp","population","growth","inflation","labor","ratio","rank","lowerKey","keyword","entries","getHeatmapColor","maxScore","min","max","hue","fieldsWithScores","sort","b","_ref2","rest","filter","hasData","showFullChart","closeFullChart","hoverInfobox","side","infoboxTitle","divId","unhoverInfobox","hoverBothInfoboxes","unhoverBothInfoboxes","handleMiddleColumnClick","leftTitle","rightTitle","fieldType","fieldLabel","showCombinedChart","processInfoboxData","on"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/CompareTable.vue"],"sourcesContent":["<template>\r\n\t<div class=\"compare-container\">\r\n\t\t<!-- 排序热力图开关 -->\r\n\t\t<div class=\"heatmap-control\">\r\n\t\t\t<button @click=\"showSortingHeatmap = !showSortingHeatmap\">\r\n\t\t\t\t{{ showSortingHeatmap ? \"隐藏\" : \"显示\" }}排序热力图\r\n\t\t\t</button>\r\n\t\t\t<button @click=\"exportDebugData\" class=\"debug-btn\">导出调试数据</button>\r\n\t\t</div>\r\n\r\n\t\t<!-- 排序热力图可视化 -->\r\n\t\t<div class=\"sorting-heatmap\" v-if=\"showSortingHeatmap\">\r\n\t\t\t<div class=\"heatmap-header\">\r\n\t\t\t\t<span>排序</span>\r\n\t\t\t\t<span>属性</span>\r\n\t\t\t\t<span>类型</span>\r\n\t\t\t\t<span>差异分数</span>\r\n\t\t\t\t<span>权重</span>\r\n\t\t\t\t<span>左侧值</span>\r\n\t\t\t\t<span>右侧值</span>\r\n\t\t\t</div>\r\n\t\t\t<div\r\n\t\t\t\tclass=\"heatmap-row\"\r\n\t\t\t\tv-for=\"(field, index) in sortedFieldsWithScores\"\r\n\t\t\t\t:key=\"field.key\"\r\n\t\t\t\t:style=\"{\r\n\t\t\t\t\tbackgroundColor: getHeatmapColor(field.score),\r\n\t\t\t\t\tborderLeft: `4px solid ${getHeatmapColor(field.score)}`\r\n\t\t\t\t}\">\r\n\t\t\t\t<span class=\"field-rank\">{{ index + 1 }}</span>\r\n\t\t\t\t<span class=\"field-name\">{{ field.key }}</span>\r\n\t\t\t\t<span class=\"field-type\">{{ field.typeLabel }}</span>\r\n\t\t\t\t<span class=\"field-score\">{{ field.score.toFixed(1) }}</span>\r\n\t\t\t\t<span class=\"field-weight\">{{\r\n\t\t\t\t\tgetFieldWeight(field.key).toFixed(1)\r\n\t\t\t\t}}</span>\r\n\t\t\t\t<span class=\"field-value\">{{\r\n\t\t\t\t\tgetFieldValue(leftInfobox, field.key)\r\n\t\t\t\t}}</span>\r\n\t\t\t\t<span class=\"field-value\">{{\r\n\t\t\t\t\tgetFieldValue(rightInfobox, field.key)\r\n\t\t\t\t}}</span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- 主对比表格 -->\r\n\t\t<div class=\"comparison-grid\">\r\n\t\t\t<div class=\"header left-column\">\r\n\t\t\t\t{{ leftInfobox.title }}\r\n\t\t\t</div>\r\n\t\t\t<div class=\"header middle-column\">对比属性</div>\r\n\t\t\t<div class=\"header right-column\">\r\n\t\t\t\t{{ rightInfobox.title }}\r\n\t\t\t</div>\r\n\r\n\t\t\t<template v-for=\"field in sortedFields\" :key=\"field.key\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell left-column\"\r\n\t\t\t\t\t@mouseover=\"hoverInfobox(leftInfobox, field.key, 'left')\"\r\n\t\t\t\t\t@mouseout=\"unhoverInfobox('left')\"\r\n\t\t\t\t\t@click=\"showFullChart(leftInfobox, field)\">\r\n\t\t\t\t\t<SimpleChart\r\n\t\t\t\t\t\t:field=\"getField(leftInfobox, field.key)\"\r\n\t\t\t\t\t\t:type=\"field.type\"\r\n\t\t\t\t\t\t:visualization=\"field.visualization\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell middle-column\"\r\n\t\t\t\t\t@mouseover=\"hoverBothInfoboxes(field.key)\"\r\n\t\t\t\t\t@mouseout=\"unhoverBothInfoboxes()\">\r\n\t\t\t\t\t<div class=\"field-name\">{{ field.key }}</div>\r\n\t\t\t\t\t<div class=\"field-type\">{{ field.typeLabel }}</div>\r\n\t\t\t\t\t<div class=\"icon-actions\">\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tclass=\"icon-btn compare\"\r\n\t\t\t\t\t\t\ttitle=\"对比分析\"\r\n\t\t\t\t\t\t\t@click=\"handleMiddleColumnClick(field)\">\r\n\t\t\t\t\t\t\t⚖️\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tclass=\"icon-btn merge\"\r\n\t\t\t\t\t\t\ttitle=\"合并图表\"\r\n\t\t\t\t\t\t\t@click=\"showCombinedChart(field)\">\r\n\t\t\t\t\t\t\t📊\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell right-column\"\r\n\t\t\t\t\t@mouseover=\"hoverInfobox(rightInfobox, field.key, 'right')\"\r\n\t\t\t\t\t@mouseout=\"unhoverInfobox('right')\"\r\n\t\t\t\t\t@click=\"showFullChart(rightInfobox, field)\">\r\n\t\t\t\t\t<SimpleChart\r\n\t\t\t\t\t\t:field=\"getField(rightInfobox, field.key)\"\r\n\t\t\t\t\t\t:type=\"field.type\"\r\n\t\t\t\t\t\t:visualization=\"field.visualization\" />\r\n\t\t\t\t</div>\r\n\t\t\t</template>\r\n\t\t</div>\r\n\r\n\t\t<!-- 全屏图表模态框 -->\r\n\t\t<div\r\n\t\t\tv-if=\"showFullChartModal\"\r\n\t\t\tclass=\"full-chart-modal\"\r\n\t\t\t@click.self=\"closeFullChart\">\r\n\t\t\t<div class=\"modal-content\">\r\n\t\t\t\t<button class=\"close-btn\" @click=\"closeFullChart\">×</button>\r\n\t\t\t\t<h3>{{ currentChart.title }} - {{ currentChart.field.key }}</h3>\r\n\t\t\t\t<div class=\"chart-container\">\r\n\t\t\t\t\t<FullChart\r\n\t\t\t\t\t\t:field=\"currentChart.data\"\r\n\t\t\t\t\t\t:type=\"currentChart.field.type\"\r\n\t\t\t\t\t\t:visualization=\"currentChart.field.visualization\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"chart-legend\" v-if=\"currentChart.field.legend\">\r\n\t\t\t\t\t{{ currentChart.field.legend }}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, onMounted } from \"vue\";\r\n\timport SimpleChart from \"./SimpleChart.vue\";\r\n\timport FullChart from \"./FullChart.vue\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdiv1RawData: Object,\r\n\t\tdiv3RawData: Object\r\n\t});\r\n\r\n\tconst emit = defineEmits([\"compareAttribute\"]);\r\n\r\n\t// 状态变量\r\n\tconst leftInfobox = ref({ title: \"\", type: \"\", data: {} });\r\n\tconst rightInfobox = ref({ title: \"\", type: \"\", data: {} });\r\n\tconst showFullChartModal = ref(false);\r\n\tconst currentChart = ref({\r\n\t\ttitle: \"\",\r\n\t\tfield: {},\r\n\t\tdata: []\r\n\t});\r\n\tconst showSortingHeatmap = ref(true);\r\n\r\n\t// 可比较字段配置\r\n\tconst COMPARABLE_FIELDS = [\r\n\t\t{\r\n\t\t\tkey: \"GDP\",\r\n\t\t\ttype: \"number\",\r\n\t\t\ttypeLabel: \"数值(万亿美元)\",\r\n\t\t\tvisualization: \"bar-chart\",\r\n\t\t\tlegend: \"国内生产总值（单位：万亿美元）\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Population\",\r\n\t\t\ttype: \"number\",\r\n\t\t\ttypeLabel: \"数值(人)\",\r\n\t\t\tvisualization: \"bar-chart\",\r\n\t\t\tlegend: \"人口数量（单位：亿人）\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"GDP growth\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"line-chart\",\r\n\t\t\tlegend: \"GDP年增长率（%）\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Inflation (CPI)\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"pie-chart\",\r\n\t\t\tlegend: \"消费者价格指数变化\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Labor force by occupation\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"pie-chart\",\r\n\t\t\tlegend: \"劳动力分布比例\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"GDP rank\",\r\n\t\t\ttype: \"text\",\r\n\t\t\ttypeLabel: \"文本\",\r\n\t\t\tvisualization: \"text-only\",\r\n\t\t\tlegend: \"全球GDP排名\"\r\n\t\t}\r\n\t];\r\n\r\n\t// 调试数据导出\r\n\tconst exportDebugData = () => {\r\n\t\tconst debugData = {\r\n\t\t\ttimestamp: new Date().toISOString(),\r\n\t\t\tleftInfobox: JSON.parse(JSON.stringify(leftInfobox.value)),\r\n\t\t\trightInfobox: JSON.parse(JSON.stringify(rightInfobox.value)),\r\n\t\t\tcomparableFields: comparableFields.value,\r\n\t\t\tsortedFields: sortedFieldsWithScores.value.map(f => ({\r\n\t\t\t\t...f,\r\n\t\t\t\tleftValue: getField(leftInfobox.value, f.key),\r\n\t\t\t\trightValue: getField(rightInfobox.value, f.key)\r\n\t\t\t}))\r\n\t\t};\r\n\t\tconsole.log(\"DEBUG DATA:\", debugData);\r\n\t\tconst blob = new Blob([JSON.stringify(debugData, null, 2)], {\r\n\t\t\ttype: \"application/json\"\r\n\t\t});\r\n\t\tconst url = URL.createObjectURL(blob);\r\n\t\tconst a = document.createElement(\"a\");\r\n\t\ta.href = url;\r\n\t\ta.download = `comparison-debug-${new Date().getTime()}.json`;\r\n\t\ta.click();\r\n\t};\r\n\r\n\t// 获取字段原始值（用于调试显示）\r\n\tconst getFieldValue = (infobox, fieldKey) => {\r\n\t\tif (!infobox?.data) return \"N/A\";\r\n\r\n\t\tconst deepSearch = sections => {\r\n\t\t\tfor (const section of Object.values(sections)) {\r\n\t\t\t\tif (section[fieldKey] !== undefined) {\r\n\t\t\t\t\treturn section[fieldKey];\r\n\t\t\t\t}\r\n\t\t\t\tif (section.children) {\r\n\t\t\t\t\tconst result = deepSearch(section.children);\r\n\t\t\t\t\tif (result !== undefined) return result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn \"N/A\";\r\n\t\t};\r\n\r\n\t\treturn deepSearch(infobox.data) || \"N/A\";\r\n\t};\r\n\r\n\t// 增强版getField函数（带数据清洗和调试）\r\n\tconst getField = (infobox, fieldKey) => {\r\n\t\tif (!infobox?.data) {\r\n\t\t\tconsole.warn(`[${fieldKey}] infobox数据为空`);\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\t// 深度搜索字段\r\n\t\tconst deepSearch = sections => {\r\n\t\t\tfor (const section of Object.values(sections)) {\r\n\t\t\t\tif (section[fieldKey] !== undefined) {\r\n\t\t\t\t\t// 数据清洗逻辑\r\n\t\t\t\t\tconst rawValue = section[fieldKey];\r\n\t\t\t\t\tlet cleanedValue = String(rawValue)\r\n\t\t\t\t\t\t.replace(/\\(.*?\\)/g, \"\") // 移除括号内容\r\n\t\t\t\t\t\t.replace(/[^\\d.-]/g, \"\") // 保留数字、小数点和负号\r\n\t\t\t\t\t\t.trim();\r\n\r\n\t\t\t\t\t// 处理百分比值\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tfieldKey.toLowerCase().includes(\"growth\") ||\r\n\t\t\t\t\t\tfieldKey.toLowerCase().includes(\"inflation\")\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tcleanedValue = cleanedValue.replace(/%/g, \"\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 处理货币值\r\n\t\t\t\t\tif (fieldKey.toLowerCase().includes(\"gdp\")) {\r\n\t\t\t\t\t\tcleanedValue = cleanedValue.replace(/[^\\d.-]/g, \"\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst numericValue = parseFloat(cleanedValue);\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t`[${fieldKey}] 原始值: \"${rawValue}\" → 清洗后: \"${cleanedValue}\" → 数值: ${numericValue}`\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\treturn isNaN(numericValue) ? [] : [numericValue];\r\n\t\t\t\t}\r\n\t\t\t\tif (section.children) {\r\n\t\t\t\t\tconst result = deepSearch(section.children);\r\n\t\t\t\t\tif (result.length) return result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn [];\r\n\t\t};\r\n\r\n\t\tconst result = deepSearch(infobox.data);\r\n\t\tif (!result.length) {\r\n\t\t\tconsole.warn(`[${fieldKey}] 未找到有效数据`);\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\t// 计算差异分数（带完整调试）\r\n\tconst calculateDifferenceScore = field => {\r\n\t\tconst leftData = getField(leftInfobox.value, field.key);\r\n\t\tconst rightData = getField(rightInfobox.value, field.key);\r\n\r\n\t\tconsole.groupCollapsed(`[SCORE] 计算字段: ${field.key}`);\r\n\t\tconsole.log(\r\n\t\t\t\"左侧数据:\",\r\n\t\t\tleftData,\r\n\t\t\t\"原始值:\",\r\n\t\t\tgetFieldValue(leftInfobox.value, field.key)\r\n\t\t);\r\n\t\tconsole.log(\r\n\t\t\t\"右侧数据:\",\r\n\t\t\trightData,\r\n\t\t\t\"原始值:\",\r\n\t\t\tgetFieldValue(rightInfobox.value, field.key)\r\n\t\t);\r\n\r\n\t\tlet score = 0;\r\n\t\ttry {\r\n\t\t\tif (!leftData.length || !rightData.length) {\r\n\t\t\t\tconsole.warn(\"数据不全，返回0分\");\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\r\n\t\t\t// 文本类型处理\r\n\t\t\tif (field.type === \"text\") {\r\n\t\t\t\tconst leftVal = getFieldValue(leftInfobox.value, field.key);\r\n\t\t\t\tconst rightVal = getFieldValue(rightInfobox.value, field.key);\r\n\t\t\t\tscore = leftVal === rightVal ? 1 : 5;\r\n\t\t\t\tconsole.log(`文本比较: \"${leftVal}\" vs \"${rightVal}\" → 得分: ${score}`);\r\n\t\t\t\treturn score;\r\n\t\t\t}\r\n\r\n\t\t\t// 数值类型处理\r\n\t\t\tconst leftVal = leftData[0];\r\n\t\t\tconst rightVal = rightData[0];\r\n\t\t\tconsole.log(`解析数值: ${leftVal} vs ${rightVal}`);\r\n\r\n\t\t\tconst absDiff = Math.abs(leftVal - rightVal);\r\n\t\t\tconsole.log(`绝对差异: ${absDiff}`);\r\n\r\n\t\t\t// 获取权重\r\n\t\t\tconst weight = getFieldWeight(field.key);\r\n\t\t\tconsole.log(`字段权重: ${weight}`);\r\n\r\n\t\t\t// 基础得分\r\n\t\t\tscore = 10 + absDiff * weight;\r\n\t\t\tconsole.log(`基础得分: ${score}`);\r\n\r\n\t\t\t// 趋势判断\r\n\t\t\tif ((leftVal > 0 && rightVal < 0) || (leftVal < 0 && rightVal > 0)) {\r\n\t\t\t\tscore += 50;\r\n\t\t\t\tconsole.log(\"趋势相反 +50\");\r\n\t\t\t} else if (\r\n\t\t\t\t(leftVal > 0 && rightVal > 0) ||\r\n\t\t\t\t(leftVal < 0 && rightVal < 0)\r\n\t\t\t) {\r\n\t\t\t\tconsole.log(\"趋势相同\");\r\n\t\t\t}\r\n\r\n\t\t\t// 特殊比例\r\n\t\t\tif (\r\n\t\t\t\tfield.key.toLowerCase().includes(\"per capita\") ||\r\n\t\t\t\tfield.key.toLowerCase().includes(\"ratio\")\r\n\t\t\t) {\r\n\t\t\t\tscore += 30;\r\n\t\t\t\tconsole.log(\"特殊比例 +30\");\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(\"计算分数时出错:\", e);\r\n\t\t\tscore = 0;\r\n\t\t}\r\n\r\n\t\tconsole.log(`最终得分: ${score}`);\r\n\t\tconsole.groupEnd();\r\n\t\treturn score;\r\n\t};\r\n\r\n\t// 增强字段权重匹配\r\n\tconst getFieldWeight = fieldKey => {\r\n\t\tconst weightMap = {\r\n\t\t\tgdp: 2.0,\r\n\t\t\tpopulation: 1.5,\r\n\t\t\tgrowth: 1.8,\r\n\t\t\tinflation: 1.3,\r\n\t\t\tlabor: 1.2,\r\n\t\t\t\"per capita\": 1.6,\r\n\t\t\tratio: 1.4,\r\n\t\t\trank: 0.8 // 排名类权重较低\r\n\t\t};\r\n\r\n\t\tconst lowerKey = fieldKey.toLowerCase();\r\n\t\tfor (const [keyword, weight] of Object.entries(weightMap)) {\r\n\t\t\tif (lowerKey.includes(keyword)) {\r\n\t\t\t\tconsole.log(`权重匹配: ${fieldKey} → ${keyword} (${weight})`);\r\n\t\t\t\treturn weight;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 1;\r\n\t};\r\n\r\n\t// 热力图颜色计算\r\n\tconst getHeatmapColor = score => {\r\n\t\tconst maxScore = 100;\r\n\t\tconst ratio = Math.min(Math.max(score, 0) / maxScore, 1);\r\n\t\tconst hue = (1 - ratio) * 120; // 绿色(120)到红色(0)\r\n\t\treturn `hsl(${hue}, 80%, ${85 - ratio * 25}%)`;\r\n\t};\r\n\r\n\t// 计算带分数的排序字段\r\n\tconst sortedFieldsWithScores = computed(() => {\r\n\t\tif (!comparableFields.value.length) return [];\r\n\r\n\t\tconst fieldsWithScores = comparableFields.value.map(field => {\r\n\t\t\tconst score = calculateDifferenceScore(field);\r\n\t\t\treturn {\r\n\t\t\t\t...field,\r\n\t\t\t\tscore: score,\r\n\t\t\t\tleftValue: getFieldValue(leftInfobox.value, field.key),\r\n\t\t\t\trightValue: getFieldValue(rightInfobox.value, field.key)\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\t// 排序规则：数值类型 > 文本类型，同类型按分数降序\r\n\t\treturn fieldsWithScores.sort((a, b) => {\r\n\t\t\tif (a.type !== \"text\" && b.type === \"text\") return -1;\r\n\t\t\tif (a.type === \"text\" && b.type !== \"text\") return 1;\r\n\t\t\treturn b.score - a.score;\r\n\t\t});\r\n\t});\r\n\r\n\t// 不带调试信息的排序字段\r\n\tconst sortedFields = computed(() => {\r\n\t\treturn sortedFieldsWithScores.value.map(\r\n\t\t\t({ score, leftValue, rightValue, ...rest }) => rest\r\n\t\t);\r\n\t});\r\n\r\n\t// 可比较字段过滤\r\n\tconst comparableFields = computed(() => {\r\n\t\treturn COMPARABLE_FIELDS.filter(field => {\r\n\t\t\tconst leftVal = getField(leftInfobox.value, field.key);\r\n\t\t\tconst rightVal = getField(rightInfobox.value, field.key);\r\n\t\t\tconst hasData = leftVal.length > 0 || rightVal.length > 0;\r\n\t\t\tif (!hasData) {\r\n\t\t\t\tconsole.warn(`[${field.key}] 无有效数据，已过滤`);\r\n\t\t\t}\r\n\t\t\treturn hasData;\r\n\t\t});\r\n\t});\r\n\r\n\t// 其余原有方法保持不变\r\n\tconst showFullChart = (infobox, field) => {\r\n\t\tcurrentChart.value = {\r\n\t\t\ttitle: infobox.title,\r\n\t\t\tfield: field,\r\n\t\t\tdata: getField(infobox, field.key)\r\n\t\t};\r\n\t\tshowFullChartModal.value = true;\r\n\t};\r\n\r\n\tconst closeFullChart = () => {\r\n\t\tshowFullChartModal.value = false;\r\n\t};\r\n\r\n\tconst hoverInfobox = (infobox, fieldKey, side) => {\r\n\t\tbus.emit(`hover-${side}-infobox`, {\r\n\t\t\tfieldKey,\r\n\t\t\tinfoboxTitle: infobox.title\r\n\t\t});\r\n\r\n\t\tconst divId = side === \"left\" ? \"div1\" : \"div3\";\r\n\t\tbus.emit(`highlight-${divId}-paragraphs`, fieldKey);\r\n\t};\r\n\r\n\tconst unhoverInfobox = side => {\r\n\t\tbus.emit(`unhover-${side}-infobox`);\r\n\t\tconst divId = side === \"left\" ? \"div1\" : \"div3\";\r\n\t\tbus.emit(`clear-${divId}-highlights`);\r\n\t};\r\n\r\n\tconst hoverBothInfoboxes = fieldKey => {\r\n\t\thoverInfobox(leftInfobox.value, fieldKey, \"left\");\r\n\t\thoverInfobox(rightInfobox.value, fieldKey, \"right\");\r\n\t};\r\n\r\n\tconst unhoverBothInfoboxes = () => {\r\n\t\tunhoverInfobox(\"left\");\r\n\t\tunhoverInfobox(\"right\");\r\n\t};\r\n\r\n\tconst handleMiddleColumnClick = field => {\r\n\t\temit(\"compareAttribute\", {\r\n\t\t\tfieldKey: field.key,\r\n\t\t\tleftData: getField(leftInfobox.value, field.key),\r\n\t\t\trightData: getField(rightInfobox.value, field.key),\r\n\t\t\tleftTitle: leftInfobox.value.title,\r\n\t\t\trightTitle: rightInfobox.value.title,\r\n\t\t\tfieldType: field.type,\r\n\t\t\tfieldLabel: field.typeLabel\r\n\t\t});\r\n\r\n\t\tbus.emit(\"highlight-div1-paragraphs\", field.key);\r\n\t\tbus.emit(\"highlight-div3-paragraphs\", field.key);\r\n\t};\r\n\r\n\tconst showCombinedChart = field => {\r\n\t\tconst leftData = getField(leftInfobox.value, field.key);\r\n\t\tconst rightData = getField(rightInfobox.value, field.key);\r\n\r\n\t\tcurrentChart.value = {\r\n\t\t\ttitle: `合并图表 - ${field.key}`,\r\n\t\t\tfield: field,\r\n\t\t\tdata: [...leftData, ...rightData]\r\n\t\t};\r\n\t\tshowFullChartModal.value = true;\r\n\t};\r\n\r\n\tconst processInfoboxData = data => {\r\n\t\tif (!data) return { title: \"\", type: \"\", data: {} };\r\n\t\treturn {\r\n\t\t\ttitle: data.title || \"无标题\",\r\n\t\t\ttype: data.type || \"未知类型\",\r\n\t\t\tdata: data.sections || {}\r\n\t\t};\r\n\t};\r\n\r\n\tonMounted(() => {\r\n\t\tbus.on(\"div1_InfoboxData\", data => {\r\n\t\t\tconsole.log(\"接收到左侧Infobox数据:\", data);\r\n\t\t\tleftInfobox.value = processInfoboxData(data);\r\n\t\t});\r\n\r\n\t\tbus.on(\"div3_InfoboxData\", data => {\r\n\t\t\tconsole.log(\"接收到右侧Infobox数据:\", data);\r\n\t\t\trightInfobox.value = processInfoboxData(data);\r\n\t\t});\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.compare-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tpadding: 8px;\r\n\t\tbox-sizing: border-box;\r\n\t}\r\n\r\n\t/* 热力图控制栏 */\r\n\t.heatmap-control {\r\n\t\tmargin-bottom: 10px;\r\n\t\tdisplay: flex;\r\n\t\tgap: 10px;\r\n\t\tjustify-content: flex-end;\r\n\t}\r\n\r\n\t.heatmap-control button {\r\n\t\tpadding: 6px 12px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tborder-radius: 4px;\r\n\t\tcursor: pointer;\r\n\t\tfont-size: 14px;\r\n\t}\r\n\r\n\t.heatmap-control button.debug-btn {\r\n\t\tbackground: #6a1b9a;\r\n\t}\r\n\r\n\t.heatmap-control button:hover {\r\n\t\topacity: 0.9;\r\n\t}\r\n\r\n\t/* 热力图样式 */\r\n\t.sorting-heatmap {\r\n\t\tmargin-bottom: 20px;\r\n\t\tborder: 1px solid #eee;\r\n\t\tborder-radius: 8px;\r\n\t\toverflow: hidden;\r\n\t\tbox-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n\t\tfont-size: 14px;\r\n\t}\r\n\r\n\t.heatmap-header {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: 50px 2fr 1fr 1fr 1fr 1fr 1fr;\r\n\t\tpadding: 8px 12px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tfont-weight: bold;\r\n\t}\r\n\r\n\t.heatmap-row {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: 50px 2fr 1fr 1fr 1fr 1fr 1fr;\r\n\t\tpadding: 8px 12px;\r\n\t\tborder-bottom: 1px solid #eee;\r\n\t\ttransition: all 0.3s;\r\n\t\talign-items: center;\r\n\t}\r\n\r\n\t.heatmap-row:hover {\r\n\t\ttransform: scale(1.01);\r\n\t\tbox-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n\t\tz-index: 1;\r\n\t}\r\n\r\n\t.field-rank {\r\n\t\tfont-weight: bold;\r\n\t\tcolor: #2c3e50;\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t.field-name {\r\n\t\tfont-weight: bold;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t}\r\n\r\n\t.field-type {\r\n\t\tcolor: #666;\r\n\t\tfont-size: 13px;\r\n\t}\r\n\r\n\t.field-score {\r\n\t\ttext-align: right;\r\n\t\tfont-family: monospace;\r\n\t\tfont-weight: bold;\r\n\t}\r\n\r\n\t.field-weight {\r\n\t\ttext-align: right;\r\n\t\tfont-family: monospace;\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.field-value {\r\n\t\ttext-align: right;\r\n\t\tfont-family: monospace;\r\n\t\tfont-size: 13px;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t}\r\n\r\n\t/* 原有表格样式保持不变 */\r\n\t.comparison-grid {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns:\r\n\t\t\tminmax(120px, 1fr)\r\n\t\t\tminmax(80px, 100px)\r\n\t\t\tminmax(120px, 1fr);\r\n\t\twidth: 100%;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t\tborder-radius: 4px;\r\n\t\toverflow: hidden;\r\n\t\tmax-height: 500px;\r\n\t\toverflow-y: auto;\r\n\t}\r\n\r\n\t.header {\r\n\t\tpadding: 8px 6px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n\t\tposition: sticky;\r\n\t\ttop: 0;\r\n\t\tz-index: 1;\r\n\t\tborder-right: 1px solid #475569;\r\n\t\tmin-height: 36px;\r\n\t\tfont-size: 13px;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t}\r\n\r\n\t.header.middle-column {\r\n\t\tpadding: 8px 4px;\r\n\t\tbackground: #1e293b;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t}\r\n\r\n\t.cell {\r\n\t\tpadding: 8px;\r\n\t\theight: 110px;\r\n\t\tborder-bottom: 1px solid #e0e0e0;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tjustify-content: center;\r\n\t\tposition: relative;\r\n\t\tcursor: pointer;\r\n\t\ttransition: all 0.3s ease;\r\n\t\tmin-width: 0;\r\n\t\toverflow: hidden;\r\n\t}\r\n\r\n\t.left-column,\r\n\t.right-column {\r\n\t\tmax-width: 100%;\r\n\t}\r\n\r\n\t.cell:hover {\r\n\t\tbackground-color: #f5f5f5;\r\n\t}\r\n\r\n\t.left-column:hover {\r\n\t\tbackground-color: #fff8e1;\r\n\t}\r\n\r\n\t.right-column:hover {\r\n\t\tbackground-color: #fff8e1;\r\n\t}\r\n\r\n\t.middle-column {\r\n\t\tposition: relative;\r\n\t\tcursor: default;\r\n\t\tbackground-color: #f8f9fa;\r\n\t\ttransition: background-color 0.2s;\r\n\t}\r\n\r\n\t.middle-column:hover {\r\n\t\tbackground-color: #e9ecef;\r\n\t}\r\n\r\n\t.field-name {\r\n\t\tfont-weight: bold;\r\n\t\tmargin-bottom: 4px;\r\n\t\tfont-size: 12px;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t\ttext-align: center;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t.field-type {\r\n\t\tcolor: #666;\r\n\t\tfont-size: 11px;\r\n\t\tfont-style: italic;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t\ttext-align: center;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t.icon-actions {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\tgap: 15px;\r\n\t\tmargin-top: 8px;\r\n\t}\r\n\r\n\t.icon-btn {\r\n\t\tfont-size: 16px;\r\n\t\tcursor: pointer;\r\n\t\topacity: 0.7;\r\n\t\ttransition: all 0.2s;\r\n\t}\r\n\r\n\t.icon-btn:hover {\r\n\t\topacity: 1;\r\n\t\ttransform: scale(1.2);\r\n\t}\r\n\r\n\t.icon-btn.compare:hover {\r\n\t\tcolor: #4caf50;\r\n\t}\r\n\r\n\t.icon-btn.merge:hover {\r\n\t\tcolor: #2196f3;\r\n\t}\r\n\r\n\t.full-chart-modal {\r\n\t\tposition: fixed;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\tbottom: 0;\r\n\t\tbackground-color: rgba(0, 0, 0, 0.8);\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t\tz-index: 1000;\r\n\t}\r\n\r\n\t.modal-content {\r\n\t\tbackground: white;\r\n\t\tpadding: 16px;\r\n\t\tborder-radius: 8px;\r\n\t\twidth: 85%;\r\n\t\tmax-width: 800px;\r\n\t\tmax-height: 85vh;\r\n\t\tposition: relative;\r\n\t\toverflow-y: auto;\r\n\t}\r\n\r\n\t.chart-container {\r\n\t\theight: 60vh;\r\n\t\twidth: 100%;\r\n\t\tmargin: 16px 0;\r\n\t}\r\n\r\n\t.chart-legend {\r\n\t\tfont-size: 13px;\r\n\t\tcolor: #666;\r\n\t\ttext-align: center;\r\n\t\tmargin-top: 12px;\r\n\t\tpadding-top: 12px;\r\n\t\tborder-top: 1px solid #eee;\r\n\t}\r\n\r\n\t.close-btn {\r\n\t\tposition: absolute;\r\n\t\ttop: 8px;\r\n\t\tright: 8px;\r\n\t\tfont-size: 20px;\r\n\t\tbackground: none;\r\n\t\tborder: none;\r\n\t\tcursor: pointer;\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.close-btn:hover {\r\n\t\tcolor: #333;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}