{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, Fragment as _Fragment, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-a89cbc96\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"simple-chart\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"text-tooltip\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"d3-chart-container\",\n  ref: \"pieContainer\"\n};\nconst _hoisted_4 = {\n  key: 1,\n  class: \"no-data\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"d3-chart-container\",\n  ref: \"barContainer\"\n};\nconst _hoisted_6 = {\n  key: 1,\n  class: \"no-data\"\n};\nconst _hoisted_7 = {\n  key: 0,\n  class: \"d3-chart-container\",\n  ref: \"lineContainer\"\n};\nconst _hoisted_8 = {\n  key: 1,\n  class: \"no-data\"\n};\nconst _hoisted_9 = {\n  key: 0,\n  class: \"text-tooltip\"\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 文本显示 \"), _ctx.visualization === 'text-only' ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 0\n  }, [_createElementVNode(\"div\", {\n    class: \"simple-text\",\n    onClick: _cache[0] || (_cache[0] = function () {\n      return _ctx.handleTextClick && _ctx.handleTextClick(...arguments);\n    }),\n    onMouseenter: _cache[1] || (_cache[1] = function () {\n      return _ctx.handleTextHover && _ctx.handleTextHover(...arguments);\n    }),\n    onMouseleave: _cache[2] || (_cache[2] = function () {\n      return _ctx.resetHover && _ctx.resetHover(...arguments);\n    })\n  }, _toDisplayString(_ctx.formatSimpleText(_ctx.processedField)), 33 /* TEXT, NEED_HYDRATION */), _ctx.isTextHovered ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, \"点击查看详情\")) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */)) : _ctx.visualization === 'pie-chart' ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" 饼图 (D3实现) \"), _ctx.hasData && _ctx.isValidPieData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, null, 512 /* NEED_PATCH */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, \"-\"))], 64 /* STABLE_FRAGMENT */)) : _ctx.visualization === 'bar-chart' ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 2\n  }, [_createCommentVNode(\" 柱状图 (D3实现) \"), _ctx.hasData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, null, 512 /* NEED_PATCH */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_6, \"-\"))], 64 /* STABLE_FRAGMENT */)) : _ctx.visualization === 'line-chart' ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 3\n  }, [_createCommentVNode(\" 折线图 (D3实现) \"), _ctx.hasData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, null, 512 /* NEED_PATCH */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_8, \"-\"))], 64 /* STABLE_FRAGMENT */)) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 4\n  }, [_createCommentVNode(\" 默认显示 \"), _createElementVNode(\"div\", {\n    class: \"simple-text\",\n    onClick: _cache[3] || (_cache[3] = function () {\n      return _ctx.handleTextClick && _ctx.handleTextClick(...arguments);\n    }),\n    onMouseenter: _cache[4] || (_cache[4] = function () {\n      return _ctx.handleTextHover && _ctx.handleTextHover(...arguments);\n    }),\n    onMouseleave: _cache[5] || (_cache[5] = function () {\n      return _ctx.resetHover && _ctx.resetHover(...arguments);\n    })\n  }, _toDisplayString(_ctx.formatSimpleText(_ctx.processedField)), 33 /* TEXT, NEED_HYDRATION */), _ctx.isTextHovered ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, \"点击查看详情\")) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","key","ref","_createElementBlock","_hoisted_1","_createCommentVNode","_ctx","visualization","_Fragment","_createElementVNode","onClick","_cache","handleTextClick","arguments","onMouseenter","handleTextHover","onMouseleave","resetHover","formatSimpleText","processedField","isTextHovered","_hoisted_2","hasData","isValidPieData","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\SimpleChart.vue"],"sourcesContent":["<template>\r\n\t<div class=\"simple-chart\">\r\n\t\t<!-- 文本显示 -->\r\n\t\t<template v-if=\"visualization === 'text-only'\">\r\n\t\t\t<div\r\n\t\t\t\tclass=\"simple-text\"\r\n\t\t\t\t@click=\"handleTextClick\"\r\n\t\t\t\t@mouseenter=\"handleTextHover\"\r\n\t\t\t\t@mouseleave=\"resetHover\">\r\n\t\t\t\t{{ formatSimpleText(processedField) }}\r\n\t\t\t</div>\r\n\t\t\t<div v-if=\"isTextHovered\" class=\"text-tooltip\">点击查看详情</div>\r\n\t\t</template>\r\n\r\n\t\t<!-- 饼图 (D3实现) -->\r\n\t\t<template v-else-if=\"visualization === 'pie-chart'\">\r\n\t\t\t<div\r\n\t\t\t\tv-if=\"hasData && isValidPieData\"\r\n\t\t\t\tclass=\"d3-chart-container\"\r\n\t\t\t\tref=\"pieContainer\"></div>\r\n\t\t\t<div v-else class=\"no-data\">-</div>\r\n\t\t</template>\r\n\r\n\t\t<!-- 柱状图 (D3实现) -->\r\n\t\t<template v-else-if=\"visualization === 'bar-chart'\">\r\n\t\t\t<div v-if=\"hasData\" class=\"d3-chart-container\" ref=\"barContainer\"></div>\r\n\t\t\t<div v-else class=\"no-data\">-</div>\r\n\t\t</template>\r\n\r\n\t\t<!-- 折线图 (D3实现) -->\r\n\t\t<template v-else-if=\"visualization === 'line-chart'\">\r\n\t\t\t<div v-if=\"hasData\" class=\"d3-chart-container\" ref=\"lineContainer\"></div>\r\n\t\t\t<div v-else class=\"no-data\">-</div>\r\n\t\t</template>\r\n\r\n\t\t<!-- 默认显示 -->\r\n\t\t<template v-else>\r\n\t\t\t<div\r\n\t\t\t\tclass=\"simple-text\"\r\n\t\t\t\t@click=\"handleTextClick\"\r\n\t\t\t\t@mouseenter=\"handleTextHover\"\r\n\t\t\t\t@mouseleave=\"resetHover\">\r\n\t\t\t\t{{ formatSimpleText(processedField) }}\r\n\t\t\t</div>\r\n\t\t\t<div v-if=\"isTextHovered\" class=\"text-tooltip\">点击查看详情</div>\r\n\t\t</template>\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\n\timport { computed, ref, onMounted, watch, nextTick } from \"vue\";\r\n\timport * as d3 from \"d3\";\r\n\r\n\texport default {\r\n\t  props: {\r\n\t    field: {\r\n\t      type: [Object, Array, String, Number],\r\n\t      default: null\r\n\t    },\r\n\t    type: {\r\n\t      type: String,\r\n\t      default: \"\"\r\n\t    },\r\n\t    visualization: {\r\n\t      type: String,\r\n\t      default: \"\"\r\n\t    },\r\n\t    fieldKey: {\r\n\t      type: String,\r\n\t      default: \"\"\r\n\t    },\r\n\t    unifiedMax: {\r\n\t      type: Number,\r\n\t      default: null\r\n\t    }\r\n\t  },\r\n\r\n\t  emits: [\"chartClick\"],\r\n\r\n\t  setup(props, { emit }) {\r\n\t    const hoveredIndex = ref(null);\r\n\t    const activeIndex = ref(null);\r\n\t    const isTextHovered = ref(false);\r\n\r\n\t    // 容器引用\r\n\t    const pieContainer = ref(null);\r\n\t    const barContainer = ref(null);\r\n\t    const lineContainer = ref(null);\r\n\r\n\t    // 颜色定义\r\n\t    const colors = [\"#3498db\", \"#e74c3c\", \"#2ecc71\", \"#f39c12\", \"#9b59b6\"];\r\n\t    const remainderColor = \"#f0f0f0\";\r\n\r\n\t    // 处理后的字段数据\r\n\t    const processedField = computed(() => {\r\n\t      if (!props.field) return null;\r\n\r\n\t      // 如果是数组，处理每个元素\r\n\t      if (Array.isArray(props.field)) {\r\n\t        return props.field.map(item => {\r\n\t          if (typeof item === \"object\" && item !== null) {\r\n\t            return {\r\n\t              value: item.value ?? item.raw,\r\n\t              raw: item.raw,\r\n\t              ...(item.unit && { unit: item.unit }),\r\n\t              ...(item.currency && { currency: item.currency }),\r\n\t              ...(item.year && { year: item.year })\r\n\t            };\r\n\t          }\r\n\t          return { value: item, raw: item };\r\n\t        });\r\n\t      }\r\n\r\n\t      // 如果是对象\r\n\t      if (typeof props.field === \"object\" && props.field !== null) {\r\n\t        return {\r\n\t          value: props.field.value ?? props.field.raw,\r\n\t          raw: props.field.raw,\r\n\t          ...(props.field.unit && { unit: props.field.unit }),\r\n\t          ...(props.field.currency && { currency: props.field.currency }),\r\n\t          ...(props.field.year && { year: props.field.year })\r\n\t        };\r\n\t      }\r\n\r\n\t      // 原始值\r\n\t      return { value: props.field, raw: props.field };\r\n\t    });\r\n\r\n\t    // 初始化图表\r\n\t    onMounted(() => {\r\n\t      watch(\r\n\t        () => [processedField.value, props.visualization, props.unifiedMax],\r\n\t        () => {\r\n\t          nextTick(() => {\r\n\t            if (\r\n\t              props.visualization === \"pie-chart\" &&\r\n\t              hasData.value &&\r\n\t              isValidPieData.value\r\n\t            ) {\r\n\t              renderPieChart();\r\n\t            } else if (props.visualization === \"bar-chart\" && hasData.value) {\r\n\t              renderBarChart();\r\n\t            } else if (\r\n\t              props.visualization === \"line-chart\" &&\r\n\t              hasData.value\r\n\t            ) {\r\n\t              renderLineChart();\r\n\t            }\r\n\t          });\r\n\t        },\r\n\t        { immediate: true, deep: true }\r\n\t      );\r\n\t    });\r\n\r\n\t    // 渲染饼图（添加剩余比例）\r\n\t    const renderPieChart = () => {\r\n\t      if (!pieContainer.value) return;\r\n\r\n\t      // 清除旧图表\r\n\t      d3.select(pieContainer.value).selectAll(\"*\").remove();\r\n\r\n\t      const container = d3.select(pieContainer.value);\r\n\t      const containerWidth = pieContainer.value.clientWidth;\r\n\t      const containerHeight = pieContainer.value.clientHeight;\r\n\t      const size = Math.min(containerWidth, containerHeight);\r\n\t      const radius = size / 2;\r\n\r\n\t      const svg = container\r\n\t        .append(\"svg\")\r\n\t        .attr(\"width\", \"100%\")\r\n\t        .attr(\"height\", \"100%\")\r\n\t        .attr(\"viewBox\", `0 0 ${size} ${size}`)\r\n\t        .append(\"g\")\r\n\t        .attr(\"transform\", `translate(${radius},${radius})`);\r\n\r\n\t      // 处理数据 - 如果是单值，添加剩余部分\r\n\t      const processedData =\r\n\t        pieData.value.length === 1\r\n\t          ? [\r\n\t              {\r\n\t                ...pieData.value[0],\r\n\t                color: colors[0],\r\n\t                isMainValue: true\r\n\t              },\r\n\t              {\r\n\t                value: Math.max(0, 100 - pieData.value[0].value), // 确保不为负数\r\n\t                name: \"剩余\",\r\n\t                color: remainderColor,\r\n\t                isRemainder: true,\r\n\t                index: 1\r\n\t              }\r\n\t            ]\r\n\t          : pieData.value.map((d, i) => ({\r\n\t              ...d,\r\n\t              color: colors[i % colors.length],\r\n\t              isMainValue: true\r\n\t            }));\r\n\r\n\t      const pie = d3\r\n\t        .pie()\r\n\t        .value(d => d.value)\r\n\t        .sort(null);\r\n\r\n\t      const arc = d3\r\n\t        .arc()\r\n\t        .innerRadius(0)\r\n\t        .outerRadius(radius * 0.9)\r\n\t        .cornerRadius(2);\r\n\r\n\t      const arcs = svg\r\n\t        .selectAll(\".arc\")\r\n\t        .data(pie(processedData))\r\n\t        .enter()\r\n\t        .append(\"g\")\r\n\t        .attr(\"class\", \"arc\");\r\n\r\n\t      // 绘制扇形\r\n\t      arcs\r\n\t        .append(\"path\")\r\n\t        .attr(\"d\", arc)\r\n\t        .attr(\"fill\", d => d.data.color)\r\n\t        .style(\"opacity\", d => (d.data.isRemainder ? 0.6 : 0.8))\r\n\t        .style(\"stroke\", \"#fff\")\r\n\t        .style(\"stroke-width\", 1)\r\n\t        .on(\"mouseover\", function (event, d) {\r\n\t          if (d.data.isRemainder) return; // 剩余部分不响应hover\r\n\r\n\t          hoveredIndex.value = d.data.index;\r\n\t          d3.select(this)\r\n\t            .transition()\r\n\t            .duration(200)\r\n\t            .style(\"opacity\", 1)\r\n\t            .attr(\"transform\", \"scale(1.05)\");\r\n\r\n\t          tooltip\r\n\t            .style(\"visibility\", \"visible\")\r\n\t            .html(\r\n\t              `${d.data.name}: ${d.data.value.toFixed(1)}${\r\n\t                props.type === \"percentage\" ? \"%\" : \"\"\r\n\t              }`\r\n\t            );\r\n\t        })\r\n\t        .on(\"mouseout\", function (event, d) {\r\n\t          if (d.data.isRemainder) return;\r\n\r\n\t          hoveredIndex.value = null;\r\n\t          d3.select(this)\r\n\t            .transition()\r\n\t            .duration(200)\r\n\t            .style(\"opacity\", d.data.isRemainder ? 0.6 : 0.8)\r\n\t            .attr(\"transform\", \"scale(1)\");\r\n\r\n\t          tooltip.style(\"visibility\", \"hidden\");\r\n\t        })\r\n\t        .on(\"click\", function (event, d) {\r\n\t          if (d.data.isRemainder) return;\r\n\r\n\t          activeIndex.value = d.data.index;\r\n\t          emit(\"chartClick\", {\r\n\t            type: \"pie\",\r\n\t            index: d.data.index,\r\n\t            data: d.data,\r\n\t            value: d.data.value\r\n\t          });\r\n\t        });\r\n\r\n\t      // 单值时的中心文字\r\n\t      if (pieData.value.length === 1) {\r\n\t        svg\r\n\t          .append(\"text\")\r\n\t          .attr(\"text-anchor\", \"middle\")\r\n\t          .attr(\"dy\", \".3em\")\r\n\t          .text(\r\n\t            `${pieData.value[0].value.toFixed(1)}${\r\n\t              props.type === \"percentage\" ? \"%\" : \"\"\r\n\t            }`\r\n\t          )\r\n\t          .style(\"font-size\", \"14px\")\r\n\t          .style(\"fill\", \"#333\");\r\n\t      }\r\n\r\n\t      // 创建tooltip\r\n\t      const tooltip = container\r\n\t        .append(\"div\")\r\n\t        .attr(\"class\", \"d3-tooltip\")\r\n\t        .style(\"position\", \"absolute\")\r\n\t        .style(\"visibility\", \"hidden\")\r\n\t        .style(\"background\", \"rgba(0,0,0,0.8)\")\r\n\t        .style(\"color\", \"white\")\r\n\t        .style(\"padding\", \"6px 12px\")\r\n\t        .style(\"border-radius\", \"4px\")\r\n\t        .style(\"font-size\", \"12px\");\r\n\t    };\r\n\r\n\t    // 修改后的 renderBarChart 函数\r\n\t    const renderBarChart = () => {\r\n\t      if (!barContainer.value) return;\r\n\r\n\t      d3.select(barContainer.value).selectAll(\"*\").remove();\r\n\r\n\t      const container = d3.select(barContainer.value);\r\n\t      const width = barContainer.value.clientWidth;\r\n\t      const height = barContainer.value.clientHeight;\r\n\t      const margin = { top: 10, right: 10, bottom: 30, left: 30 }; // 增加左侧边距用于Y轴\r\n\r\n\t      const svg = container\r\n\t        .append(\"svg\")\r\n\t        .attr(\"width\", \"100%\")\r\n\t        .attr(\"height\", \"100%\")\r\n\t        .attr(\"viewBox\", `0 0 ${width} ${height}`);\r\n\r\n\t      // 使用统一的最大值或计算最大值\r\n\t      const maxYValue = props.unifiedMax !== null\r\n\t        ? props.unifiedMax\r\n\t        : d3.max(simpleBarData.value, d => d.value) * 1.1 || 1; // 增加10%缓冲\r\n\r\n\t      // 确保最小值至少为0\r\n\t      const minYValue = Math.min(0, d3.min(simpleBarData.value, d => d.value) || 0);\r\n\r\n\t      // 创建Y轴比例尺\r\n\t      const y = d3\r\n\t        .scaleLinear()\r\n\t        .domain([minYValue, maxYValue])\r\n\t        .range([height - margin.bottom, margin.top]);\r\n\r\n\t      // 绘制Y轴\r\n\t      svg.append(\"g\")\r\n\t        .attr(\"class\", \"y-axis\")\r\n\t        .attr(\"transform\", `translate(${margin.left},0)`)\r\n\t        .call(\r\n\t          d3.axisLeft(y)\r\n\t            .ticks(4)\r\n\t            .tickSize(-width + margin.left + margin.right)\r\n\t            .tickFormat(d => formatNumber(d, props.fieldKey))\r\n\t        .select(\".domain\").remove();\r\n\r\n\t      // 设定柱子最大宽度和最小间距\r\n\t      const maxBarWidth = 60;\r\n\t      const minSpacing = 10;\r\n\t      const availableWidth = width - margin.left - margin.right;\r\n\t      const barCount = simpleBarData.value.length;\r\n\t      const barWidth = Math.min(\r\n\t        maxBarWidth,\r\n\t        Math.max(20, availableWidth / barCount - minSpacing)\r\n\t      );\r\n\r\n\t      // 计算起始位置使柱子居中\r\n\t      const totalBarsWidth = barWidth * barCount + minSpacing * (barCount - 1);\r\n\t      const startX = margin.left + (availableWidth - totalBarsWidth) / 2;\r\n\r\n\t      // 绘制柱子\r\n\t      svg\r\n\t        .selectAll(\".bar\")\r\n\t        .data(simpleBarData.value)\r\n\t        .enter()\r\n\t        .append(\"rect\")\r\n\t        .attr(\"class\", \"bar\")\r\n\t        .attr(\"x\", (d, i) => startX + i * (barWidth + minSpacing))\r\n\t        .attr(\"y\", d => y(Math.max(0, d.value))) // 确保柱子不会超出底部\r\n\t        .attr(\"width\", barWidth)\r\n\t        .attr(\"height\", d => Math.abs(y(d.value) - y(0))) // 计算绝对高度\r\n\t        .attr(\"fill\", (d, i) => colors[i % colors.length])\r\n\t        .style(\"opacity\", 0.8)\r\n\t        .on(\"mouseover\", function(event, d) {\r\n\t          d3.select(this)\r\n\t            .transition()\r\n\t            .duration(200)\r\n\t            .style(\"opacity\", 1);\r\n\t        })\r\n\t        .on(\"mouseout\", function() {\r\n\t          d3.select(this)\r\n\t            .transition()\r\n\t            .duration(200)\r\n\t            .style(\"opacity\", 0.8);\r\n\t        });\r\n\r\n\t      // 在每个柱子下方添加数值标签\r\n\t      svg\r\n\t        .selectAll(\".bar-label\")\r\n\t        .data(simpleBarData.value)\r\n\t        .enter()\r\n\t        .append(\"text\")\r\n\t        .attr(\"class\", \"bar-label\")\r\n\t        .attr(\"x\", (d, i) => startX + i * (barWidth + minSpacing) + barWidth / 2)\r\n\t        .attr(\"y\", height - 5)\r\n\t        .attr(\"text-anchor\", \"middle\")\r\n\t        .attr(\"font-size\", \"10px\")\r\n\t        .attr(\"fill\", \"#666\")\r\n\t        .text(d => formatNumber(d.value, props.fieldKey));\r\n\t    };\r\n\r\n\t    // 修改后的 renderLineChart 函数\r\n\t    const renderLineChart = () => {\r\n\t      if (!lineContainer.value) return;\r\n\r\n\t      d3.select(lineContainer.value).selectAll(\"*\").remove();\r\n\r\n\t      const container = d3.select(lineContainer.value);\r\n\t      const width = lineContainer.value.clientWidth;\r\n\t      const height = lineContainer.value.clientHeight;\r\n\t      const margin = { top: 10, right: 10, bottom: 30, left: 10 };\r\n\r\n\t      const svg = container\r\n\t        .append(\"svg\")\r\n\t        .attr(\"width\", \"100%\")\r\n\t        .attr(\"height\", \"100%\")\r\n\t        .attr(\"viewBox\", `0 0 ${width} ${height}`);\r\n\r\n\t      const x = d3\r\n\t        .scaleLinear()\r\n\t        .domain([0, lineData.value.length - 1])\r\n\t        .range([margin.left, width - margin.right]);\r\n\r\n\t      const y = d3\r\n\t        .scaleLinear()\r\n\t        .domain([\r\n\t          d3.min(lineData.value, d => d.y),\r\n\t          d3.max(lineData.value, d => d.y)\r\n\t        ])\r\n\t        .range([height - margin.bottom, margin.top]);\r\n\r\n\t      // 绘制折线\r\n\t      const line = d3\r\n\t        .line()\r\n\t        .x((d, i) => x(i))\r\n\t        .y(d => y(d.y))\r\n\t        .curve(d3.curveMonotoneX);\r\n\r\n\t      svg\r\n\t        .append(\"path\")\r\n\t        .datum(lineData.value)\r\n\t        .attr(\"fill\", \"none\")\r\n\t        .attr(\"stroke\", \"#3498db\")\r\n\t        .attr(\"stroke-width\", 2)\r\n\t        .attr(\"d\", line);\r\n\r\n\t      // 绘制数据点\r\n\t      svg\r\n\t        .selectAll(\".dot\")\r\n\t        .data(lineData.value)\r\n\t        .enter()\r\n\t        .append(\"circle\")\r\n\t        .attr(\"class\", \"dot\")\r\n\t        .attr(\"cx\", (d, i) => x(i))\r\n\t        .attr(\"cy\", d => y(d.y))\r\n\t        .attr(\"r\", 3)\r\n\t        .attr(\"fill\", \"#3498db\");\r\n\r\n\t      // 在每个数据点下方添加数值标签\r\n\t      svg\r\n\t        .selectAll(\".line-label\")\r\n\t        .data(lineData.value)\r\n\t        .enter()\r\n\t        .append(\"text\")\r\n\t        .attr(\"class\", \"line-label\")\r\n\t        .attr(\"x\", (d, i) => x(i))\r\n\t        .attr(\"y\", height - 5)\r\n\t        .attr(\"text-anchor\", \"middle\")\r\n\t        .attr(\"font-size\", \"10px\")\r\n\t        .attr(\"fill\", \"#666\")\r\n\t        .text(d => formatNumber(d.y, props.fieldKey));\r\n\t    };\r\n\r\n\t    // 交互处理函数\r\n\t    const handleTextHover = () => {\r\n\t      isTextHovered.value = true;\r\n\t    };\r\n\r\n\t    const resetHover = () => {\r\n\t      hoveredIndex.value = null;\r\n\t      isTextHovered.value = false;\r\n\t    };\r\n\r\n\t    const handleTextClick = () => {\r\n\t      emit(\"chartClick\", {\r\n\t        type: \"text\",\r\n\t        data: processedField.value,\r\n\t        value: processedField.value\r\n\t      });\r\n\t    };\r\n\r\n\t    const formatNumber = (value, fieldKey) => {\r\n\t      const num = Number(value);\r\n\t      if (isNaN(num)) return \"0\";\r\n\r\n\t      // 百分比特殊处理\r\n\t      if (props.type === \"percentage\") {\r\n\t        return num.toFixed(1) + \"%\";\r\n\t      }\r\n\r\n\t      // 统一中文单位显示规则\r\n\t      if (num >= 100000000) {\r\n\t        // 1亿以上\r\n\t        return (num / 100000000).toFixed(2) + \"亿\";\r\n\t      } else if (num >= 10000) {\r\n\t        // 1万以上\r\n\t        return (num / 10000).toFixed(1) + \"万\";\r\n\t      } else if (num >= 1000) {\r\n\t        // 1千以上\r\n\t        return (num / 1000).toFixed(1) + \"千\";\r\n\t      } else {\r\n\t        // 小于1千\r\n\t        return num.toFixed(0);\r\n\t      }\r\n\t    };\r\n\r\n\t    // 数据处理函数\r\n\t    const isYearEntry = value => {\r\n\t      if (typeof value !== \"string\") return false;\r\n\t      const trimmedValue = value.trim();\r\n\t      return (\r\n\t        /^(\\()?\\d{4}(\\))?\\s*:?/.test(trimmedValue) ||\r\n\t        /^\\(?FY\\s*\\d{4}\\)?\\s*:?/i.test(trimmedValue) ||\r\n\t        /^(\\()?\\d{4}\\s*[-–]\\s*\\d{2,4}(\\))?\\s*:?/.test(trimmedValue) ||\r\n\t        /^(Year|Yr|Annual)\\s*\\d{4}/i.test(trimmedValue)\r\n\t      );\r\n\t    };\r\n\r\n\t    const isValidPieData = computed(() => {\r\n\t      if (!pieData.value.length) return false;\r\n\t      return pieData.value.every(\r\n\t        item => !isYearEntry(item.name) && !isYearEntry(item.value)\r\n\t      );\r\n\t    });\r\n\r\n\t    const pieData = computed(() => {\r\n\t      if (!processedField.value) return [];\r\n\r\n\t      const processItem = (item, index) => {\r\n\t        // 获取原始值，处理各种可能的数据结构\r\n\t        let rawValue;\r\n\t        if (typeof item === \"object\" && item !== null) {\r\n\t          rawValue = item.raw || item.value || item;\r\n\t        } else {\r\n\t          rawValue = item;\r\n\t        }\r\n\r\n\t        // 如果是年份条目则跳过\r\n\t        if (isYearEntry(rawValue)) return null;\r\n\r\n\t        // 转换为数值\r\n\t        const value = safeToNumber(rawValue, props.fieldKey);\r\n\t        if (value === null) return null;\r\n\r\n\t        // 获取名称，处理各种可能的数据结构\r\n\t        let name = \"项目\";\r\n\t        if (typeof item === \"object\" && item !== null) {\r\n\t          // 确保 raw 是字符串才调用 replace\r\n\t          const rawText =\r\n\t            typeof item.raw === \"string\"\r\n\t              ? item.raw\r\n\t              : typeof item.value === \"string\"\r\n\t              ? item.value\r\n\t              : JSON.stringify(item);\r\n\t          name = rawText.replace(/:\\s*\\d+\\.?\\d*%?/g, \"\").trim();\r\n\t        } else if (typeof item === \"string\") {\r\n\t          name = item.replace(/:\\s*\\d+\\.?\\d*%?/g, \"\").trim();\r\n\t        }\r\n\r\n\t        // 如果是年份条目则跳过\r\n\t        if (isYearEntry(name)) return null;\r\n\r\n\t        return {\r\n\t          value: Math.min(100, Math.max(0, value)),\r\n\t          name: name || \"项目\",\r\n\t          index: index\r\n\t        };\r\n\t      };\r\n\r\n\t      if (Array.isArray(processedField.value)) {\r\n\t        return processedField.value\r\n\t          .map((item, index) => processItem(item, index))\r\n\t          .filter(item => item !== null && !isYearEntry(item.name));\r\n\t      }\r\n\r\n\t      const result = processItem(processedField.value, 0);\r\n\t      return result ? [result] : [];\r\n\t    });\r\n\r\n\t    const safeToNumber = (value, fieldKey) => {\r\n\t      if (value === null || value === undefined) return 0;\r\n\t      if (typeof value === \"number\") return value;\r\n\r\n\t      if (typeof value === \"string\") {\r\n\t        // 处理中文单位\r\n\t        const yiMatch = value.match(/(-?[\\d.]+)亿/);\r\n\t        if (yiMatch) return parseFloat(yiMatch[1]) * 100000000;\r\n\r\n\t        const wanMatch = value.match(/(-?[\\d.]+)万/);\r\n\t        if (wanMatch) return parseFloat(wanMatch[1]) * 10000;\r\n\r\n\t        const qianMatch = value.match(/(-?[\\d.]+)千/);\r\n\t        if (qianMatch) return parseFloat(qianMatch[1]) * 1000;\r\n\r\n\t        // 处理百分比\r\n\t        const percentMatch = value.match(/(-?\\d+\\.?\\d*)%/);\r\n\t        if (percentMatch) return parseFloat(percentMatch[1]);\r\n\r\n\t        // 默认数字\r\n\t        const num = parseFloat(value.replace(/[^\\d.-]/g, \"\"));\r\n\t        return isNaN(num) ? 0 : num;\r\n\t      }\r\n\r\n\t      if (typeof value === \"object\") {\r\n\t        return safeToNumber(value.value || value.raw, fieldKey);\r\n\t      }\r\n\r\n\t      return 0;\r\n\t    };\r\n\r\n\t    const formatSimpleText = value => {\r\n\t      if (!value) return \"-\";\r\n\r\n\t      // 处理数组\r\n\t      if (Array.isArray(value)) {\r\n\t        const items = value.map(item => {\r\n\t          if (typeof item === \"object\" && item !== null) {\r\n\t            let text = item.raw || item.value || JSON.stringify(item);\r\n\t            if (item.unit) text += ` ${item.unit}`;\r\n\t            if (item.year) text += ` (${item.year})`;\r\n\t            return text;\r\n\t          }\r\n\t          return item;\r\n\t        });\r\n\t        return items.length > 2\r\n\t          ? items.slice(0, 2).join(\"; \") + \"...\"\r\n\t          : items.join(\"; \");\r\n\t      }\r\n\r\n\t      // 处理对象\r\n\t      if (typeof value === \"object\" && value !== null) {\r\n\t        let text = value.raw || value.value || \"-\";\r\n\t        if (value.unit) text += ` ${value.unit}`;\r\n\t        if (value.year) text += ` (${value.year})`;\r\n\t        return text;\r\n\t      }\r\n\r\n\t      // 处理原始值\r\n\t      return value.toString().length > 50\r\n\t        ? value.toString().substring(0, 50) + \"...\"\r\n\t        : value.toString();\r\n\t    };\r\n\r\n\t    const simpleBarData = computed(() => {\r\n\t      if (!processedField.value) return [];\r\n\r\n\t      let values = [];\r\n\r\n\t      if (Array.isArray(processedField.value)) {\r\n\t        values = processedField.value\r\n\t          .filter(item => {\r\n\t            const value = item?.value || item?.raw;\r\n\t            return (\r\n\t              value !== undefined && value !== null && !isYearEntry(value)\r\n\t            );\r\n\t          })\r\n\t          .map(item => safeToNumber(item.value || item.raw, props.fieldKey));\r\n\t      } else {\r\n\t        values = [\r\n\t          safeToNumber(\r\n\t            processedField.value.value || processedField.value.raw,\r\n\t            props.fieldKey\r\n\t          )\r\n\t        ].filter(v => v !== null);\r\n\t      }\r\n\r\n\t      if (values.length === 0) return [];\r\n\r\n\t      return values.map((v, index) => ({\r\n\t        value: v,\r\n\t        height: v,\r\n\t        color: colors[index % colors.length],\r\n\t        index: index\r\n\t      }));\r\n\t    });\r\n\r\n\t    const lineData = computed(() => {\r\n\t      if (!processedField.value) return [];\r\n\r\n\t      if (Array.isArray(processedField.value)) {\r\n\t        return processedField.value\r\n\t          .filter(item => {\r\n\t            const value = item?.value || item?.raw;\r\n\t            return (\r\n\t              value !== undefined && value !== null && !isYearEntry(value)\r\n\t            );\r\n\t          })\r\n\t          .map((item, index) => {\r\n\t            const value = safeToNumber(\r\n\t              item.value || item.raw,\r\n\t              props.fieldKey\r\n\t            );\r\n\t            return {\r\n\t              x: index,\r\n\t              y: value,\r\n\t              raw: item.raw || item.value,\r\n\t              index: index\r\n\t            };\r\n\t          });\r\n\t      }\r\n\r\n\t      const value = safeToNumber(\r\n\t        processedField.value.value || processedField.value.raw,\r\n\t        props.fieldKey\r\n\t      );\r\n\t      return value !== null\r\n\t        ? [\r\n\t            {\r\n\t              x: 0,\r\n\t              y: value,\r\n\t              raw: processedField.value.raw || processedField.value.value,\r\n\t              index: 0\r\n\t            }\r\n\t          ]\r\n\t        : [];\r\n\t    });\r\n\r\n\t    const hasData = computed(() => {\r\n\t      if (!processedField.value) return false;\r\n\t      if (Array.isArray(processedField.value))\r\n\t        return processedField.value.length > 0;\r\n\t      if (typeof processedField.value === \"object\")\r\n\t        return Object.keys(processedField.value).length > 0;\r\n\t      return String(processedField.value).trim().length > 0;\r\n\t    });\r\n\r\n\t    return {\r\n\t      hoveredIndex,\r\n\t      activeIndex,\r\n\t      isTextHovered,\r\n\t      pieContainer,\r\n\t      barContainer,\r\n\t      lineContainer,\r\n\t      handleTextHover,\r\n\t      resetHover,\r\n\t      handleTextClick,\r\n\t      formatSimpleText,\r\n\t      hasData,\r\n\t      isValidPieData,\r\n\t      pieData,\r\n\t      simpleBarData,\r\n\t      lineData,\r\n\t      formatNumber,\r\n\t      processedField\r\n\t    };\r\n\t  }\r\n\t};\r\n</script>\r\n\r\n<style scoped>\r\n\t.simple-chart {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tposition: relative;\r\n\t\tfont-family: Arial, sans-serif;\r\n\t}\r\n\r\n\t/* 文本样式 */\r\n\t.simple-text {\r\n\t\ttext-align: center;\r\n\t\tfont-size: 14px;\r\n\t\tword-break: break-word;\r\n\t\tpadding: 8px;\r\n\t\tcursor: pointer;\r\n\t\ttransition: all 0.2s ease;\r\n\t\tborder-radius: 4px;\r\n\t\tbackground-color: #f8f9fa;\r\n\t\tmax-width: 100%;\r\n\t}\r\n\r\n\t.simple-text:hover {\r\n\t\tbackground-color: #e9ecef;\r\n\t\ttransform: translateY(-2px);\r\n\t\tbox-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t.text-tooltip {\r\n\t\tposition: absolute;\r\n\t\ttop: -25px;\r\n\t\tleft: 50%;\r\n\t\ttransform: translateX(-50%);\r\n\t\tbackground-color: rgba(0, 0, 0, 0.8);\r\n\t\tcolor: white;\r\n\t\tpadding: 4px 8px;\r\n\t\tborder-radius: 4px;\r\n\t\tfont-size: 12px;\r\n\t\tpointer-events: none;\r\n\t\twhite-space: nowrap;\r\n\t\tz-index: 10;\r\n\t}\r\n\r\n\t/* D3图表容器 */\r\n\t.d3-chart-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tmin-height: 80px;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t/* D3 tooltip样式 */\r\n\t.d3-tooltip {\r\n\t\tz-index: 10;\r\n\t\twhite-space: nowrap;\r\n\t\tpointer-events: none;\r\n\t\tbox-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\r\n\t}\r\n\r\n\t/* 无数据样式 */\r\n\t.no-data {\r\n\t\tcolor: #999;\r\n\t\tfont-style: italic;\r\n\t\tpadding: 10px;\r\n\t}\r\n\r\n\t/* Y轴样式 */\r\n\t.y-axis line {\r\n\t\tstroke: #e0e0e0;\r\n\t\tstroke-dasharray: 2, 2;\r\n\t}\r\n\r\n\t.y-axis text {\r\n\t\tfont-size: 10px;\r\n\t\tfill: #666;\r\n\t}\r\n\r\n\t/* 响应式调整 */\r\n\t@media (max-width: 768px) {\r\n\t\t.simple-text {\r\n\t\t\tfont-size: 12px;\r\n\t\t}\r\n\r\n\t\t.d3-chart-container {\r\n\t\t\tmin-height: 60px;\r\n\t\t}\r\n\t}\r\n\r\n\t/* 添加在style部分的末尾 */\r\n\t.bar-label,\r\n\t.line-label {\r\n\t\tfont-family: Arial, sans-serif;\r\n\t\tpointer-events: none;\r\n\t\tuser-select: none;\r\n\t}\r\n\r\n\t@media (max-width: 768px) {\r\n\t\t.bar-label,\r\n\t\t.line-label {\r\n\t\t\tfont-size: 8px;\r\n\t\t}\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}