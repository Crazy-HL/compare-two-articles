{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed, onMounted, watch, onUnmounted } from \"vue\";\nimport SimpleChart from \"./SimpleChart.vue\";\nimport FullChart from \"./FullChart.vue\";\nimport CombinedChart from \"./charts/CombinedChart.vue\";\nimport bus from \"@/js/eventBus.js\";\nexport default {\n  __name: 'CompareTable',\n  props: {\n    div1RawData: Object,\n    div3RawData: Object\n  },\n  emits: [\"compareAttribute\"],\n  setup(__props, _ref) {\n    let {\n      expose: __expose,\n      emit: __emit\n    } = _ref;\n    __expose();\n    const props = __props;\n    const emit = __emit;\n\n    // 状态变量\n    const leftInfobox = ref({\n      title: \"\",\n      type: \"\",\n      data: {}\n    });\n    const rightInfobox = ref({\n      title: \"\",\n      type: \"\",\n      data: {}\n    });\n    const showFullChartModal = ref(false);\n    const currentChart = ref({\n      title: \"\",\n      field: {},\n      data: []\n    });\n    const isInitializing = ref(true);\n    const hasAutoCompared = ref(false);\n    const leftDataLoaded = ref(false);\n    const rightDataLoaded = ref(false);\n    const sortedFieldsWithScores = ref([]);\n\n    // 可比较字段配置\n    const COMPARABLE_FIELDS = [{\n      key: \"GDP\",\n      type: \"number\",\n      typeLabel: \"数值(美元)\",\n      visualization: \"bar-chart\",\n      legend: \"国内生产总值（单位：万亿美元）\"\n    }, {\n      key: \"Export goods\",\n      type: \"percentage\",\n      typeLabel: \"百分比(%)\",\n      visualization: \"stacked-chart\",\n      legend: \"主要出口商品构成（%）\"\n    }, {\n      key: \"Population\",\n      type: \"number\",\n      typeLabel: \"数值(人)\",\n      visualization: \"bar-chart\",\n      legend: \"人口数量（单位：亿人）\"\n    }, {\n      key: \"GDP growth\",\n      type: \"percentage\",\n      typeLabel: \"百分比(%)\",\n      visualization: \"line-chart\",\n      legend: \"GDP年增长率（%）\"\n    }, {\n      key: \"Inflation (CPI)\",\n      type: \"percentage\",\n      typeLabel: \"百分比(%)\",\n      visualization: \"pie-chart\",\n      legend: \"消费者价格指数变化\"\n    }, {\n      key: \"GDP rank\",\n      type: \"text\",\n      typeLabel: \"文本\",\n      visualization: \"text-only\",\n      legend: \"全球GDP排名\"\n    }, {\n      key: \"Labor force by occupation\",\n      type: \"percentage\",\n      typeLabel: \"百分比(%)\",\n      visualization: \"pie-chart\",\n      legend: \"按职业划分的劳动力\"\n    }];\n\n    // 计算统一的最大值\n    const getUnifiedMaxValue = fieldKey => {\n      const leftValues = getField(leftInfobox.value, fieldKey).map(v => typeof v === \"object\" ? v.value ?? v.raw : v).map(Number).filter(n => !isNaN(n));\n      const rightValues = getField(rightInfobox.value, fieldKey).map(v => typeof v === \"object\" ? v.value ?? v.raw : v).map(Number).filter(n => !isNaN(n));\n      const leftMax = leftValues.length ? Math.max(...leftValues) : 0;\n      const rightMax = rightValues.length ? Math.max(...rightValues) : 0;\n      return Math.max(leftMax, rightMax) * 1.1 || 1;\n    };\n\n    // 获取图表props\n    const getChartProps = (infobox, field) => {\n      return {\n        field: getField(infobox, field.key),\n        type: field.type,\n        visualization: field.visualization,\n        unifiedMax: getUnifiedMaxValue(field.key),\n        fieldKey: field.key\n      };\n    };\n\n    // 自动对比方法\n    const tryAutoCompare = () => {\n      if (hasAutoCompared.value || !leftDataLoaded.value || !rightDataLoaded.value) return;\n      isInitializing.value = true;\n      hasAutoCompared.value = true;\n      const mostSignificantField = sortedFieldsWithScores.value[0];\n      if (mostSignificantField) {\n        emit(\"compareAttribute\", {\n          fieldKey: mostSignificantField.key,\n          leftData: getField(leftInfobox.value, mostSignificantField.key),\n          rightData: getField(rightInfobox.value, mostSignificantField.key),\n          leftTitle: leftInfobox.value.title,\n          rightTitle: rightInfobox.value.title,\n          fieldType: mostSignificantField.type,\n          fieldLabel: mostSignificantField.typeLabel\n        });\n      }\n      isInitializing.value = false;\n    };\n    const getField = (infobox, fieldKey) => {\n      if (!infobox?.data) return [];\n      const possibleKeys = [fieldKey];\n      if (fieldKey.includes(\"Labor\")) {\n        possibleKeys.push(fieldKey.replace(\"Labor\", \"Labour\"));\n      }\n      const deepFind = (obj, keys) => {\n        for (const key of keys) {\n          if (obj[key] !== undefined) return obj[key];\n        }\n        for (const [k, v] of Object.entries(obj)) {\n          if (typeof v === \"object\" && v !== null) {\n            const found = deepFind(v, keys);\n            if (found !== undefined) return found;\n          }\n        }\n        return undefined;\n      };\n      let fieldData = deepFind(infobox.data, possibleKeys);\n      if (fieldData === undefined) return [];\n\n      // 特定处理：右侧职业数据为多行字符串的情况\n      if (typeof fieldData === \"string\" && fieldKey.includes(\"Labor force by occupation\")) {\n        const lines = fieldData.split(\"\\n\").map(line => line.trim()).filter(Boolean);\n        fieldData = lines.map(line => {\n          const [occupation, percentage] = line.split(/[:：]/);\n          return {\n            label: occupation.trim(),\n            value: parseFloat(percentage),\n            raw: line\n          };\n        });\n      }\n\n      // 统一为数组对象\n      return Array.isArray(fieldData) ? fieldData : [fieldData];\n    };\n    const calculateDifferenceScore = field => {\n      const leftValues = getField(leftInfobox.value, field.key).map(v => typeof v === \"object\" ? v.value ?? v.raw : v).map(Number).filter(n => !isNaN(n));\n      const rightValues = getField(rightInfobox.value, field.key).map(v => typeof v === \"object\" ? v.value ?? v.raw : v).map(Number).filter(n => !isNaN(n));\n      if (leftValues.length === 0 || rightValues.length === 0) {\n        return 0;\n      }\n      let maxScore = 0;\n      leftValues.forEach(leftNum => {\n        rightValues.forEach(rightNum => {\n          const isOpposite = leftNum > 0 && rightNum < 0 || leftNum < 0 && rightNum > 0;\n          const absDiff = Math.abs(leftNum - rightNum);\n          const avg = (Math.abs(leftNum) + Math.abs(rightNum)) / 2;\n          const relativeDiff = avg > 0 ? absDiff / avg : 0;\n          let score;\n          if (isOpposite) {\n            score = 90 + 10 * relativeDiff;\n          } else {\n            score = 10 + 40 * relativeDiff;\n          }\n          if (score > maxScore) maxScore = score;\n        });\n      });\n      const weight = field.key.toLowerCase().includes(\"gdp growth\") ? 3 : 1;\n      return Math.min(100, Math.round(maxScore * weight));\n    };\n    const sortedFields = computed(() => {\n      return sortedFieldsWithScores.value;\n    });\n    const comparableFields = computed(() => {\n      return COMPARABLE_FIELDS.filter(field => {\n        const leftVal = getField(leftInfobox.value, field.key);\n        const rightVal = getField(rightInfobox.value, field.key);\n        return leftVal.length > 0 || rightVal.length > 0;\n      });\n    });\n    const tryCalculateScores = () => {\n      if (leftDataLoaded.value && rightDataLoaded.value) {\n        sortedFieldsWithScores.value = comparableFields.value.map(field => ({\n          ...field,\n          score: calculateDifferenceScore(field)\n        })).sort((a, b) => {\n          if (a.type !== \"text\" && b.type === \"text\") return -1;\n          if (a.type === \"text\" && b.type !== \"text\") return 1;\n          return b.score - a.score;\n        });\n        tryAutoCompare();\n      }\n    };\n    const showFullChart = (infobox, field) => {\n      currentChart.value = {\n        title: `${infobox.title} - ${field.key}`,\n        field: field,\n        data: getField(infobox, field.key)\n      };\n      showFullChartModal.value = true;\n    };\n    const closeFullChart = () => {\n      showFullChartModal.value = false;\n    };\n    const hoverInfobox = (infobox, fieldKey, side) => {\n      bus.emit(`hover-${side}-infobox`, {\n        fieldKey,\n        infoboxTitle: infobox.title\n      });\n    };\n    const unhoverInfobox = side => {\n      bus.emit(`unhover-${side}-infobox`);\n    };\n    const hoverBothInfoboxes = fieldKey => {\n      hoverInfobox(leftInfobox.value, fieldKey, \"left\");\n      hoverInfobox(rightInfobox.value, fieldKey, \"right\");\n    };\n    const unhoverBothInfoboxes = () => {\n      unhoverInfobox(\"left\");\n      unhoverInfobox(\"right\");\n    };\n    const handleMiddleColumnClick = field => {\n      emit(\"compareAttribute\", {\n        fieldKey: field.key,\n        leftData: getField(leftInfobox.value, field.key),\n        rightData: getField(rightInfobox.value, field.key),\n        leftTitle: leftInfobox.value.title,\n        rightTitle: rightInfobox.value.title,\n        fieldType: field.type,\n        fieldLabel: field.typeLabel\n      });\n    };\n    const showCombinedChart = field => {\n      const leftData = getField(leftInfobox.value, field.key);\n      const rightData = getField(rightInfobox.value, field.key);\n\n      // 合并两个数据源的数据并添加来源标识\n      const combinedData = [...leftData.map(item => ({\n        ...item,\n        source: leftInfobox.value.title,\n        sourceType: \"left\"\n      })), ...rightData.map(item => ({\n        ...item,\n        source: rightInfobox.value.title,\n        sourceType: \"right\"\n      }))];\n      currentChart.value = {\n        title: `合并图表 - ${field.key}`,\n        field: {\n          ...field,\n          visualization: \"line-chart\",\n          combined: true,\n          sources: {\n            left: leftInfobox.value.title,\n            right: rightInfobox.value.title\n          }\n        },\n        data: combinedData\n      };\n      showFullChartModal.value = true;\n    };\n    const processInfoboxData = data => {\n      if (!data) {\n        console.warn(\"接收到空Infobox数据\");\n        return {\n          title: \"\",\n          type: \"\",\n          data: {}\n        };\n      }\n      return {\n        title: data.title || \"无标题\",\n        type: data.type || \"未知类型\",\n        data: data.sections || {}\n      };\n    };\n    onMounted(() => {\n      bus.on(\"div1_InfoboxData\", data => {\n        leftInfobox.value = processInfoboxData(data);\n        leftDataLoaded.value = true;\n        tryCalculateScores();\n      });\n      bus.on(\"div3_InfoboxData\", data => {\n        rightInfobox.value = processInfoboxData(data);\n        rightDataLoaded.value = true;\n        tryCalculateScores();\n      });\n    });\n    watch([() => leftDataLoaded.value, () => rightDataLoaded.value], _ref2 => {\n      let [leftLoaded, rightLoaded] = _ref2;\n      if (leftLoaded && rightLoaded) {\n        tryCalculateScores();\n      }\n    });\n    onUnmounted(() => {\n      bus.off(\"div1_InfoboxData\");\n      bus.off(\"div3_InfoboxData\");\n    });\n    const __returned__ = {\n      props,\n      emit,\n      leftInfobox,\n      rightInfobox,\n      showFullChartModal,\n      currentChart,\n      isInitializing,\n      hasAutoCompared,\n      leftDataLoaded,\n      rightDataLoaded,\n      sortedFieldsWithScores,\n      COMPARABLE_FIELDS,\n      getUnifiedMaxValue,\n      getChartProps,\n      tryAutoCompare,\n      getField,\n      calculateDifferenceScore,\n      sortedFields,\n      comparableFields,\n      tryCalculateScores,\n      showFullChart,\n      closeFullChart,\n      hoverInfobox,\n      unhoverInfobox,\n      hoverBothInfoboxes,\n      unhoverBothInfoboxes,\n      handleMiddleColumnClick,\n      showCombinedChart,\n      processInfoboxData,\n      ref,\n      computed,\n      onMounted,\n      watch,\n      onUnmounted,\n      SimpleChart,\n      FullChart,\n      CombinedChart,\n      get bus() {\n        return bus;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","watch","onUnmounted","SimpleChart","FullChart","CombinedChart","bus","props","__props","emit","__emit","leftInfobox","title","type","data","rightInfobox","showFullChartModal","currentChart","field","isInitializing","hasAutoCompared","leftDataLoaded","rightDataLoaded","sortedFieldsWithScores","COMPARABLE_FIELDS","key","typeLabel","visualization","legend","getUnifiedMaxValue","fieldKey","leftValues","getField","value","map","v","raw","Number","filter","n","isNaN","rightValues","leftMax","length","Math","max","rightMax","getChartProps","infobox","unifiedMax","tryAutoCompare","mostSignificantField","leftData","rightData","leftTitle","rightTitle","fieldType","fieldLabel","possibleKeys","includes","push","replace","deepFind","obj","keys","undefined","k","Object","entries","found","fieldData","lines","split","line","trim","Boolean","occupation","percentage","label","parseFloat","Array","isArray","calculateDifferenceScore","maxScore","forEach","leftNum","rightNum","isOpposite","absDiff","abs","avg","relativeDiff","score","weight","toLowerCase","min","round","sortedFields","comparableFields","leftVal","rightVal","tryCalculateScores","sort","a","b","showFullChart","closeFullChart","hoverInfobox","side","infoboxTitle","unhoverInfobox","hoverBothInfoboxes","unhoverBothInfoboxes","handleMiddleColumnClick","showCombinedChart","combinedData","item","source","sourceType","combined","sources","left","right","processInfoboxData","console","warn","sections","on","_ref2","leftLoaded","rightLoaded","off"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/CompareTable.vue"],"sourcesContent":["<template>\r\n\t<div class=\"compare-container\">\r\n\t\t<!-- 加载状态提示 -->\r\n\t\t<div v-if=\"isInitializing\" class=\"initial-loading\">\r\n\t\t\t<div class=\"loading-spinner\"></div>\r\n\t\t\t<p>正在准备数据对比...</p>\r\n\t\t</div>\r\n\r\n\t\t<!-- 主对比表格 -->\r\n\t\t<div class=\"comparison-grid\">\r\n\t\t\t<div class=\"header left-column\">\r\n\t\t\t\t{{ leftInfobox.title }}\r\n\t\t\t</div>\r\n\t\t\t<div class=\"header middle-column\">对比属性</div>\r\n\t\t\t<div class=\"header right-column\">\r\n\t\t\t\t{{ rightInfobox.title }}\r\n\t\t\t</div>\r\n\r\n\t\t\t<template v-for=\"field in sortedFields\" :key=\"field.key\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell left-column\"\r\n\t\t\t\t\t@mouseover=\"hoverInfobox(leftInfobox, field.key, 'left')\"\r\n\t\t\t\t\t@mouseout=\"unhoverInfobox('left')\"\r\n\t\t\t\t\t@click=\"showFullChart(leftInfobox, field)\">\r\n\t\t\t\t\t<SimpleChart v-bind=\"getChartProps(leftInfobox, field)\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell middle-column\"\r\n\t\t\t\t\t@mouseover=\"hoverBothInfoboxes(field.key)\"\r\n\t\t\t\t\t@mouseout=\"unhoverBothInfoboxes()\">\r\n\t\t\t\t\t<div class=\"field-name\">{{ field.key }}</div>\r\n\t\t\t\t\t<div class=\"field-type\">{{ field.typeLabel }}</div>\r\n\t\t\t\t\t<div class=\"icon-actions\">\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tclass=\"icon-btn compare\"\r\n\t\t\t\t\t\t\ttitle=\"对比分析\"\r\n\t\t\t\t\t\t\t@click=\"handleMiddleColumnClick(field)\">\r\n\t\t\t\t\t\t\t⚖️\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tclass=\"icon-btn merge\"\r\n\t\t\t\t\t\t\ttitle=\"合并图表\"\r\n\t\t\t\t\t\t\t@click=\"showCombinedChart(field)\">\r\n\t\t\t\t\t\t\t📊\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell right-column\"\r\n\t\t\t\t\t@mouseover=\"hoverInfobox(rightInfobox, field.key, 'right')\"\r\n\t\t\t\t\t@mouseout=\"unhoverInfobox('right')\"\r\n\t\t\t\t\t@click=\"showFullChart(rightInfobox, field)\">\r\n\t\t\t\t\t<SimpleChart v-bind=\"getChartProps(rightInfobox, field)\" />\r\n\t\t\t\t</div>\r\n\t\t\t</template>\r\n\t\t</div>\r\n\r\n\t\t<!-- 全屏图表模态框 -->\r\n\t\t<div\r\n\t\t\tv-if=\"showFullChartModal\"\r\n\t\t\tclass=\"full-chart-modal\"\r\n\t\t\t@click.self=\"closeFullChart\">\r\n\t\t\t<div class=\"modal-content\">\r\n\t\t\t\t<button class=\"close-btn\" @click=\"closeFullChart\">×</button>\r\n\t\t\t\t<!-- <h3>{{ currentChart.title }}</h3> -->\r\n\t\t\t\t<div class=\"chart-container\">\r\n\t\t\t\t\t<template v-if=\"currentChart.field.combined\">\r\n\t\t\t\t\t\t<CombinedChart\r\n\t\t\t\t\t\t\t:data=\"currentChart.data\"\r\n\t\t\t\t\t\t\t:fieldKey=\"currentChart.field.key\"\r\n\t\t\t\t\t\t\t:sources=\"currentChart.field.sources\" />\r\n\t\t\t\t\t</template>\r\n\t\t\t\t\t<template v-else>\r\n\t\t\t\t\t\t<FullChart\r\n\t\t\t\t\t\t\t:field=\"currentChart.data\"\r\n\t\t\t\t\t\t\t:type=\"currentChart.field.type\"\r\n\t\t\t\t\t\t\t:visualization=\"currentChart.field.visualization\" />\r\n\t\t\t\t\t</template>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"chart-legend\" v-if=\"currentChart.field.legend\">\r\n\t\t\t\t\t{{ currentChart.field.legend }}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, onMounted, watch, onUnmounted } from \"vue\";\r\n\timport SimpleChart from \"./SimpleChart.vue\";\r\n\timport FullChart from \"./FullChart.vue\";\r\n\timport CombinedChart from \"./charts/CombinedChart.vue\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdiv1RawData: Object,\r\n\t\tdiv3RawData: Object\r\n\t});\r\n\r\n\tconst emit = defineEmits([\"compareAttribute\"]);\r\n\r\n\t// 状态变量\r\n\tconst leftInfobox = ref({ title: \"\", type: \"\", data: {} });\r\n\tconst rightInfobox = ref({ title: \"\", type: \"\", data: {} });\r\n\tconst showFullChartModal = ref(false);\r\n\tconst currentChart = ref({\r\n\t\ttitle: \"\",\r\n\t\tfield: {},\r\n\t\tdata: []\r\n\t});\r\n\tconst isInitializing = ref(true);\r\n\tconst hasAutoCompared = ref(false);\r\n\tconst leftDataLoaded = ref(false);\r\n\tconst rightDataLoaded = ref(false);\r\n\tconst sortedFieldsWithScores = ref([]);\r\n\r\n\t// 可比较字段配置\r\n\tconst COMPARABLE_FIELDS = [\r\n\t\t{\r\n\t\t\tkey: \"GDP\",\r\n\t\t\ttype: \"number\",\r\n\t\t\ttypeLabel: \"数值(美元)\",\r\n\t\t\tvisualization: \"bar-chart\",\r\n\t\t\tlegend: \"国内生产总值（单位：万亿美元）\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Export goods\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"stacked-chart\",\r\n\t\t\tlegend: \"主要出口商品构成（%）\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Population\",\r\n\t\t\ttype: \"number\",\r\n\t\t\ttypeLabel: \"数值(人)\",\r\n\t\t\tvisualization: \"bar-chart\",\r\n\t\t\tlegend: \"人口数量（单位：亿人）\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"GDP growth\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"line-chart\",\r\n\t\t\tlegend: \"GDP年增长率（%）\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Inflation (CPI)\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"pie-chart\",\r\n\t\t\tlegend: \"消费者价格指数变化\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"GDP rank\",\r\n\t\t\ttype: \"text\",\r\n\t\t\ttypeLabel: \"文本\",\r\n\t\t\tvisualization: \"text-only\",\r\n\t\t\tlegend: \"全球GDP排名\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Labor force by occupation\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"pie-chart\",\r\n\t\t\tlegend: \"按职业划分的劳动力\"\r\n\t\t}\r\n\t];\r\n\r\n\t// 计算统一的最大值\r\n\tconst getUnifiedMaxValue = fieldKey => {\r\n\t\tconst leftValues = getField(leftInfobox.value, fieldKey)\r\n\t\t\t.map(v => (typeof v === \"object\" ? v.value ?? v.raw : v))\r\n\t\t\t.map(Number)\r\n\t\t\t.filter(n => !isNaN(n));\r\n\r\n\t\tconst rightValues = getField(rightInfobox.value, fieldKey)\r\n\t\t\t.map(v => (typeof v === \"object\" ? v.value ?? v.raw : v))\r\n\t\t\t.map(Number)\r\n\t\t\t.filter(n => !isNaN(n));\r\n\r\n\t\tconst leftMax = leftValues.length ? Math.max(...leftValues) : 0;\r\n\t\tconst rightMax = rightValues.length ? Math.max(...rightValues) : 0;\r\n\r\n\t\treturn Math.max(leftMax, rightMax) * 1.1 || 1;\r\n\t};\r\n\r\n\t// 获取图表props\r\n\tconst getChartProps = (infobox, field) => {\r\n\t\treturn {\r\n\t\t\tfield: getField(infobox, field.key),\r\n\t\t\ttype: field.type,\r\n\t\t\tvisualization: field.visualization,\r\n\t\t\tunifiedMax: getUnifiedMaxValue(field.key),\r\n\t\t\tfieldKey: field.key\r\n\t\t};\r\n\t};\r\n\r\n\t// 自动对比方法\r\n\tconst tryAutoCompare = () => {\r\n\t\tif (\r\n\t\t\thasAutoCompared.value ||\r\n\t\t\t!leftDataLoaded.value ||\r\n\t\t\t!rightDataLoaded.value\r\n\t\t)\r\n\t\t\treturn;\r\n\r\n\t\tisInitializing.value = true;\r\n\t\thasAutoCompared.value = true;\r\n\r\n\t\tconst mostSignificantField = sortedFieldsWithScores.value[0];\r\n\t\tif (mostSignificantField) {\r\n\t\t\temit(\"compareAttribute\", {\r\n\t\t\t\tfieldKey: mostSignificantField.key,\r\n\t\t\t\tleftData: getField(leftInfobox.value, mostSignificantField.key),\r\n\t\t\t\trightData: getField(rightInfobox.value, mostSignificantField.key),\r\n\t\t\t\tleftTitle: leftInfobox.value.title,\r\n\t\t\t\trightTitle: rightInfobox.value.title,\r\n\t\t\t\tfieldType: mostSignificantField.type,\r\n\t\t\t\tfieldLabel: mostSignificantField.typeLabel\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tisInitializing.value = false;\r\n\t};\r\n\r\n\tconst getField = (infobox, fieldKey) => {\r\n\t\tif (!infobox?.data) return [];\r\n\r\n\t\tconst possibleKeys = [fieldKey];\r\n\t\tif (fieldKey.includes(\"Labor\")) {\r\n\t\t\tpossibleKeys.push(fieldKey.replace(\"Labor\", \"Labour\"));\r\n\t\t}\r\n\r\n\t\tconst deepFind = (obj, keys) => {\r\n\t\t\tfor (const key of keys) {\r\n\t\t\t\tif (obj[key] !== undefined) return obj[key];\r\n\t\t\t}\r\n\t\t\tfor (const [k, v] of Object.entries(obj)) {\r\n\t\t\t\tif (typeof v === \"object\" && v !== null) {\r\n\t\t\t\t\tconst found = deepFind(v, keys);\r\n\t\t\t\t\tif (found !== undefined) return found;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn undefined;\r\n\t\t};\r\n\r\n\t\tlet fieldData = deepFind(infobox.data, possibleKeys);\r\n\t\tif (fieldData === undefined) return [];\r\n\r\n\t\t// 特定处理：右侧职业数据为多行字符串的情况\r\n\t\tif (\r\n\t\t\ttypeof fieldData === \"string\" &&\r\n\t\t\tfieldKey.includes(\"Labor force by occupation\")\r\n\t\t) {\r\n\t\t\tconst lines = fieldData\r\n\t\t\t\t.split(\"\\n\")\r\n\t\t\t\t.map(line => line.trim())\r\n\t\t\t\t.filter(Boolean);\r\n\t\t\tfieldData = lines.map(line => {\r\n\t\t\t\tconst [occupation, percentage] = line.split(/[:：]/);\r\n\t\t\t\treturn {\r\n\t\t\t\t\tlabel: occupation.trim(),\r\n\t\t\t\t\tvalue: parseFloat(percentage),\r\n\t\t\t\t\traw: line\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// 统一为数组对象\r\n\t\treturn Array.isArray(fieldData) ? fieldData : [fieldData];\r\n\t};\r\n\r\n\tconst calculateDifferenceScore = field => {\r\n\t\tconst leftValues = getField(leftInfobox.value, field.key)\r\n\t\t\t.map(v => (typeof v === \"object\" ? v.value ?? v.raw : v))\r\n\t\t\t.map(Number)\r\n\t\t\t.filter(n => !isNaN(n));\r\n\r\n\t\tconst rightValues = getField(rightInfobox.value, field.key)\r\n\t\t\t.map(v => (typeof v === \"object\" ? v.value ?? v.raw : v))\r\n\t\t\t.map(Number)\r\n\t\t\t.filter(n => !isNaN(n));\r\n\r\n\t\tif (leftValues.length === 0 || rightValues.length === 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tlet maxScore = 0;\r\n\r\n\t\tleftValues.forEach(leftNum => {\r\n\t\t\trightValues.forEach(rightNum => {\r\n\t\t\t\tconst isOpposite =\r\n\t\t\t\t\t(leftNum > 0 && rightNum < 0) || (leftNum < 0 && rightNum > 0);\r\n\r\n\t\t\t\tconst absDiff = Math.abs(leftNum - rightNum);\r\n\t\t\t\tconst avg = (Math.abs(leftNum) + Math.abs(rightNum)) / 2;\r\n\t\t\t\tconst relativeDiff = avg > 0 ? absDiff / avg : 0;\r\n\r\n\t\t\t\tlet score;\r\n\t\t\t\tif (isOpposite) {\r\n\t\t\t\t\tscore = 90 + 10 * relativeDiff;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tscore = 10 + 40 * relativeDiff;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (score > maxScore) maxScore = score;\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tconst weight = field.key.toLowerCase().includes(\"gdp growth\") ? 3 : 1;\r\n\t\treturn Math.min(100, Math.round(maxScore * weight));\r\n\t};\r\n\r\n\tconst sortedFields = computed(() => {\r\n\t\treturn sortedFieldsWithScores.value;\r\n\t});\r\n\r\n\tconst comparableFields = computed(() => {\r\n\t\treturn COMPARABLE_FIELDS.filter(field => {\r\n\t\t\tconst leftVal = getField(leftInfobox.value, field.key);\r\n\t\t\tconst rightVal = getField(rightInfobox.value, field.key);\r\n\t\t\treturn leftVal.length > 0 || rightVal.length > 0;\r\n\t\t});\r\n\t});\r\n\r\n\tconst tryCalculateScores = () => {\r\n\t\tif (leftDataLoaded.value && rightDataLoaded.value) {\r\n\t\t\tsortedFieldsWithScores.value = comparableFields.value\r\n\t\t\t\t.map(field => ({\r\n\t\t\t\t\t...field,\r\n\t\t\t\t\tscore: calculateDifferenceScore(field)\r\n\t\t\t\t}))\r\n\t\t\t\t.sort((a, b) => {\r\n\t\t\t\t\tif (a.type !== \"text\" && b.type === \"text\") return -1;\r\n\t\t\t\t\tif (a.type === \"text\" && b.type !== \"text\") return 1;\r\n\t\t\t\t\treturn b.score - a.score;\r\n\t\t\t\t});\r\n\r\n\t\t\ttryAutoCompare();\r\n\t\t}\r\n\t};\r\n\r\n\tconst showFullChart = (infobox, field) => {\r\n\t\tcurrentChart.value = {\r\n\t\t\ttitle: `${infobox.title} - ${field.key}`,\r\n\t\t\tfield: field,\r\n\t\t\tdata: getField(infobox, field.key)\r\n\t\t};\r\n\t\tshowFullChartModal.value = true;\r\n\t};\r\n\r\n\tconst closeFullChart = () => {\r\n\t\tshowFullChartModal.value = false;\r\n\t};\r\n\r\n\tconst hoverInfobox = (infobox, fieldKey, side) => {\r\n\t\tbus.emit(`hover-${side}-infobox`, {\r\n\t\t\tfieldKey,\r\n\t\t\tinfoboxTitle: infobox.title\r\n\t\t});\r\n\t};\r\n\r\n\tconst unhoverInfobox = side => {\r\n\t\tbus.emit(`unhover-${side}-infobox`);\r\n\t};\r\n\r\n\tconst hoverBothInfoboxes = fieldKey => {\r\n\t\thoverInfobox(leftInfobox.value, fieldKey, \"left\");\r\n\t\thoverInfobox(rightInfobox.value, fieldKey, \"right\");\r\n\t};\r\n\r\n\tconst unhoverBothInfoboxes = () => {\r\n\t\tunhoverInfobox(\"left\");\r\n\t\tunhoverInfobox(\"right\");\r\n\t};\r\n\r\n\tconst handleMiddleColumnClick = field => {\r\n\t\temit(\"compareAttribute\", {\r\n\t\t\tfieldKey: field.key,\r\n\t\t\tleftData: getField(leftInfobox.value, field.key),\r\n\t\t\trightData: getField(rightInfobox.value, field.key),\r\n\t\t\tleftTitle: leftInfobox.value.title,\r\n\t\t\trightTitle: rightInfobox.value.title,\r\n\t\t\tfieldType: field.type,\r\n\t\t\tfieldLabel: field.typeLabel\r\n\t\t});\r\n\t};\r\n\r\n\tconst showCombinedChart = field => {\r\n\t\tconst leftData = getField(leftInfobox.value, field.key);\r\n\t\tconst rightData = getField(rightInfobox.value, field.key);\r\n\r\n\t\t// 合并两个数据源的数据并添加来源标识\r\n\t\tconst combinedData = [\r\n\t\t\t...leftData.map(item => ({\r\n\t\t\t\t...item,\r\n\t\t\t\tsource: leftInfobox.value.title,\r\n\t\t\t\tsourceType: \"left\"\r\n\t\t\t})),\r\n\t\t\t...rightData.map(item => ({\r\n\t\t\t\t...item,\r\n\t\t\t\tsource: rightInfobox.value.title,\r\n\t\t\t\tsourceType: \"right\"\r\n\t\t\t}))\r\n\t\t];\r\n\r\n\t\tcurrentChart.value = {\r\n\t\t\ttitle: `合并图表 - ${field.key}`,\r\n\t\t\tfield: {\r\n\t\t\t\t...field,\r\n\t\t\t\tvisualization: \"line-chart\",\r\n\t\t\t\tcombined: true,\r\n\t\t\t\tsources: {\r\n\t\t\t\t\tleft: leftInfobox.value.title,\r\n\t\t\t\t\tright: rightInfobox.value.title\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tdata: combinedData\r\n\t\t};\r\n\t\tshowFullChartModal.value = true;\r\n\t};\r\n\r\n\tconst processInfoboxData = data => {\r\n\t\tif (!data) {\r\n\t\t\tconsole.warn(\"接收到空Infobox数据\");\r\n\t\t\treturn { title: \"\", type: \"\", data: {} };\r\n\t\t}\r\n\t\treturn {\r\n\t\t\ttitle: data.title || \"无标题\",\r\n\t\t\ttype: data.type || \"未知类型\",\r\n\t\t\tdata: data.sections || {}\r\n\t\t};\r\n\t};\r\n\r\n\tonMounted(() => {\r\n\t\tbus.on(\"div1_InfoboxData\", data => {\r\n\t\t\tleftInfobox.value = processInfoboxData(data);\r\n\t\t\tleftDataLoaded.value = true;\r\n\t\t\ttryCalculateScores();\r\n\t\t});\r\n\r\n\t\tbus.on(\"div3_InfoboxData\", data => {\r\n\t\t\trightInfobox.value = processInfoboxData(data);\r\n\t\t\trightDataLoaded.value = true;\r\n\t\t\ttryCalculateScores();\r\n\t\t});\r\n\t});\r\n\r\n\twatch(\r\n\t\t[() => leftDataLoaded.value, () => rightDataLoaded.value],\r\n\t\t([leftLoaded, rightLoaded]) => {\r\n\t\t\tif (leftLoaded && rightLoaded) {\r\n\t\t\t\ttryCalculateScores();\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\r\n\tonUnmounted(() => {\r\n\t\tbus.off(\"div1_InfoboxData\");\r\n\t\tbus.off(\"div3_InfoboxData\");\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t/* 原有样式保持不变 */\r\n\t.compare-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tpadding: 8px;\r\n\t\tbox-sizing: border-box;\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t.initial-loading {\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\tbottom: 0;\r\n\t\tbackground: rgba(255, 255, 255, 0.8);\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tz-index: 100;\r\n\t}\r\n\r\n\t.initial-loading p {\r\n\t\tmargin-top: 10px;\r\n\t\tfont-size: 14px;\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.loading-spinner {\r\n\t\twidth: 30px;\r\n\t\theight: 30px;\r\n\t\tborder: 3px solid #f3f3f3;\r\n\t\tborder-top: 3px solid #4caf50;\r\n\t\tborder-radius: 50%;\r\n\t\tanimation: spin 1s linear infinite;\r\n\t}\r\n\r\n\t@keyframes spin {\r\n\t\t0% {\r\n\t\t\ttransform: rotate(0deg);\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform: rotate(360deg);\r\n\t\t}\r\n\t}\r\n\r\n\t.comparison-grid {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns:\r\n\t\t\tminmax(120px, 1fr)\r\n\t\t\tminmax(80px, 100px)\r\n\t\t\tminmax(120px, 1fr);\r\n\t\twidth: 100%;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t\tborder-radius: 4px;\r\n\t\toverflow: hidden;\r\n\t\tmax-height: 500px;\r\n\t\toverflow-y: auto;\r\n\t}\r\n\r\n\t.header {\r\n\t\tpadding: 8px 6px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n\t\tposition: sticky;\r\n\t\ttop: 0;\r\n\t\tz-index: 1;\r\n\t\tborder-right: 1px solid #475569;\r\n\t\tmin-height: 36px;\r\n\t\tfont-size: 13px;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t}\r\n\r\n\t.header.middle-column {\r\n\t\tpadding: 8px 4px;\r\n\t\tbackground: #1e293b;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t}\r\n\r\n\t.cell {\r\n\t\tpadding: 8px;\r\n\t\theight: 110px;\r\n\t\tborder-bottom: 1px solid #e0e0e0;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tjustify-content: center;\r\n\t\tposition: relative;\r\n\t\tcursor: pointer;\r\n\t\ttransition: all 0.3s ease;\r\n\t\tmin-width: 0;\r\n\t\toverflow: hidden;\r\n\t}\r\n\r\n\t.left-column,\r\n\t.right-column {\r\n\t\tmax-width: 100%;\r\n\t}\r\n\r\n\t.cell:hover {\r\n\t\tbackground-color: #f5f5f5;\r\n\t}\r\n\r\n\t.left-column:hover {\r\n\t\tbackground-color: #fff8e1;\r\n\t}\r\n\r\n\t.right-column:hover {\r\n\t\tbackground-color: #fff8e1;\r\n\t}\r\n\r\n\t.middle-column {\r\n\t\tposition: relative;\r\n\t\tcursor: default;\r\n\t\tbackground-color: #f8f9fa;\r\n\t\ttransition: background-color 0.2s;\r\n\t}\r\n\r\n\t.middle-column:hover {\r\n\t\tbackground-color: #e9ecef;\r\n\t}\r\n\r\n\t.field-name {\r\n\t\tfont-weight: bold;\r\n\t\tmargin-bottom: 4px;\r\n\t\tfont-size: 12px;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t\ttext-align: center;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t.field-type {\r\n\t\tcolor: #666;\r\n\t\tfont-size: 11px;\r\n\t\tfont-style: italic;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t\ttext-align: center;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t.icon-actions {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\tgap: 15px;\r\n\t\tmargin-top: 8px;\r\n\t}\r\n\r\n\t.icon-btn {\r\n\t\tfont-size: 16px;\r\n\t\tcursor: pointer;\r\n\t\topacity: 0.7;\r\n\t\ttransition: all 0.2s;\r\n\t}\r\n\r\n\t.icon-btn:hover {\r\n\t\topacity: 1;\r\n\t\ttransform: scale(1.2);\r\n\t}\r\n\r\n\t.icon-btn.compare:hover {\r\n\t\tcolor: #4caf50;\r\n\t}\r\n\r\n\t.icon-btn.merge:hover {\r\n\t\tcolor: #2196f3;\r\n\t}\r\n\r\n\t.full-chart-modal {\r\n\t\tposition: fixed;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\tbottom: 0;\r\n\t\tbackground-color: rgba(0, 0, 0, 0.3);\r\n\t\tbackdrop-filter: blur(8px);\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t\tz-index: 1000;\r\n\t\tanimation: fadeIn 0.3s ease-out;\r\n\t}\r\n\r\n\t.modal-content {\r\n\t\tbackground: white;\r\n\t\tpadding: 16px;\r\n\t\tborder-radius: 8px;\r\n\t\twidth: 85%;\r\n\t\tmax-width: 800px;\r\n\t\tmax-height: 85vh;\r\n\t\tposition: relative;\r\n\t\toverflow-y: auto;\r\n\t}\r\n\r\n\t.chart-container {\r\n\t\theight: 60vh;\r\n\t\twidth: 100%;\r\n\t\tmargin: 16px 0;\r\n\t}\r\n\r\n\t.chart-legend {\r\n\t\tfont-size: 13px;\r\n\t\tcolor: #666;\r\n\t\ttext-align: center;\r\n\t\tmargin-top: 12px;\r\n\t\tpadding-top: 12px;\r\n\t\tborder-top: 1px solid #eee;\r\n\t}\r\n\r\n\t.close-btn {\r\n\t\tposition: absolute;\r\n\t\ttop: 8px;\r\n\t\tright: 8px;\r\n\t\tfont-size: 20px;\r\n\t\tbackground: none;\r\n\t\tborder: none;\r\n\t\tcursor: pointer;\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.close-btn:hover {\r\n\t\tcolor: #333;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}