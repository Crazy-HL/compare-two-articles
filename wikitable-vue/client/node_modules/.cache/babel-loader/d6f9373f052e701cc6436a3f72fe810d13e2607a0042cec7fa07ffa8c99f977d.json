{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createBlock as _createBlock, createVNode as _createVNode, Fragment as _Fragment, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-62c843dc\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = [\"id\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass(['div0', $props.selectContentClass]),\n    id: $props.divId,\n    ref: \"divRef\"\n  }, [_createElementVNode(\"h1\", null, _toDisplayString($props.pageTitle), 1 /* TEXT */), _createCommentVNode(\" 加载动画 \"), $setup.loading ? (_openBlock(), _createBlock($setup[\"LoadingSpinner\"], {\n    key: 0\n  })) : $setup.error ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" 错误信息 \"), _createVNode($setup[\"ErrorDisplay\"], {\n    message: $setup.error,\n    onRetry: $setup.fetchWikipediaContent\n  }, null, 8 /* PROPS */, [\"message\"])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 2\n  }, [_createCommentVNode(\" 文章内容 \"), _createVNode($setup[\"WikipediaContent\"], {\n    content: $setup.pageHtml,\n    onSelect: $setup.handleSelection\n  }, null, 8 /* PROPS */, [\"content\"])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)), _createCommentVNode(\" 弹出框 \"), _createVNode($setup[\"TextPopup\"], {\n    visible: $setup.showPopup[$props.divId],\n    content: $setup.selectedText[$props.divId],\n    containerClass: $props.divId === 'div1' ? 'chart-container1' : 'chart-container2',\n    containerRef: $setup.divRef,\n    onClose: $setup.closePopup\n  }, null, 8 /* PROPS */, [\"visible\", \"content\", \"containerClass\", \"containerRef\"]), _createCommentVNode(\" 悬浮大纲组件 \"), _createVNode($setup[\"ArticleOutline\"], {\n    content: $setup.pageHtml,\n    divId: $props.divId\n  }, null, 8 /* PROPS */, [\"content\", \"divId\"])], 10 /* CLASS, PROPS */, _hoisted_1);\n}","map":{"version":3,"names":["_createElementBlock","class","_normalizeClass","$props","selectContentClass","id","divId","ref","_createElementVNode","_toDisplayString","pageTitle","_createCommentVNode","$setup","loading","_createBlock","key","error","_Fragment","_createVNode","message","onRetry","fetchWikipediaContent","content","pageHtml","onSelect","handleSelection","visible","showPopup","selectedText","containerClass","containerRef","divRef","onClose","closePopup","_hoisted_1"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\ParentComponent.vue"],"sourcesContent":["<template>\r\n\t<div :class=\"['div0', selectContentClass]\" :id=\"divId\" ref=\"divRef\">\r\n\t\t<h1>{{ pageTitle }}</h1>\r\n\r\n\t\t<!-- 加载动画 -->\r\n\t\t<LoadingSpinner v-if=\"loading\" />\r\n\r\n\t\t<!-- 错误信息 -->\r\n\t\t<ErrorDisplay\r\n\t\t\tv-else-if=\"error\"\r\n\t\t\t:message=\"error\"\r\n\t\t\t@retry=\"fetchWikipediaContent\" />\r\n\r\n\t\t<!-- 文章内容 -->\r\n\t\t<WikipediaContent v-else :content=\"pageHtml\" @select=\"handleSelection\" />\r\n\r\n\t\t<!-- 弹出框 -->\r\n\t\t<TextPopup\r\n\t\t\t:visible=\"showPopup[divId]\"\r\n\t\t\t:content=\"selectedText[divId]\"\r\n\t\t\t:containerClass=\"\r\n\t\t\t\tdivId === 'div1' ? 'chart-container1' : 'chart-container2'\r\n\t\t\t\"\r\n\t\t\t:containerRef=\"divRef\"\r\n\t\t\t@close=\"closePopup\" />\r\n\r\n\t\t<!-- 悬浮大纲组件 -->\r\n\t\t<ArticleOutline :content=\"pageHtml\" :divId=\"divId\" />\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted, nextTick } from \"vue\";\r\n\timport LoadingSpinner from \"./LoadingSpinner.vue\";\r\n\timport ErrorDisplay from \"./ErrorDisplay.vue\";\r\n\timport WikipediaContent from \"./WikipediaContent.vue\";\r\n\timport TextPopup from \"./TextPopup.vue\";\r\n\timport ArticleOutline from \"./ArticleOutline.vue\"; // 引入大纲组件\r\n\timport * as d3 from \"d3\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\timport { parseGenericInfobox } from \"@/js/wikiInfoboxParser\";\r\n\tconst props = defineProps({\r\n\t\tpageTitle: String,\r\n\t\tdivId: String,\r\n\t\tselectContentClass: String,\r\n\t\tlinkedOutline: Array\r\n\t});\r\n\r\n\tconst pageHtml = ref(\"\"); // 文章 HTML 内容\r\n\tconst loading = ref(true); // 加载状态\r\n\tconst error = ref(\"\"); // 错误信息\r\n\tconst selectedText = ref({}); // 存储每个 div 的选中内容\r\n\tconst showPopup = ref({}); // 存储每个 div 的弹窗显示状态\r\n\tconst divRef = ref(null); // `Div1` 或 `Div3` 的 DOM 参考\r\n\r\n\tconst infoboxData = ref({\r\n\t\ttitle: \"\",\r\n\t\ttype: \"none\",\r\n\t\tdata: {}\r\n\t});\r\n\r\n\tconst fetchWikipediaContent = async () => {\r\n\t\ttry {\r\n\t\t\tloading.value = true;\r\n\t\t\terror.value = \"\";\r\n\r\n\t\t\tconst apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(\r\n\t\t\t\tprops.pageTitle\r\n\t\t\t)}`;\r\n\t\t\tconst response = await fetch(apiUrl);\r\n\t\t\tif (!response.ok)\r\n\t\t\t\tthrow new Error(`HTTP error! status: ${response.status}`);\r\n\r\n\t\t\tconst html = await response.text();\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\r\n\t\t\t// 增强Infobox检测\r\n\t\t\tconst infobox = doc.querySelector(`\r\n      .infobox, .infobox_v2, .infobox_v3, \r\n      .toccolours, .sidebar, table.infobox,\r\n      .infobox.biography, .infobox.geography,\r\n      [class*=\"infobox\"], table[class*=\"infobox\"]\r\n    `);\r\n\r\n\t\t\tconsole.log(\"Infobox检测结果:\", {\r\n\t\t\t\tfound: !!infobox,\r\n\t\t\t\tclass: infobox?.className,\r\n\t\t\t\thtml: infobox?.outerHTML?.substring(0, 200)\r\n\t\t\t});\r\n\r\n\t\t\tinfoboxData.value = infobox\r\n\t\t\t\t? parseGenericInfobox(infobox)\r\n\t\t\t\t: { title: props.pageTitle, type: \"none\", data: {} };\r\n\r\n\t\t\tif (infobox) infobox.remove();\r\n\r\n\t\t\t// 处理内容\r\n\t\t\tconst contentElement = doc.querySelector(\"body\");\r\n\t\t\tif (!contentElement) throw new Error(\"内容未找到\");\r\n\r\n\t\t\t// 增强DOM处理\r\n\t\t\tprocessDomElements(doc);\r\n\r\n\t\t\tpageHtml.value = contentElement.innerHTML;\r\n\t\t\tinjectWikipediaStyles();\r\n\r\n\t\t\t// 调试输出\r\n\t\t\tconsole.log(\r\n\t\t\t\t`Infobox数据 (${props.divId}):`,\r\n\t\t\t\tJSON.stringify(infoboxData.value, null, 2)\r\n\t\t\t);\r\n\t\t} catch (err) {\r\n\t\t\terror.value = `获取内容失败: ${err.message}`;\r\n\t\t\tconsole.error(\"获取Wikipedia内容错误:\", err);\r\n\t\t\tinfoboxData.value = {\r\n\t\t\t\ttitle: props.pageTitle,\r\n\t\t\t\ttype: \"error\",\r\n\t\t\t\tdata: { error: err.message }\r\n\t\t\t};\r\n\t\t} finally {\r\n\t\t\tloading.value = false;\r\n\t\t\t// 确保数据发送\r\n\t\t\tnextTick(() => {\r\n\t\t\t\tbus.emit(`${props.divId}_InfoboxData`, infoboxData.value);\r\n\t\t\t\tbus.emit(`${props.divId}_Event`, {\r\n\t\t\t\t\tcontent: pageHtml.value,\r\n\t\t\t\t\tinfoboxData: infoboxData.value\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t// 新增DOM处理函数\r\n\tfunction processDomElements(doc) {\r\n\t\t// 处理标题ID\r\n\t\tconst headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\r\n\t\theadings.forEach((heading, index) => {\r\n\t\t\tif (!heading.id) {\r\n\t\t\t\theading.id = `heading-${index}-${props.divId}`;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// 处理表格\r\n\t\tconst tables = doc.querySelectorAll(\"table\");\r\n\t\ttables.forEach((table, i) => {\r\n\t\t\ttable.classList.add(\"custom-table\");\r\n\t\t\tif (!table.id) table.id = `table-${i}-${props.divId}`;\r\n\t\t});\r\n\r\n\t\t// 处理图像\r\n\t\tdoc.querySelectorAll(\"img\").forEach(img => {\r\n\t\t\tif (!img.src.startsWith(\"http\")) {\r\n\t\t\t\timg.src = img.src.startsWith(\"//\")\r\n\t\t\t\t\t? `https:${img.src}`\r\n\t\t\t\t\t: `https://en.wikipedia.org${img.src}`;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// 增强样式注入\r\n\tconst injectWikipediaStyles = () => {\r\n\t\tconst styles = [\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=site.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=ext.cite.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=ext.scribunto.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=skins.vector.styles\"\r\n\t\t];\r\n\r\n\t\tstyles.forEach(url => {\r\n\t\t\tif (!document.querySelector(`link[href=\"${url}\"]`)) {\r\n\t\t\t\tconst link = document.createElement(\"link\");\r\n\t\t\t\tlink.rel = \"stylesheet\";\r\n\t\t\t\tlink.href = url;\r\n\t\t\t\tdocument.head.appendChild(link);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t// **处理选中内容**\r\n\tconst extractLinkedChapterContent = (sourceId, sourceContainerId) => {\r\n\t\t// console.log(\"Extracting linked chapter content for:\", sourceId); // 调试日志\r\n\r\n\t\t// 检查 linkedOutline 是否存在\r\n\t\tif (!props.linkedOutline) {\r\n\t\t\tconsole.error(\"LinkedOutline is undefined!\");\r\n\t\t\treturn { linkedItem: null, chapterContent: \"\" };\r\n\t\t}\r\n\r\n\t\t// 找到关联章节的 ID\r\n\t\tconst linkedItem = props.linkedOutline.find(\r\n\t\t\tlinked => linked.leftId === sourceId || linked.rightId === sourceId\r\n\t\t);\r\n\t\tif (!linkedItem) {\r\n\t\t\t// console.log(\"No linked chapter found for sourceId:\", sourceId); // 调试日志\r\n\t\t\treturn { linkedItem: null, chapterContent: \"\" };\r\n\t\t}\r\n\r\n\t\t// 确定目标容器和目标章节 ID\r\n\t\tconst targetContainerId = sourceContainerId === \"div1\" ? \"div3\" : \"div1\";\r\n\t\tconst targetId =\r\n\t\t\tsourceContainerId === \"div1\" ? linkedItem.rightId : linkedItem.leftId;\r\n\r\n\t\t// 提取目标章节的整个内容\r\n\t\tconst targetContainer = document.getElementById(targetContainerId);\r\n\t\tif (!targetContainer) return { linkedItem: null, chapterContent: \"\" };\r\n\r\n\t\tconst targetElement = targetContainer.querySelector(`#${targetId}`);\r\n\t\tif (!targetElement) return { linkedItem: null, chapterContent: \"\" };\r\n\r\n\t\t// 提取从当前标题到下一个同级标题之前的所有内容\r\n\t\tlet chapterContent = \"\";\r\n\t\tlet currentNode = targetElement;\r\n\r\n\t\twhile (currentNode) {\r\n\t\t\t// 如果遇到下一个同级标题，停止提取\r\n\t\t\tif (\r\n\t\t\t\tcurrentNode !== targetElement &&\r\n\t\t\t\tcurrentNode.nodeType === Node.ELEMENT_NODE &&\r\n\t\t\t\t/^h[1-6]$/i.test(currentNode.tagName)\r\n\t\t\t) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// 将内容添加到章节内容中\r\n\t\t\tif (\r\n\t\t\t\tcurrentNode.nodeType === Node.ELEMENT_NODE ||\r\n\t\t\t\tcurrentNode.nodeType === Node.TEXT_NODE\r\n\t\t\t) {\r\n\t\t\t\tchapterContent += currentNode.outerHTML || currentNode.textContent;\r\n\t\t\t}\r\n\r\n\t\t\tcurrentNode = currentNode.nextSibling;\r\n\t\t}\r\n\r\n\t\t// console.log(\"Extracted content:\", chapterContent); // 调试日志\r\n\t\treturn { linkedItem, chapterContent };\r\n\t};\r\n\t// **处理选中内容**\r\n\tconst handleSelection = content => {\r\n\t\t// 检查选择的内容是否为表格\r\n\t\tconst isTable = /<table.*?>.*?<\\/table>/s.test(content);\r\n\t\t// console.log(\"Is table:\", isTable); // 调试日志\r\n\r\n\t\t// 获取选中的元素\r\n\t\tconst selection = window.getSelection();\r\n\t\tif (!selection || selection.rangeCount === 0) {\r\n\t\t\tconsole.error(\"No selection found!\"); // 调试日志\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 获取选中的范围\r\n\t\tconst range = selection.getRangeAt(0);\r\n\r\n\t\t// 获取选择范围内的所有元素\r\n\t\tconst selectedNodes = range.cloneContents().childNodes;\r\n\t\t// console.log(\"Selected nodes:\", selectedNodes); // 调试日志\r\n\r\n\t\t// 遍历选择范围内的所有元素，找到第一个标题元素\r\n\t\tlet sourceId = undefined;\r\n\t\tfor (const node of selectedNodes) {\r\n\t\t\tif (\r\n\t\t\t\tnode.nodeType === Node.ELEMENT_NODE &&\r\n\t\t\t\t/^h[1-6]$/i.test(node.tagName)\r\n\t\t\t) {\r\n\t\t\t\tsourceId = node.id;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 如果未找到标题元素，尝试从选中范围的起始位置向上查找\r\n\t\tif (!sourceId) {\r\n\t\t\tlet startElement = range.startContainer;\r\n\t\t\twhile (startElement && !/^h[1-6]$/i.test(startElement.tagName)) {\r\n\t\t\t\tstartElement = startElement.parentElement;\r\n\t\t\t}\r\n\t\t\tsourceId = startElement ? startElement.id : undefined;\r\n\t\t}\r\n\r\n\t\t// console.log(\"Extracted source ID:\", sourceId); // 调试日志\r\n\r\n\t\t// 如果没有找到标题元素，直接弹出所选内容\r\n\t\tif (!sourceId) {\r\n\t\t\t// console.log(\"No heading element found, showing selected content only.\"); // 调试日志\r\n\t\t\tselectedText.value[props.divId] = content;\r\n\t\t\tconsole.log(`${props.divId}选中的文字###:`, content);\r\n\t\t\t// 传递选中内容\r\n\t\t\tbus.emit(`${props.divId}_Event`, { content });\r\n\t\t\tshowPopup.value[props.divId] = true;\r\n\r\n\t\t\t// 确保弹窗位置更新\r\n\t\t\tnextTick(() => {\r\n\t\t\t\tupdatePopupPosition();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 调用 handleSelectionWithSourceId 方法\r\n\t\thandleSelectionWithSourceId(content, sourceId, isTable);\r\n\t};\r\n\r\n\tconst handleSelectionWithSourceId = (content, sourceId, isTable) => {\r\n\t\t// console.log(\"Selected content:\", content); // 调试日志\r\n\t\t// console.log(\"Source ID:\", sourceId); // 调试日志\r\n\t\t// console.log(\"Is table:\", isTable); // 调试日志\r\n\r\n\t\t// 存储选中内容\r\n\t\tselectedText.value[props.divId] = content;\r\n\t\tconsole.log(`${props.divId}选中的文字###:`, content);\r\n\t\t// 传递选中内容\r\n\t\tbus.emit(`${props.divId}_Event`, { content });\r\n\t\tshowPopup.value[props.divId] = true;\r\n\r\n\t\t// 如果是表格，检查是否有关联章节\r\n\t\tif (isTable) {\r\n\t\t\t// 提取关联章节的整个内容和 linkedItem\r\n\t\t\tconst { linkedItem, chapterContent } = extractLinkedChapterContent(\r\n\t\t\t\tsourceId,\r\n\t\t\t\tprops.divId\r\n\t\t\t);\r\n\t\t\t// console.log(\"Linked chapter content:\", chapterContent); // 调试日志\r\n\r\n\t\t\t// 如果有关联章节内容\r\n\t\t\tif (linkedItem && chapterContent) {\r\n\t\t\t\t// 通知另一个容器弹出关联章节内容\r\n\t\t\t\tconst otherContainerId = props.divId === \"div1\" ? \"div3\" : \"div1\";\r\n\t\t\t\tconst targetId =\r\n\t\t\t\t\tprops.divId === \"div1\" ? linkedItem.rightId : linkedItem.leftId;\r\n\r\n\t\t\t\t// 先滚动到关联章节\r\n\t\t\t\tconst targetElement = document.getElementById(targetId);\r\n\t\t\t\tif (targetElement) {\r\n\t\t\t\t\ttargetElement.scrollIntoView({ behavior: \"smooth\" });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.log(`${otherContainerId}选中的文字???:`, chapterContent);\r\n\t\t\t\t// 传递选中内容\r\n\t\t\t\tbus.emit(`${otherContainerId}_Event`, { content: chapterContent });\r\n\t\t\t\t// 再弹出关联章节内容\r\n\t\t\t\tbus.emit(`${otherContainerId}Event`, {\r\n\t\t\t\t\tcontent: chapterContent, // 传递关联章节内容\r\n\t\t\t\t\tsourceId: sourceId\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// console.log(\"No linked chapter found, skipping auto-popup.\"); // 调试日志\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 确保弹窗位置更新\r\n\t\tnextTick(() => {\r\n\t\t\tupdatePopupPosition();\r\n\t\t});\r\n\t};\r\n\r\n\t// **关闭弹出框**\r\n\tconst closePopup = () => {\r\n\t\tshowPopup.value[props.divId] = false; // 根据 divId 关闭弹窗\r\n\t\tselectedText.value[props.divId] = \"\"; // 根据 divId 清除选中内容\r\n\r\n\t\t// 根据 divId 清空对应的容器\r\n\t\tconst container =\r\n\t\t\tprops.divId === \"div1\" ? \".chart-container1\" : \".chart-container2\";\r\n\t\td3.select(container).html(\"\");\r\n\t};\r\n\r\n\t// **更新遮罩层和弹出框的位置**\r\n\tconst updatePopupPosition = () => {\r\n\t\tif (showPopup.value[props.divId] && divRef.value) {\r\n\t\t\tconst popup = divRef.value.querySelector(\".text-popup\");\r\n\t\t\tconst overlay = divRef.value.querySelector(\".overlay\");\r\n\t\t\tif (popup && overlay) {\r\n\t\t\t\tconst rect = divRef.value.getBoundingClientRect();\r\n\t\t\t\tconst scrollTop = divRef.value.scrollTop;\r\n\t\t\t\tconst scrollLeft = divRef.value.scrollLeft;\r\n\r\n\t\t\t\t// 动态调整遮罩层和弹出框的位置\r\n\t\t\t\toverlay.style.top = `${scrollTop}px`;\r\n\t\t\t\toverlay.style.left = `${scrollLeft}px`;\r\n\t\t\t\toverlay.style.width = `${divRef.value.clientWidth}px`;\r\n\t\t\t\toverlay.style.height = `${divRef.value.clientHeight}px`;\r\n\r\n\t\t\t\tpopup.style.top = `${rect.height / 2 + scrollTop}px`;\r\n\t\t\t\tpopup.style.left = `${rect.width / 2 + scrollLeft}px`;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// **组件挂载后加载 Wikipedia 内容**\r\n\tonMounted(() => {\r\n\t\t// 确保 divRef 已初始化\r\n\t\tif (divRef.value) {\r\n\t\t\t// console.log(\"divRef 已绑定到 DOM 元素:\", divRef.value);\r\n\t\t} else {\r\n\t\t\t// console.error(\"divRef 未绑定到 DOM 元素\");\r\n\t\t}\r\n\t\tfetchWikipediaContent();\r\n\r\n\t\t// 监听父容器滚动事件\r\n\t\tif (divRef.value) {\r\n\t\t\tdivRef.value.addEventListener(\"scroll\", updatePopupPosition);\r\n\t\t}\r\n\t\t// 监听另一个容器的事件\r\n\t\tbus.on(`${props.divId}Event`, ({ content, sourceId }) => {\r\n\t\t\t// console.log(\"Received event:\", content, sourceId); // 调试日志\r\n\r\n\t\t\t// 存储关联章节内容\r\n\t\t\tselectedText.value[props.divId] = content;\r\n\t\t\tshowPopup.value[props.divId] = true;\r\n\r\n\t\t\t// 确保弹窗位置更新\r\n\t\t\tnextTick(() => {\r\n\t\t\t\tupdatePopupPosition();\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t// 监听自身的信息框数据事件（调试用）\r\n\t\tbus.on(`${props.divId}_InfoboxData`, data => {\r\n\t\t\tconsole.log(`Debug: ${props.divId} emitted infobox data:`, data);\r\n\t\t});\r\n\t});\r\n\r\n\t// **组件卸载时解绑事件**\r\n\tonUnmounted(() => {\r\n\t\t// 解绑父容器滚动事件\r\n\t\tif (divRef.value) {\r\n\t\t\tdivRef.value.removeEventListener(\"scroll\", updatePopupPosition);\r\n\t\t}\r\n\t\tbus.off(`${props.divId}Event`);\r\n\t\tbus.off(`${props.divId}_InfoboxData`);\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\th1 {\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t/* 文章容器 */\r\n\t.div0 {\r\n\t\tposition: relative;\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t#div1,\r\n\t#div3 {\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t.showHtml {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\toverflow: auto;\r\n\t}\r\n\r\n\t/* 选中文本的高亮样式 */\r\n\t::selection {\r\n\t\tbackground-color: yellow;\r\n\t\tcolor: black;\r\n\t}\r\n</style>\r\n"],"mappings":";;mBAAA;;uBACCA,mBAAA,CA2BM;IA3BAC,KAAK,EADZC,eAAA,UACuBC,MAAA,CAAAC,kBAAkB;IAAIC,EAAE,EAAEF,MAAA,CAAAG,KAAK;IAAEC,GAAG,EAAC;MAC1DC,mBAAA,CAAwB,YAAAC,gBAAA,CAAjBN,MAAA,CAAAO,SAAS,kBAEhBC,mBAAA,UAAa,EACSC,MAAA,CAAAC,OAAO,I,cAA7BC,YAAA,CAAiCF,MAAA;IALnCG,GAAA;EAAA,MAScH,MAAA,CAAAI,KAAK,I,cADjBhB,mBAAA,CAGkCiB,SAAA;IAXpCF,GAAA;EAAA,IAOEJ,mBAAA,UAAa,EACbO,YAAA,CAGkCN,MAAA;IADhCO,OAAO,EAAEP,MAAA,CAAAI,KAAK;IACdI,OAAK,EAAER,MAAA,CAAAS;0GAGTrB,mBAAA,CAAyEiB,SAAA;IAd3EF,GAAA;EAAA,IAaEJ,mBAAA,UAAa,EACbO,YAAA,CAAyEN,MAAA;IAA/CU,OAAO,EAAEV,MAAA,CAAAW,QAAQ;IAAGC,QAAM,EAAEZ,MAAA,CAAAa;0FAEtDd,mBAAA,SAAY,EACZO,YAAA,CAOuBN,MAAA;IANrBc,OAAO,EAAEd,MAAA,CAAAe,SAAS,CAACxB,MAAA,CAAAG,KAAK;IACxBgB,OAAO,EAAEV,MAAA,CAAAgB,YAAY,CAACzB,MAAA,CAAAG,KAAK;IAC3BuB,cAAc,EAAQ1B,MAAA,CAAAG,KAAK;IAG3BwB,YAAY,EAAElB,MAAA,CAAAmB,MAAM;IACpBC,OAAK,EAAEpB,MAAA,CAAAqB;qFAETtB,mBAAA,YAAe,EACfO,YAAA,CAAqDN,MAAA;IAApCU,OAAO,EAAEV,MAAA,CAAAW,QAAQ;IAAGjB,KAAK,EAAEH,MAAA,CAAAG;yEA3B9C4B,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}