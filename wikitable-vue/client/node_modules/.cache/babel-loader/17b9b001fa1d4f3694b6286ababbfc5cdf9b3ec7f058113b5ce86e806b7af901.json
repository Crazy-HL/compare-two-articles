{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-4d83b437\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  ref: \"chartEl\",\n  class: \"line-chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","_createElementBlock","_hoisted_1"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\charts\\LineChart.vue"],"sourcesContent":["<template>\r\n\t<div ref=\"chartEl\" class=\"line-chart\"></div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, watch, onBeforeUnmount } from \"vue\";\r\n\timport * as echarts from \"echarts\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdata: {\r\n\t\t\ttype: [Array, Object],\r\n\t\t\tdefault: () => []\r\n\t\t},\r\n\t\tisCombined: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false\r\n\t\t},\r\n\t\tsources: {\r\n\t\t\ttype: Array,\r\n\t\t\tdefault: () => []\r\n\t\t}\r\n\t});\r\n\r\n\tconst chartEl = ref(null);\r\n\tlet chartInstance = null;\r\n\r\n\t// 颜色集合\r\n\tconst colorPalette = [\r\n\t\t\"#4e79a7\",\r\n\t\t\"#e15759\",\r\n\t\t\"#76b7b2\",\r\n\t\t\"#f28e2b\",\r\n\t\t\"#59a14f\",\r\n\t\t\"#edc948\",\r\n\t\t\"#b07aa1\",\r\n\t\t\"#ff9da7\",\r\n\t\t\"#9c755f\",\r\n\t\t\"#bab0ac\"\r\n\t];\r\n\r\n\t// 格式化数值显示\r\n\tconst formatNumber = (value, isPercentage = true) => {\r\n\t\tconst num = Number(value);\r\n\t\tif (isNaN(num)) return \"0\";\r\n\t\treturn isPercentage ? num.toFixed(2) + \"%\" : num.toLocaleString();\r\n\t};\r\n\r\n\tconst initChart = () => {\r\n\t\tif (!chartEl.value) return;\r\n\r\n\t\tchartInstance = echarts.init(chartEl.value);\r\n\r\n\t\t// 处理合并图表数据\r\n\t\tif (props.isCombined && props.data.categories && props.data.series) {\r\n\t\t\tconst option = {\r\n\t\t\t\ttooltip: {\r\n\t\t\t\t\ttrigger: \"axis\",\r\n\t\t\t\t\tformatter: params => {\r\n\t\t\t\t\t\treturn params\r\n\t\t\t\t\t\t\t.map(param => {\r\n\t\t\t\t\t\t\t\tlet tip = `${param.seriesName}<br/>${\r\n\t\t\t\t\t\t\t\t\tparam.axisValueLabel\r\n\t\t\t\t\t\t\t\t}: ${formatNumber(param.value, param.data?.isPercentage)}`;\r\n\t\t\t\t\t\t\t\tif (param.data?.unit) tip += ` ${param.data.unit}`;\r\n\t\t\t\t\t\t\t\treturn tip;\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t.join(\"<br/>\");\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tlegend: {\r\n\t\t\t\t\tdata: props.sources\r\n\t\t\t\t},\r\n\t\t\t\txAxis: {\r\n\t\t\t\t\ttype: \"category\",\r\n\t\t\t\t\tdata: props.data.categories,\r\n\t\t\t\t\taxisLabel: {\r\n\t\t\t\t\t\tinterval: 0,\r\n\t\t\t\t\t\trotate: props.data.categories.length > 5 ? 30 : 0\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tyAxis: {\r\n\t\t\t\t\ttype: \"value\",\r\n\t\t\t\t\taxisLabel: {\r\n\t\t\t\t\t\tformatter: \"{value}%\"\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tseries: props.data.series.map((series, index) => ({\r\n\t\t\t\t\tname: series.name,\r\n\t\t\t\t\tdata: series.data.map((value, i) => ({\r\n\t\t\t\t\t\tvalue,\r\n\t\t\t\t\t\tunit: \"%\",\r\n\t\t\t\t\t\tisPercentage: true,\r\n\t\t\t\t\t\t// 确保每个数据点有相同的x轴索引\r\n\t\t\t\t\t\txIndex: props.data.categories.indexOf(series.years?.[i])\r\n\t\t\t\t\t})),\r\n\t\t\t\t\ttype: \"line\",\r\n\t\t\t\t\tsmooth: true,\r\n\t\t\t\t\tsymbol: \"circle\",\r\n\t\t\t\t\tsymbolSize: 8,\r\n\t\t\t\t\titemStyle: {\r\n\t\t\t\t\t\tcolor: series.color || colorPalette[index % colorPalette.length]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tlineStyle: {\r\n\t\t\t\t\t\twidth: 3\r\n\t\t\t\t\t},\r\n\t\t\t\t\tlabel: {\r\n\t\t\t\t\t\tshow: true,\r\n\t\t\t\t\t\tformatter: params => {\r\n\t\t\t\t\t\t\treturn formatNumber(params.value);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}))\r\n\t\t\t};\r\n\t\t\tchartInstance.setOption(option);\r\n\t\t}\r\n\t\t// 处理普通折线图数据\r\n\t\telse if (Array.isArray(props.data)) {\r\n\t\t\tconst option = {\r\n\t\t\t\ttooltip: {\r\n\t\t\t\t\ttrigger: \"axis\",\r\n\t\t\t\t\tformatter: params => {\r\n\t\t\t\t\t\treturn params\r\n\t\t\t\t\t\t\t.map(param => {\r\n\t\t\t\t\t\t\t\tlet tip = `${param.seriesName}<br/>${\r\n\t\t\t\t\t\t\t\t\tparam.axisValueLabel\r\n\t\t\t\t\t\t\t\t}: ${formatNumber(param.value, true)}`;\r\n\t\t\t\t\t\t\t\tif (param.data.unit) tip += ` ${param.data.unit}`;\r\n\t\t\t\t\t\t\t\treturn tip;\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t.join(\"<br/>\");\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\txAxis: {\r\n\t\t\t\t\ttype: \"category\",\r\n\t\t\t\t\tdata: [...new Set(props.data.map(item => item.year))], // 去重年份\r\n\t\t\t\t\taxisLabel: {\r\n\t\t\t\t\t\tinterval: 0,\r\n\t\t\t\t\t\trotate: props.data.length > 5 ? 30 : 0\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tyAxis: {\r\n\t\t\t\t\ttype: \"value\",\r\n\t\t\t\t\taxisLabel: {\r\n\t\t\t\t\t\tformatter: \"{value}%\"\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tseries: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"数据\",\r\n\t\t\t\t\t\tdata: props.data.map(item => ({\r\n\t\t\t\t\t\t\tvalue: Number(item.value) || 0,\r\n\t\t\t\t\t\t\tunit: item.unit || \"%\",\r\n\t\t\t\t\t\t\tisPercentage: true\r\n\t\t\t\t\t\t})),\r\n\t\t\t\t\t\ttype: \"line\",\r\n\t\t\t\t\t\tsmooth: true,\r\n\t\t\t\t\t\tsymbol: \"circle\",\r\n\t\t\t\t\t\tsymbolSize: 8,\r\n\t\t\t\t\t\titemStyle: {\r\n\t\t\t\t\t\t\tcolor: \"#3498db\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tlineStyle: {\r\n\t\t\t\t\t\t\twidth: 3\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tlabel: {\r\n\t\t\t\t\t\t\tshow: true,\r\n\t\t\t\t\t\t\tformatter: params => {\r\n\t\t\t\t\t\t\t\treturn formatNumber(params.value);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t};\r\n\t\t\tchartInstance.setOption(option);\r\n\t\t}\r\n\r\n\t\t// 添加窗口大小变化监听\r\n\t\twindow.addEventListener(\"resize\", handleResize);\r\n\t};\r\n\r\n\tconst handleResize = () => {\r\n\t\tif (chartInstance) {\r\n\t\t\tchartInstance.resize();\r\n\t\t}\r\n\t};\r\n\r\n\tonMounted(() => {\r\n\t\tinitChart();\r\n\t});\r\n\r\n\tonBeforeUnmount(() => {\r\n\t\tif (chartInstance) {\r\n\t\t\tchartInstance.dispose();\r\n\t\t\twindow.removeEventListener(\"resize\", handleResize);\r\n\t\t}\r\n\t});\r\n\r\n\twatch(\r\n\t\t() => props.data,\r\n\t\t() => {\r\n\t\t\tif (chartInstance) {\r\n\t\t\t\tinitChart();\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ deep: true }\r\n\t);\r\n\r\n\twatch(\r\n\t\t() => props.isCombined,\r\n\t\t() => {\r\n\t\t\tif (chartInstance) {\r\n\t\t\t\tinitChart();\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n</script>\r\n\r\n<style scoped>\r\n\t.line-chart {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tmin-height: 300px;\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,GAAG,EAAC,SAAS;EAACC,KAAK,EAAC;;;uBAAzBC,mBAAA,CAA4C,OAA5CC,UAA4C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}