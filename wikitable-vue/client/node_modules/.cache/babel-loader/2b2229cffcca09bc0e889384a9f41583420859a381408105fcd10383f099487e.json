{"ast":null,"code":"import \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, watch, onMounted, onUnmounted, nextTick } from \"vue\";\nexport default {\n  __name: 'ArticleOutline',\n  props: {\n    content: String,\n    // 文章 HTML\n    divId: String,\n    // \"div1\" 或 \"div3\"\n    linkedOutline: Array // 关联的大纲数据\n  },\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const props = __props;\n    const isVisible = ref(false);\n    const outline = ref([]);\n    const buttonStyle = ref({});\n    const outlineStyle = ref({});\n    const linkedChapters = ref({}); // 存储两篇文章中匹配的章节\n    const isSyncing = ref(false); // 避免死循环同步滚动\n\n    // **切换大纲的显示**\n    const toggleOutline = () => {\n      isVisible.value = !isVisible.value;\n    };\n\n    // **解析文章，提取 h1-h6 标题**\n    const extractOutline = content => {\n      if (!content) return [];\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(content, \"text/html\");\n      const headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\n      return Array.from(headings).map((heading, index) => {\n        const level = parseInt(heading.tagName.substring(1));\n        const id = `heading-${index}-${props.divId}`;\n        heading.id = id;\n        return {\n          id,\n          text: heading.textContent.trim(),\n          level\n        };\n      });\n    };\n\n    // **计算两个标题的相似度（Jaccard）**\n    const calculateSimilarity = (text1, text2) => {\n      const set1 = new Set(text1.toLowerCase().split(/\\s+/));\n      const set2 = new Set(text2.toLowerCase().split(/\\s+/));\n      const intersection = new Set([...set1].filter(x => set2.has(x)));\n      const union = new Set([...set1, ...set2]);\n      return intersection.size / union.size;\n    };\n\n    // **匹配两篇文章的相似章节**\n    const matchChapters = (outline1, outline2) => {\n      const matched = {};\n      outline1.forEach(chapter1 => {\n        let bestMatch = null;\n        let bestScore = 0;\n        outline2.forEach(chapter2 => {\n          const similarity = calculateSimilarity(chapter1.text, chapter2.text);\n          if (similarity > 0.6 && similarity > bestScore) {\n            // 设定阈值 0.6\n            bestScore = similarity;\n            bestMatch = chapter2.id;\n          }\n        });\n        if (bestMatch) {\n          matched[chapter1.id] = bestMatch;\n        }\n      });\n      return matched;\n    };\n\n    // **监听 content 变化，更新大纲**\n    watch(() => props.content, async newContent => {\n      outline.value = extractOutline(newContent);\n      await nextTick();\n      if (props.divId === \"div1\") {\n        linkedChapters.value = matchChapters(outline.value, extractOutline(document.getElementById(\"div3\")?.innerHTML));\n      } else {\n        linkedChapters.value = matchChapters(outline.value, extractOutline(document.getElementById(\"div1\")?.innerHTML));\n      }\n    }, {\n      immediate: true\n    });\n\n    // **检查是否存在关联章节**\n    const isLinked = item => {\n      return linkedChapters.value[item.id] !== undefined;\n    };\n\n    // **滚动到章节，同时同步另一篇文章**\n    const scrollToChapter = id => {\n      const element = document.getElementById(id);\n      if (element) {\n        element.scrollIntoView({\n          behavior: \"smooth\"\n        });\n\n        // 获取关联章节\n        const linkedId = linkedChapters.value[id];\n        if (linkedId) {\n          const linkedElement = document.getElementById(linkedId);\n          if (linkedElement) {\n            setTimeout(() => {\n              linkedElement.scrollIntoView({\n                behavior: \"smooth\"\n              });\n            }, 200); // 延迟确保滚动不会冲突\n          }\n        }\n      }\n    };\n\n    // **监听文章滚动，同步另一篇**\n    const handleScroll = () => {\n      if (isSyncing.value) return;\n      isSyncing.value = true;\n      const referenceElement = document.getElementById(props.divId);\n      if (!referenceElement) return;\n\n      // 获取当前可见章节\n      let currentChapter = null;\n      outline.value.forEach(chapter => {\n        const element = document.getElementById(chapter.id);\n        if (element) {\n          const rect = element.getBoundingClientRect();\n          if (rect.top >= 0 && rect.top < window.innerHeight / 2) {\n            currentChapter = chapter.id;\n          }\n        }\n      });\n      if (currentChapter && linkedChapters.value[currentChapter]) {\n        const linkedElement = document.getElementById(linkedChapters.value[currentChapter]);\n        if (linkedElement) {\n          linkedElement.scrollIntoView({\n            behavior: \"smooth\"\n          });\n        }\n      }\n      setTimeout(() => {\n        isSyncing.value = false;\n      }, 300);\n    };\n\n    // **初始化**\n    onMounted(() => {\n      outline.value = extractOutline(props.content);\n      const referenceElement = document.getElementById(props.divId);\n      if (referenceElement) {\n        referenceElement.addEventListener(\"scroll\", handleScroll);\n      }\n    });\n\n    // **组件销毁时移除事件**\n    onUnmounted(() => {\n      const referenceElement = document.getElementById(props.divId);\n      if (referenceElement) {\n        referenceElement.removeEventListener(\"scroll\", handleScroll);\n      }\n    });\n    const __returned__ = {\n      props,\n      isVisible,\n      outline,\n      buttonStyle,\n      outlineStyle,\n      linkedChapters,\n      isSyncing,\n      toggleOutline,\n      extractOutline,\n      calculateSimilarity,\n      matchChapters,\n      isLinked,\n      scrollToChapter,\n      handleScroll,\n      ref,\n      watch,\n      onMounted,\n      onUnmounted,\n      nextTick\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","onMounted","onUnmounted","nextTick","props","__props","isVisible","outline","buttonStyle","outlineStyle","linkedChapters","isSyncing","toggleOutline","value","extractOutline","content","parser","DOMParser","doc","parseFromString","headings","querySelectorAll","Array","from","map","heading","index","level","parseInt","tagName","substring","id","divId","text","textContent","trim","calculateSimilarity","text1","text2","set1","Set","toLowerCase","split","set2","intersection","filter","x","has","union","size","matchChapters","outline1","outline2","matched","forEach","chapter1","bestMatch","bestScore","chapter2","similarity","newContent","document","getElementById","innerHTML","immediate","isLinked","item","undefined","scrollToChapter","element","scrollIntoView","behavior","linkedId","linkedElement","setTimeout","handleScroll","referenceElement","currentChapter","chapter","rect","getBoundingClientRect","top","window","innerHeight","addEventListener","removeEventListener"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/ArticleOutline.vue"],"sourcesContent":["<template>\r\n\t<!-- 大纲切换按钮 -->\r\n\t<button @click=\"toggleOutline\" class=\"toggle-btn\" :style=\"buttonStyle\">\r\n\t\t<svg v-if=\"!isVisible\" class=\"icon\" viewBox=\"0 0 24 24\">\r\n\t\t\t<path\r\n\t\t\t\tfill=\"currentColor\"\r\n\t\t\t\td=\"M3 6h18v2H3V6zm0 5h18v2H3v-2zm0 5h18v2H3v-2z\"></path>\r\n\t\t</svg>\r\n\t\t<svg v-else class=\"icon close\" viewBox=\"0 0 24 24\">\r\n\t\t\t<path fill=\"currentColor\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n\t\t</svg>\r\n\t</button>\r\n\r\n\t<!-- 大纲内容 -->\r\n\t<div v-if=\"isVisible\" class=\"outline-container\" :style=\"outlineStyle\">\r\n\t\t<div class=\"outline\">\r\n\t\t\t<ul>\r\n\t\t\t\t<li\r\n\t\t\t\t\tv-for=\"(item, index) in outline\"\r\n\t\t\t\t\t:key=\"item.id\"\r\n\t\t\t\t\t:class=\"{ highlight: isLinked(item), linked: isLinked(item) }\"\r\n\t\t\t\t\t:style=\"{ paddingLeft: `${(item.level - 1) * 15}px` }\">\r\n\t\t\t\t\t<a :href=\"'#' + item.id\" @click.prevent=\"scrollToChapter(item.id)\">{{\r\n\t\t\t\t\t\titem.text\r\n\t\t\t\t\t}}</a>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, watch, onMounted, onUnmounted, nextTick } from \"vue\";\r\n\r\n\tconst props = defineProps({\r\n\t\tcontent: String, // 文章 HTML\r\n\t\tdivId: String, // \"div1\" 或 \"div3\"\r\n\t\tlinkedOutline: Array // 关联的大纲数据\r\n\t});\r\n\r\n\tconst isVisible = ref(false);\r\n\tconst outline = ref([]);\r\n\tconst buttonStyle = ref({});\r\n\tconst outlineStyle = ref({});\r\n\tconst linkedChapters = ref({}); // 存储两篇文章中匹配的章节\r\n\tconst isSyncing = ref(false); // 避免死循环同步滚动\r\n\r\n\t// **切换大纲的显示**\r\n\tconst toggleOutline = () => {\r\n\t\tisVisible.value = !isVisible.value;\r\n\t};\r\n\r\n\t// **解析文章，提取 h1-h6 标题**\r\n\tconst extractOutline = content => {\r\n\t\tif (!content) return [];\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst doc = parser.parseFromString(content, \"text/html\");\r\n\t\tconst headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\r\n\r\n\t\treturn Array.from(headings).map((heading, index) => {\r\n\t\t\tconst level = parseInt(heading.tagName.substring(1));\r\n\t\t\tconst id = `heading-${index}-${props.divId}`;\r\n\t\t\theading.id = id;\r\n\t\t\treturn { id, text: heading.textContent.trim(), level };\r\n\t\t});\r\n\t};\r\n\r\n\t// **计算两个标题的相似度（Jaccard）**\r\n\tconst calculateSimilarity = (text1, text2) => {\r\n\t\tconst set1 = new Set(text1.toLowerCase().split(/\\s+/));\r\n\t\tconst set2 = new Set(text2.toLowerCase().split(/\\s+/));\r\n\t\tconst intersection = new Set([...set1].filter(x => set2.has(x)));\r\n\t\tconst union = new Set([...set1, ...set2]);\r\n\t\treturn intersection.size / union.size;\r\n\t};\r\n\r\n\t// **匹配两篇文章的相似章节**\r\n\tconst matchChapters = (outline1, outline2) => {\r\n\t\tconst matched = {};\r\n\t\toutline1.forEach(chapter1 => {\r\n\t\t\tlet bestMatch = null;\r\n\t\t\tlet bestScore = 0;\r\n\r\n\t\t\toutline2.forEach(chapter2 => {\r\n\t\t\t\tconst similarity = calculateSimilarity(chapter1.text, chapter2.text);\r\n\t\t\t\tif (similarity > 0.6 && similarity > bestScore) {\r\n\t\t\t\t\t// 设定阈值 0.6\r\n\t\t\t\t\tbestScore = similarity;\r\n\t\t\t\t\tbestMatch = chapter2.id;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (bestMatch) {\r\n\t\t\t\tmatched[chapter1.id] = bestMatch;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn matched;\r\n\t};\r\n\r\n\t// **监听 content 变化，更新大纲**\r\n\twatch(\r\n\t\t() => props.content,\r\n\t\tasync newContent => {\r\n\t\t\toutline.value = extractOutline(newContent);\r\n\t\t\tawait nextTick();\r\n\r\n\t\t\tif (props.divId === \"div1\") {\r\n\t\t\t\tlinkedChapters.value = matchChapters(\r\n\t\t\t\t\toutline.value,\r\n\t\t\t\t\textractOutline(document.getElementById(\"div3\")?.innerHTML)\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tlinkedChapters.value = matchChapters(\r\n\t\t\t\t\toutline.value,\r\n\t\t\t\t\textractOutline(document.getElementById(\"div1\")?.innerHTML)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\t// **检查是否存在关联章节**\r\n\tconst isLinked = item => {\r\n\t\treturn linkedChapters.value[item.id] !== undefined;\r\n\t};\r\n\r\n\t// **滚动到章节，同时同步另一篇文章**\r\n\tconst scrollToChapter = id => {\r\n\t\tconst element = document.getElementById(id);\r\n\t\tif (element) {\r\n\t\t\telement.scrollIntoView({ behavior: \"smooth\" });\r\n\r\n\t\t\t// 获取关联章节\r\n\t\t\tconst linkedId = linkedChapters.value[id];\r\n\t\t\tif (linkedId) {\r\n\t\t\t\tconst linkedElement = document.getElementById(linkedId);\r\n\t\t\t\tif (linkedElement) {\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\tlinkedElement.scrollIntoView({ behavior: \"smooth\" });\r\n\t\t\t\t\t}, 200); // 延迟确保滚动不会冲突\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// **监听文章滚动，同步另一篇**\r\n\tconst handleScroll = () => {\r\n\t\tif (isSyncing.value) return;\r\n\t\tisSyncing.value = true;\r\n\r\n\t\tconst referenceElement = document.getElementById(props.divId);\r\n\t\tif (!referenceElement) return;\r\n\r\n\t\t// 获取当前可见章节\r\n\t\tlet currentChapter = null;\r\n\t\toutline.value.forEach(chapter => {\r\n\t\t\tconst element = document.getElementById(chapter.id);\r\n\t\t\tif (element) {\r\n\t\t\t\tconst rect = element.getBoundingClientRect();\r\n\t\t\t\tif (rect.top >= 0 && rect.top < window.innerHeight / 2) {\r\n\t\t\t\t\tcurrentChapter = chapter.id;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (currentChapter && linkedChapters.value[currentChapter]) {\r\n\t\t\tconst linkedElement = document.getElementById(\r\n\t\t\t\tlinkedChapters.value[currentChapter]\r\n\t\t\t);\r\n\t\t\tif (linkedElement) {\r\n\t\t\t\tlinkedElement.scrollIntoView({ behavior: \"smooth\" });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\tisSyncing.value = false;\r\n\t\t}, 300);\r\n\t};\r\n\r\n\t// **初始化**\r\n\tonMounted(() => {\r\n\t\toutline.value = extractOutline(props.content);\r\n\t\tconst referenceElement = document.getElementById(props.divId);\r\n\t\tif (referenceElement) {\r\n\t\t\treferenceElement.addEventListener(\"scroll\", handleScroll);\r\n\t\t}\r\n\t});\r\n\r\n\t// **组件销毁时移除事件**\r\n\tonUnmounted(() => {\r\n\t\tconst referenceElement = document.getElementById(props.divId);\r\n\t\tif (referenceElement) {\r\n\t\t\treferenceElement.removeEventListener(\"scroll\", handleScroll);\r\n\t\t}\r\n\t});\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}