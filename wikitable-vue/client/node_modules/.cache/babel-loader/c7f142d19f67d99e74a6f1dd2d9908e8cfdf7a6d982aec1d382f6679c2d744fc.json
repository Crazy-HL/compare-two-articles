{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-db33a0a4\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  ref: \"chartEl\",\n  class: \"bar-chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","_createElementBlock","_hoisted_1"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\charts\\BarChart.vue"],"sourcesContent":["<template>\r\n\t<div ref=\"chartEl\" class=\"bar-chart\"></div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, onMounted, watch } from \"vue\";\r\n\timport * as echarts from \"echarts\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdata: {\r\n\t\t\ttype: Array,\r\n\t\t\tdefault: () => []\r\n\t\t},\r\n\t\tfieldKey: String\r\n\t});\r\n\r\n\tconst chartEl = ref(null);\r\n\tlet chartInstance = null;\r\n\r\n\t// 根据字段key获取单位信息\r\n\tconst getUnitInfo = fieldKey => {\r\n\t\tswitch (fieldKey) {\r\n\t\t\tcase \"GDP\":\r\n\t\t\t\treturn { unit: \"T\", factor: 1e12 };\r\n\t\t\tcase \"Population\":\r\n\t\t\t\treturn { unit: \"亿\", factor: 1e8 };\r\n\t\t\tdefault:\r\n\t\t\t\treturn { unit: \"\", factor: 1 };\r\n\t\t}\r\n\t};\r\n\r\n\t// 格式化数值显示\r\n\tconst formatNumber = (value, fieldKey) => {\r\n\t\tconst num = Number(value);\r\n\t\tif (isNaN(num)) return \"0\";\r\n\r\n\t\tconst { unit } = getUnitInfo(fieldKey);\r\n\t\treturn num.toFixed(2) + unit;\r\n\t};\r\n\r\n\tconst initChart = () => {\r\n\t\tif (!chartEl.value) return;\r\n\r\n\t\tchartInstance = echarts.init(chartEl.value);\r\n\r\n\t\t// 自动计算Y轴范围\r\n\t\tconst allValues = props.data\r\n\t\t\t.map(item => Number(item.value) || 0)\r\n\t\t\t.filter(v => !isNaN(v));\r\n\t\tconst maxValue = allValues.length ? Math.max(...allValues) : 100;\r\n\t\tconst minValue = allValues.length ? Math.min(0, ...allValues) : 0;\r\n\r\n\t\tconst series = [\r\n\t\t\t{\r\n\t\t\t\tname: \"数据\",\r\n\t\t\t\ttype: \"bar\",\r\n\t\t\t\tbarWidth: \"60%\",\r\n\t\t\t\tdata: props.data.map(item => ({\r\n\t\t\t\t\tvalue: Number(item.value) || 0,\r\n\t\t\t\t\tunit: item.unit,\r\n\t\t\t\t\tyear: item.year\r\n\t\t\t\t})),\r\n\t\t\t\titemStyle: {\r\n\t\t\t\t\tcolor: \"#3498db\"\r\n\t\t\t\t},\r\n\t\t\t\tlabel: {\r\n\t\t\t\t\tshow: true,\r\n\t\t\t\t\tposition: \"top\",\r\n\t\t\t\t\tformatter: params => {\r\n\t\t\t\t\t\treturn formatNumber(params.value, props.fieldKey);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t];\r\n\r\n\t\tconst { unit } = getUnitInfo(props.fieldKey);\r\n\r\n\t\tconst option = {\r\n\t\t\ttooltip: {\r\n\t\t\t\ttrigger: \"axis\",\r\n\t\t\t\taxisPointer: {\r\n\t\t\t\t\ttype: \"shadow\"\r\n\t\t\t\t},\r\n\t\t\t\tformatter: params => {\r\n\t\t\t\t\treturn params\r\n\t\t\t\t\t\t.map(param => {\r\n\t\t\t\t\t\t\tlet tip = `${param.seriesName}<br/>${param.name}: ${formatNumber(\r\n\t\t\t\t\t\t\t\tparam.value,\r\n\t\t\t\t\t\t\t\tprops.fieldKey\r\n\t\t\t\t\t\t\t)}`;\r\n\t\t\t\t\t\t\tif (param.data.unit) tip += ` ${param.data.unit}`;\r\n\t\t\t\t\t\t\tif (param.data.year) tip += ` (${param.data.year})`;\r\n\t\t\t\t\t\t\treturn tip;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.join(\"<br/>\");\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tgrid: {\r\n\t\t\t\tleft: \"3%\",\r\n\t\t\t\tright: \"4%\",\r\n\t\t\t\tbottom: \"3%\",\r\n\t\t\t\tcontainLabel: true\r\n\t\t\t},\r\n\t\t\txAxis: {\r\n\t\t\t\ttype: \"category\",\r\n\t\t\t\tdata: props.data.map(item => item.name),\r\n\t\t\t\taxisLabel: {\r\n\t\t\t\t\tinterval: 0,\r\n\t\t\t\t\trotate: props.data.length > 3 ? 30 : 0\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tyAxis: {\r\n\t\t\t\ttype: \"value\",\r\n\t\t\t\tmin: minValue,\r\n\t\t\t\tmax: maxValue * 1.1,\r\n\t\t\t\taxisLabel: {\r\n\t\t\t\t\tformatter: value => {\r\n\t\t\t\t\t\treturn formatNumber(value, props.fieldKey);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tseries\r\n\t\t};\r\n\r\n\t\tchartInstance.setOption(option);\r\n\t};\r\n\r\n\tonMounted(() => {\r\n\t\tinitChart();\r\n\t\twindow.addEventListener(\"resize\", () => chartInstance?.resize());\r\n\t});\r\n\r\n\twatch(\r\n\t\t() => props.data,\r\n\t\t() => {\r\n\t\t\tif (chartInstance) {\r\n\t\t\t\tinitChart();\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ deep: true }\r\n\t);\r\n</script>\r\n\r\n<style scoped>\r\n\t.bar-chart {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tmin-height: 300px;\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,GAAG,EAAC,SAAS;EAACC,KAAK,EAAC;;;uBAAzBC,mBAAA,CAA2C,OAA3CC,UAA2C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}