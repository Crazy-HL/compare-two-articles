{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createBlock as _createBlock, createVNode as _createVNode, Fragment as _Fragment, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-62c843dc\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = [\"id\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass(['div0', $props.selectContentClass]),\n    id: $props.divId,\n    ref: \"divRef\"\n  }, [_createElementVNode(\"h1\", null, _toDisplayString($props.pageTitle), 1 /* TEXT */), _createCommentVNode(\" 加载动画 \"), $setup.loading ? (_openBlock(), _createBlock($setup[\"LoadingSpinner\"], {\n    key: 0\n  })) : $setup.error ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" 错误信息 \"), _createVNode($setup[\"ErrorDisplay\"], {\n    message: $setup.error,\n    onRetry: $setup.fetchWikipediaContent\n  }, null, 8 /* PROPS */, [\"message\"])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 2\n  }, [_createCommentVNode(\" 文章内容 \"), _createVNode($setup[\"WikipediaContent\"], {\n    content: $setup.pageHtml,\n    onSelect: _ctx.handleSelection\n  }, null, 8 /* PROPS */, [\"content\", \"onSelect\"])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)), _createCommentVNode(\" 弹出框 \"), _createVNode($setup[\"TextPopup\"], {\n    visible: $setup.showPopup[$props.divId],\n    content: $setup.selectedText[$props.divId],\n    containerClass: $props.divId === 'div1' ? 'chart-container1' : 'chart-container2',\n    containerRef: $setup.divRef,\n    onClose: _ctx.closePopup\n  }, null, 8 /* PROPS */, [\"visible\", \"content\", \"containerClass\", \"containerRef\", \"onClose\"])], 10 /* CLASS, PROPS */, _hoisted_1);\n}","map":{"version":3,"names":["_createElementBlock","class","_normalizeClass","$props","selectContentClass","id","divId","ref","_createElementVNode","_toDisplayString","pageTitle","_createCommentVNode","$setup","loading","_createBlock","key","error","_Fragment","_createVNode","message","onRetry","fetchWikipediaContent","content","pageHtml","onSelect","_ctx","handleSelection","visible","showPopup","selectedText","containerClass","containerRef","divRef","onClose","closePopup","_hoisted_1"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\ParentComponent.vue"],"sourcesContent":["<template>\r\n\t<div :class=\"['div0', selectContentClass]\" :id=\"divId\" ref=\"divRef\">\r\n\t\t<h1>{{ pageTitle }}</h1>\r\n\r\n\t\t<!-- 加载动画 -->\r\n\t\t<LoadingSpinner v-if=\"loading\" />\r\n\r\n\t\t<!-- 错误信息 -->\r\n\t\t<ErrorDisplay\r\n\t\t\tv-else-if=\"error\"\r\n\t\t\t:message=\"error\"\r\n\t\t\t@retry=\"fetchWikipediaContent\" />\r\n\r\n\t\t<!-- 文章内容 -->\r\n\t\t<WikipediaContent v-else :content=\"pageHtml\" @select=\"handleSelection\" />\r\n\r\n\t\t<!-- 弹出框 -->\r\n\t\t<TextPopup\r\n\t\t\t:visible=\"showPopup[divId]\"\r\n\t\t\t:content=\"selectedText[divId]\"\r\n\t\t\t:containerClass=\"\r\n\t\t\t\tdivId === 'div1' ? 'chart-container1' : 'chart-container2'\r\n\t\t\t\"\r\n\t\t\t:containerRef=\"divRef\"\r\n\t\t\t@close=\"closePopup\" />\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted, nextTick } from \"vue\";\r\n\timport LoadingSpinner from \"./LoadingSpinner.vue\";\r\n\timport ErrorDisplay from \"./ErrorDisplay.vue\";\r\n\timport WikipediaContent from \"./WikipediaContent.vue\";\r\n\timport TextPopup from \"./TextPopup.vue\";\r\n\timport * as d3 from \"d3\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\timport { debounce } from \"lodash\";\r\n\r\n\tconst props = defineProps({\r\n\t\tpageTitle: String,\r\n\t\tdivId: String,\r\n\t\tselectContentClass: String\r\n\t});\r\n\r\n\tconst pageHtml = ref(\"\"); // 文章 HTML 内容\r\n\tconst loading = ref(true); // 加载状态\r\n\tconst error = ref(\"\"); // 错误信息\r\n\tconst selectedText = ref({}); // 存储每个 div 的选中内容\r\n\tconst showPopup = ref({}); // 存储每个 div 的弹窗显示状态\r\n\tconst divRef = ref(null); // `Div1` 或 `Div3` 的 DOM 参考\r\n\tconst chapters = ref([]); // 存储章节信息\r\n\r\n\t// 提取章节信息\r\n\tconst extractChapters = htmlContent => {\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst doc = parser.parseFromString(htmlContent, \"text/html\");\r\n\t\tconst headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\r\n\t\tconst chapters = Array.from(headings).map(heading => {\r\n\t\t\t// 生成有效的 id\r\n\t\t\tconst id = heading.textContent\r\n\t\t\t\t.trim()\r\n\t\t\t\t.toLowerCase()\r\n\t\t\t\t.replace(/[^a-z0-9]+/g, \"-\") // 替换非字母数字字符为 -\r\n\t\t\t\t.replace(/^-+|-+$/g, \"\"); // 去除开头和结尾的 -\r\n\r\n\t\t\t// 如果 heading 没有 id，则设置生成的 id\r\n\t\t\tif (!heading.id) {\r\n\t\t\t\theading.id = id;\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tid: heading.id,\r\n\t\t\t\ttext: heading.textContent.trim(),\r\n\t\t\t\tlevel: parseInt(heading.tagName.replace(\"H\", \"\"), 10), // 记录章节级别（1-6）\r\n\t\t\t\telement: heading\r\n\t\t\t};\r\n\t\t});\r\n\t\treturn chapters;\r\n\t};\r\n\r\n\t// 处理滚动事件\r\n\tconst handleScroll = debounce(() => {\r\n\t\tif (!divRef.value) return;\r\n\r\n\t\tconst scrollTop = divRef.value.scrollTop;\r\n\t\tlet currentChapter = null;\r\n\r\n\t\t// 查找当前章节\r\n\t\tfor (const chapter of chapters.value) {\r\n\t\t\tconst escapedId = CSS.escape(chapter.id); // 转义 id\r\n\t\t\tconst element = divRef.value.querySelector(`#${escapedId}`);\r\n\t\t\tif (element) {\r\n\t\t\t\tconst rect = element.getBoundingClientRect();\r\n\t\t\t\tif (rect.top >= 0 && rect.top <= divRef.value.clientHeight * 0.5) {\r\n\t\t\t\t\tcurrentChapter = chapter;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 如果找到当前章节，发送同步事件\r\n\t\tif (currentChapter) {\r\n\t\t\tbus.emit(\"syncScroll\", {\r\n\t\t\t\tchapterId: currentChapter.id,\r\n\t\t\t\tsource: props.divId\r\n\t\t\t});\r\n\t\t}\r\n\t}, 100);\r\n\r\n\t// 同步滚动到指定章节\r\n\tconst syncScroll = chapterId => {\r\n\t\tconst escapedId = CSS.escape(chapterId); // 转义 id\r\n\t\tconst chapterElement = divRef.value.querySelector(`#${escapedId}`);\r\n\t\tif (chapterElement) {\r\n\t\t\tchapterElement.scrollIntoView({ behavior: \"smooth\" });\r\n\t\t} else {\r\n\t\t\t// 如果没有完全匹配的章节，尝试匹配相似的章节\r\n\t\t\tconst sourceChapter = chapters.value.find(chap => chap.id === chapterId);\r\n\t\t\tif (sourceChapter) {\r\n\t\t\t\tconst similarChapter = findSimilarChapter(sourceChapter.text);\r\n\t\t\t\tif (similarChapter) {\r\n\t\t\t\t\tconst escapedSimilarId = CSS.escape(similarChapter.id);\r\n\t\t\t\t\tconst similarElement = divRef.value.querySelector(\r\n\t\t\t\t\t\t`#${escapedSimilarId}`\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (similarElement) {\r\n\t\t\t\t\t\tsimilarElement.scrollIntoView({ behavior: \"smooth\" });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// 查找相似的章节\r\n\tconst findSimilarChapter = text => {\r\n\t\tlet maxSimilarity = 0;\r\n\t\tlet bestMatch = null;\r\n\r\n\t\tfor (const chapter of chapters.value) {\r\n\t\t\tconst similarity = calculateSimilarity(text, chapter.text);\r\n\t\t\tif (similarity > maxSimilarity) {\r\n\t\t\t\tmaxSimilarity = similarity;\r\n\t\t\t\tbestMatch = chapter;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 如果相似度超过阈值，则返回匹配的章节\r\n\t\treturn maxSimilarity > 0.7 ? bestMatch : null;\r\n\t};\r\n\r\n\t// 计算文本相似度（使用简单的余弦相似度）\r\n\tconst calculateSimilarity = (text1, text2) => {\r\n\t\tconst words1 = text1.toLowerCase().split(/\\s+/);\r\n\t\tconst words2 = text2.toLowerCase().split(/\\s+/);\r\n\t\tconst uniqueWords = new Set([...words1, ...words2]);\r\n\r\n\t\tconst vector1 = Array.from(uniqueWords).map(word =>\r\n\t\t\twords1.includes(word) ? 1 : 0\r\n\t\t);\r\n\t\tconst vector2 = Array.from(uniqueWords).map(word =>\r\n\t\t\twords2.includes(word) ? 1 : 0\r\n\t\t);\r\n\r\n\t\tconst dotProduct = vector1.reduce(\r\n\t\t\t(sum, val, i) => sum + val * vector2[i],\r\n\t\t\t0\r\n\t\t);\r\n\t\tconst magnitude1 = Math.sqrt(\r\n\t\t\tvector1.reduce((sum, val) => sum + val * val, 0)\r\n\t\t);\r\n\t\tconst magnitude2 = Math.sqrt(\r\n\t\t\tvector2.reduce((sum, val) => sum + val * val, 0)\r\n\t\t);\r\n\r\n\t\treturn dotProduct / (magnitude1 * magnitude2);\r\n\t};\r\n\r\n\t// 获取 Wikipedia 页面内容\r\n\tconst fetchWikipediaContent = async () => {\r\n\t\ttry {\r\n\t\t\tconst apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(\r\n\t\t\t\tprops.pageTitle\r\n\t\t\t)}`;\r\n\t\t\tconst response = await fetch(apiUrl);\r\n\t\t\tif (!response.ok) throw new Error(\"Failed to fetch data\");\r\n\r\n\t\t\tconst html = await response.text();\r\n\t\t\tpageHtml.value = html;\r\n\t\t\tchapters.value = extractChapters(html);\r\n\t\t} catch (err) {\r\n\t\t\terror.value = \"Error fetching Wikipedia content: \" + err.message;\r\n\t\t} finally {\r\n\t\t\tloading.value = false;\r\n\t\t}\r\n\t};\r\n\r\n\t// 监听滚动同步事件\r\n\tonMounted(() => {\r\n\t\tfetchWikipediaContent();\r\n\t\tdivRef.value.addEventListener(\"scroll\", handleScroll);\r\n\t\tbus.on(\"syncScroll\", data => {\r\n\t\t\tif (data.source !== props.divId) {\r\n\t\t\t\tsyncScroll(data.chapterId);\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\r\n\tonUnmounted(() => {\r\n\t\tdivRef.value.removeEventListener(\"scroll\", handleScroll);\r\n\t\tbus.off(\"syncScroll\");\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\th1 {\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t/* 文章容器 */\r\n\t.div0 {\r\n\t\tposition: relative;\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t#div1,\r\n\t#div3 {\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t.showHtml {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\toverflow: auto;\r\n\t}\r\n\r\n\t/* 选中文本的高亮样式 */\r\n\t::selection {\r\n\t\tbackground-color: yellow;\r\n\t\tcolor: black;\r\n\t}\r\n</style>\r\n"],"mappings":";;mBAAA;;uBACCA,mBAAA,CAwBM;IAxBAC,KAAK,EADZC,eAAA,UACuBC,MAAA,CAAAC,kBAAkB;IAAIC,EAAE,EAAEF,MAAA,CAAAG,KAAK;IAAEC,GAAG,EAAC;MAC1DC,mBAAA,CAAwB,YAAAC,gBAAA,CAAjBN,MAAA,CAAAO,SAAS,kBAEhBC,mBAAA,UAAa,EACSC,MAAA,CAAAC,OAAO,I,cAA7BC,YAAA,CAAiCF,MAAA;IALnCG,GAAA;EAAA,MAScH,MAAA,CAAAI,KAAK,I,cADjBhB,mBAAA,CAGkCiB,SAAA;IAXpCF,GAAA;EAAA,IAOEJ,mBAAA,UAAa,EACbO,YAAA,CAGkCN,MAAA;IADhCO,OAAO,EAAEP,MAAA,CAAAI,KAAK;IACdI,OAAK,EAAER,MAAA,CAAAS;0GAGTrB,mBAAA,CAAyEiB,SAAA;IAd3EF,GAAA;EAAA,IAaEJ,mBAAA,UAAa,EACbO,YAAA,CAAyEN,MAAA;IAA/CU,OAAO,EAAEV,MAAA,CAAAW,QAAQ;IAAGC,QAAM,EAAEC,IAAA,CAAAC;sGAEtDf,mBAAA,SAAY,EACZO,YAAA,CAOuBN,MAAA;IANrBe,OAAO,EAAEf,MAAA,CAAAgB,SAAS,CAACzB,MAAA,CAAAG,KAAK;IACxBgB,OAAO,EAAEV,MAAA,CAAAiB,YAAY,CAAC1B,MAAA,CAAAG,KAAK;IAC3BwB,cAAc,EAAQ3B,MAAA,CAAAG,KAAK;IAG3ByB,YAAY,EAAEnB,MAAA,CAAAoB,MAAM;IACpBC,OAAK,EAAER,IAAA,CAAAS;wHAxBXC,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}