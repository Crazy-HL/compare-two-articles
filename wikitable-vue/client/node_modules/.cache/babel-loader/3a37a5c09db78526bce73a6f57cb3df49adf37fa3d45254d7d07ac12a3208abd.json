{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, withModifiers as _withModifiers, vModelText as _vModelText, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-2e821d1e\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"main-container\"\n};\nconst _hoisted_2 = {\n  class: \"chat-history\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"message-content\"\n};\nconst _hoisted_4 = [\"innerHTML\"];\nconst _hoisted_5 = {\n  class: \"compare-container\"\n};\nconst _hoisted_6 = {\n  class: \"chart-column\"\n};\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h3\", null, \"文章1可视化\", -1 /* HOISTED */));\nconst _hoisted_8 = {\n  ref: \"chart1\",\n  class: \"chart-box\"\n};\nconst _hoisted_9 = {\n  class: \"attributes-column\"\n};\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h3\", null, \"公共属性\", -1 /* HOISTED */));\nconst _hoisted_11 = {\n  class: \"attributes-list\"\n};\nconst _hoisted_12 = [\"onClick\"];\nconst _hoisted_13 = {\n  class: \"chart-column\"\n};\nconst _hoisted_14 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h3\", null, \"文章2可视化\", -1 /* HOISTED */));\nconst _hoisted_15 = {\n  ref: \"chart2\",\n  class: \"chart-box\"\n};\nconst _hoisted_16 = {\n  class: \"input-container\"\n};\nconst _hoisted_17 = {\n  class: \"button-container\"\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 聊天容器 \"), _createElementVNode(\"div\", {\n    class: \"chat-container\",\n    onDragover: _cache[0] || (_cache[0] = _withModifiers(() => {}, [\"prevent\"])),\n    onDrop: _cache[1] || (_cache[1] = function () {\n      return _ctx.handleDrop && _ctx.handleDrop(...arguments);\n    })\n  }, [_createCommentVNode(\" 历史对话记录 \"), _createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.chatHistory, (message, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass(['message', message.role])\n    }, [message && message.content ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"strong\", null, _toDisplayString(message.role === \"user\" ? \"用户\" : \"GPT\") + \":\", 1 /* TEXT */), _createElementVNode(\"p\", {\n      innerHTML: message.content\n    }, null, 8 /* PROPS */, _hoisted_4)])) : _createCommentVNode(\"v-if\", true)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))])], 32 /* NEED_HYDRATION */), _createCommentVNode(\" 三列可视化对比容器 \"), _createElementVNode(\"div\", _hoisted_5, [_createCommentVNode(\" 文章1图表 \"), _createElementVNode(\"div\", _hoisted_6, [_hoisted_7, _createElementVNode(\"div\", _hoisted_8, null, 512 /* NEED_PATCH */)]), _createCommentVNode(\" 公共属性列表 \"), _createElementVNode(\"div\", _hoisted_9, [_hoisted_10, _createElementVNode(\"div\", _hoisted_11, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.commonAttributes, (attr, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass([\"attribute-item\", {\n        active: attr === _ctx.selectedAttribute\n      }]),\n      onClick: $event => _ctx.selectAttribute(attr)\n    }, _toDisplayString(attr), 11 /* TEXT, CLASS, PROPS */, _hoisted_12);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" 文章2图表 \"), _createElementVNode(\"div\", _hoisted_13, [_hoisted_14, _createElementVNode(\"div\", _hoisted_15, null, 512 /* NEED_PATCH */)])]), _createCommentVNode(\" 输入框和操作按钮 \"), _createElementVNode(\"div\", _hoisted_16, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.userQuestion = $event),\n    rows: \"2\",\n    placeholder: \"请输入你想问的问题...\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.userQuestion]]), _createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = function () {\n      return _ctx.askQuestion && _ctx.askQuestion(...arguments);\n    })\n  }, \"发送\"), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = function () {\n      return _ctx.compareAttributes && _ctx.compareAttributes(...arguments);\n    }),\n    class: \"submit-btn\"\n  }, \" 属性对比可视化 \")])])]);\n}","map":{"version":3,"names":["class","key","_createElementVNode","ref","_createElementBlock","_hoisted_1","_createCommentVNode","onDragover","_cache","_withModifiers","onDrop","_ctx","handleDrop","arguments","_hoisted_2","_Fragment","_renderList","chatHistory","message","index","_normalizeClass","role","content","_hoisted_3","_toDisplayString","innerHTML","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","commonAttributes","attr","active","selectedAttribute","onClick","$event","selectAttribute","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","userQuestion","rows","placeholder","_hoisted_17","askQuestion","compareAttributes"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\Div2.vue"],"sourcesContent":["<template>\r\n\t<div class=\"main-container\">\r\n\t\t<!-- 聊天容器 -->\r\n\t\t<div class=\"chat-container\" @dragover.prevent @drop=\"handleDrop\">\r\n\t\t\t<!-- 历史对话记录 -->\r\n\t\t\t<div class=\"chat-history\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tv-for=\"(message, index) in chatHistory\"\r\n\t\t\t\t\t:key=\"index\"\r\n\t\t\t\t\t:class=\"['message', message.role]\">\r\n\t\t\t\t\t<div class=\"message-content\" v-if=\"message && message.content\">\r\n\t\t\t\t\t\t<strong>{{ message.role === \"user\" ? \"用户\" : \"GPT\" }}:</strong>\r\n\t\t\t\t\t\t<p v-html=\"message.content\"></p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- 三列可视化对比容器 -->\r\n\t\t<div class=\"compare-container\">\r\n\t\t\t<!-- 文章1图表 -->\r\n\t\t\t<div class=\"chart-column\">\r\n\t\t\t\t<h3>文章1可视化</h3>\r\n\t\t\t\t<div ref=\"chart1\" class=\"chart-box\"></div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<!-- 公共属性列表 -->\r\n\t\t\t<div class=\"attributes-column\">\r\n\t\t\t\t<h3>公共属性</h3>\r\n\t\t\t\t<div class=\"attributes-list\">\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tv-for=\"(attr, index) in commonAttributes\"\r\n\t\t\t\t\t\t:key=\"index\"\r\n\t\t\t\t\t\tclass=\"attribute-item\"\r\n\t\t\t\t\t\t@click=\"selectAttribute(attr)\"\r\n\t\t\t\t\t\t:class=\"{ active: attr === selectedAttribute }\">\r\n\t\t\t\t\t\t{{ attr }}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<!-- 文章2图表 -->\r\n\t\t\t<div class=\"chart-column\">\r\n\t\t\t\t<h3>文章2可视化</h3>\r\n\t\t\t\t<div ref=\"chart2\" class=\"chart-box\"></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- 输入框和操作按钮 -->\r\n\t\t<div class=\"input-container\">\r\n\t\t\t<textarea\r\n\t\t\t\tv-model=\"userQuestion\"\r\n\t\t\t\trows=\"2\"\r\n\t\t\t\tplaceholder=\"请输入你想问的问题...\"></textarea>\r\n\t\t\t<div class=\"button-container\">\r\n\t\t\t\t<button @click=\"askQuestion\">发送</button>\r\n\t\t\t\t<button @click=\"compareAttributes\" class=\"submit-btn\">\r\n\t\t\t\t\t属性对比可视化\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted, nextTick } from \"vue\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\timport * as d3 from \"d3\";\r\n\timport {\r\n\t\trenderLineChart,\r\n\t\trenderBarChart,\r\n\t\trenderPieChart,\r\n\t\trenderNonVisualChart,\r\n\t\trenderRadarChart,\r\n\t\trenderStackedBarChart,\r\n\t\trenderScatterChart\r\n\t} from \"@/js/chartUtils\";\r\n\r\n\tconst userQuestion = ref(\"\");\r\n\tconst chatHistory = ref([]);\r\n\tconst selectText2 = ref(\"\");\r\n\tconst selectText3 = ref(\"\");\r\n\tconst article1Data = ref(null);\r\n\tconst article2Data = ref(null);\r\n\tconst commonAttributes = ref([]);\r\n\tconst selectedAttribute = ref(null);\r\n\tconst chart1 = ref(null);\r\n\tconst chart2 = ref(null);\r\n\r\n\t// 安全的获取纯文本函数\r\n\tfunction getPlainTextFromSelection(htmlContent) {\r\n\t\tif (!htmlContent) return \"\";\r\n\r\n\t\ttry {\r\n\t\t\tconst container = document.createElement(\"div\");\r\n\t\t\tcontainer.innerHTML = htmlContent;\r\n\t\t\treturn container.innerText || container.textContent || \"\";\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"Error extracting text:\", error);\r\n\t\t\treturn \"\";\r\n\t\t}\r\n\t}\r\n\r\n\t// 增强的事件处理函数\r\n\tfunction handleSelection(data, source) {\r\n\t\tif (!data || !data.content) {\r\n\t\t\tconsole.error(`Received invalid data from ${source}:`, data);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconsole.log(`Received valid data from ${source}:`, data);\r\n\t\tconst plainText = getPlainTextFromSelection(data.content);\r\n\r\n\t\tif (source === \"div1\") {\r\n\t\t\tselectText2.value = plainText;\r\n\t\t} else if (source === \"div3\") {\r\n\t\t\tselectText3.value = plainText;\r\n\t\t}\r\n\t}\r\n\r\n\t// 安全的事件处理回调\r\n\tconst handleDiv1Event = data => {\r\n\t\tif (!data) {\r\n\t\t\tconsole.warn(\"Received null data in div1_Event\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\thandleSelection(data, \"div1\");\r\n\t};\r\n\r\n\tconst handleDiv3Event = data => {\r\n\t\tif (!data) {\r\n\t\t\tconsole.warn(\"Received null data in div3_Event\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\thandleSelection(data, \"div3\");\r\n\t};\r\n\r\n\tonMounted(() => {\r\n\t\tbus.on(\"div1_Event\", handleDiv1Event);\r\n\t\tbus.on(\"div3_Event\", handleDiv3Event);\r\n\t});\r\n\r\n\tonUnmounted(() => {\r\n\t\tbus.off(\"div1_Event\", handleDiv1Event);\r\n\t\tbus.off(\"div3_Event\", handleDiv3Event);\r\n\t});\r\n\r\n\t// 对比属性\r\n\tasync function compareAttributes() {\r\n\t\tif (!selectText2.value || !selectText3.value) {\r\n\t\t\talert(\"请先选择两段文本！\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await api.post(\"compare_attributes\", {\r\n\t\t\t\ttext1: selectText2.value,\r\n\t\t\t\ttext2: selectText3.value\r\n\t\t\t});\r\n\r\n\t\t\tif (!response || response.error) {\r\n\t\t\t\tconsole.error(\"属性对比失败:\", response?.error);\r\n\t\t\t\talert(response?.message || \"属性对比失败\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// 保存两篇文章的数据\r\n\t\t\tarticle1Data.value = response.article1 || {};\r\n\t\t\tarticle2Data.value = response.article2 || {};\r\n\r\n\t\t\t// 获取公共属性\r\n\t\t\tcommonAttributes.value = response.common_attributes || [];\r\n\r\n\t\t\t// 默认选择第一个公共属性\r\n\t\t\tif (commonAttributes.value.length > 0) {\r\n\t\t\t\tselectedAttribute.value = commonAttributes.value[0];\r\n\t\t\t\tnextTick(() => {\r\n\t\t\t\t\trenderAttributeCharts();\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tconsole.warn(\"没有找到公共属性\");\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"处理属性对比时出错:\", error);\r\n\t\t\talert(\"处理属性对比时出错，请稍后重试\");\r\n\t\t}\r\n\t}\r\n\r\n\t// 选择属性\r\n\tfunction selectAttribute(attr) {\r\n\t\tif (!attr || !commonAttributes.value.includes(attr)) {\r\n\t\t\tconsole.warn(\"尝试选择无效属性:\", attr);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tselectedAttribute.value = attr;\r\n\t\trenderAttributeCharts();\r\n\t}\r\n\r\n\t// 渲染属性图表\r\n\tfunction renderAttributeCharts() {\r\n\t\tif (\r\n\t\t\t!selectedAttribute.value ||\r\n\t\t\t!article1Data.value ||\r\n\t\t\t!article2Data.value\r\n\t\t) {\r\n\t\t\tconsole.warn(\"渲染图表缺少必要数据\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 安全地清空图表容器\r\n\t\tif (chart1.value) chart1.value.innerHTML = \"\";\r\n\t\tif (chart2.value) chart2.value.innerHTML = \"\";\r\n\r\n\t\t// 从数据中提取选定属性的数据\r\n\t\tconst attrData1 = extractAttributeData(\r\n\t\t\tarticle1Data.value,\r\n\t\t\tselectedAttribute.value\r\n\t\t);\r\n\t\tconst attrData2 = extractAttributeData(\r\n\t\t\tarticle2Data.value,\r\n\t\t\tselectedAttribute.value\r\n\t\t);\r\n\r\n\t\t// 安全地渲染图表\r\n\t\tif (chart1.value && attrData1) {\r\n\t\t\trenderChart(chart1.value, attrData1, \"Line Chart\");\r\n\t\t}\r\n\t\tif (chart2.value && attrData2) {\r\n\t\t\trenderChart(chart2.value, attrData2, \"Line Chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t// 从数据中提取特定属性的数据\r\n\tfunction extractAttributeData(data, attribute) {\r\n\t\tif (!data || !attribute) return null;\r\n\r\n\t\ttry {\r\n\t\t\tconst filteredData = {\r\n\t\t\t\tdata: data[attribute]?.data || [],\r\n\t\t\t\toptions: {\r\n\t\t\t\t\t...(data[attribute]?.options || {}),\r\n\t\t\t\t\ttitle: `${attribute} ${data[attribute]?.options?.title || \"\"}`\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\treturn filteredData;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"提取属性数据时出错:\", error);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t// 安全的图表渲染函数\r\n\tfunction renderChart(container, rawJsonData, chartType) {\r\n\t\tif (!container || !rawJsonData || typeof rawJsonData !== \"object\") {\r\n\t\t\tconsole.warn(\"无效的图表渲染参数\");\r\n\t\t\trenderNonVisualChart(container, rawJsonData, {\r\n\t\t\t\tmessage: \"数据无效或缺失\"\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst data = rawJsonData.data || [];\r\n\t\tconst options = rawJsonData.options || {};\r\n\r\n\t\ttry {\r\n\t\t\t// 根据图表类型渲染\r\n\t\t\tswitch (chartType) {\r\n\t\t\t\tcase \"Line Chart\":\r\n\t\t\t\t\trenderLineChart(container, data, options);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"Bar Chart\":\r\n\t\t\t\t\trenderBarChart(container, rawJsonData);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"Pie Chart\":\r\n\t\t\t\t\trenderPieChart(container, data, options);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"Stacked Bar Chart\":\r\n\t\t\t\t\trenderStackedBarChart(container, data, options);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"Radar Chart\":\r\n\t\t\t\t\trenderRadarChart(container, rawJsonData);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"Scatter Chart\":\r\n\t\t\t\t\trenderScatterChart(container, rawJsonData);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.error(\"未知的图表类型:\", chartType);\r\n\t\t\t\t\trenderNonVisualChart(container, rawJsonData, {\r\n\t\t\t\t\t\tmessage: `不支持的图表类型: ${chartType}`\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"图表渲染失败:\", error);\r\n\t\t\trenderNonVisualChart(container, rawJsonData, {\r\n\t\t\t\tmessage: \"图表渲染出错\"\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t// 从 HTML 内容中提取纯文本\r\n\tfunction getPlainTextFromSelection(htmlContent) {\r\n\t\tconst container = document.createElement(\"div\");\r\n\t\tcontainer.innerHTML = htmlContent;\r\n\t\tconsole.log(\"Extracted text:\", container.innerText); // 输出提取的纯文本\r\n\t\treturn container.innerText || container.textContent || \"\";\r\n\t}\r\n\r\n\t// 处理拖拽开始事件\r\n\tconst handleDragStart = event => {\r\n\t\t// 将图表数据传递给拖拽事件\r\n\t\tevent.dataTransfer.setData(\r\n\t\t\t\"application/json\",\r\n\t\t\tJSON.stringify({\r\n\t\t\t\tchartData: currentChartData.value,\r\n\t\t\t\tchartType: currentChartType.value\r\n\t\t\t})\r\n\t\t);\r\n\t\tconsole.log(\"拖拽数据已设置:\", currentChartData.value); // 调试日志\r\n\t};\r\n\r\n\t// 处理拖拽释放事件\r\n\tconst handleDrop = event => {\r\n\t\tevent.preventDefault();\r\n\t\tconst data = event.dataTransfer.getData(\"application/json\");\r\n\t\tconsole.log(\"接收到的拖拽数据:\", data); // 调试日志\r\n\r\n\t\tif (data) {\r\n\t\t\ttry {\r\n\t\t\t\tconst { chartData, chartType } = JSON.parse(data);\r\n\t\t\t\tconsole.log(\"解析后的图表数据:\", chartData); // 调试日志\r\n\t\t\t\tconsole.log(\"解析后的图表类型:\", chartType); // 调试日志\r\n\r\n\t\t\t\tcurrentChartData.value = chartData;\r\n\t\t\t\tcurrentChartType.value = chartType;\r\n\t\t\t\tanalyzeChart(chartData, chartType); // 调用大模型分析图表\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(\"解析拖拽数据失败:\", error);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconsole.error(\"未接收到拖拽数据\");\r\n\t\t}\r\n\t};\r\n\r\n\t// 分析图表\r\n\tconst analyzeChart = (chartData, chartType) => {\r\n\t\tconsole.log(\"正在调用后端接口...\"); // 调试日志\r\n\r\n\t\t// 调用大模型分析图表\r\n\t\tapi.post(\r\n\t\t\t\"analyze_chart\",\r\n\t\t\t{ chartData, chartType },\r\n\t\t\tresponse => {\r\n\t\t\t\tconsole.log(\"后端接口返回的数据:\", response); // 调试日志\r\n\r\n\t\t\t\t// 检查 response 是否存在且包含 analysis 字段\r\n\t\t\t\tif (response && response.analysis) {\r\n\t\t\t\t\t// 格式化分析结果\r\n\t\t\t\t\tconst formattedAnalysis = formatAnalysisResult(response.analysis);\r\n\r\n\t\t\t\t\t// 将分析结果添加到聊天记录\r\n\t\t\t\t\tchatHistory.value.push({\r\n\t\t\t\t\t\trole: \"assistant\",\r\n\t\t\t\t\t\tcontent: formattedAnalysis // 使用格式化后的 HTML 内容\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.error(\"后端返回的数据格式不正确:\", response);\r\n\t\t\t\t\tchatHistory.value.push({\r\n\t\t\t\t\t\trole: \"assistant\",\r\n\t\t\t\t\t\tcontent: \"图表分析失败，后端返回的数据格式不正确。\"\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\terror => {\r\n\t\t\t\t// 处理错误\r\n\t\t\t\tconsole.error(\"图表分析失败:\", error);\r\n\t\t\t\tchatHistory.value.push({\r\n\t\t\t\t\trole: \"assistant\",\r\n\t\t\t\t\tcontent: \"图表分析失败，请稍后重试。\"\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t};\r\n\r\n\tconst formatAnalysisResult = text => {\r\n\t\t// 转换 Markdown 标题\r\n\t\ttext = text.replace(/### (.*)/g, \"<h3>$1</h3>\");\r\n\r\n\t\t// 转换加粗文本\r\n\t\ttext = text.replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\");\r\n\r\n\t\t// 处理换行符\r\n\t\ttext = text.replace(/\\n/g, \"<br>\");\r\n\r\n\t\t// 处理列表项（数字编号和短横线）\r\n\t\ttext = text.replace(/(?:^|\\n)(\\d+\\.\\s+.*)/g, \"<li>$1</li>\");\r\n\t\ttext = text.replace(/(?:^|\\n)-\\s+(.*)/g, \"<li>$1</li>\");\r\n\r\n\t\t// 统一包裹列表项\r\n\t\ttext = text.replace(/(<li>.*<\\/li>)/gs, \"<ul>$1</ul>\");\r\n\r\n\t\treturn text;\r\n\t};\r\n\r\n\t// 向 GPT 提问\r\n\tconst askQuestion = () => {\r\n\t\tif (!userQuestion.value) {\r\n\t\t\talert(\"请输入问题！\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 将用户的问题添加到历史记录\r\n\t\tchatHistory.value.push({ role: \"user\", content: userQuestion.value });\r\n\r\n\t\t// 调用 GPT 提问接口\r\n\t\tapi.post(\r\n\t\t\t\"gpt_ask_chart\",\r\n\t\t\t{\r\n\t\t\t\tquestion: userQuestion.value,\r\n\t\t\t\tchartData: currentChartData.value,\r\n\t\t\t\tchartType: currentChartType.value\r\n\t\t\t},\r\n\t\t\tresponse => {\r\n\t\t\t\t// 成功回调\r\n\t\t\t\tconsole.log(\"后端接口返回的数据:\", response); // 调试日志\r\n\r\n\t\t\t\t// 格式化 GPT 的回答\r\n\t\t\t\tconst formattedAnswer = formatAnalysisResult(response.answer);\r\n\r\n\t\t\t\t// 将 GPT 的回答添加到历史记录\r\n\t\t\t\tchatHistory.value.push({ role: \"assistant\", content: formattedAnswer });\r\n\t\t\t},\r\n\t\t\terror => {\r\n\t\t\t\t// 错误回调\r\n\t\t\t\tconsole.error(\"请求失败:\", error);\r\n\t\t\t\tchatHistory.value.push({\r\n\t\t\t\t\trole: \"assistant\",\r\n\t\t\t\t\tcontent: \"请求失败，请稍后重试。\"\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\t// 清空输入框\r\n\t\tuserQuestion.value = \"\";\r\n\t};\r\n\r\n\t// 对比文章\r\n\tasync function compareTexts() {\r\n\t\tif (!selectText2.value || !selectText3.value) {\r\n\t\t\talert(\"请先选择两段文本！\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tapi.post(\r\n\t\t\t\t\"gpt_compare\",\r\n\t\t\t\t{ text1: selectText2.value, text2: selectText3.value },\r\n\t\t\t\tdata => {\r\n\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\t// 将对比结果添加到历史记录\r\n\t\t\t\t\t\tchatHistory.value.push({ role: \"assistant\", content: data.result });\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.error(\"对比失败:\", data.error);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"请求失败:\", error);\r\n\t\t}\r\n\t}\r\n\r\n\t// 合并数据\r\n\tasync function mergedJson() {\r\n\t\tif (!selectText2.value || !selectText3.value) {\r\n\t\t\talert(\"请先选择两段文本！\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tapi.post(\r\n\t\t\t\t\"merged_json\",\r\n\t\t\t\t{ text1: selectText2.value, text2: selectText3.value },\r\n\t\t\t\tdata => {\r\n\t\t\t\t\tif (data.error) {\r\n\t\t\t\t\t\tconsole.error(\"后端返回的错误:\", data.error);\r\n\t\t\t\t\t\talert(`处理文章内容时出错: ${data.message}`);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst jsonData = data.json_data;\r\n\t\t\t\t\tcurrentChartData.value = jsonData;\r\n\t\t\t\t\tcurrentChartType.value = data.chart_classification;\r\n\t\t\t\t\tconsole.log(\"后端返回的数据:\", jsonData);\r\n\t\t\t\t\tif (data.yes_no === \"no\" || !jsonData) {\r\n\t\t\t\t\t\trenderNonVisualChart(\".chart-container\", data, {\r\n\t\t\t\t\t\t\tmessage: \"当前数据无法合并\"\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\trenderChart(jsonData, data.chart_classification);\r\n\t\t\t\t\t// 通过事件总线将 Div1 和 Div3 的 JSON 数据传递给 TextPopup.vue\r\n\t\t\t\t\tconsole.log(\"触发 updateChart1 事件\");\r\n\t\t\t\t\tbus.emit(\"updateChart1\", {\r\n\t\t\t\t\t\tdivId: \"div1\",\r\n\t\t\t\t\t\tjsonData: data.div1_json,\r\n\t\t\t\t\t\tchartType: data.chart_classification\r\n\t\t\t\t\t});\r\n\t\t\t\t\tconsole.log(\"触发 updateChart3 事件\");\r\n\t\t\t\t\tbus.emit(\"updateChart3\", {\r\n\t\t\t\t\t\tdivId: \"div3\",\r\n\t\t\t\t\t\tjsonData: data.div3_json,\r\n\t\t\t\t\t\tchartType: data.chart_classification\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"处理JSON时出错:\", error);\r\n\t\t\talert(\"处理JSON时出错，请稍后重试\");\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style scoped>\r\n\t/* 主容器 */\r\n\t.main-container {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\twidth: 100%;\r\n\t\theight: 100vh;\r\n\t\tmargin: 0 auto;\r\n\t\tpadding: 5px;\r\n\t\tbackground-color: #f5f5f5;\r\n\t\tgap: 10px;\r\n\t}\r\n\r\n\t/* 聊天容器 */\r\n\t.chat-container {\r\n\t\tflex: 0.4;\r\n\t\tbackground-color: #ffffff;\r\n\t\tpadding: 20px;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t/* 历史对话记录 */\r\n\t.chat-history {\r\n\t\theight: 100%;\r\n\t\toverflow-y: auto;\r\n\t\tpadding: 10px;\r\n\t\tbackground-color: #fafafa;\r\n\t\tborder-radius: 8px;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t}\r\n\r\n\t/* 三列对比容器 */\r\n\t.compare-container {\r\n\t\tflex: 0.6;\r\n\t\tdisplay: flex;\r\n\t\tgap: 10px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tpadding: 20px;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t/* 图表列 */\r\n\t.chart-column {\r\n\t\tflex: 1;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tgap: 10px;\r\n\t}\r\n\r\n\t.chart-box {\r\n\t\twidth: 100%;\r\n\t\theight: 300px;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t\tborder-radius: 8px;\r\n\t\tbackground-color: #f9f9f9;\r\n\t}\r\n\r\n\t/* 属性列 */\r\n\t.attributes-column {\r\n\t\tflex: 0.5;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tgap: 10px;\r\n\t}\r\n\r\n\t.attributes-list {\r\n\t\tflex: 1;\r\n\t\toverflow-y: auto;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t\tborder-radius: 8px;\r\n\t\tpadding: 10px;\r\n\t\tbackground-color: #f9f9f9;\r\n\t}\r\n\r\n\t.attribute-item {\r\n\t\tpadding: 8px 12px;\r\n\t\tmargin: 5px 0;\r\n\t\tbackground-color: #f0f0f0;\r\n\t\tborder-radius: 4px;\r\n\t\tcursor: pointer;\r\n\t\ttransition: all 0.2s;\r\n\t}\r\n\r\n\t.attribute-item:hover {\r\n\t\tbackground-color: #e0e0e0;\r\n\t}\r\n\r\n\t.attribute-item.active {\r\n\t\tbackground-color: #4caf50;\r\n\t\tcolor: white;\r\n\t\tfont-weight: bold;\r\n\t}\r\n\r\n\t/* 输入容器 */\r\n\t.input-container {\r\n\t\tpadding: 10px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t/* 按钮样式 */\r\n\t.button-container {\r\n\t\tdisplay: flex;\r\n\t\tgap: 10px;\r\n\t\tmargin-top: 10px;\r\n\t}\r\n\r\n\tbutton {\r\n\t\tflex: 1;\r\n\t\tpadding: 10px;\r\n\t\tborder: none;\r\n\t\tborder-radius: 6px;\r\n\t\tbackground-color: #4caf50;\r\n\t\tcolor: white;\r\n\t\tcursor: pointer;\r\n\t\ttransition: background-color 0.2s;\r\n\t}\r\n\r\n\tbutton:hover {\r\n\t\tbackground-color: #45a049;\r\n\t}\r\n\r\n\tbutton.submit-btn {\r\n\t\tbackground-color: #ff9800;\r\n\t}\r\n\r\n\tbutton.submit-btn:hover {\r\n\t\tbackground-color: #fb8c00;\r\n\t}\r\n\r\n\t/* 消息样式 */\r\n\t.message {\r\n\t\tmargin-bottom: 15px;\r\n\t}\r\n\r\n\t.message-content {\r\n\t\tpadding: 12px;\r\n\t\tborder-radius: 8px;\r\n\t\tbackground-color: #f0f0f0;\r\n\t\tline-height: 1.5;\r\n\t}\r\n\r\n\t.message.user .message-content {\r\n\t\tbackground-color: #e3f2fd;\r\n\t\ttext-align: right;\r\n\t}\r\n\r\n\t.message.assistant .message-content {\r\n\t\tbackground-color: #f5f5f5;\r\n\t\ttext-align: left;\r\n\t}\r\n\r\n\t/* 响应式调整 */\r\n\t@media (max-width: 768px) {\r\n\t\t.compare-container {\r\n\t\t\tflex-direction: column;\r\n\t\t}\r\n\r\n\t\t.attributes-column {\r\n\t\t\torder: -1;\r\n\t\t}\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}