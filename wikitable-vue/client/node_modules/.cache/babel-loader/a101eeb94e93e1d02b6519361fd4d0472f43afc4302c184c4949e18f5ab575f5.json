{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed, watch, onMounted, onBeforeUnmount } from \"vue\";\nimport SparklineChart from \"./SparklineChart.vue\";\nimport FullChart from \"./FullChart.vue\";\nimport { debounce } from \"lodash-es\";\nexport default {\n  __name: 'CompareTable',\n  props: {\n    div1RawData: String,\n    div3RawData: String\n  },\n  emits: [\"tables-ready\"],\n  setup(__props, _ref) {\n    let {\n      expose: __expose,\n      emit: __emit\n    } = _ref;\n    const props = __props;\n\n    // 新增事件发射器\n    const emit = __emit;\n\n    // 容器引用\n    const containerRef = ref(null);\n\n    // 图表尺寸控制\n    const chartMaxWidth = ref(250);\n    const chartMaxHeight = ref(80);\n    const leftChartColor = ref(\"#4a90e2\");\n    const rightChartColor = ref(\"#ef4444\");\n\n    // 表格数据处理\n    const processedTable1 = ref({\n      title: \"表格1\",\n      rows: [],\n      columns: [],\n      timeSeriesData: {}\n    });\n    const processedTable2 = ref({\n      title: \"表格2\",\n      rows: [],\n      columns: [],\n      timeSeriesData: {}\n    });\n\n    // 图表引用\n    const chartRefs1 = ref({});\n    const chartRefs2 = ref({});\n\n    // 完整图表弹窗相关状态\n    const showFullChartModal = ref(false);\n    const currentAttribute = ref(\"\");\n    const currentChartData = ref({\n      type: \"line\",\n      data: []\n    });\n    const currentSide = ref(\"left\");\n\n    // 新增处理状态\n    const isProcessing = ref(false);\n    const processingError = ref(null);\n\n    // 更新图表尺寸\n    const updateChartSize = debounce(() => {\n      if (containerRef.value) {\n        const containerWidth = containerRef.value.clientWidth;\n        chartMaxWidth.value = Math.min(250, containerWidth * 0.3);\n        // 可以根据需要动态计算高度\n        chartMaxHeight.value = 80;\n      }\n    }, 100);\n\n    // 初始化尺寸和监听\n    onMounted(() => {\n      updateChartSize();\n      window.addEventListener(\"resize\", updateChartSize);\n    });\n    onBeforeUnmount(() => {\n      window.removeEventListener(\"resize\", updateChartSize);\n    });\n    const showFullChart = (attr, side) => {\n      currentAttribute.value = attr;\n      currentSide.value = side;\n      const chartRef = side === \"left\" ? chartRefs1.value[attr] : chartRefs2.value[attr];\n      const chartType = chartRef?.chartType || \"line\";\n      if (side === \"left\") {\n        currentChartData.value = {\n          type: chartType,\n          data: processedTable1.value.timeSeriesData[attr] || []\n        };\n      } else {\n        currentChartData.value = {\n          type: chartType,\n          data: processedTable2.value.timeSeriesData[attr] || []\n        };\n      }\n      showFullChartModal.value = true;\n    };\n    const hideFullChart = () => {\n      showFullChartModal.value = false;\n    };\n    const hasData = computed(() => {\n      return props.div1RawData && props.div3RawData && processedTable1.value.columns.length > 0 && processedTable2.value.columns.length > 0;\n    });\n    const commonAttributes = computed(() => {\n      const attrs1 = processedTable1.value.rows || [];\n      const attrs2 = processedTable2.value.rows || [];\n      return attrs1.filter(attr => attrs2.includes(attr) && (hasDataForAttribute(processedTable1.value, attr) || hasDataForAttribute(processedTable2.value, attr)));\n    });\n    function parseTableToStandardJSON(html) {\n      let defaultTitle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"未命名表格\";\n      const result = {\n        title: extractTitleFromHTML(html) || defaultTitle,\n        rows: [],\n        columns: [],\n        timeSeriesData: {}\n      };\n      try {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(html, \"text/html\");\n        const table = doc.querySelector(\"table\");\n        if (!table) return result;\n\n        // 提取表头\n        const headerCells = table.querySelector(\"tr\")?.children || [];\n        result.rows = Array.from(headerCells).map(cell => {\n          return cell.textContent.replace(/[\\n†*]/g, \"\").trim().replace(/\\s+/g, \" \");\n        });\n\n        // 检查是否有Year列\n        const yearColumnIndex = result.rows.findIndex(header => header.toLowerCase().includes(\"year\"));\n        const hasYearColumn = yearColumnIndex !== -1;\n\n        // 辅助函数：清理年份格式\n        const cleanYear = yearStr => {\n          if (!yearStr) return null;\n          let cleaned = yearStr.toString().replace(/[†*]/g, \"\").trim();\n          if (/^\\d{4}[\\u2013\\u2014-]\\d{2}$/.test(cleaned)) {\n            const startYear = cleaned.substring(0, 4);\n            return parseInt(startYear);\n          }\n          const yearMatch = cleaned.match(/\\d{4}/);\n          return yearMatch ? parseInt(yearMatch[0]) : null;\n        };\n\n        // 提取数据行\n        const dataRows = Array.from(table.querySelectorAll(\"tr:not(:first-child)\"));\n        dataRows.forEach(row => {\n          const cells = Array.from(row.children);\n          if (cells.length === 0) return;\n          const recordName = cells[0].textContent.trim();\n          const recordData = {};\n          result.rows.forEach((header, index) => {\n            if (index < cells.length) {\n              let value = cells[index].textContent.trim();\n              if (index === yearColumnIndex) {\n                value = cleanYear(value);\n              } else {\n                value = smartValueConversion(value);\n              }\n              recordData[header] = value;\n            }\n          });\n          if (!hasYearColumn || hasYearColumn && recordData.Year) {\n            result.columns.push({\n              name: recordName,\n              data: recordData\n            });\n            if (hasYearColumn && recordData.Year) {\n              const year = recordData.Year;\n              result.rows.forEach(header => {\n                if (header === \"Year\" || typeof recordData[header] !== \"number\") return;\n                if (!result.timeSeriesData[header]) {\n                  result.timeSeriesData[header] = [];\n                }\n                result.timeSeriesData[header].push({\n                  year: year,\n                  value: recordData[header],\n                  recordName: recordName\n                });\n              });\n            }\n          }\n        });\n\n        // 对每个属性的时间序列数据按年份排序\n        if (hasYearColumn) {\n          Object.keys(result.timeSeriesData).forEach(attr => {\n            result.timeSeriesData[attr].sort((a, b) => a.year - b.year);\n          });\n        }\n        console.log(\"解析后的表格数据:\", result);\n        return result;\n      } catch (error) {\n        console.error(\"表格解析错误:\", error);\n        processingError.value = `表格解析错误: ${error.message}`;\n        result.title = extractTitleFromHTML(html) || defaultTitle;\n        return result;\n      }\n    }\n    function smartValueConversion(rawValue) {\n      if (!rawValue || [\"-\", \"—\", \"N/A\"].includes(rawValue)) return null;\n      if (/^\\.\\d+$/.test(rawValue)) return parseFloat(rawValue);\n      const numericValue = parseFloat(rawValue.replace(/[^\\d.-]/g, \"\"));\n      if (!isNaN(numericValue)) return numericValue;\n      if (/(\\d{4}-\\d{2}-\\d{2})|(\\d{2}\\/\\d{2}\\/\\d{4})/.test(rawValue)) return rawValue;\n      if ([\"true\", \"false\"].includes(rawValue.toLowerCase())) {\n        return rawValue.toLowerCase() === \"true\";\n      }\n      return rawValue;\n    }\n    function extractTitleFromHTML(html) {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(html, \"text/html\");\n      return doc.querySelector(\"h1, h2, h3, h4, caption\")?.textContent.trim() || null;\n    }\n    function hasDataForAttribute(table, attr) {\n      return table.timeSeriesData[attr]?.length > 0;\n    }\n    function getAverage(table, attr) {\n      const values = table.timeSeriesData[attr]?.map(item => item.value) || [];\n      return values.length ? (values.reduce((a, b) => a + b, 0) / values.length).toFixed(2) : \"N/A\";\n    }\n    function getMax(table, attr) {\n      const values = table.timeSeriesData[attr]?.map(item => item.value) || [];\n      return values.length ? Math.max(...values).toFixed(2) : \"N/A\";\n    }\n\n    // 新增：处理并验证表格数据\n    const processAndValidateTables = () => {\n      isProcessing.value = true;\n      processingError.value = null;\n\n      // 处理表格数据\n      processedTable1.value = parseTableToStandardJSON(props.div1RawData, \"表格1\");\n      processedTable2.value = parseTableToStandardJSON(props.div3RawData, \"表格2\");\n\n      // 确保timeSeriesData存在\n      processedTable1.value.timeSeriesData = processedTable1.value.timeSeriesData || {};\n      processedTable2.value.timeSeriesData = processedTable2.value.timeSeriesData || {};\n\n      // 验证数据\n      if (Object.keys(processedTable1.value.timeSeriesData).length > 0 && Object.keys(processedTable2.value.timeSeriesData).length > 0) {\n        emit(\"tables-ready\", {\n          table1: {\n            ...processedTable1.value\n          },\n          table2: {\n            ...processedTable2.value\n          },\n          commonAttributes: commonAttributes.value\n        });\n      } else {\n        processingError.value = \"表格数据不完整\";\n      }\n      isProcessing.value = false;\n    };\n\n    // async function sendToBackend() {\n    // \ttry {\n    // \t\tconst response = await api.post(\"table_compare\", {\n    // \t\t\ttable1: processedTable1.value,\n    // \t\t\ttable2: processedTable2.value\n    // \t\t});\n    // \t\tconsole.log(\"分析结果:\", response);\n    // \t} catch (error) {\n    // \t\tconsole.error(\"API请求失败:\", error);\n    // \t}\n    // }\n    watch([() => props.div1RawData, () => props.div3RawData], _ref2 => {\n      let [newDiv1, newDiv3] = _ref2;\n      if (newDiv1 && newDiv3) {\n        processAndValidateTables();\n      }\n    }, {\n      immediate: true\n    });\n    // 暴露方法给父组件\n    __expose({\n      getTableData: () => ({\n        table1: {\n          ...processedTable1.value\n        },\n        table2: {\n          ...processedTable2.value\n        },\n        commonAttributes: commonAttributes.value,\n        isProcessing: isProcessing.value,\n        error: processingError.value\n      }),\n      reprocessTables: processAndValidateTables\n    });\n    const __returned__ = {\n      props,\n      emit,\n      containerRef,\n      chartMaxWidth,\n      chartMaxHeight,\n      leftChartColor,\n      rightChartColor,\n      processedTable1,\n      processedTable2,\n      chartRefs1,\n      chartRefs2,\n      showFullChartModal,\n      currentAttribute,\n      currentChartData,\n      currentSide,\n      isProcessing,\n      processingError,\n      updateChartSize,\n      showFullChart,\n      hideFullChart,\n      hasData,\n      commonAttributes,\n      parseTableToStandardJSON,\n      smartValueConversion,\n      extractTitleFromHTML,\n      hasDataForAttribute,\n      getAverage,\n      getMax,\n      processAndValidateTables,\n      ref,\n      computed,\n      watch,\n      onMounted,\n      onBeforeUnmount,\n      SparklineChart,\n      FullChart,\n      get debounce() {\n        return debounce;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","watch","onMounted","onBeforeUnmount","SparklineChart","FullChart","debounce","props","__props","emit","__emit","containerRef","chartMaxWidth","chartMaxHeight","leftChartColor","rightChartColor","processedTable1","title","rows","columns","timeSeriesData","processedTable2","chartRefs1","chartRefs2","showFullChartModal","currentAttribute","currentChartData","type","data","currentSide","isProcessing","processingError","updateChartSize","value","containerWidth","clientWidth","Math","min","window","addEventListener","removeEventListener","showFullChart","attr","side","chartRef","chartType","hideFullChart","hasData","div1RawData","div3RawData","length","commonAttributes","attrs1","attrs2","filter","includes","hasDataForAttribute","parseTableToStandardJSON","html","defaultTitle","arguments","undefined","result","extractTitleFromHTML","parser","DOMParser","doc","parseFromString","table","querySelector","headerCells","children","Array","from","map","cell","textContent","replace","trim","yearColumnIndex","findIndex","header","toLowerCase","hasYearColumn","cleanYear","yearStr","cleaned","toString","test","startYear","substring","parseInt","yearMatch","match","dataRows","querySelectorAll","forEach","row","cells","recordName","recordData","index","smartValueConversion","Year","push","name","year","Object","keys","sort","a","b","console","log","error","message","rawValue","parseFloat","numericValue","isNaN","getAverage","values","item","reduce","toFixed","getMax","max","processAndValidateTables","table1","table2","_ref2","newDiv1","newDiv3","immediate","__expose","getTableData","reprocessTables"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/CompareTable.vue"],"sourcesContent":["<template>\r\n\t<div class=\"compare-container\" ref=\"containerRef\">\r\n\t\t<div class=\"table-grid\">\r\n\t\t\t<!-- 表头 -->\r\n\t\t\t<div class=\"header left-column\">\r\n\t\t\t\t{{ processedTable1.title || \"表格1\" }}\r\n\t\t\t</div>\r\n\t\t\t<div class=\"header middle-column\">对比属性</div>\r\n\t\t\t<div class=\"header right-column\">\r\n\t\t\t\t{{ processedTable2.title || \"表格2\" }}\r\n\t\t\t</div>\r\n\r\n\t\t\t<!-- 数据行 -->\r\n\t\t\t<template v-if=\"hasData\">\r\n\t\t\t\t<template v-for=\"attr in commonAttributes\" :key=\"attr\">\r\n\t\t\t\t\t<div class=\"cell left-column\" @click=\"showFullChart(attr, 'left')\">\r\n\t\t\t\t\t\t<template v-if=\"hasDataForAttribute(processedTable1, attr)\">\r\n\t\t\t\t\t\t\t<div class=\"chart-wrapper\">\r\n\t\t\t\t\t\t\t\t<SparklineChart\r\n\t\t\t\t\t\t\t\t\tref=\"leftCharts\"\r\n\t\t\t\t\t\t\t\t\t:data=\"processedTable1.timeSeriesData[attr]\"\r\n\t\t\t\t\t\t\t\t\t:compare-data=\"processedTable2.timeSeriesData[attr]\"\r\n\t\t\t\t\t\t\t\t\t:max-width=\"chartMaxWidth\"\r\n\t\t\t\t\t\t\t\t\t:max-height=\"chartMaxHeight\"\r\n\t\t\t\t\t\t\t\t\t:show-year-markers=\"true\"\r\n\t\t\t\t\t\t\t\t\t:line-color=\"leftChartColor\"\r\n\t\t\t\t\t\t\t\t\t@chart-mounted=\"chart => (chartRefs1[attr] = chart)\" />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<!-- <div class=\"stats-summary\">\r\n\t\t\t\t\t\t\t\t平均: {{ getAverage(processedTable1, attr) }} | 最大:\r\n\t\t\t\t\t\t\t\t{{ getMax(processedTable1, attr) }}\r\n\t\t\t\t\t\t\t</div> -->\r\n\t\t\t\t\t\t</template>\r\n\t\t\t\t\t\t<div v-else class=\"no-data\">无数据</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div class=\"cell middle-column\">\r\n\t\t\t\t\t\t<div class=\"attribute-name\">{{ attr }}</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div class=\"cell right-column\" @click=\"showFullChart(attr, 'right')\">\r\n\t\t\t\t\t\t<template v-if=\"hasDataForAttribute(processedTable2, attr)\">\r\n\t\t\t\t\t\t\t<div class=\"chart-wrapper\">\r\n\t\t\t\t\t\t\t\t<SparklineChart\r\n\t\t\t\t\t\t\t\t\tref=\"rightCharts\"\r\n\t\t\t\t\t\t\t\t\t:data=\"processedTable2.timeSeriesData[attr]\"\r\n\t\t\t\t\t\t\t\t\t:compare-data=\"processedTable1.timeSeriesData[attr]\"\r\n\t\t\t\t\t\t\t\t\t:max-width=\"chartMaxWidth\"\r\n\t\t\t\t\t\t\t\t\t:max-height=\"chartMaxHeight\"\r\n\t\t\t\t\t\t\t\t\t:show-year-markers=\"true\"\r\n\t\t\t\t\t\t\t\t\t:line-color=\"rightChartColor\"\r\n\t\t\t\t\t\t\t\t\t@chart-mounted=\"chart => (chartRefs2[attr] = chart)\" />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<!-- <div class=\"stats-summary\">\r\n\t\t\t\t\t\t\t\t平均: {{ getAverage(processedTable2, attr) }} | 最大:\r\n\t\t\t\t\t\t\t\t{{ getMax(processedTable2, attr) }}\r\n\t\t\t\t\t\t\t</div> -->\r\n\t\t\t\t\t\t</template>\r\n\t\t\t\t\t\t<div v-else class=\"no-data\">无数据</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</template>\r\n\t\t\t</template>\r\n\t\t\t<template v-else>\r\n\t\t\t\t<!-- 空状态下的行 -->\r\n\t\t\t\t<div class=\"cell left-column empty-cell\"></div>\r\n\t\t\t\t<div class=\"cell middle-column empty-cell\"></div>\r\n\t\t\t\t<div class=\"cell right-column empty-cell\"></div>\r\n\t\t\t\t<div class=\"cell left-column empty-cell\"></div>\r\n\t\t\t\t<div class=\"cell middle-column empty-cell\"></div>\r\n\t\t\t\t<div class=\"cell right-column empty-cell\"></div>\r\n\t\t\t\t<div class=\"cell left-column empty-cell\"></div>\r\n\t\t\t\t<div class=\"cell middle-column empty-cell\"></div>\r\n\t\t\t\t<div class=\"cell right-column empty-cell\"></div>\r\n\t\t\t</template>\r\n\t\t</div>\r\n\r\n\t\t<!-- 完整图表弹窗 -->\r\n\t\t<div\r\n\t\t\tv-if=\"showFullChartModal\"\r\n\t\t\tclass=\"full-chart-modal\"\r\n\t\t\t@click.self=\"hideFullChart\">\r\n\t\t\t<div class=\"modal-content\">\r\n\t\t\t\t<div class=\"modal-header\">\r\n\t\t\t\t\t<h3>{{ currentAttribute }}</h3>\r\n\t\t\t\t\t<button @click=\"hideFullChart\" class=\"close-button\">×</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<FullChart\r\n\t\t\t\t\t:data=\"currentChartData\"\r\n\t\t\t\t\t:title=\"currentAttribute\"\r\n\t\t\t\t\t:side=\"currentSide\" />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport {\r\n\t\tref,\r\n\t\tcomputed,\r\n\t\twatch,\r\n\t\tonMounted,\r\n\t\tonBeforeUnmount,\r\n\t\tdefineExpose\r\n\t} from \"vue\";\r\n\timport SparklineChart from \"./SparklineChart.vue\";\r\n\timport FullChart from \"./FullChart.vue\";\r\n\timport { debounce } from \"lodash-es\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdiv1RawData: String,\r\n\t\tdiv3RawData: String\r\n\t});\r\n\r\n\t// 新增事件发射器\r\n\tconst emit = defineEmits([\"tables-ready\"]);\r\n\r\n\t// 容器引用\r\n\tconst containerRef = ref(null);\r\n\r\n\t// 图表尺寸控制\r\n\tconst chartMaxWidth = ref(250);\r\n\tconst chartMaxHeight = ref(80);\r\n\tconst leftChartColor = ref(\"#4a90e2\");\r\n\tconst rightChartColor = ref(\"#ef4444\");\r\n\r\n\t// 表格数据处理\r\n\tconst processedTable1 = ref({\r\n\t\ttitle: \"表格1\",\r\n\t\trows: [],\r\n\t\tcolumns: [],\r\n\t\ttimeSeriesData: {}\r\n\t});\r\n\tconst processedTable2 = ref({\r\n\t\ttitle: \"表格2\",\r\n\t\trows: [],\r\n\t\tcolumns: [],\r\n\t\ttimeSeriesData: {}\r\n\t});\r\n\r\n\t// 图表引用\r\n\tconst chartRefs1 = ref({});\r\n\tconst chartRefs2 = ref({});\r\n\r\n\t// 完整图表弹窗相关状态\r\n\tconst showFullChartModal = ref(false);\r\n\tconst currentAttribute = ref(\"\");\r\n\tconst currentChartData = ref({ type: \"line\", data: [] });\r\n\tconst currentSide = ref(\"left\");\r\n\r\n\t// 新增处理状态\r\n\tconst isProcessing = ref(false);\r\n\tconst processingError = ref(null);\r\n\r\n\t// 更新图表尺寸\r\n\tconst updateChartSize = debounce(() => {\r\n\t\tif (containerRef.value) {\r\n\t\t\tconst containerWidth = containerRef.value.clientWidth;\r\n\t\t\tchartMaxWidth.value = Math.min(250, containerWidth * 0.3);\r\n\t\t\t// 可以根据需要动态计算高度\r\n\t\t\tchartMaxHeight.value = 80;\r\n\t\t}\r\n\t}, 100);\r\n\r\n\t// 初始化尺寸和监听\r\n\tonMounted(() => {\r\n\t\tupdateChartSize();\r\n\t\twindow.addEventListener(\"resize\", updateChartSize);\r\n\t});\r\n\r\n\tonBeforeUnmount(() => {\r\n\t\twindow.removeEventListener(\"resize\", updateChartSize);\r\n\t});\r\n\r\n\tconst showFullChart = (attr, side) => {\r\n\t\tcurrentAttribute.value = attr;\r\n\t\tcurrentSide.value = side;\r\n\r\n\t\tconst chartRef =\r\n\t\t\tside === \"left\" ? chartRefs1.value[attr] : chartRefs2.value[attr];\r\n\t\tconst chartType = chartRef?.chartType || \"line\";\r\n\r\n\t\tif (side === \"left\") {\r\n\t\t\tcurrentChartData.value = {\r\n\t\t\t\ttype: chartType,\r\n\t\t\t\tdata: processedTable1.value.timeSeriesData[attr] || []\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tcurrentChartData.value = {\r\n\t\t\t\ttype: chartType,\r\n\t\t\t\tdata: processedTable2.value.timeSeriesData[attr] || []\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tshowFullChartModal.value = true;\r\n\t};\r\n\r\n\tconst hideFullChart = () => {\r\n\t\tshowFullChartModal.value = false;\r\n\t};\r\n\r\n\tconst hasData = computed(() => {\r\n\t\treturn (\r\n\t\t\tprops.div1RawData &&\r\n\t\t\tprops.div3RawData &&\r\n\t\t\tprocessedTable1.value.columns.length > 0 &&\r\n\t\t\tprocessedTable2.value.columns.length > 0\r\n\t\t);\r\n\t});\r\n\r\n\tconst commonAttributes = computed(() => {\r\n\t\tconst attrs1 = processedTable1.value.rows || [];\r\n\t\tconst attrs2 = processedTable2.value.rows || [];\r\n\t\treturn attrs1.filter(\r\n\t\t\tattr =>\r\n\t\t\t\tattrs2.includes(attr) &&\r\n\t\t\t\t(hasDataForAttribute(processedTable1.value, attr) ||\r\n\t\t\t\t\thasDataForAttribute(processedTable2.value, attr))\r\n\t\t);\r\n\t});\r\n\r\n\tfunction parseTableToStandardJSON(html, defaultTitle = \"未命名表格\") {\r\n\t\tconst result = {\r\n\t\t\ttitle: extractTitleFromHTML(html) || defaultTitle,\r\n\t\t\trows: [],\r\n\t\t\tcolumns: [],\r\n\t\t\ttimeSeriesData: {}\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\t\tconst table = doc.querySelector(\"table\");\r\n\t\t\tif (!table) return result;\r\n\r\n\t\t\t// 提取表头\r\n\t\t\tconst headerCells = table.querySelector(\"tr\")?.children || [];\r\n\t\t\tresult.rows = Array.from(headerCells).map(cell => {\r\n\t\t\t\treturn cell.textContent\r\n\t\t\t\t\t.replace(/[\\n†*]/g, \"\")\r\n\t\t\t\t\t.trim()\r\n\t\t\t\t\t.replace(/\\s+/g, \" \");\r\n\t\t\t});\r\n\r\n\t\t\t// 检查是否有Year列\r\n\t\t\tconst yearColumnIndex = result.rows.findIndex(header =>\r\n\t\t\t\theader.toLowerCase().includes(\"year\")\r\n\t\t\t);\r\n\t\t\tconst hasYearColumn = yearColumnIndex !== -1;\r\n\r\n\t\t\t// 辅助函数：清理年份格式\r\n\t\t\tconst cleanYear = yearStr => {\r\n\t\t\t\tif (!yearStr) return null;\r\n\t\t\t\tlet cleaned = yearStr.toString().replace(/[†*]/g, \"\").trim();\r\n\t\t\t\tif (/^\\d{4}[\\u2013\\u2014-]\\d{2}$/.test(cleaned)) {\r\n\t\t\t\t\tconst startYear = cleaned.substring(0, 4);\r\n\t\t\t\t\treturn parseInt(startYear);\r\n\t\t\t\t}\r\n\t\t\t\tconst yearMatch = cleaned.match(/\\d{4}/);\r\n\t\t\t\treturn yearMatch ? parseInt(yearMatch[0]) : null;\r\n\t\t\t};\r\n\r\n\t\t\t// 提取数据行\r\n\t\t\tconst dataRows = Array.from(\r\n\t\t\t\ttable.querySelectorAll(\"tr:not(:first-child)\")\r\n\t\t\t);\r\n\r\n\t\t\tdataRows.forEach(row => {\r\n\t\t\t\tconst cells = Array.from(row.children);\r\n\t\t\t\tif (cells.length === 0) return;\r\n\r\n\t\t\t\tconst recordName = cells[0].textContent.trim();\r\n\t\t\t\tconst recordData = {};\r\n\r\n\t\t\t\tresult.rows.forEach((header, index) => {\r\n\t\t\t\t\tif (index < cells.length) {\r\n\t\t\t\t\t\tlet value = cells[index].textContent.trim();\r\n\t\t\t\t\t\tif (index === yearColumnIndex) {\r\n\t\t\t\t\t\t\tvalue = cleanYear(value);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvalue = smartValueConversion(value);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\trecordData[header] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!hasYearColumn || (hasYearColumn && recordData.Year)) {\r\n\t\t\t\t\tresult.columns.push({\r\n\t\t\t\t\t\tname: recordName,\r\n\t\t\t\t\t\tdata: recordData\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tif (hasYearColumn && recordData.Year) {\r\n\t\t\t\t\t\tconst year = recordData.Year;\r\n\t\t\t\t\t\tresult.rows.forEach(header => {\r\n\t\t\t\t\t\t\tif (header === \"Year\" || typeof recordData[header] !== \"number\")\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\tif (!result.timeSeriesData[header]) {\r\n\t\t\t\t\t\t\t\tresult.timeSeriesData[header] = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tresult.timeSeriesData[header].push({\r\n\t\t\t\t\t\t\t\tyear: year,\r\n\t\t\t\t\t\t\t\tvalue: recordData[header],\r\n\t\t\t\t\t\t\t\trecordName: recordName\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// 对每个属性的时间序列数据按年份排序\r\n\t\t\tif (hasYearColumn) {\r\n\t\t\t\tObject.keys(result.timeSeriesData).forEach(attr => {\r\n\t\t\t\t\tresult.timeSeriesData[attr].sort((a, b) => a.year - b.year);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tconsole.log(\"解析后的表格数据:\", result);\r\n\t\t\treturn result;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"表格解析错误:\", error);\r\n\t\t\tprocessingError.value = `表格解析错误: ${error.message}`;\r\n\t\t\tresult.title = extractTitleFromHTML(html) || defaultTitle;\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction smartValueConversion(rawValue) {\r\n\t\tif (!rawValue || [\"-\", \"—\", \"N/A\"].includes(rawValue)) return null;\r\n\t\tif (/^\\.\\d+$/.test(rawValue)) return parseFloat(rawValue);\r\n\t\tconst numericValue = parseFloat(rawValue.replace(/[^\\d.-]/g, \"\"));\r\n\t\tif (!isNaN(numericValue)) return numericValue;\r\n\t\tif (/(\\d{4}-\\d{2}-\\d{2})|(\\d{2}\\/\\d{2}\\/\\d{4})/.test(rawValue))\r\n\t\t\treturn rawValue;\r\n\t\tif ([\"true\", \"false\"].includes(rawValue.toLowerCase())) {\r\n\t\t\treturn rawValue.toLowerCase() === \"true\";\r\n\t\t}\r\n\t\treturn rawValue;\r\n\t}\r\n\r\n\tfunction extractTitleFromHTML(html) {\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\treturn (\r\n\t\t\tdoc.querySelector(\"h1, h2, h3, h4, caption\")?.textContent.trim() || null\r\n\t\t);\r\n\t}\r\n\r\n\tfunction hasDataForAttribute(table, attr) {\r\n\t\treturn table.timeSeriesData[attr]?.length > 0;\r\n\t}\r\n\r\n\tfunction getAverage(table, attr) {\r\n\t\tconst values = table.timeSeriesData[attr]?.map(item => item.value) || [];\r\n\t\treturn values.length\r\n\t\t\t? (values.reduce((a, b) => a + b, 0) / values.length).toFixed(2)\r\n\t\t\t: \"N/A\";\r\n\t}\r\n\r\n\tfunction getMax(table, attr) {\r\n\t\tconst values = table.timeSeriesData[attr]?.map(item => item.value) || [];\r\n\t\treturn values.length ? Math.max(...values).toFixed(2) : \"N/A\";\r\n\t}\r\n\r\n\t// 新增：处理并验证表格数据\r\n\tconst processAndValidateTables = () => {\r\n\t\tisProcessing.value = true;\r\n\t\tprocessingError.value = null;\r\n\r\n\t\t// 处理表格数据\r\n\t\tprocessedTable1.value = parseTableToStandardJSON(\r\n\t\t\tprops.div1RawData,\r\n\t\t\t\"表格1\"\r\n\t\t);\r\n\t\tprocessedTable2.value = parseTableToStandardJSON(\r\n\t\t\tprops.div3RawData,\r\n\t\t\t\"表格2\"\r\n\t\t);\r\n\r\n\t\t// 确保timeSeriesData存在\r\n\t\tprocessedTable1.value.timeSeriesData =\r\n\t\t\tprocessedTable1.value.timeSeriesData || {};\r\n\t\tprocessedTable2.value.timeSeriesData =\r\n\t\t\tprocessedTable2.value.timeSeriesData || {};\r\n\r\n\t\t// 验证数据\r\n\t\tif (\r\n\t\t\tObject.keys(processedTable1.value.timeSeriesData).length > 0 &&\r\n\t\t\tObject.keys(processedTable2.value.timeSeriesData).length > 0\r\n\t\t) {\r\n\t\t\temit(\"tables-ready\", {\r\n\t\t\t\ttable1: { ...processedTable1.value },\r\n\t\t\t\ttable2: { ...processedTable2.value },\r\n\t\t\t\tcommonAttributes: commonAttributes.value\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tprocessingError.value = \"表格数据不完整\";\r\n\t\t}\r\n\r\n\t\tisProcessing.value = false;\r\n\t};\r\n\r\n\t// async function sendToBackend() {\r\n\t// \ttry {\r\n\t// \t\tconst response = await api.post(\"table_compare\", {\r\n\t// \t\t\ttable1: processedTable1.value,\r\n\t// \t\t\ttable2: processedTable2.value\r\n\t// \t\t});\r\n\t// \t\tconsole.log(\"分析结果:\", response);\r\n\t// \t} catch (error) {\r\n\t// \t\tconsole.error(\"API请求失败:\", error);\r\n\t// \t}\r\n\t// }\r\n\twatch(\r\n\t\t[() => props.div1RawData, () => props.div3RawData],\r\n\t\t([newDiv1, newDiv3]) => {\r\n\t\t\tif (newDiv1 && newDiv3) {\r\n\t\t\t\tprocessAndValidateTables();\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\t// 暴露方法给父组件\r\n\tdefineExpose({\r\n\t\tgetTableData: () => ({\r\n\t\t\ttable1: { ...processedTable1.value },\r\n\t\t\ttable2: { ...processedTable2.value },\r\n\t\t\tcommonAttributes: commonAttributes.value,\r\n\t\t\tisProcessing: isProcessing.value,\r\n\t\t\terror: processingError.value\r\n\t\t}),\r\n\t\treprocessTables: processAndValidateTables\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.compare-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tpadding: 10px;\r\n\t\tbox-sizing: border-box;\r\n\t\toverflow: hidden;\r\n\t}\r\n\r\n\t.table-grid {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: minmax(200px, 1fr) minmax(100px, 0.5fr) minmax(\r\n\t\t\t\t200px,\r\n\t\t\t\t1fr\r\n\t\t\t);\r\n\t\twidth: 98%;\r\n\t\tmax-width: 1200px;\r\n\t\tmin-width: 320px;\r\n\t\tmargin: 0 auto;\r\n\t\tbackground: white;\r\n\t\tflex: 1;\r\n\t\toverflow-x: auto;\r\n\t\toverflow-y: auto;\r\n\t\tborder-collapse: separate;\r\n\t\tborder-spacing: 0;\r\n\t\tbox-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n\t\tborder: 1px solid #e2e8f0;\r\n\t\tborder-radius: 4px;\r\n\t}\r\n\r\n\t.header {\r\n\t\tpadding: 12px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n\t\tposition: sticky;\r\n\t\ttop: 0;\r\n\t\tz-index: 1;\r\n\t\tborder-right: 1px solid #475569;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tmin-height: 50px;\r\n\t\twhite-space: nowrap;\r\n\t}\r\n\r\n\t.header.middle-column {\r\n\t\tpadding: 12px 10px;\r\n\t\tbackground: #1e293b;\r\n\t}\r\n\r\n\t.cell {\r\n\t\tpadding: 10px 5px;\r\n\t\tbackground: white;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tmin-height: 120px;\r\n\t\tborder-bottom: 1px solid #f0f0f0;\r\n\t\tborder-right: 1px solid #f0f0f0;\r\n\t\tcursor: pointer;\r\n\t\ttext-align: center;\r\n\t\tword-break: break-word;\r\n\t\toverflow: hidden;\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t.chart-wrapper {\r\n\t\twidth: 100%;\r\n\t\theight: 80px;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t\toverflow: hidden;\r\n\t}\r\n\r\n\t.middle-column {\r\n\t\tbackground-color: #f8fafc;\r\n\t\tborder-right: 1px solid #f0f0f0;\r\n\t\tfont-weight: 600;\r\n\t\tmin-width: 100px;\r\n\t}\r\n\r\n\t.attribute-name {\r\n\t\tfont-weight: 600;\r\n\t\tmargin-bottom: 4px;\r\n\t\tcolor: #2c3e50;\r\n\t\tfont-size: clamp(0.9em, 2vw, 1.1em);\r\n\t\ttext-align: center;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t.stats-summary {\r\n\t\tmargin-top: 5px;\r\n\t\tfont-size: clamp(0.7rem, 1.5vw, 0.85rem);\r\n\t\tcolor: #34495e;\r\n\t\ttext-align: center;\r\n\t\tline-height: 1.3;\r\n\t\twidth: 100%;\r\n\t\tpadding: 0 5px;\r\n\t\tbox-sizing: border-box;\r\n\t\toverflow: hidden;\r\n\t\twhite-space: normal;\r\n\t}\r\n\r\n\t.no-data {\r\n\t\tcolor: #95a5a6;\r\n\t\tfont-style: italic;\r\n\t\tfont-size: 0.9em;\r\n\t\ttext-align: center;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t.full-chart-modal {\r\n\t\tposition: fixed;\r\n\t\ttop: 50%;\r\n\t\tleft: 50%;\r\n\t\ttransform: translate(-50%, -50%);\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tbackground: rgba(255, 255, 255, 0.58);\r\n\t\tz-index: 1000;\r\n\t\tbackdrop-filter: blur(5px);\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbox-sizing: border-box;\r\n\t}\r\n\r\n\t.modal-content {\r\n\t\tbackground-color: white;\r\n\t\tborder-radius: 8px;\r\n\t\twidth: 95%;\r\n\t\tmax-width: 900px;\r\n\t\tmax-height: 85vh;\r\n\t\toverflow: auto;\r\n\t\tbox-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\r\n\t\tpadding: 20px;\r\n\t}\r\n\r\n\t.modal-header {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t\talign-items: center;\r\n\t\tmargin-bottom: 20px;\r\n\t\tpadding-bottom: 10px;\r\n\t\tborder-bottom: 1px solid #eee;\r\n\t}\r\n\r\n\t.close-button {\r\n\t\tbackground: none;\r\n\t\tborder: none;\r\n\t\tfont-size: 24px;\r\n\t\tcursor: pointer;\r\n\t\tcolor: #64748b;\r\n\t\ttransition: color 0.2s;\r\n\t}\r\n\r\n\t.close-button:hover {\r\n\t\tcolor: #334155;\r\n\t}\r\n\r\n\t@media (max-width: 992px) {\r\n\t\t.table-grid {\r\n\t\t\tgrid-template-columns: minmax(150px, 1fr) minmax(80px, 0.5fr) minmax(\r\n\t\t\t\t\t150px,\r\n\t\t\t\t\t1fr\r\n\t\t\t\t);\r\n\t\t}\r\n\r\n\t\t.header {\r\n\t\t\tpadding: 10px 8px;\r\n\t\t\tfont-size: 0.95em;\r\n\t\t}\r\n\t}\r\n\r\n\t@media (max-width: 768px) {\r\n\t\t.table-grid {\r\n\t\t\tgrid-template-columns: 1fr;\r\n\t\t\twidth: 100%;\r\n\t\t\tmin-width: auto;\r\n\t\t}\r\n\r\n\t\t.header {\r\n\t\t\tdisplay: flex;\r\n\t\t\tmin-height: 40px;\r\n\t\t\tfont-size: 0.9em;\r\n\t\t}\r\n\r\n\t\t.header.middle-column {\r\n\t\t\tpadding: 10px;\r\n\t\t}\r\n\r\n\t\t.cell {\r\n\t\t\tmin-height: auto;\r\n\t\t\tpadding: 8px;\r\n\t\t\tborder-right: 1px solid #f0f0f0 !important;\r\n\t\t}\r\n\r\n\t\t.left-column,\r\n\t\t.middle-column,\r\n\t\t.right-column {\r\n\t\t\tborder-left: 1px solid #f0f0f0;\r\n\t\t}\r\n\r\n\t\t.chart-wrapper {\r\n\t\t\theight: 70px;\r\n\t\t}\r\n\r\n\t\t.stats-summary {\r\n\t\t\tfont-size: 0.7rem;\r\n\t\t}\r\n\t}\r\n\r\n\t@media (max-width: 480px) {\r\n\t\t.compare-container {\r\n\t\t\tpadding: 5px 0;\r\n\t\t}\r\n\r\n\t\t.table-grid {\r\n\t\t\twidth: 100%;\r\n\t\t\tborder-radius: 0;\r\n\t\t}\r\n\r\n\t\t.attribute-name {\r\n\t\t\tfont-size: 0.95em;\r\n\t\t}\r\n\r\n\t\t.chart-wrapper {\r\n\t\t\theight: 60px;\r\n\t\t}\r\n\r\n\t\t.stats-summary {\r\n\t\t\tfont-size: 0.65rem;\r\n\t\t}\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}