{"ast":null,"code":"/**\r\n * 健壮的维基百科信息框解析器\r\n * @param {HTMLElement|null} infoboxElement - 信息框DOM元素\r\n * @returns {Object} 标准化的信息框数据结构\r\n */\nexport function parseGenericInfobox(infoboxElement) {\n  // 默认返回值\n  const defaultResult = {\n    title: \"\",\n    type: \"none\",\n    data: {}\n  };\n\n  // 验证输入\n  if (!infoboxElement || !infoboxElement.querySelector) {\n    console.warn(\"Invalid infobox element provided\");\n    return defaultResult;\n  }\n  try {\n    // 克隆元素以避免修改原始DOM\n    const infobox = infoboxElement.cloneNode(true);\n\n    // 清理不需要的元素\n    infobox.querySelectorAll('.reference, .mw-editsection, sup').forEach(el => el.remove());\n\n    // 提取标题\n    const title = extractTitle(infobox) || \"\";\n\n    // 检测信息框类型\n    const type = detectInfoboxType(infobox) || \"通用\";\n\n    // 提取数据行\n    const data = {};\n    const rows = infobox.querySelectorAll('tr:has(th):has(td)');\n    rows.forEach(row => {\n      try {\n        const th = row.querySelector('th');\n        const td = row.querySelector('td');\n        if (th && td) {\n          const label = normalizeFieldLabel(th.textContent);\n          if (label) {\n            data[label] = extractFieldValue(td);\n          }\n        }\n      } catch (e) {\n        console.warn(\"Failed to process infobox row:\", e);\n      }\n    });\n\n    // 处理合并单元格\n    infobox.querySelectorAll('tr:has(td[colspan])').forEach(row => {\n      try {\n        const td = row.querySelector('td');\n        if (td && td.colSpan > 1) {\n          const label = \"备注\";\n          const value = extractFieldValue(td);\n          if (value) {\n            data[label] = value;\n          }\n        }\n      } catch (e) {\n        console.warn(\"Failed to process spanned row:\", e);\n      }\n    });\n    return {\n      title: title.trim(),\n      type,\n      data: Object.keys(data).length > 0 ? data : {}\n    };\n  } catch (error) {\n    console.error(\"Infobox parsing failed:\", error);\n    return defaultResult;\n  }\n}\n\n/**\r\n * 提取信息框标题\r\n */\nfunction extractTitle(infobox) {\n  try {\n    // 尝试从caption获取\n    const caption = infobox.querySelector('caption');\n    if (caption) return caption.textContent;\n\n    // 尝试从专用标题类获取\n    const titleElement = infobox.querySelector('.infobox-title, .infoboxcaption');\n    if (titleElement) return titleElement.textContent;\n\n    // 尝试从前面相邻的标题元素获取\n    const prevElement = infobox.previousElementSibling;\n    if (prevElement && /^h[1-6]$/i.test(prevElement.tagName)) {\n      return prevElement.textContent;\n    }\n\n    // 尝试从第一个th获取\n    const firstTh = infobox.querySelector('th');\n    if (firstTh && !firstTh.querySelector('th')) {\n      // 确保不是嵌套的\n      return firstTh.textContent;\n    }\n    return \"\";\n  } catch (e) {\n    console.warn(\"Title extraction failed:\", e);\n    return \"\";\n  }\n}\n\n/**\r\n * 检测信息框类型\r\n */\nfunction detectInfoboxType(infobox) {\n  try {\n    const classNames = (infobox.className || \"\").toLowerCase();\n    const content = (infobox.textContent || \"\").toLowerCase();\n    const typePatterns = [{\n      pattern: /country|nation|state/,\n      type: \"国家\"\n    }, {\n      pattern: /person|people|bio|birth|death/,\n      type: \"人物\"\n    }, {\n      pattern: /company|corporation|business|revenue/,\n      type: \"公司\"\n    }, {\n      pattern: /event|occurrence|date|time/,\n      type: \"事件\"\n    }, {\n      pattern: /location|place|settlement|address/,\n      type: \"地点\"\n    }, {\n      pattern: /film|movie|television|director|runtime/,\n      type: \"影视\"\n    }, {\n      pattern: /animal|plant|species|genus/,\n      type: \"生物\"\n    }];\n    for (const {\n      pattern,\n      type\n    } of typePatterns) {\n      if (pattern.test(classNames) || pattern.test(content)) {\n        return type;\n      }\n    }\n    return \"通用\";\n  } catch (e) {\n    console.warn(\"Type detection failed:\", e);\n    return \"未知\";\n  }\n}\n\n/**\r\n * 标准化字段标签\r\n */\nfunction normalizeFieldLabel(label) {\n  try {\n    return (label || \"\").replace(/[:：]\\s*$/, '').replace(/\\s+/g, ' ').replace(/[[\\]]/g, '').replace(/\\(.*?\\)/g, '').replace(/\\u00A0/g, ' ') // 替换不间断空格\n    .replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '').trim();\n  } catch (e) {\n    console.warn(\"Label normalization failed:\", e);\n    return \"\";\n  }\n}\n\n/**\r\n * 提取字段值\r\n */\nfunction extractFieldValue(tdElement) {\n  try {\n    const td = tdElement.cloneNode(true);\n    td.querySelectorAll('.reference, .mw-editsection, sup').forEach(el => el.remove());\n\n    // 提取纯文本\n    const textValue = (td.textContent || \"\").replace(/\\[\\d+\\]/g, '').replace(/\\s+/g, ' ').replace(/^[:：]\\s*/, '').trim();\n\n    // 提取链接\n    const links = Array.from(td.querySelectorAll('a[href]')).map(a => ({\n      text: (a.textContent || \"\").trim(),\n      href: a.href,\n      isWikiLink: a.href.includes('wikipedia.org/wiki/')\n    })).filter(link => link.text && !link.text.match(/^\\[\\d+\\]$/));\n\n    // 提取图片\n    let imageData = null;\n    const image = td.querySelector('img[src]');\n    if (image) {\n      imageData = {\n        src: image.src.startsWith('//') ? `https:${image.src}` : image.src,\n        alt: image.alt || '',\n        caption: image.title || image.closest('figure')?.querySelector('figcaption')?.textContent?.trim() || ''\n      };\n    }\n\n    // 检测数据类型\n    const dataType = detectValueType(textValue, links, imageData);\n    return {\n      text: textValue,\n      html: td.innerHTML.trim(),\n      links,\n      image: imageData,\n      dataType\n    };\n  } catch (e) {\n    console.warn(\"Field value extraction failed:\", e);\n    return {\n      text: \"\",\n      html: \"\",\n      links: [],\n      image: null,\n      dataType: \"error\"\n    };\n  }\n}\n\n/**\r\n * 检测值类型\r\n */\nfunction detectValueType(text, links, image) {\n  try {\n    if (image) return 'image';\n    if (links.length > 0) {\n      if (text.match(/^参见：|^见：|^链接：/)) return 'link';\n      if (links.length === 1 && text === links[0].text) return 'link';\n    }\n    if (!text) return 'unknown';\n    if (/(\\d{4}[年\\-]\\d{1,2}[月\\-]\\d{1,2}日?)|(\\d{1,2}[月\\/]\\d{1,2}[日\\/]\\d{4})/.test(text)) {\n      return 'date';\n    }\n    if (/^\\d{4}年?$/.test(text)) {\n      return 'year';\n    }\n    if (/^(\\d{1,3}(,\\d{3})*|\\d+)(\\.\\d+)?\\s*[^\\d\\s,\\.]+$/.test(text)) {\n      return 'measurement';\n    }\n    if (/^(是|否|有|无|存在|不存在|正确|错误|真|假)$/.test(text)) {\n      return 'boolean';\n    }\n    if (links.length > 0) return 'text_with_links';\n    return 'text';\n  } catch (e) {\n    console.warn(\"Value type detection failed:\", e);\n    return 'unknown';\n  }\n}","map":{"version":3,"names":["parseGenericInfobox","infoboxElement","defaultResult","title","type","data","querySelector","console","warn","infobox","cloneNode","querySelectorAll","forEach","el","remove","extractTitle","detectInfoboxType","rows","row","th","td","label","normalizeFieldLabel","textContent","extractFieldValue","e","colSpan","value","trim","Object","keys","length","error","caption","titleElement","prevElement","previousElementSibling","test","tagName","firstTh","classNames","className","toLowerCase","content","typePatterns","pattern","replace","tdElement","textValue","links","Array","from","map","a","text","href","isWikiLink","includes","filter","link","match","imageData","image","src","startsWith","alt","closest","dataType","detectValueType","html","innerHTML"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/js/wikiInfoboxParser.js"],"sourcesContent":["/**\r\n * 健壮的维基百科信息框解析器\r\n * @param {HTMLElement|null} infoboxElement - 信息框DOM元素\r\n * @returns {Object} 标准化的信息框数据结构\r\n */\r\nexport function parseGenericInfobox(infoboxElement) {\r\n  // 默认返回值\r\n  const defaultResult = {\r\n    title: \"\",\r\n    type: \"none\",\r\n    data: {}\r\n  };\r\n\r\n  // 验证输入\r\n  if (!infoboxElement || !infoboxElement.querySelector) {\r\n    console.warn(\"Invalid infobox element provided\");\r\n    return defaultResult;\r\n  }\r\n\r\n  try {\r\n    // 克隆元素以避免修改原始DOM\r\n    const infobox = infoboxElement.cloneNode(true);\r\n    \r\n    // 清理不需要的元素\r\n    infobox.querySelectorAll('.reference, .mw-editsection, sup').forEach(el => el.remove());\r\n\r\n    // 提取标题\r\n    const title = extractTitle(infobox) || \"\";\r\n\r\n    // 检测信息框类型\r\n    const type = detectInfoboxType(infobox) || \"通用\";\r\n\r\n    // 提取数据行\r\n    const data = {};\r\n    const rows = infobox.querySelectorAll('tr:has(th):has(td)');\r\n\r\n    rows.forEach(row => {\r\n      try {\r\n        const th = row.querySelector('th');\r\n        const td = row.querySelector('td');\r\n        \r\n        if (th && td) {\r\n          const label = normalizeFieldLabel(th.textContent);\r\n          if (label) {\r\n            data[label] = extractFieldValue(td);\r\n          }\r\n        }\r\n      } catch (e) {\r\n        console.warn(\"Failed to process infobox row:\", e);\r\n      }\r\n    });\r\n\r\n    // 处理合并单元格\r\n    infobox.querySelectorAll('tr:has(td[colspan])').forEach(row => {\r\n      try {\r\n        const td = row.querySelector('td');\r\n        if (td && td.colSpan > 1) {\r\n          const label = \"备注\";\r\n          const value = extractFieldValue(td);\r\n          if (value) {\r\n            data[label] = value;\r\n          }\r\n        }\r\n      } catch (e) {\r\n        console.warn(\"Failed to process spanned row:\", e);\r\n      }\r\n    });\r\n\r\n    return {\r\n      title: title.trim(),\r\n      type,\r\n      data: Object.keys(data).length > 0 ? data : {}\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error(\"Infobox parsing failed:\", error);\r\n    return defaultResult;\r\n  }\r\n}\r\n\r\n/**\r\n * 提取信息框标题\r\n */\r\nfunction extractTitle(infobox) {\r\n  try {\r\n    // 尝试从caption获取\r\n    const caption = infobox.querySelector('caption');\r\n    if (caption) return caption.textContent;\r\n    \r\n    // 尝试从专用标题类获取\r\n    const titleElement = infobox.querySelector('.infobox-title, .infoboxcaption');\r\n    if (titleElement) return titleElement.textContent;\r\n    \r\n    // 尝试从前面相邻的标题元素获取\r\n    const prevElement = infobox.previousElementSibling;\r\n    if (prevElement && /^h[1-6]$/i.test(prevElement.tagName)) {\r\n      return prevElement.textContent;\r\n    }\r\n    \r\n    // 尝试从第一个th获取\r\n    const firstTh = infobox.querySelector('th');\r\n    if (firstTh && !firstTh.querySelector('th')) { // 确保不是嵌套的\r\n      return firstTh.textContent;\r\n    }\r\n    \r\n    return \"\";\r\n  } catch (e) {\r\n    console.warn(\"Title extraction failed:\", e);\r\n    return \"\";\r\n  }\r\n}\r\n\r\n/**\r\n * 检测信息框类型\r\n */\r\nfunction detectInfoboxType(infobox) {\r\n  try {\r\n    const classNames = (infobox.className || \"\").toLowerCase();\r\n    const content = (infobox.textContent || \"\").toLowerCase();\r\n    \r\n    const typePatterns = [\r\n      { pattern: /country|nation|state/, type: \"国家\" },\r\n      { pattern: /person|people|bio|birth|death/, type: \"人物\" },\r\n      { pattern: /company|corporation|business|revenue/, type: \"公司\" },\r\n      { pattern: /event|occurrence|date|time/, type: \"事件\" },\r\n      { pattern: /location|place|settlement|address/, type: \"地点\" },\r\n      { pattern: /film|movie|television|director|runtime/, type: \"影视\" },\r\n      { pattern: /animal|plant|species|genus/, type: \"生物\" }\r\n    ];\r\n    \r\n    for (const { pattern, type } of typePatterns) {\r\n      if (pattern.test(classNames) || pattern.test(content)) {\r\n        return type;\r\n      }\r\n    }\r\n    \r\n    return \"通用\";\r\n  } catch (e) {\r\n    console.warn(\"Type detection failed:\", e);\r\n    return \"未知\";\r\n  }\r\n}\r\n\r\n/**\r\n * 标准化字段标签\r\n */\r\nfunction normalizeFieldLabel(label) {\r\n  try {\r\n    return (label || \"\")\r\n      .replace(/[:：]\\s*$/, '')\r\n      .replace(/\\s+/g, ' ')\r\n      .replace(/[[\\]]/g, '')\r\n      .replace(/\\(.*?\\)/g, '')\r\n      .replace(/\\u00A0/g, ' ') // 替换不间断空格\r\n      .replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '')\r\n      .trim();\r\n  } catch (e) {\r\n    console.warn(\"Label normalization failed:\", e);\r\n    return \"\";\r\n  }\r\n}\r\n\r\n/**\r\n * 提取字段值\r\n */\r\nfunction extractFieldValue(tdElement) {\r\n  try {\r\n    const td = tdElement.cloneNode(true);\r\n    td.querySelectorAll('.reference, .mw-editsection, sup').forEach(el => el.remove());\r\n    \r\n    // 提取纯文本\r\n    const textValue = (td.textContent || \"\")\r\n      .replace(/\\[\\d+\\]/g, '')\r\n      .replace(/\\s+/g, ' ')\r\n      .replace(/^[:：]\\s*/, '')\r\n      .trim();\r\n    \r\n    // 提取链接\r\n    const links = Array.from(td.querySelectorAll('a[href]'))\r\n      .map(a => ({\r\n        text: (a.textContent || \"\").trim(),\r\n        href: a.href,\r\n        isWikiLink: a.href.includes('wikipedia.org/wiki/')\r\n      }))\r\n      .filter(link => link.text && !link.text.match(/^\\[\\d+\\]$/));\r\n    \r\n    // 提取图片\r\n    let imageData = null;\r\n    const image = td.querySelector('img[src]');\r\n    if (image) {\r\n      imageData = {\r\n        src: image.src.startsWith('//') ? `https:${image.src}` : image.src,\r\n        alt: image.alt || '',\r\n        caption: image.title || \r\n                 image.closest('figure')?.querySelector('figcaption')?.textContent?.trim() || \r\n                 ''\r\n      };\r\n    }\r\n    \r\n    // 检测数据类型\r\n    const dataType = detectValueType(textValue, links, imageData);\r\n    \r\n    return {\r\n      text: textValue,\r\n      html: td.innerHTML.trim(),\r\n      links,\r\n      image: imageData,\r\n      dataType\r\n    };\r\n  } catch (e) {\r\n    console.warn(\"Field value extraction failed:\", e);\r\n    return {\r\n      text: \"\",\r\n      html: \"\",\r\n      links: [],\r\n      image: null,\r\n      dataType: \"error\"\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 检测值类型\r\n */\r\nfunction detectValueType(text, links, image) {\r\n  try {\r\n    if (image) return 'image';\r\n    if (links.length > 0) {\r\n      if (text.match(/^参见：|^见：|^链接：/)) return 'link';\r\n      if (links.length === 1 && text === links[0].text) return 'link';\r\n    }\r\n    \r\n    if (!text) return 'unknown';\r\n    \r\n    if (/(\\d{4}[年\\-]\\d{1,2}[月\\-]\\d{1,2}日?)|(\\d{1,2}[月\\/]\\d{1,2}[日\\/]\\d{4})/.test(text)) {\r\n      return 'date';\r\n    }\r\n    \r\n    if (/^\\d{4}年?$/.test(text)) {\r\n      return 'year';\r\n    }\r\n    \r\n    if (/^(\\d{1,3}(,\\d{3})*|\\d+)(\\.\\d+)?\\s*[^\\d\\s,\\.]+$/.test(text)) {\r\n      return 'measurement';\r\n    }\r\n    \r\n    if (/^(是|否|有|无|存在|不存在|正确|错误|真|假)$/.test(text)) {\r\n      return 'boolean';\r\n    }\r\n    \r\n    if (links.length > 0) return 'text_with_links';\r\n    \r\n    return 'text';\r\n  } catch (e) {\r\n    console.warn(\"Value type detection failed:\", e);\r\n    return 'unknown';\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}