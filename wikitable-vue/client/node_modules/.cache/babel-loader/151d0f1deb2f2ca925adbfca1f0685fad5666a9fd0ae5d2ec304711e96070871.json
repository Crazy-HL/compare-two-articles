{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted, onUnmounted, watch, nextTick } from \"vue\";\nimport bus from \"@/js/eventBus.js\";\nimport CompareTable from \"@/components/compoents_base/CompareTable.vue\";\n\n// 定义默认的可比较字段（作为后备）\n\nexport default {\n  __name: 'Div2',\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const DEFAULT_COMPARABLE_FIELDS = [{\n      key: \"GDP\",\n      type: \"number\",\n      typeLabel: \"数值(美元)\",\n      visualization: \"bar-chart\",\n      legend: \"国内生产总值\"\n    }, {\n      key: \"Population\",\n      type: \"number\",\n      typeLabel: \"数值(人)\",\n      visualization: \"bar-chart\",\n      legend: \"人口数量\"\n    }\n    // 其他默认字段...\n    ];\n\n    // 状态变量\n    const userQuestion = ref(\"\");\n    const chatHistory = ref([]);\n    const div1RawData = ref(null);\n    const div3RawData = ref(null);\n    const isLoading = ref(false);\n    const previousAnalysis = ref(\"\");\n    const currentComparisonContext = ref(null);\n    const leftInfobox = ref(null);\n    const rightInfobox = ref(null);\n    const comparableFields = ref([...DEFAULT_COMPARABLE_FIELDS]); // 使用默认字段初始化\n\n    // 加载聊天历史\n    const loadChatHistory = () => {\n      const saved = localStorage.getItem(\"chatHistory\");\n      if (saved) {\n        try {\n          chatHistory.value = JSON.parse(saved);\n        } catch (e) {\n          console.error(\"加载聊天记录失败:\", e);\n        }\n      }\n    };\n\n    // 保存聊天历史\n    watch(chatHistory, newVal => {\n      localStorage.setItem(\"chatHistory\", JSON.stringify(newVal));\n    }, {\n      deep: true\n    });\n\n    // 滚动到底部\n    const scrollToBottom = () => {\n      nextTick(() => {\n        const container = document.querySelector(\".chat-history\");\n        if (container) container.scrollTop = container.scrollHeight;\n      });\n    };\n\n    // 事件处理函数\n    const handleDiv1Event = data => {\n      div1RawData.value = data.content;\n      if (data.infobox) leftInfobox.value = data.infobox;\n    };\n    const handleDiv3Event = data => {\n      div3RawData.value = data.content;\n      if (data.infobox) rightInfobox.value = data.infobox;\n    };\n\n    // 初始化\n    onMounted(() => {\n      loadChatHistory();\n      bus.on(\"div1_Event\", handleDiv1Event);\n      bus.on(\"div3_Event\", handleDiv3Event);\n      bus.on(\"div1_InfoboxData\", data => {\n        leftInfobox.value = data;\n        updateComparableFields();\n      });\n      bus.on(\"div3_InfoboxData\", data => {\n        rightInfobox.value = data;\n        updateComparableFields();\n      });\n    });\n\n    // 清理\n    onUnmounted(() => {\n      bus.off(\"div1_Event\", handleDiv1Event);\n      bus.off(\"div3_Event\", handleDiv3Event);\n      bus.off(\"div1_InfoboxData\");\n      bus.off(\"div3_InfoboxData\");\n    });\n\n    // 更新可比较字段（基于实际数据）\n    const updateComparableFields = () => {\n      if (leftInfobox.value && rightInfobox.value) {\n        const availableFields = [];\n        // 检查哪些字段在两个Infobox中都存在\n        DEFAULT_COMPARABLE_FIELDS.forEach(field => {\n          if (getFieldData(leftInfobox.value, field.key) && getFieldData(rightInfobox.value, field.key)) {\n            availableFields.push(field);\n          }\n        });\n        comparableFields.value = availableFields.length > 0 ? availableFields : [...DEFAULT_COMPARABLE_FIELDS];\n      }\n    };\n\n    // 从Infobox中获取字段数据\n    const getFieldData = (infobox, fieldKey) => {\n      if (!infobox?.sections) return null;\n      for (const section of Object.values(infobox.sections)) {\n        if (section[fieldKey] !== undefined) return section[fieldKey];\n      }\n      return null;\n    };\n\n    // 格式化分析结果\n    const formatAnalysisResult = text => {\n      if (!text) return \"\";\n      return text.replace(/### (.*)/g, \"<h3>$1</h3>\").replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\").replace(/\\n/g, \"<br>\").replace(/(?:^|\\n)(\\d+\\.\\s+.*)/g, \"<li>$1</li>\").replace(/(?:^|\\n)-\\s+(.*)/g, \"<li>$1</li>\").replace(/(<li>.*<\\/li>)/gs, \"<ul>$1</ul>\");\n    };\n\n    // 处理属性对比\n    const handleAttributeComparison = async params => {\n      const {\n        fieldKey,\n        leftData,\n        rightData,\n        leftTitle,\n        rightTitle,\n        fieldType\n      } = params;\n      if (!leftData || !rightData) {\n        addErrorMessage(\"请先选择要对比的数据\");\n        return;\n      }\n      isLoading.value = true;\n      addLoadingMessage(`正在对比分析<strong>${fieldKey}</strong>属性...`);\n      try {\n        // 准备对比数据\n        currentComparisonContext.value = {\n          ...params,\n          leftInfobox: leftInfobox.value,\n          rightInfobox: rightInfobox.value,\n          allFields: comparableFields.value\n        };\n        const response = await api.post(\"compare_attributes\", {\n          chartData: {\n            ...currentComparisonContext.value,\n            allFields: comparableFields.value.map(field => ({\n              key: field.key,\n              type: field.type,\n              leftValue: getFieldData(leftInfobox.value, field.key),\n              rightValue: getFieldData(rightInfobox.value, field.key)\n            }))\n          },\n          chartType: \"comparison\"\n        });\n        if (response?.analysis) {\n          previousAnalysis.value = response.analysis;\n          addAssistantMessage(formatAnalysisResult(response.analysis));\n        } else {\n          throw new Error(\"无效的响应格式\");\n        }\n      } catch (error) {\n        console.error(\"对比分析失败:\", error);\n        addErrorMessage(`对比分析失败: ${error.message || \"未知错误\"}`);\n      } finally {\n        isLoading.value = false;\n        scrollToBottom();\n      }\n    };\n\n    // 处理用户提问\n    const askQuestion = async () => {\n      const question = userQuestion.value.trim();\n      if (!question) {\n        addErrorMessage(\"问题不能为空\");\n        return;\n      }\n      addUserMessage(question);\n      userQuestion.value = \"\";\n      isLoading.value = true;\n      try {\n        if (isAnalysisRequest(question)) {\n          await handleAnalysisRequest(question);\n        } else {\n          await handleNormalQuestion(question);\n        }\n      } catch (error) {\n        console.error(\"请求失败:\", error);\n        addErrorMessage(`请求失败: ${error.message || \"未知错误\"}`);\n      } finally {\n        isLoading.value = false;\n        scrollToBottom();\n      }\n    };\n\n    // 判断是否是分析请求\n    const isAnalysisRequest = question => {\n      return currentComparisonContext.value && [/原因/, /为什么/, /分析/, /结合/].some(regex => regex.test(question));\n    };\n\n    // 处理分析请求\n    const handleAnalysisRequest = async question => {\n      if (!currentComparisonContext.value) {\n        throw new Error(\"没有找到之前的对比数据\");\n      }\n      const response = await api.post(\"compare_attributes\", {\n        chartData: {\n          leftData: currentComparisonContext.value.leftInfobox,\n          rightData: currentComparisonContext.value.rightInfobox,\n          leftTitle: currentComparisonContext.value.leftTitle,\n          rightTitle: currentComparisonContext.value.rightTitle,\n          fieldKey: question,\n          allFields: comparableFields.value.map(field => ({\n            key: field.key,\n            type: field.type,\n            leftValue: getFieldData(currentComparisonContext.value.leftInfobox, field.key),\n            rightValue: getFieldData(currentComparisonContext.value.rightInfobox, field.key)\n          })),\n          previousConclusion: previousAnalysis.value\n        },\n        chartType: \"comparison\",\n        analysisRequest: true\n      });\n      addAssistantMessage(formatAnalysisResult(response.analysis));\n    };\n\n    // 处理普通提问\n    const handleNormalQuestion = async question => {\n      if (!leftInfobox.value || !rightInfobox.value) {\n        throw new Error(\"请先加载两个Infobox的数据\");\n      }\n      const response = await api.post(\"gpt_ask\", {\n        question,\n        leftInfobox: leftInfobox.value,\n        rightInfobox: rightInfobox.value\n      });\n      addAssistantMessage(formatAnalysisResult(response.answer));\n    };\n\n    // 消息辅助函数\n    const addUserMessage = content => {\n      chatHistory.value.push({\n        role: \"user\",\n        content,\n        timestamp: new Date().toLocaleString()\n      });\n    };\n    const addAssistantMessage = content => {\n      chatHistory.value.push({\n        role: \"assistant\",\n        content,\n        timestamp: new Date().toLocaleString()\n      });\n    };\n    const addErrorMessage = message => {\n      chatHistory.value.push({\n        role: \"assistant\",\n        content: message,\n        timestamp: new Date().toLocaleString(),\n        error: true\n      });\n    };\n    const addLoadingMessage = content => {\n      chatHistory.value.push({\n        role: \"assistant\",\n        content,\n        timestamp: new Date().toLocaleString()\n      });\n    };\n    const __returned__ = {\n      DEFAULT_COMPARABLE_FIELDS,\n      userQuestion,\n      chatHistory,\n      div1RawData,\n      div3RawData,\n      isLoading,\n      previousAnalysis,\n      currentComparisonContext,\n      leftInfobox,\n      rightInfobox,\n      comparableFields,\n      loadChatHistory,\n      scrollToBottom,\n      handleDiv1Event,\n      handleDiv3Event,\n      updateComparableFields,\n      getFieldData,\n      formatAnalysisResult,\n      handleAttributeComparison,\n      askQuestion,\n      isAnalysisRequest,\n      handleAnalysisRequest,\n      handleNormalQuestion,\n      addUserMessage,\n      addAssistantMessage,\n      addErrorMessage,\n      addLoadingMessage,\n      ref,\n      onMounted,\n      onUnmounted,\n      watch,\n      nextTick,\n      get bus() {\n        return bus;\n      },\n      CompareTable\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","watch","nextTick","bus","CompareTable","DEFAULT_COMPARABLE_FIELDS","key","type","typeLabel","visualization","legend","userQuestion","chatHistory","div1RawData","div3RawData","isLoading","previousAnalysis","currentComparisonContext","leftInfobox","rightInfobox","comparableFields","loadChatHistory","saved","localStorage","getItem","value","JSON","parse","e","console","error","newVal","setItem","stringify","deep","scrollToBottom","container","document","querySelector","scrollTop","scrollHeight","handleDiv1Event","data","content","infobox","handleDiv3Event","on","updateComparableFields","off","availableFields","forEach","field","getFieldData","push","length","fieldKey","sections","section","Object","values","undefined","formatAnalysisResult","text","replace","handleAttributeComparison","params","leftData","rightData","leftTitle","rightTitle","fieldType","addErrorMessage","addLoadingMessage","allFields","response","api","post","chartData","map","leftValue","rightValue","chartType","analysis","addAssistantMessage","Error","message","askQuestion","question","trim","addUserMessage","isAnalysisRequest","handleAnalysisRequest","handleNormalQuestion","some","regex","test","previousConclusion","analysisRequest","answer","role","timestamp","Date","toLocaleString"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/Div2.vue"],"sourcesContent":["<template>\r\n\t<div class=\"main-container\">\r\n\t\t<div class=\"chat-container\">\r\n\t\t\t<div class=\"chat-history\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tv-for=\"(message, index) in chatHistory\"\r\n\t\t\t\t\t:key=\"index\"\r\n\t\t\t\t\t:class=\"['message', message.role, { error: message.error }]\">\r\n\t\t\t\t\t<div class=\"message-content\">\r\n\t\t\t\t\t\t<strong>{{ message.role === \"user\" ? \"用户\" : \"GPT\" }}:</strong>\r\n\t\t\t\t\t\t<p v-html=\"message.content\"></p>\r\n\t\t\t\t\t\t<div class=\"message-meta\" v-if=\"message.timestamp\">\r\n\t\t\t\t\t\t\t{{ message.timestamp }}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div v-if=\"isLoading\" class=\"loading-indicator\">\r\n\t\t\t\t\t<div class=\"loading-spinner\"></div>\r\n\t\t\t\t\t正在处理中...\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"vis-container\">\r\n\t\t\t<CompareTable\r\n\t\t\t\tclass=\"compare-table\"\r\n\t\t\t\t:div1-raw-data=\"div1RawData\"\r\n\t\t\t\t:div3-raw-data=\"div3RawData\"\r\n\t\t\t\t@compareAttribute=\"handleAttributeComparison\" />\r\n\t\t</div>\r\n\t\t<div class=\"input\">\r\n\t\t\t<div class=\"input-container\">\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tv-model=\"userQuestion\"\r\n\t\t\t\t\trows=\"2\"\r\n\t\t\t\t\tplaceholder=\"请输入你想问的问题...\"\r\n\t\t\t\t\t:disabled=\"isLoading\"></textarea>\r\n\t\t\t\t<div class=\"button-container\">\r\n\t\t\t\t\t<button @click=\"askQuestion\" :disabled=\"isLoading\">\r\n\t\t\t\t\t\t{{ isLoading ? \"处理中...\" : \"发送\" }}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted, watch, nextTick } from \"vue\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\timport CompareTable from \"@/components/compoents_base/CompareTable.vue\";\r\n\r\n\t// 定义默认的可比较字段（作为后备）\r\n\tconst DEFAULT_COMPARABLE_FIELDS = [\r\n\t\t{\r\n\t\t\tkey: \"GDP\",\r\n\t\t\ttype: \"number\",\r\n\t\t\ttypeLabel: \"数值(美元)\",\r\n\t\t\tvisualization: \"bar-chart\",\r\n\t\t\tlegend: \"国内生产总值\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Population\",\r\n\t\t\ttype: \"number\",\r\n\t\t\ttypeLabel: \"数值(人)\",\r\n\t\t\tvisualization: \"bar-chart\",\r\n\t\t\tlegend: \"人口数量\"\r\n\t\t}\r\n\t\t// 其他默认字段...\r\n\t];\r\n\r\n\t// 状态变量\r\n\tconst userQuestion = ref(\"\");\r\n\tconst chatHistory = ref([]);\r\n\tconst div1RawData = ref(null);\r\n\tconst div3RawData = ref(null);\r\n\tconst isLoading = ref(false);\r\n\tconst previousAnalysis = ref(\"\");\r\n\tconst currentComparisonContext = ref(null);\r\n\tconst leftInfobox = ref(null);\r\n\tconst rightInfobox = ref(null);\r\n\tconst comparableFields = ref([...DEFAULT_COMPARABLE_FIELDS]); // 使用默认字段初始化\r\n\r\n\t// 加载聊天历史\r\n\tconst loadChatHistory = () => {\r\n\t\tconst saved = localStorage.getItem(\"chatHistory\");\r\n\t\tif (saved) {\r\n\t\t\ttry {\r\n\t\t\t\tchatHistory.value = JSON.parse(saved);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.error(\"加载聊天记录失败:\", e);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// 保存聊天历史\r\n\twatch(\r\n\t\tchatHistory,\r\n\t\tnewVal => {\r\n\t\t\tlocalStorage.setItem(\"chatHistory\", JSON.stringify(newVal));\r\n\t\t},\r\n\t\t{ deep: true }\r\n\t);\r\n\r\n\t// 滚动到底部\r\n\tconst scrollToBottom = () => {\r\n\t\tnextTick(() => {\r\n\t\t\tconst container = document.querySelector(\".chat-history\");\r\n\t\t\tif (container) container.scrollTop = container.scrollHeight;\r\n\t\t});\r\n\t};\r\n\r\n\t// 事件处理函数\r\n\tconst handleDiv1Event = data => {\r\n\t\tdiv1RawData.value = data.content;\r\n\t\tif (data.infobox) leftInfobox.value = data.infobox;\r\n\t};\r\n\r\n\tconst handleDiv3Event = data => {\r\n\t\tdiv3RawData.value = data.content;\r\n\t\tif (data.infobox) rightInfobox.value = data.infobox;\r\n\t};\r\n\r\n\t// 初始化\r\n\tonMounted(() => {\r\n\t\tloadChatHistory();\r\n\t\tbus.on(\"div1_Event\", handleDiv1Event);\r\n\t\tbus.on(\"div3_Event\", handleDiv3Event);\r\n\t\tbus.on(\"div1_InfoboxData\", data => {\r\n\t\t\tleftInfobox.value = data;\r\n\t\t\tupdateComparableFields();\r\n\t\t});\r\n\t\tbus.on(\"div3_InfoboxData\", data => {\r\n\t\t\trightInfobox.value = data;\r\n\t\t\tupdateComparableFields();\r\n\t\t});\r\n\t});\r\n\r\n\t// 清理\r\n\tonUnmounted(() => {\r\n\t\tbus.off(\"div1_Event\", handleDiv1Event);\r\n\t\tbus.off(\"div3_Event\", handleDiv3Event);\r\n\t\tbus.off(\"div1_InfoboxData\");\r\n\t\tbus.off(\"div3_InfoboxData\");\r\n\t});\r\n\r\n\t// 更新可比较字段（基于实际数据）\r\n\tconst updateComparableFields = () => {\r\n\t\tif (leftInfobox.value && rightInfobox.value) {\r\n\t\t\tconst availableFields = [];\r\n\t\t\t// 检查哪些字段在两个Infobox中都存在\r\n\t\t\tDEFAULT_COMPARABLE_FIELDS.forEach(field => {\r\n\t\t\t\tif (\r\n\t\t\t\t\tgetFieldData(leftInfobox.value, field.key) &&\r\n\t\t\t\t\tgetFieldData(rightInfobox.value, field.key)\r\n\t\t\t\t) {\r\n\t\t\t\t\tavailableFields.push(field);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tcomparableFields.value =\r\n\t\t\t\tavailableFields.length > 0\r\n\t\t\t\t\t? availableFields\r\n\t\t\t\t\t: [...DEFAULT_COMPARABLE_FIELDS];\r\n\t\t}\r\n\t};\r\n\r\n\t// 从Infobox中获取字段数据\r\n\tconst getFieldData = (infobox, fieldKey) => {\r\n\t\tif (!infobox?.sections) return null;\r\n\t\tfor (const section of Object.values(infobox.sections)) {\r\n\t\t\tif (section[fieldKey] !== undefined) return section[fieldKey];\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\t// 格式化分析结果\r\n\tconst formatAnalysisResult = text => {\r\n\t\tif (!text) return \"\";\r\n\t\treturn text\r\n\t\t\t.replace(/### (.*)/g, \"<h3>$1</h3>\")\r\n\t\t\t.replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\")\r\n\t\t\t.replace(/\\n/g, \"<br>\")\r\n\t\t\t.replace(/(?:^|\\n)(\\d+\\.\\s+.*)/g, \"<li>$1</li>\")\r\n\t\t\t.replace(/(?:^|\\n)-\\s+(.*)/g, \"<li>$1</li>\")\r\n\t\t\t.replace(/(<li>.*<\\/li>)/gs, \"<ul>$1</ul>\");\r\n\t};\r\n\r\n\t// 处理属性对比\r\n\tconst handleAttributeComparison = async params => {\r\n\t\tconst { fieldKey, leftData, rightData, leftTitle, rightTitle, fieldType } =\r\n\t\t\tparams;\r\n\r\n\t\tif (!leftData || !rightData) {\r\n\t\t\taddErrorMessage(\"请先选择要对比的数据\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tisLoading.value = true;\r\n\t\taddLoadingMessage(`正在对比分析<strong>${fieldKey}</strong>属性...`);\r\n\r\n\t\ttry {\r\n\t\t\t// 准备对比数据\r\n\t\t\tcurrentComparisonContext.value = {\r\n\t\t\t\t...params,\r\n\t\t\t\tleftInfobox: leftInfobox.value,\r\n\t\t\t\trightInfobox: rightInfobox.value,\r\n\t\t\t\tallFields: comparableFields.value\r\n\t\t\t};\r\n\r\n\t\t\tconst response = await api.post(\"compare_attributes\", {\r\n\t\t\t\tchartData: {\r\n\t\t\t\t\t...currentComparisonContext.value,\r\n\t\t\t\t\tallFields: comparableFields.value.map(field => ({\r\n\t\t\t\t\t\tkey: field.key,\r\n\t\t\t\t\t\ttype: field.type,\r\n\t\t\t\t\t\tleftValue: getFieldData(leftInfobox.value, field.key),\r\n\t\t\t\t\t\trightValue: getFieldData(rightInfobox.value, field.key)\r\n\t\t\t\t\t}))\r\n\t\t\t\t},\r\n\t\t\t\tchartType: \"comparison\"\r\n\t\t\t});\r\n\r\n\t\t\tif (response?.analysis) {\r\n\t\t\t\tpreviousAnalysis.value = response.analysis;\r\n\t\t\t\taddAssistantMessage(formatAnalysisResult(response.analysis));\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(\"无效的响应格式\");\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"对比分析失败:\", error);\r\n\t\t\taddErrorMessage(`对比分析失败: ${error.message || \"未知错误\"}`);\r\n\t\t} finally {\r\n\t\t\tisLoading.value = false;\r\n\t\t\tscrollToBottom();\r\n\t\t}\r\n\t};\r\n\r\n\t// 处理用户提问\r\n\tconst askQuestion = async () => {\r\n\t\tconst question = userQuestion.value.trim();\r\n\t\tif (!question) {\r\n\t\t\taddErrorMessage(\"问题不能为空\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\taddUserMessage(question);\r\n\t\tuserQuestion.value = \"\";\r\n\t\tisLoading.value = true;\r\n\r\n\t\ttry {\r\n\t\t\tif (isAnalysisRequest(question)) {\r\n\t\t\t\tawait handleAnalysisRequest(question);\r\n\t\t\t} else {\r\n\t\t\t\tawait handleNormalQuestion(question);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"请求失败:\", error);\r\n\t\t\taddErrorMessage(`请求失败: ${error.message || \"未知错误\"}`);\r\n\t\t} finally {\r\n\t\t\tisLoading.value = false;\r\n\t\t\tscrollToBottom();\r\n\t\t}\r\n\t};\r\n\r\n\t// 判断是否是分析请求\r\n\tconst isAnalysisRequest = question => {\r\n\t\treturn (\r\n\t\t\tcurrentComparisonContext.value &&\r\n\t\t\t[/原因/, /为什么/, /分析/, /结合/].some(regex => regex.test(question))\r\n\t\t);\r\n\t};\r\n\r\n\t// 处理分析请求\r\n\tconst handleAnalysisRequest = async question => {\r\n\t\tif (!currentComparisonContext.value) {\r\n\t\t\tthrow new Error(\"没有找到之前的对比数据\");\r\n\t\t}\r\n\r\n\t\tconst response = await api.post(\"compare_attributes\", {\r\n\t\t\tchartData: {\r\n\t\t\t\tleftData: currentComparisonContext.value.leftInfobox,\r\n\t\t\t\trightData: currentComparisonContext.value.rightInfobox,\r\n\t\t\t\tleftTitle: currentComparisonContext.value.leftTitle,\r\n\t\t\t\trightTitle: currentComparisonContext.value.rightTitle,\r\n\t\t\t\tfieldKey: question,\r\n\t\t\t\tallFields: comparableFields.value.map(field => ({\r\n\t\t\t\t\tkey: field.key,\r\n\t\t\t\t\ttype: field.type,\r\n\t\t\t\t\tleftValue: getFieldData(\r\n\t\t\t\t\t\tcurrentComparisonContext.value.leftInfobox,\r\n\t\t\t\t\t\tfield.key\r\n\t\t\t\t\t),\r\n\t\t\t\t\trightValue: getFieldData(\r\n\t\t\t\t\t\tcurrentComparisonContext.value.rightInfobox,\r\n\t\t\t\t\t\tfield.key\r\n\t\t\t\t\t)\r\n\t\t\t\t})),\r\n\t\t\t\tpreviousConclusion: previousAnalysis.value\r\n\t\t\t},\r\n\t\t\tchartType: \"comparison\",\r\n\t\t\tanalysisRequest: true\r\n\t\t});\r\n\r\n\t\taddAssistantMessage(formatAnalysisResult(response.analysis));\r\n\t};\r\n\r\n\t// 处理普通提问\r\n\tconst handleNormalQuestion = async question => {\r\n\t\tif (!leftInfobox.value || !rightInfobox.value) {\r\n\t\t\tthrow new Error(\"请先加载两个Infobox的数据\");\r\n\t\t}\r\n\r\n\t\tconst response = await api.post(\"gpt_ask\", {\r\n\t\t\tquestion,\r\n\t\t\tleftInfobox: leftInfobox.value,\r\n\t\t\trightInfobox: rightInfobox.value\r\n\t\t});\r\n\r\n\t\taddAssistantMessage(formatAnalysisResult(response.answer));\r\n\t};\r\n\r\n\t// 消息辅助函数\r\n\tconst addUserMessage = content => {\r\n\t\tchatHistory.value.push({\r\n\t\t\trole: \"user\",\r\n\t\t\tcontent,\r\n\t\t\ttimestamp: new Date().toLocaleString()\r\n\t\t});\r\n\t};\r\n\r\n\tconst addAssistantMessage = content => {\r\n\t\tchatHistory.value.push({\r\n\t\t\trole: \"assistant\",\r\n\t\t\tcontent,\r\n\t\t\ttimestamp: new Date().toLocaleString()\r\n\t\t});\r\n\t};\r\n\r\n\tconst addErrorMessage = message => {\r\n\t\tchatHistory.value.push({\r\n\t\t\trole: \"assistant\",\r\n\t\t\tcontent: message,\r\n\t\t\ttimestamp: new Date().toLocaleString(),\r\n\t\t\terror: true\r\n\t\t});\r\n\t};\r\n\r\n\tconst addLoadingMessage = content => {\r\n\t\tchatHistory.value.push({\r\n\t\t\trole: \"assistant\",\r\n\t\t\tcontent,\r\n\t\t\ttimestamp: new Date().toLocaleString()\r\n\t\t});\r\n\t};\r\n</script>\r\n\r\n<style scoped>\r\n\t.main-container {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\twidth: 100%;\r\n\t\theight: 100vh;\r\n\t\tmargin: 0 auto;\r\n\t\tpadding: 5px;\r\n\t\tbackground-color: #f5f5f5;\r\n\t}\r\n\r\n\t.chat-container {\r\n\t\tflex: 0 0 20%;\r\n\t\tmin-height: 200px;\r\n\t\tmax-height: 30vh;\r\n\t\tbackground-color: #ffffff;\r\n\t\tpadding: 20px;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t\tmargin-bottom: 10px;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\toverflow: hidden;\r\n\t}\r\n\r\n\t.chat-history {\r\n\t\tflex: 1;\r\n\t\toverflow-y: auto;\r\n\t\tpadding: 10px;\r\n\t\tbackground-color: #fafafa;\r\n\t\tborder-radius: 8px;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t\tmargin-bottom: 20px;\r\n\t\tscroll-behavior: smooth;\r\n\t}\r\n\r\n\t.input {\r\n\t\tflex: 0.3;\r\n\t}\r\n\r\n\t.message {\r\n\t\tmargin-bottom: 15px;\r\n\t}\r\n\r\n\t.message-content {\r\n\t\tpadding: 12px;\r\n\t\tborder-radius: 8px;\r\n\t\tbackground-color: #f0f0f0;\r\n\t\tline-height: 1.5;\r\n\t}\r\n\r\n\t.message.user .message-content {\r\n\t\tbackground-color: #e3f2fd;\r\n\t\ttext-align: right;\r\n\t}\r\n\r\n\t.message.assistant .message-content {\r\n\t\tbackground-color: #f5f5f5;\r\n\t\ttext-align: left;\r\n\t}\r\n\r\n\t.message.error .message-content {\r\n\t\tbackground-color: #ffebee;\r\n\t\tborder-left: 3px solid #f44336;\r\n\t}\r\n\r\n\t.message-meta {\r\n\t\tfont-size: 12px;\r\n\t\tcolor: #999;\r\n\t\tmargin-top: 4px;\r\n\t}\r\n\r\n\t.loading-indicator {\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tgap: 8px;\r\n\t\tpadding: 10px;\r\n\t\tbackground: rgba(255, 255, 255, 0.8);\r\n\t\tposition: sticky;\r\n\t\tbottom: 0;\r\n\t}\r\n\r\n\t.loading-spinner {\r\n\t\twidth: 16px;\r\n\t\theight: 16px;\r\n\t\tborder: 2px solid #f3f3f3;\r\n\t\tborder-top: 2px solid #4caf50;\r\n\t\tborder-radius: 50%;\r\n\t\tanimation: spin 1s linear infinite;\r\n\t}\r\n\r\n\t@keyframes spin {\r\n\t\t0% {\r\n\t\t\ttransform: rotate(0deg);\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform: rotate(360deg);\r\n\t\t}\r\n\t}\r\n\r\n\t.vis-container {\r\n\t\tflex: 1.2;\r\n\t\tpadding: 8px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 8px;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t\tbox-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n\t\tmin-width: 320px;\r\n\t}\r\n\r\n\t.compare-table {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t}\r\n\r\n\t.input-container {\r\n\t\tdisplay: flex;\r\n\t\tflex: 2;\r\n\t\tflex-direction: column;\r\n\t\tgap: 10px;\r\n\t}\r\n\r\n\ttextarea {\r\n\t\twidth: 100%;\r\n\t\theight: 80px;\r\n\t\tresize: none;\r\n\t\tpadding: 12px;\r\n\t\tfont-size: 14px;\r\n\t\tborder: 1px solid #ddd;\r\n\t\tborder-radius: 8px;\r\n\t\tbackground-color: #fafafa;\r\n\t\ttransition: border-color 0.3s ease;\r\n\t}\r\n\r\n\ttextarea:disabled {\r\n\t\tbackground-color: #eee;\r\n\t\tcursor: not-allowed;\r\n\t}\r\n\r\n\ttextarea:focus {\r\n\t\toutline: none;\r\n\t\tborder-color: #4caf50;\r\n\t}\r\n\r\n\t.button-container {\r\n\t\tdisplay: flex;\r\n\t\tflex: 0.2;\r\n\t\tjustify-content: space-between;\r\n\t\tgap: 10px;\r\n\t}\r\n\r\n\tbutton {\r\n\t\tflex: 1;\r\n\t\tpadding: 10px 20px;\r\n\t\tbackground-color: #4caf50;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tborder-radius: 8px;\r\n\t\tcursor: pointer;\r\n\t\tfont-size: 14px;\r\n\t\ttransition: all 0.3s ease;\r\n\t}\r\n\r\n\tbutton:hover:not(:disabled) {\r\n\t\tbackground-color: #45a049;\r\n\t\ttransform: translateY(-1px);\r\n\t}\r\n\r\n\tbutton:active:not(:disabled) {\r\n\t\ttransform: translateY(0);\r\n\t}\r\n\r\n\tbutton:disabled {\r\n\t\tbackground-color: #cccccc;\r\n\t\tcursor: not-allowed;\r\n\t\ttransform: none;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}