{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createBlock as _createBlock, createVNode as _createVNode, Fragment as _Fragment, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-62c843dc\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = [\"id\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass(['div0', $props.selectContentClass]),\n    id: $props.divId,\n    ref: \"divRef\"\n  }, [_createElementVNode(\"h1\", null, _toDisplayString($props.pageTitle), 1 /* TEXT */), _createCommentVNode(\" 加载动画 \"), $setup.loading ? (_openBlock(), _createBlock($setup[\"LoadingSpinner\"], {\n    key: 0\n  })) : $setup.error ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" 错误信息 \"), _createVNode($setup[\"ErrorDisplay\"], {\n    message: $setup.error,\n    onRetry: $setup.fetchWikipediaContent\n  }, null, 8 /* PROPS */, [\"message\"])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 2\n  }, [_createCommentVNode(\" 文章内容 \"), _createVNode($setup[\"WikipediaContent\"], {\n    content: $setup.pageHtml,\n    onSelect: $setup.handleSelection\n  }, null, 8 /* PROPS */, [\"content\"])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)), _createCommentVNode(\" 弹出框 \"), _createVNode($setup[\"TextPopup\"], {\n    visible: $setup.showPopup[$props.divId],\n    content: $setup.selectedText[$props.divId],\n    containerClass: $props.divId === 'div1' ? 'chart-container1' : 'chart-container2',\n    containerRef: $setup.divRef,\n    onClose: $setup.closePopup\n  }, null, 8 /* PROPS */, [\"visible\", \"content\", \"containerClass\", \"containerRef\"]), _createCommentVNode(\" 悬浮大纲组件 \"), _createVNode($setup[\"ArticleOutline\"], {\n    content: $setup.pageHtml,\n    divId: $props.divId\n  }, null, 8 /* PROPS */, [\"content\", \"divId\"])], 10 /* CLASS, PROPS */, _hoisted_1);\n}","map":{"version":3,"names":["_createElementBlock","class","_normalizeClass","$props","selectContentClass","id","divId","ref","_createElementVNode","_toDisplayString","pageTitle","_createCommentVNode","$setup","loading","_createBlock","key","error","_Fragment","_createVNode","message","onRetry","fetchWikipediaContent","content","pageHtml","onSelect","handleSelection","visible","showPopup","selectedText","containerClass","containerRef","divRef","onClose","closePopup","_hoisted_1"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\ParentComponent.vue"],"sourcesContent":["<template>\r\n\t<div :class=\"['div0', selectContentClass]\" :id=\"divId\" ref=\"divRef\">\r\n\t\t<h1>{{ pageTitle }}</h1>\r\n\r\n\t\t<!-- 加载动画 -->\r\n\t\t<LoadingSpinner v-if=\"loading\" />\r\n\r\n\t\t<!-- 错误信息 -->\r\n\t\t<ErrorDisplay\r\n\t\t\tv-else-if=\"error\"\r\n\t\t\t:message=\"error\"\r\n\t\t\t@retry=\"fetchWikipediaContent\" />\r\n\r\n\t\t<!-- 文章内容 -->\r\n\t\t<WikipediaContent v-else :content=\"pageHtml\" @select=\"handleSelection\" />\r\n\r\n\t\t<!-- 弹出框 -->\r\n\t\t<TextPopup\r\n\t\t\t:visible=\"showPopup[divId]\"\r\n\t\t\t:content=\"selectedText[divId]\"\r\n\t\t\t:containerClass=\"\r\n\t\t\t\tdivId === 'div1' ? 'chart-container1' : 'chart-container2'\r\n\t\t\t\"\r\n\t\t\t:containerRef=\"divRef\"\r\n\t\t\t@close=\"closePopup\" />\r\n\r\n\t\t<!-- 悬浮大纲组件 -->\r\n\t\t<ArticleOutline :content=\"pageHtml\" :divId=\"divId\" />\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted, nextTick } from \"vue\";\r\n\timport LoadingSpinner from \"./LoadingSpinner.vue\";\r\n\timport ErrorDisplay from \"./ErrorDisplay.vue\";\r\n\timport WikipediaContent from \"./WikipediaContent.vue\";\r\n\timport TextPopup from \"./TextPopup.vue\";\r\n\timport ArticleOutline from \"./ArticleOutline.vue\";\r\n\timport * as d3 from \"d3\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\r\n\tconst props = defineProps({\r\n\t\tpageTitle: String,\r\n\t\tdivId: String,\r\n\t\tselectContentClass: String,\r\n\t\tlinkedOutline: Array\r\n\t});\r\n\r\n\tconst pageHtml = ref(\"\");\r\n\tconst loading = ref(true);\r\n\tconst error = ref(\"\");\r\n\tconst selectedText = ref({});\r\n\tconst showPopup = ref({});\r\n\tconst divRef = ref(null);\r\n\r\n\t// 调试模式\r\n\tconst debugMode = ref(true);\r\n\r\n\t// 获取Wikipedia页面\r\n\tconst fetchWikipediaContent = async () => {\r\n\t\ttry {\r\n\t\t\tconst apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(\r\n\t\t\t\tprops.pageTitle\r\n\t\t\t)}`;\r\n\t\t\tconst response = await fetch(apiUrl);\r\n\t\t\tif (!response.ok) throw new Error(\"Failed to fetch data\");\r\n\r\n\t\t\tconst html = await response.text();\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\r\n\t\t\t// 给所有标题添加唯一ID\r\n\t\t\tconst headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\r\n\t\t\theadings.forEach((heading, index) => {\r\n\t\t\t\theading.id = `heading-${index}-${props.divId}`;\r\n\t\t\t});\r\n\r\n\t\t\t// 给表格添加类名\r\n\t\t\tconst tables = doc.querySelectorAll(\"table\");\r\n\t\t\ttables.forEach(table => {\r\n\t\t\t\ttable.classList.add(\"custom-table\");\r\n\t\t\t});\r\n\r\n\t\t\t// 注入样式\r\n\t\t\tconst styles = Array.from(doc.querySelectorAll('link[rel=\"stylesheet\"]'));\r\n\t\t\tstyles.forEach(link => {\r\n\t\t\t\tif (!document.querySelector(`link[href=\"${link.href}\"]`)) {\r\n\t\t\t\t\tconst styleTag = document.createElement(\"link\");\r\n\t\t\t\t\tstyleTag.rel = \"stylesheet\";\r\n\t\t\t\t\tstyleTag.href = link.href;\r\n\t\t\t\t\tdocument.head.appendChild(styleTag);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tconst contentElement = doc.querySelector(\"body\");\r\n\t\t\tif (!contentElement) throw new Error(\"Content not found\");\r\n\r\n\t\t\tpageHtml.value = contentElement.innerHTML;\r\n\t\t\tinjectWikipediaStyles();\r\n\t\t} catch (err) {\r\n\t\t\terror.value = \"Error fetching Wikipedia content: \" + err.message;\r\n\t\t} finally {\r\n\t\t\tloading.value = false;\r\n\t\t}\r\n\t};\r\n\r\n\t// 手动引入Wikipedia CSS\r\n\tconst injectWikipediaStyles = () => {\r\n\t\tconst wikipediaStyles = [\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=site.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=ext.cite.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=ext.scribunto.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=skins.vector.styles\"\r\n\t\t];\r\n\r\n\t\twikipediaStyles.forEach(url => {\r\n\t\t\tif (!document.querySelector(`link[href=\"${url}\"]`)) {\r\n\t\t\t\tconst styleTag = document.createElement(\"link\");\r\n\t\t\t\tstyleTag.rel = \"stylesheet\";\r\n\t\t\t\tstyleTag.href = url;\r\n\t\t\t\tdocument.head.appendChild(styleTag);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t// 提取关联章节内容\r\n\tconst extractLinkedChapterContent = (sourceId, sourceContainerId) => {\r\n\t\tif (!props.linkedOutline) {\r\n\t\t\tconsole.error(\"LinkedOutline is undefined!\");\r\n\t\t\treturn { linkedItem: null, chapterContent: \"\" };\r\n\t\t}\r\n\r\n\t\tconst linkedItem = props.linkedOutline.find(\r\n\t\t\tlinked => linked.leftId === sourceId || linked.rightId === sourceId\r\n\t\t);\r\n\t\tif (!linkedItem) return { linkedItem: null, chapterContent: \"\" };\r\n\r\n\t\tconst targetContainerId = sourceContainerId === \"div1\" ? \"div3\" : \"div1\";\r\n\t\tconst targetId =\r\n\t\t\tsourceContainerId === \"div1\" ? linkedItem.rightId : linkedItem.leftId;\r\n\r\n\t\tconst targetContainer = document.getElementById(targetContainerId);\r\n\t\tif (!targetContainer) return { linkedItem: null, chapterContent: \"\" };\r\n\r\n\t\tconst targetElement = targetContainer.querySelector(`#${targetId}`);\r\n\t\tif (!targetElement) return { linkedItem: null, chapterContent: \"\" };\r\n\r\n\t\tlet chapterContent = \"\";\r\n\t\tlet currentNode = targetElement;\r\n\r\n\t\twhile (currentNode) {\r\n\t\t\tif (\r\n\t\t\t\tcurrentNode !== targetElement &&\r\n\t\t\t\tcurrentNode.nodeType === Node.ELEMENT_NODE &&\r\n\t\t\t\t/^h[1-6]$/i.test(currentNode.tagName)\r\n\t\t\t) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (\r\n\t\t\t\tcurrentNode.nodeType === Node.ELEMENT_NODE ||\r\n\t\t\t\tcurrentNode.nodeType === Node.TEXT_NODE\r\n\t\t\t) {\r\n\t\t\t\tchapterContent += currentNode.outerHTML || currentNode.textContent;\r\n\t\t\t}\r\n\r\n\t\t\tcurrentNode = currentNode.nextSibling;\r\n\t\t}\r\n\r\n\t\treturn { linkedItem, chapterContent };\r\n\t};\r\n\r\n\t// 处理选中内容（主入口）\r\n\tconst handleSelection = content => {\r\n\t\tconst isTable = /<table.*?>.*?<\\/table>/s.test(content);\r\n\t\tconst selection = window.getSelection();\r\n\r\n\t\tif (!selection || selection.rangeCount === 0) return;\r\n\r\n\t\tconst range = selection.getRangeAt(0);\r\n\t\tlet sourceId = findHeadingId(range);\r\n\r\n\t\t// 核心修改：确保始终触发主事件\r\n\t\ttriggerPrimaryEvent(content, sourceId, isTable);\r\n\r\n\t\t// 存储选中内容并显示弹窗\r\n\t\tselectedText.value[props.divId] = content;\r\n\t\tshowPopup.value[props.divId] = true;\r\n\t\tnextTick(updatePopupPosition);\r\n\r\n\t\t// 特殊处理表格内容\r\n\t\tif (isTable && sourceId) {\r\n\t\t\thandleTableSelection(content, sourceId);\r\n\t\t}\r\n\t};\r\n\r\n\t// 辅助函数：查找标题ID\r\n\tconst findHeadingId = range => {\r\n\t\t// 从选中节点查找\r\n\t\tconst selectedNodes = range.cloneContents().childNodes;\r\n\t\tfor (const node of selectedNodes) {\r\n\t\t\tif (\r\n\t\t\t\tnode.nodeType === Node.ELEMENT_NODE &&\r\n\t\t\t\t/^h[1-6]$/i.test(node.tagName)\r\n\t\t\t) {\r\n\t\t\t\treturn node.id;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 从起始位置向上查找\r\n\t\tlet element = range.startContainer;\r\n\t\twhile (element && !/^h[1-6]$/i.test(element.tagName)) {\r\n\t\t\telement = element.parentElement;\r\n\t\t}\r\n\t\treturn element?.id;\r\n\t};\r\n\r\n\t// 触发主事件\r\n\tconst triggerPrimaryEvent = (content, sourceId, isTable) => {\r\n\t\tconst eventData = {\r\n\t\t\ttype: \"primary\",\r\n\t\t\tcontent,\r\n\t\t\tsourceId,\r\n\t\t\tisTable,\r\n\t\t\tdivId: props.divId,\r\n\t\t\ttimestamp: Date.now()\r\n\t\t};\r\n\r\n\t\tif (debugMode.value) {\r\n\t\t\tconsole.group(`触发 ${props.divId}Event`);\r\n\t\t\tconsole.log(\"事件数据:\", eventData);\r\n\t\t\tconsole.groupEnd();\r\n\t\t}\r\n\r\n\t\tbus.emit(`${props.divId}Event`, eventData);\r\n\t};\r\n\r\n\t// 处理表格选择\r\n\tconst handleTableSelection = (content, sourceId) => {\r\n\t\tconst { linkedItem, chapterContent } = extractLinkedChapterContent(\r\n\t\t\tsourceId,\r\n\t\t\tprops.divId\r\n\t\t);\r\n\t\tif (!linkedItem || !chapterContent) return;\r\n\r\n\t\tconst otherContainerId = props.divId === \"div1\" ? \"div3\" : \"div1\";\r\n\t\tconst targetId =\r\n\t\t\tprops.divId === \"div1\" ? linkedItem.rightId : linkedItem.leftId;\r\n\r\n\t\t// 滚动到关联章节\r\n\t\tconst targetElement = document.getElementById(targetId);\r\n\t\ttargetElement?.scrollIntoView({ behavior: \"smooth\" });\r\n\r\n\t\t// 触发关联事件\r\n\t\tconst linkedEventData = {\r\n\t\t\ttype: \"linked\",\r\n\t\t\tcontent: chapterContent,\r\n\t\t\tsourceId,\r\n\t\t\tlinkedItem,\r\n\t\t\tfromDivId: props.divId\r\n\t\t};\r\n\r\n\t\tif (debugMode.value) {\r\n\t\t\tconsole.group(`触发 ${otherContainerId}Event (关联内容)`);\r\n\t\t\tconsole.log(\"关联事件数据:\", linkedEventData);\r\n\t\t\tconsole.groupEnd();\r\n\t\t}\r\n\r\n\t\tbus.emit(`${otherContainerId}Event`, linkedEventData);\r\n\t};\r\n\r\n\t// 关闭弹出框\r\n\tconst closePopup = () => {\r\n\t\tshowPopup.value[props.divId] = false;\r\n\t\tselectedText.value[props.divId] = \"\";\r\n\t\tconst container =\r\n\t\t\tprops.divId === \"div1\" ? \".chart-container1\" : \".chart-container2\";\r\n\t\td3.select(container).html(\"\");\r\n\t};\r\n\r\n\t// 更新弹窗位置\r\n\tconst updatePopupPosition = () => {\r\n\t\tif (!showPopup.value[props.divId] || !divRef.value) return;\r\n\r\n\t\tconst popup = divRef.value.querySelector(\".text-popup\");\r\n\t\tconst overlay = divRef.value.querySelector(\".overlay\");\r\n\t\tif (!popup || !overlay) return;\r\n\r\n\t\tconst rect = divRef.value.getBoundingClientRect();\r\n\t\tconst scrollTop = divRef.value.scrollTop;\r\n\t\tconst scrollLeft = divRef.value.scrollLeft;\r\n\r\n\t\toverlay.style.top = `${scrollTop}px`;\r\n\t\toverlay.style.left = `${scrollLeft}px`;\r\n\t\toverlay.style.width = `${divRef.value.clientWidth}px`;\r\n\t\toverlay.style.height = `${divRef.value.clientHeight}px`;\r\n\r\n\t\tpopup.style.top = `${rect.height / 2 + scrollTop}px`;\r\n\t\tpopup.style.left = `${rect.width / 2 + scrollLeft}px`;\r\n\t};\r\n\r\n\t// 组件生命周期\r\n\tonMounted(() => {\r\n\t\tfetchWikipediaContent();\r\n\r\n\t\t// 初始化事件监听\r\n\t\tconst eventHandler = data => {\r\n\t\t\tconsole.log(`Received ${props.divId} event:`, data);\r\n\t\t\tselectedText.value[props.divId] = data.content;\r\n\t\t\tshowPopup.value[props.divId] = true;\r\n\t\t\tnextTick(updatePopupPosition);\r\n\t\t};\r\n\r\n\t\t// 确保bus存在\r\n\t\tif (!bus) {\r\n\t\t\tconsole.error(\"Event bus is not available\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 安全访问_events\r\n\t\tconsole.log(\"Current events:\", bus._events || \"No events registered\");\r\n\r\n\t\t// 监听事件（兼容新旧版本）\r\n\t\tbus.on(`${props.divId}Event`, eventHandler);\r\n\t\tbus.on(`${props.divId}_Event`, eventHandler); // 兼容带下划线版本\r\n\r\n\t\t// 滚动事件\r\n\t\tif (divRef.value) {\r\n\t\t\tdivRef.value.addEventListener(\"scroll\", updatePopupPosition);\r\n\t\t}\r\n\t});\r\n\r\n\tonUnmounted(() => {\r\n\t\t// 清理事件监听\r\n\t\tbus.off(`${props.divId}Event`);\r\n\t\tbus.off(`${props.divId}_Event`);\r\n\r\n\t\tif (divRef.value) {\r\n\t\t\tdivRef.value.removeEventListener(\"scroll\", updatePopupPosition);\r\n\t\t}\r\n\t});\r\n\r\n\t// 处理传入事件\r\n\tconst handleIncomingEvent = data => {\r\n\t\tif (debugMode.value) {\r\n\t\t\tconsole.group(`收到 ${props.divId}Event`);\r\n\t\t\tconsole.log(\"事件数据:\", data);\r\n\t\t\tconsole.groupEnd();\r\n\t\t}\r\n\r\n\t\tif (data.type === \"linked\") {\r\n\t\t\tselectedText.value[props.divId] = data.content;\r\n\t\t\tshowPopup.value[props.divId] = true;\r\n\t\t\tnextTick(updatePopupPosition);\r\n\t\t}\r\n\t};\r\n</script>\r\n\r\n<style scoped>\r\n\th1 {\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t.div0 {\r\n\t\tposition: relative;\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t#div1,\r\n\t#div3 {\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t.showHtml {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\toverflow: auto;\r\n\t}\r\n\r\n\t::selection {\r\n\t\tbackground-color: yellow;\r\n\t\tcolor: black;\r\n\t}\r\n</style>\r\n"],"mappings":";;mBAAA;;uBACCA,mBAAA,CA2BM;IA3BAC,KAAK,EADZC,eAAA,UACuBC,MAAA,CAAAC,kBAAkB;IAAIC,EAAE,EAAEF,MAAA,CAAAG,KAAK;IAAEC,GAAG,EAAC;MAC1DC,mBAAA,CAAwB,YAAAC,gBAAA,CAAjBN,MAAA,CAAAO,SAAS,kBAEhBC,mBAAA,UAAa,EACSC,MAAA,CAAAC,OAAO,I,cAA7BC,YAAA,CAAiCF,MAAA;IALnCG,GAAA;EAAA,MAScH,MAAA,CAAAI,KAAK,I,cADjBhB,mBAAA,CAGkCiB,SAAA;IAXpCF,GAAA;EAAA,IAOEJ,mBAAA,UAAa,EACbO,YAAA,CAGkCN,MAAA;IADhCO,OAAO,EAAEP,MAAA,CAAAI,KAAK;IACdI,OAAK,EAAER,MAAA,CAAAS;0GAGTrB,mBAAA,CAAyEiB,SAAA;IAd3EF,GAAA;EAAA,IAaEJ,mBAAA,UAAa,EACbO,YAAA,CAAyEN,MAAA;IAA/CU,OAAO,EAAEV,MAAA,CAAAW,QAAQ;IAAGC,QAAM,EAAEZ,MAAA,CAAAa;0FAEtDd,mBAAA,SAAY,EACZO,YAAA,CAOuBN,MAAA;IANrBc,OAAO,EAAEd,MAAA,CAAAe,SAAS,CAACxB,MAAA,CAAAG,KAAK;IACxBgB,OAAO,EAAEV,MAAA,CAAAgB,YAAY,CAACzB,MAAA,CAAAG,KAAK;IAC3BuB,cAAc,EAAQ1B,MAAA,CAAAG,KAAK;IAG3BwB,YAAY,EAAElB,MAAA,CAAAmB,MAAM;IACpBC,OAAK,EAAEpB,MAAA,CAAAqB;qFAETtB,mBAAA,YAAe,EACfO,YAAA,CAAqDN,MAAA;IAApCU,OAAO,EAAEV,MAAA,CAAAW,QAAQ;IAAGjB,KAAK,EAAEH,MAAA,CAAAG;yEA3B9C4B,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}