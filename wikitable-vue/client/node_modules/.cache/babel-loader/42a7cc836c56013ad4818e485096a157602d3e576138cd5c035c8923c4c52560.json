{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nconst HighlightText = {\n  // 高亮选中的文字（支持跨节点）\n  highlightSelection() {\n    let highlightColor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'yellow';\n    const selection = window.getSelection();\n    if (!selection.isCollapsed) {\n      const range = selection.getRangeAt(0);\n      const startContainer = range.startContainer;\n      const endContainer = range.endContainer;\n\n      // 确保选中的内容是文本节点\n      if (startContainer.nodeType === Node.TEXT_NODE && endContainer.nodeType === Node.TEXT_NODE) {\n        // 如果选中的开始和结束都是文本节点\n        const textNode = startContainer;\n\n        // 确保 startOffset 和 endOffset 不超过文本节点长度\n        const startOffset = range.startOffset;\n        const endOffset = range.endOffset;\n        const validStartOffset = Math.min(startOffset, textNode.length);\n        const validEndOffset = Math.min(endOffset, textNode.length);\n        const highlightedText = textNode.splitText(validStartOffset); // 切分文本节点\n\n        // 高亮选中部分\n        const span = document.createElement('span');\n        span.style.backgroundColor = highlightColor; // 设置高亮样式\n        highlightedText.splitText(validEndOffset - validStartOffset); // 再次切分文本，确保高亮范围\n\n        const highlightRange = document.createRange();\n        highlightRange.setStart(highlightedText, 0); // 从高亮部分的起始位置开始\n        highlightRange.setEnd(highlightedText, validEndOffset - validStartOffset); // 到结束位置\n\n        highlightRange.surroundContents(span); // 高亮显示\n      } else {\n        // 如果选中的内容包含多个文本节点或者是其他类型的节点\n        this.processMultiNodeSelection(range, highlightColor);\n      }\n      selection.removeAllRanges(); // 清除选区\n    }\n  },\n  // 处理多节点选区的高亮\n  processMultiNodeSelection(range, highlightColor) {\n    const startContainer = range.startContainer;\n    const endContainer = range.endContainer;\n    const rangeStart = range.startOffset;\n    const rangeEnd = range.endOffset;\n    const textNodes = [];\n    let node = startContainer;\n\n    // 收集选区中的所有文本节点\n    while (node) {\n      if (node.nodeType === Node.TEXT_NODE) {\n        textNodes.push(node);\n      }\n      if (node === endContainer) break;\n      node = this.getNextNode(node);\n    }\n\n    // 高亮每个文本节点\n    textNodes.forEach(textNode => {\n      const span = document.createElement('span');\n      span.style.backgroundColor = highlightColor; // 设置高亮样式\n      const parent = textNode.parentNode;\n      parent.replaceChild(span, textNode);\n      span.appendChild(textNode);\n    });\n\n    // 如果选区跨越了多个元素（如多个段落），确保高亮完整的选区范围\n    const highlightSpan = document.createElement('span');\n    highlightSpan.style.backgroundColor = highlightColor;\n    const fullRange = document.createRange();\n    fullRange.setStart(startContainer, rangeStart);\n    fullRange.setEnd(endContainer, rangeEnd);\n    fullRange.surroundContents(highlightSpan); // 高亮整个选区\n  },\n  // 获取下一个节点\n  getNextNode(node) {\n    if (node.firstChild) return node.firstChild;\n    while (node) {\n      if (node.nextSibling) return node.nextSibling;\n      node = node.parentNode;\n    }\n    return null;\n  }\n};\nexport default HighlightText;","map":{"version":3,"names":["HighlightText","highlightSelection","highlightColor","arguments","length","undefined","selection","window","getSelection","isCollapsed","range","getRangeAt","startContainer","endContainer","nodeType","Node","TEXT_NODE","textNode","startOffset","endOffset","validStartOffset","Math","min","validEndOffset","highlightedText","splitText","span","document","createElement","style","backgroundColor","highlightRange","createRange","setStart","setEnd","surroundContents","processMultiNodeSelection","removeAllRanges","rangeStart","rangeEnd","textNodes","node","push","getNextNode","forEach","parent","parentNode","replaceChild","appendChild","highlightSpan","fullRange","firstChild","nextSibling"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/js/highlight.js"],"sourcesContent":["const HighlightText = {\r\n  // 高亮选中的文字（支持跨节点）\r\n  highlightSelection(highlightColor = 'yellow') {\r\n    const selection = window.getSelection();\r\n    if (!selection.isCollapsed) {\r\n      const range = selection.getRangeAt(0);\r\n      const startContainer = range.startContainer;\r\n      const endContainer = range.endContainer;\r\n\r\n      // 确保选中的内容是文本节点\r\n      if (startContainer.nodeType === Node.TEXT_NODE && endContainer.nodeType === Node.TEXT_NODE) {\r\n        // 如果选中的开始和结束都是文本节点\r\n        const textNode = startContainer;\r\n\r\n        // 确保 startOffset 和 endOffset 不超过文本节点长度\r\n        const startOffset = range.startOffset;\r\n        const endOffset = range.endOffset;\r\n        const validStartOffset = Math.min(startOffset, textNode.length);\r\n        const validEndOffset = Math.min(endOffset, textNode.length);\r\n\r\n        const highlightedText = textNode.splitText(validStartOffset); // 切分文本节点\r\n\r\n        // 高亮选中部分\r\n        const span = document.createElement('span');\r\n        span.style.backgroundColor = highlightColor; // 设置高亮样式\r\n        highlightedText.splitText(validEndOffset - validStartOffset); // 再次切分文本，确保高亮范围\r\n\r\n        const highlightRange = document.createRange();\r\n        highlightRange.setStart(highlightedText, 0); // 从高亮部分的起始位置开始\r\n        highlightRange.setEnd(highlightedText, validEndOffset - validStartOffset); // 到结束位置\r\n\r\n        highlightRange.surroundContents(span); // 高亮显示\r\n      } else {\r\n        // 如果选中的内容包含多个文本节点或者是其他类型的节点\r\n        this.processMultiNodeSelection(range, highlightColor);\r\n      }\r\n\r\n      selection.removeAllRanges(); // 清除选区\r\n    }\r\n  },\r\n\r\n  // 处理多节点选区的高亮\r\n  processMultiNodeSelection(range, highlightColor) {\r\n    const startContainer = range.startContainer;\r\n    const endContainer = range.endContainer;\r\n    const rangeStart = range.startOffset;\r\n    const rangeEnd = range.endOffset;\r\n\r\n    const textNodes = [];\r\n    let node = startContainer;\r\n\r\n    // 收集选区中的所有文本节点\r\n    while (node) {\r\n      if (node.nodeType === Node.TEXT_NODE) {\r\n        textNodes.push(node);\r\n      }\r\n\r\n      if (node === endContainer) break;\r\n\r\n      node = this.getNextNode(node);\r\n    }\r\n\r\n    // 高亮每个文本节点\r\n    textNodes.forEach((textNode) => {\r\n      const span = document.createElement('span');\r\n      span.style.backgroundColor = highlightColor; // 设置高亮样式\r\n      const parent = textNode.parentNode;\r\n      parent.replaceChild(span, textNode);\r\n      span.appendChild(textNode);\r\n    });\r\n\r\n    // 如果选区跨越了多个元素（如多个段落），确保高亮完整的选区范围\r\n    const highlightSpan = document.createElement('span');\r\n    highlightSpan.style.backgroundColor = highlightColor;\r\n\r\n    const fullRange = document.createRange();\r\n    fullRange.setStart(startContainer, rangeStart);\r\n    fullRange.setEnd(endContainer, rangeEnd);\r\n    fullRange.surroundContents(highlightSpan); // 高亮整个选区\r\n  },\r\n\r\n  // 获取下一个节点\r\n  getNextNode(node) {\r\n    if (node.firstChild) return node.firstChild;\r\n    while (node) {\r\n      if (node.nextSibling) return node.nextSibling;\r\n      node = node.parentNode;\r\n    }\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default HighlightText;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}