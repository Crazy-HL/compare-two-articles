{"ast":null,"code":"import { ref, onMounted, onUnmounted, nextTick } from \"vue\";\nimport bus from \"@/js/eventBus.js\";\nimport HighlightText from \"@/js/highlight\"; // 导入高亮工具包\nimport * as d3 from \"d3\";\nimport { renderLineChart, renderBarChart, renderPieChart, renderNonVisualChart } from \"@/js/chartUtils\";\nexport default {\n  __name: 'BaseWikipedia',\n  props: {\n    pageTitle: String,\n    divId: String,\n    selectContentClass: String\n  },\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const props = __props;\n    const pageHtml = ref(\"\"); // 文章 HTML 内容\n    const loading = ref(true); // 加载状态\n    const error = ref(\"\"); // 错误信息\n    const selectedText = ref({}); // 存储每个 div 的选中内容\n    const showPopup = ref({}); // 存储每个 div 的弹窗显示状态\n    const divRef = ref(null); // `Div1` 或 `Div3` 的 DOM 参考\n    const currentView = ref(\"text\"); // 当前视图模式：text 或 visual\n    const visualizationLoading = ref(false); // 可视化图表加载状态\n\n    // **获取 Wikipedia 页面**\n    const fetchWikipediaContent = async () => {\n      try {\n        const apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(props.pageTitle)}`;\n        const response = await fetch(apiUrl);\n        if (!response.ok) throw new Error(\"Failed to fetch data\");\n        const html = await response.text();\n\n        // 解析 HTML\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(html, \"text/html\");\n\n        // 动态注入 Wikipedia 样式\n        const styles = Array.from(doc.querySelectorAll('link[rel=\"stylesheet\"]'));\n        styles.forEach(link => {\n          if (!document.querySelector(`link[href=\"${link.href}\"]`)) {\n            const styleTag = document.createElement(\"link\");\n            styleTag.rel = \"stylesheet\";\n            styleTag.href = link.href;\n            document.head.appendChild(styleTag);\n          }\n        });\n\n        // 仅获取正文部分\n        const contentElement = doc.querySelector(\"body\");\n        if (!contentElement) throw new Error(\"Content not found\");\n        pageHtml.value = contentElement.innerHTML;\n\n        // 手动引入 Wikipedia CSS\n        injectWikipediaStyles();\n      } catch (err) {\n        error.value = \"Error fetching Wikipedia content: \" + err.message;\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // **手动引入 Wikipedia CSS**\n    const injectWikipediaStyles = () => {\n      const wikipediaStyles = [\"https://en.wikipedia.org/w/load.php?modules=site.styles\", \"https://en.wikipedia.org/w/load.php?modules=ext.cite.styles\", \"https://en.wikipedia.org/w/load.php?modules=ext.scribunto.styles\", \"https://en.wikipedia.org/w/load.php?modules=skins.vector.styles\"];\n      wikipediaStyles.forEach(url => {\n        if (!document.querySelector(`link[href=\"${url}\"]`)) {\n          const styleTag = document.createElement(\"link\");\n          styleTag.rel = \"stylesheet\";\n          styleTag.href = url;\n          document.head.appendChild(styleTag);\n        }\n      });\n    };\n\n    // **高亮并放大选中文字**\n    const handleSelection = () => {\n      // 如果弹出框已经显示并且有内容，则不更新\n      if (showPopup.value[props.divId] && selectedText.value[props.divId]) {\n        console.log(\"弹出框中已有内容，不更新\");\n        return;\n      }\n      const selection = window.getSelection();\n      if (!selection.rangeCount) {\n        console.log(\"没有选中内容\");\n        return;\n      }\n      const range = selection.getRangeAt(0);\n      const selectedHtml = range.cloneContents();\n\n      // 创建临时容器\n      const tempDiv = document.createElement(\"div\");\n      tempDiv.appendChild(selectedHtml);\n\n      // 判断选中的内容是否包含表格等 HTML 元素\n      const table = tempDiv.querySelector(\"table\");\n      if (table) {\n        console.log(`${props.divId}选中了表格内容`);\n        table.classList.add(\"custom-table\");\n        selectedText.value[props.divId] = tempDiv.innerHTML; // 根据 divId 存储选中内容\n      } else {\n        const text = selection.toString().trim();\n        if (!text) {\n          console.log(\"选中的文字为空\");\n          return;\n        }\n        console.log(`${props.divId}选中的文字:`, text);\n        selectedText.value[props.divId] = text; // 根据 divId 存储选中内容\n      }\n      showPopup.value[props.divId] = true; // 根据 divId 显示弹窗\n      currentView.value = \"text\"; // 默认显示文本视图\n\n      // 触发高亮\n      bus.emit(`${props.divId}Event`, {\n        content: selection.toString()\n      });\n\n      // 确保弹窗位置更新\n      nextTick(() => {\n        updatePopupPosition();\n      });\n    };\n\n    // **关闭弹出框**\n    const closePopup = () => {\n      showPopup.value[props.divId] = false; // 根据 divId 关闭弹窗\n      selectedText.value[props.divId] = \"\"; // 根据 divId 清除选中内容\n\n      // 根据 divId 清空对应的容器\n      const container = props.divId === \"div1\" ? \".chart-container1\" : \".chart-container2\";\n      d3.select(container).html(\"\");\n    };\n\n    // **更新遮罩层和弹出框的位置**\n    const updatePopupPosition = () => {\n      if (showPopup.value[props.divId] && divRef.value) {\n        const popup = divRef.value.querySelector(\".text-popup\");\n        const overlay = divRef.value.querySelector(\".overlay\");\n        if (popup && overlay) {\n          const rect = divRef.value.getBoundingClientRect();\n          const scrollTop = divRef.value.scrollTop;\n          const scrollLeft = divRef.value.scrollLeft;\n\n          // 动态调整遮罩层和弹出框的位置\n          overlay.style.top = `${scrollTop}px`;\n          overlay.style.left = `${scrollLeft}px`;\n          overlay.style.width = `${divRef.value.clientWidth}px`;\n          overlay.style.height = `${divRef.value.clientHeight}px`;\n          popup.style.top = `${rect.height / 2 + scrollTop}px`;\n          popup.style.left = `${rect.width / 2 + scrollLeft}px`;\n        }\n      }\n    };\n\n    // **判断是否是表格内容**\n    const isTable = content => {\n      // 判断选中内容是否包含 <table> 标签\n      return /<table.*?>.*?<\\/table>/s.test(content);\n    };\n\n    // **切换视图**\n    const switchView = async view => {\n      currentView.value = view;\n      if (view === \"visual\") {\n        visualizationLoading.value = true;\n        await processText(); // 调用后端处理文本并渲染图表\n        visualizationLoading.value = false;\n      }\n    };\n\n    // 获取可视化 JSON 数据\n    async function processText() {\n      try {\n        api.post(\"process_text\", {\n          text: selectedText.value[props.divId].toString().trim()\n        },\n        // 使用对应 divId 的选中内容\n        data => {\n          if (data.error) {\n            console.error(\"后端返回的错误:\", data.error);\n            alert(`处理文章内容时出错: ${data.message}`);\n            return;\n          }\n          const jsonData = data.json_data;\n          console.log(\"后端返回的数据:\", jsonData);\n\n          // 根据 divId 选择容器\n          const container = props.divId === \"div1\" ? \".chart-container1\" : \".chart-container2\";\n          if (data.data_type === \"Non-Visual\") {\n            renderNonVisualChart(container, data, {\n              message: \"当前数据无法可视化\"\n            });\n          } else {\n            renderChart(jsonData);\n          }\n        });\n      } catch (error) {\n        console.error(\"处理文章内容时出错:\", error);\n        alert(\"处理文章内容时出错，请稍后重试\");\n      }\n    }\n\n    // 渲染图表\n    function renderChart(rawJsonData) {\n      if (!rawJsonData || typeof rawJsonData !== \"object\" || !rawJsonData.data) {\n        const container = props.divId === \"div1\" ? \".chart-container1\" : \".chart-container2\";\n        renderNonVisualChart(container, rawJsonData, {\n          message: \"JSON 数据无效\"\n        });\n        console.error(\"JSON 数据无效:\", rawJsonData);\n        return;\n      }\n\n      // 根据 divId 选择容器\n      const container = props.divId === \"div1\" ? \".chart-container1\" : \".chart-container2\";\n\n      // 清空之前的图表\n      d3.select(container).html(\"\");\n      const chartType = rawJsonData.type;\n      const data = rawJsonData.data;\n      const options = rawJsonData.options || {};\n\n      // 根据图表类型渲染\n      if (chartType === \"line\") {\n        renderLineChart(container, data, options);\n      } else if (chartType === \"bar\") {\n        renderBarChart(container, data, options);\n      } else if (chartType === \"pie\") {\n        renderPieChart(container, data, options);\n      } else {\n        console.error(\"未知的图表类型:\", chartType);\n      }\n    }\n\n    // **组件挂载后加载 Wikipedia 内容**\n    onMounted(() => {\n      fetchWikipediaContent();\n\n      // 绑定当前 div 的 mouseup 事件\n      const targetDiv = divRef.value;\n      if (targetDiv) {\n        targetDiv.addEventListener(\"mouseup\", handleSelection);\n      }\n\n      // 监听父容器滚动事件\n      if (divRef.value) {\n        divRef.value.addEventListener(\"scroll\", updatePopupPosition);\n      }\n    });\n\n    // **组件卸载时解绑事件**\n    onUnmounted(() => {\n      // 解绑当前 div 的 mouseup 事件\n      const targetDiv = divRef.value;\n      if (targetDiv) {\n        targetDiv.removeEventListener(\"mouseup\", handleSelection);\n      }\n\n      // 解绑父容器滚动事件\n      if (divRef.value) {\n        divRef.value.removeEventListener(\"scroll\", updatePopupPosition);\n      }\n    });\n    const __returned__ = {\n      props,\n      pageHtml,\n      loading,\n      error,\n      selectedText,\n      showPopup,\n      divRef,\n      currentView,\n      visualizationLoading,\n      fetchWikipediaContent,\n      injectWikipediaStyles,\n      handleSelection,\n      closePopup,\n      updatePopupPosition,\n      isTable,\n      switchView,\n      processText,\n      renderChart,\n      ref,\n      onMounted,\n      onUnmounted,\n      nextTick,\n      get bus() {\n        return bus;\n      },\n      get HighlightText() {\n        return HighlightText;\n      },\n      get d3() {\n        return d3;\n      },\n      get renderLineChart() {\n        return renderLineChart;\n      },\n      get renderBarChart() {\n        return renderBarChart;\n      },\n      get renderPieChart() {\n        return renderPieChart;\n      },\n      get renderNonVisualChart() {\n        return renderNonVisualChart;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","nextTick","bus","HighlightText","d3","renderLineChart","renderBarChart","renderPieChart","renderNonVisualChart","props","__props","pageHtml","loading","error","selectedText","showPopup","divRef","currentView","visualizationLoading","fetchWikipediaContent","apiUrl","encodeURIComponent","pageTitle","response","fetch","ok","Error","html","text","parser","DOMParser","doc","parseFromString","styles","Array","from","querySelectorAll","forEach","link","document","querySelector","href","styleTag","createElement","rel","head","appendChild","contentElement","value","innerHTML","injectWikipediaStyles","err","message","wikipediaStyles","url","handleSelection","divId","console","log","selection","window","getSelection","rangeCount","range","getRangeAt","selectedHtml","cloneContents","tempDiv","table","classList","add","toString","trim","emit","content","updatePopupPosition","closePopup","container","select","popup","overlay","rect","getBoundingClientRect","scrollTop","scrollLeft","style","top","left","width","clientWidth","height","clientHeight","isTable","test","switchView","view","processText","api","post","data","alert","jsonData","json_data","data_type","renderChart","rawJsonData","chartType","type","options","targetDiv","addEventListener","removeEventListener"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/BaseWikipedia.vue"],"sourcesContent":["<template>\r\n\t<div :class=\"['div0', selectContentClass]\" :id=\"divId\" ref=\"divRef\">\r\n\t\t<h1>{{ pageTitle }}</h1>\r\n\r\n\t\t<!-- 加载动画 -->\r\n\t\t<div v-if=\"loading\" class=\"loading-container\">\r\n\t\t\t<div class=\"loading-spinner\"></div>\r\n\t\t\t<div class=\"loading-text\">Loading...</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- 错误信息 -->\r\n\t\t<div v-else-if=\"error\" class=\"error-container\">\r\n\t\t\t<div class=\"error-icon\">⚠️</div>\r\n\t\t\t<div class=\"error-message\">{{ error }}</div>\r\n\t\t\t<button class=\"retry-button\" @click=\"fetchWikipediaContent\">重试</button>\r\n\t\t</div>\r\n\r\n\t\t<!-- 文章内容 -->\r\n\t\t<div\r\n\t\t\tv-else\r\n\t\t\tclass=\"showHtml wikipedia-content\"\r\n\t\t\tv-html=\"pageHtml\"\r\n\t\t\t@mouseup=\"handleSelection\"></div>\r\n\r\n\t\t<!-- 遮罩层 -->\r\n\t\t<div v-if=\"showPopup[divId]\" class=\"overlay\" @click=\"closePopup\"></div>\r\n\r\n\t\t<!-- 选中内容放大显示 -->\r\n\t\t<div v-if=\"showPopup[divId]\" class=\"text-popup\" @click=\"closePopup\">\r\n\t\t\t<!-- 切换视图按钮 -->\r\n\t\t\t<div class=\"view-switcher\">\r\n\t\t\t\t<button\r\n\t\t\t\t\t@click.stop=\"switchView('text')\"\r\n\t\t\t\t\t:class=\"{ active: currentView === 'text' }\"\r\n\t\t\t\t\ttitle=\"文本视图\">\r\n\t\t\t\t\t<i class=\"fas fa-align-left\"></i>\r\n\t\t\t\t\t<!-- 文本图标 -->\r\n\t\t\t\t</button>\r\n\t\t\t\t<button\r\n\t\t\t\t\t@click.stop=\"switchView('visual')\"\r\n\t\t\t\t\t:class=\"{ active: currentView === 'visual' }\"\r\n\t\t\t\t\ttitle=\"可视化视图\">\r\n\t\t\t\t\t<i class=\"fas fa-chart-bar\"></i>\r\n\t\t\t\t\t<!-- 图表图标 -->\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\r\n\t\t\t<!-- 文本视图 -->\r\n\t\t\t<div v-if=\"currentView === 'text'\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tv-if=\"isTable(selectedText[divId])\"\r\n\t\t\t\t\tclass=\"table-container\"\r\n\t\t\t\t\tv-html=\"selectedText[divId]\"></div>\r\n\t\t\t\t<div v-else>\r\n\t\t\t\t\t<p>{{ selectedText[divId] }}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<!-- 可视化视图 -->\r\n\t\t\t<div v-if=\"currentView === 'visual'\" class=\"visualization-container\">\r\n\t\t\t\t<div v-if=\"visualizationLoading\" class=\"loading-spinner\"></div>\r\n\t\t\t\t<div v-else-if=\"divId === 'div1'\" class=\"chart-container1\"></div>\r\n\t\t\t\t<div v-else class=\"chart-container2\"></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted, nextTick } from \"vue\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\timport HighlightText from \"@/js/highlight\"; // 导入高亮工具包\r\n\timport * as d3 from \"d3\";\r\n\timport {\r\n\t\trenderLineChart,\r\n\t\trenderBarChart,\r\n\t\trenderPieChart,\r\n\t\trenderNonVisualChart\r\n\t} from \"@/js/chartUtils\";\r\n\r\n\tconst props = defineProps({\r\n\t\tpageTitle: String,\r\n\t\tdivId: String,\r\n\t\tselectContentClass: String\r\n\t});\r\n\r\n\tconst pageHtml = ref(\"\"); // 文章 HTML 内容\r\n\tconst loading = ref(true); // 加载状态\r\n\tconst error = ref(\"\"); // 错误信息\r\n\tconst selectedText = ref({}); // 存储每个 div 的选中内容\r\n\tconst showPopup = ref({}); // 存储每个 div 的弹窗显示状态\r\n\tconst divRef = ref(null); // `Div1` 或 `Div3` 的 DOM 参考\r\n\tconst currentView = ref(\"text\"); // 当前视图模式：text 或 visual\r\n\tconst visualizationLoading = ref(false); // 可视化图表加载状态\r\n\r\n\t// **获取 Wikipedia 页面**\r\n\tconst fetchWikipediaContent = async () => {\r\n\t\ttry {\r\n\t\t\tconst apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(\r\n\t\t\t\tprops.pageTitle\r\n\t\t\t)}`;\r\n\t\t\tconst response = await fetch(apiUrl);\r\n\t\t\tif (!response.ok) throw new Error(\"Failed to fetch data\");\r\n\r\n\t\t\tconst html = await response.text();\r\n\r\n\t\t\t// 解析 HTML\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\r\n\t\t\t// 动态注入 Wikipedia 样式\r\n\t\t\tconst styles = Array.from(doc.querySelectorAll('link[rel=\"stylesheet\"]'));\r\n\t\t\tstyles.forEach(link => {\r\n\t\t\t\tif (!document.querySelector(`link[href=\"${link.href}\"]`)) {\r\n\t\t\t\t\tconst styleTag = document.createElement(\"link\");\r\n\t\t\t\t\tstyleTag.rel = \"stylesheet\";\r\n\t\t\t\t\tstyleTag.href = link.href;\r\n\t\t\t\t\tdocument.head.appendChild(styleTag);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// 仅获取正文部分\r\n\t\t\tconst contentElement = doc.querySelector(\"body\");\r\n\t\t\tif (!contentElement) throw new Error(\"Content not found\");\r\n\r\n\t\t\tpageHtml.value = contentElement.innerHTML;\r\n\r\n\t\t\t// 手动引入 Wikipedia CSS\r\n\t\t\tinjectWikipediaStyles();\r\n\t\t} catch (err) {\r\n\t\t\terror.value = \"Error fetching Wikipedia content: \" + err.message;\r\n\t\t} finally {\r\n\t\t\tloading.value = false;\r\n\t\t}\r\n\t};\r\n\r\n\t// **手动引入 Wikipedia CSS**\r\n\tconst injectWikipediaStyles = () => {\r\n\t\tconst wikipediaStyles = [\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=site.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=ext.cite.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=ext.scribunto.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=skins.vector.styles\"\r\n\t\t];\r\n\r\n\t\twikipediaStyles.forEach(url => {\r\n\t\t\tif (!document.querySelector(`link[href=\"${url}\"]`)) {\r\n\t\t\t\tconst styleTag = document.createElement(\"link\");\r\n\t\t\t\tstyleTag.rel = \"stylesheet\";\r\n\t\t\t\tstyleTag.href = url;\r\n\t\t\t\tdocument.head.appendChild(styleTag);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t// **高亮并放大选中文字**\r\n\tconst handleSelection = () => {\r\n\t\t// 如果弹出框已经显示并且有内容，则不更新\r\n\t\tif (showPopup.value[props.divId] && selectedText.value[props.divId]) {\r\n\t\t\tconsole.log(\"弹出框中已有内容，不更新\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst selection = window.getSelection();\r\n\t\tif (!selection.rangeCount) {\r\n\t\t\tconsole.log(\"没有选中内容\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst range = selection.getRangeAt(0);\r\n\t\tconst selectedHtml = range.cloneContents();\r\n\r\n\t\t// 创建临时容器\r\n\t\tconst tempDiv = document.createElement(\"div\");\r\n\t\ttempDiv.appendChild(selectedHtml);\r\n\r\n\t\t// 判断选中的内容是否包含表格等 HTML 元素\r\n\t\tconst table = tempDiv.querySelector(\"table\");\r\n\t\tif (table) {\r\n\t\t\tconsole.log(`${props.divId}选中了表格内容`);\r\n\t\t\ttable.classList.add(\"custom-table\");\r\n\t\t\tselectedText.value[props.divId] = tempDiv.innerHTML; // 根据 divId 存储选中内容\r\n\t\t} else {\r\n\t\t\tconst text = selection.toString().trim();\r\n\t\t\tif (!text) {\r\n\t\t\t\tconsole.log(\"选中的文字为空\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tconsole.log(`${props.divId}选中的文字:`, text);\r\n\t\t\tselectedText.value[props.divId] = text; // 根据 divId 存储选中内容\r\n\t\t}\r\n\r\n\t\tshowPopup.value[props.divId] = true; // 根据 divId 显示弹窗\r\n\t\tcurrentView.value = \"text\"; // 默认显示文本视图\r\n\r\n\t\t// 触发高亮\r\n\t\tbus.emit(`${props.divId}Event`, { content: selection.toString() });\r\n\r\n\t\t// 确保弹窗位置更新\r\n\t\tnextTick(() => {\r\n\t\t\tupdatePopupPosition();\r\n\t\t});\r\n\t};\r\n\r\n\t// **关闭弹出框**\r\n\tconst closePopup = () => {\r\n\t\tshowPopup.value[props.divId] = false; // 根据 divId 关闭弹窗\r\n\t\tselectedText.value[props.divId] = \"\"; // 根据 divId 清除选中内容\r\n\r\n\t\t// 根据 divId 清空对应的容器\r\n\t\tconst container =\r\n\t\t\tprops.divId === \"div1\" ? \".chart-container1\" : \".chart-container2\";\r\n\t\td3.select(container).html(\"\");\r\n\t};\r\n\r\n\t// **更新遮罩层和弹出框的位置**\r\n\tconst updatePopupPosition = () => {\r\n\t\tif (showPopup.value[props.divId] && divRef.value) {\r\n\t\t\tconst popup = divRef.value.querySelector(\".text-popup\");\r\n\t\t\tconst overlay = divRef.value.querySelector(\".overlay\");\r\n\t\t\tif (popup && overlay) {\r\n\t\t\t\tconst rect = divRef.value.getBoundingClientRect();\r\n\t\t\t\tconst scrollTop = divRef.value.scrollTop;\r\n\t\t\t\tconst scrollLeft = divRef.value.scrollLeft;\r\n\r\n\t\t\t\t// 动态调整遮罩层和弹出框的位置\r\n\t\t\t\toverlay.style.top = `${scrollTop}px`;\r\n\t\t\t\toverlay.style.left = `${scrollLeft}px`;\r\n\t\t\t\toverlay.style.width = `${divRef.value.clientWidth}px`;\r\n\t\t\t\toverlay.style.height = `${divRef.value.clientHeight}px`;\r\n\r\n\t\t\t\tpopup.style.top = `${rect.height / 2 + scrollTop}px`;\r\n\t\t\t\tpopup.style.left = `${rect.width / 2 + scrollLeft}px`;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// **判断是否是表格内容**\r\n\tconst isTable = content => {\r\n\t\t// 判断选中内容是否包含 <table> 标签\r\n\t\treturn /<table.*?>.*?<\\/table>/s.test(content);\r\n\t};\r\n\r\n\t// **切换视图**\r\n\tconst switchView = async view => {\r\n\t\tcurrentView.value = view;\r\n\t\tif (view === \"visual\") {\r\n\t\t\tvisualizationLoading.value = true;\r\n\t\t\tawait processText(); // 调用后端处理文本并渲染图表\r\n\t\t\tvisualizationLoading.value = false;\r\n\t\t}\r\n\t};\r\n\r\n\t// 获取可视化 JSON 数据\r\n\tasync function processText() {\r\n\t\ttry {\r\n\t\t\tapi.post(\r\n\t\t\t\t\"process_text\",\r\n\t\t\t\t{ text: selectedText.value[props.divId].toString().trim() }, // 使用对应 divId 的选中内容\r\n\t\t\t\tdata => {\r\n\t\t\t\t\tif (data.error) {\r\n\t\t\t\t\t\tconsole.error(\"后端返回的错误:\", data.error);\r\n\t\t\t\t\t\talert(`处理文章内容时出错: ${data.message}`);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst jsonData = data.json_data;\r\n\t\t\t\t\tconsole.log(\"后端返回的数据:\", jsonData);\r\n\r\n\t\t\t\t\t// 根据 divId 选择容器\r\n\t\t\t\t\tconst container =\r\n\t\t\t\t\t\tprops.divId === \"div1\" ? \".chart-container1\" : \".chart-container2\";\r\n\r\n\t\t\t\t\tif (data.data_type === \"Non-Visual\") {\r\n\t\t\t\t\t\trenderNonVisualChart(container, data, {\r\n\t\t\t\t\t\t\tmessage: \"当前数据无法可视化\"\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trenderChart(jsonData);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"处理文章内容时出错:\", error);\r\n\t\t\talert(\"处理文章内容时出错，请稍后重试\");\r\n\t\t}\r\n\t}\r\n\r\n\t// 渲染图表\r\n\tfunction renderChart(rawJsonData) {\r\n\t\tif (!rawJsonData || typeof rawJsonData !== \"object\" || !rawJsonData.data) {\r\n\t\t\tconst container =\r\n\t\t\t\tprops.divId === \"div1\" ? \".chart-container1\" : \".chart-container2\";\r\n\t\t\trenderNonVisualChart(container, rawJsonData, {\r\n\t\t\t\tmessage: \"JSON 数据无效\"\r\n\t\t\t});\r\n\t\t\tconsole.error(\"JSON 数据无效:\", rawJsonData);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 根据 divId 选择容器\r\n\t\tconst container =\r\n\t\t\tprops.divId === \"div1\" ? \".chart-container1\" : \".chart-container2\";\r\n\r\n\t\t// 清空之前的图表\r\n\t\td3.select(container).html(\"\");\r\n\r\n\t\tconst chartType = rawJsonData.type;\r\n\t\tconst data = rawJsonData.data;\r\n\t\tconst options = rawJsonData.options || {};\r\n\r\n\t\t// 根据图表类型渲染\r\n\t\tif (chartType === \"line\") {\r\n\t\t\trenderLineChart(container, data, options);\r\n\t\t} else if (chartType === \"bar\") {\r\n\t\t\trenderBarChart(container, data, options);\r\n\t\t} else if (chartType === \"pie\") {\r\n\t\t\trenderPieChart(container, data, options);\r\n\t\t} else {\r\n\t\t\tconsole.error(\"未知的图表类型:\", chartType);\r\n\t\t}\r\n\t}\r\n\r\n\t// **组件挂载后加载 Wikipedia 内容**\r\n\tonMounted(() => {\r\n\t\tfetchWikipediaContent();\r\n\r\n\t\t// 绑定当前 div 的 mouseup 事件\r\n\t\tconst targetDiv = divRef.value;\r\n\t\tif (targetDiv) {\r\n\t\t\ttargetDiv.addEventListener(\"mouseup\", handleSelection);\r\n\t\t}\r\n\r\n\t\t// 监听父容器滚动事件\r\n\t\tif (divRef.value) {\r\n\t\t\tdivRef.value.addEventListener(\"scroll\", updatePopupPosition);\r\n\t\t}\r\n\t});\r\n\r\n\t// **组件卸载时解绑事件**\r\n\tonUnmounted(() => {\r\n\t\t// 解绑当前 div 的 mouseup 事件\r\n\t\tconst targetDiv = divRef.value;\r\n\t\tif (targetDiv) {\r\n\t\t\ttargetDiv.removeEventListener(\"mouseup\", handleSelection);\r\n\t\t}\r\n\r\n\t\t// 解绑父容器滚动事件\r\n\t\tif (divRef.value) {\r\n\t\t\tdivRef.value.removeEventListener(\"scroll\", updatePopupPosition);\r\n\t\t}\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t/* 文章容器 */\r\n\t.div0 {\r\n\t\tposition: relative; /* 关键：父容器设置为 relative */\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto; /* 关键：允许滚动 */\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t#div1,\r\n\t#div3 {\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t.showHtml {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\toverflow: auto;\r\n\t}\r\n\t/* Wikipedia 内容 */\r\n\t.wikipedia-content {\r\n\t\tmax-width: 800px;\r\n\t\tmargin: 0 auto;\r\n\t\tpadding: 20px;\r\n\t\tfont-family: sans-serif;\r\n\t\tfont-size: 0.6vw;\r\n\t}\r\n\r\n\t/* 遮罩层（固定在 Div1 或 Div3 内部） */\r\n\t.overlay {\r\n\t\tposition: absolute; /* 关键：相对于父容器定位 */\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tbackground: rgba(0, 0, 0, 0.6);\r\n\t\tz-index: 90;\r\n\t\tanimation: fadeIn 0.3s ease-in-out;\r\n\t}\r\n\r\n\t/* 选中内容的弹出框（固定在 Div1 或 Div3 内部） */\r\n\t.text-popup {\r\n\t\tposition: absolute; /* 关键：相对于父容器定位 */\r\n\t\ttop: 50%;\r\n\t\tleft: 50%;\r\n\t\ttransform: translate(-50%, -50%);\r\n\t\twidth: 80%; /* 宽度占 Div1 或 Div3 的 80% */\r\n\t\tmax-width: 600px;\r\n\t\tmax-height: 80vh; /* 限制最大高度 */\r\n\t\toverflow: auto; /* 添加滚动条 */\r\n\t\tbackground: rgba(255, 255, 255, 0.98); /* 更亮的背景 */\r\n\t\tpadding: 25px; /* 增加内边距 */\r\n\t\tbox-shadow: 0px 10px 30px rgba(0, 0, 0, 0.4); /* 更明显的阴影 */\r\n\t\tborder-radius: 12px; /* 圆角更大 */\r\n\t\ttext-align: center;\r\n\t\tfont-size: 0.8vw; /* 固定字体大小 */\r\n\t\tfont-weight: 500; /* 中等字体粗细 */\r\n\t\tline-height: 1.6; /* 增加行高 */\r\n\t\tcolor: #333; /* 更深的字体颜色 */\r\n\t\tz-index: 100;\r\n\t\tcursor: pointer;\r\n\t\tbackdrop-filter: blur(20px); /* 更强烈的模糊效果 */\r\n\t\tanimation: fadeIn 0.3s ease-in-out;\r\n\t\tborder: 1px solid rgba(255, 255, 255, 0.2); /* 添加边框 */\r\n\t}\r\n\r\n\t/* 弹出框内的表格容器 */\r\n\t.table-container {\r\n\t\twidth: 100%;\r\n\t\toverflow: auto;\r\n\t\tfont-family: \"Arial\", sans-serif; /* 自定义字体 */\r\n\t}\r\n\r\n\t/* 自定义表格样式 */\r\n\t.table-container table {\r\n\t\twidth: 100%;\r\n\t\tborder-collapse: collapse;\r\n\t\tmargin: 0 auto;\r\n\t\tbackground-color: #fff;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t\tborder-radius: 8px;\r\n\t\toverflow: hidden;\r\n\t\tfont-size: 14px; /* 自定义字体大小 */\r\n\t}\r\n\r\n\t.table-container th,\r\n\t.table-container td {\r\n\t\tpadding: 12px 15px;\r\n\t\ttext-align: left;\r\n\t\tborder-bottom: 1px solid #e0e0e0;\r\n\t}\r\n\r\n\t.table-container th {\r\n\t\tbackground-color: #f8f9fa;\r\n\t\tfont-weight: 600;\r\n\t\tcolor: #333;\r\n\t}\r\n\r\n\t.table-container tr:last-child td {\r\n\t\tborder-bottom: none; /* 移除最后一行的下边框 */\r\n\t}\r\n\r\n\t.table-container tr:nth-child(even) {\r\n\t\tbackground-color: #f9f9f9; /* 偶数行背景色 */\r\n\t}\r\n\r\n\t.table-container tr:hover {\r\n\t\tbackground-color: #f1f1f1; /* 鼠标悬停效果 */\r\n\t}\r\n\r\n\t/* 弹出框内的段落 */\r\n\t.text-popup p {\r\n\t\tmargin: 0;\r\n\t\twidth: 1vw;\r\n\t\tpadding: 10px 15px;\r\n\t\tfont-size: 1.2rem;\r\n\t\tcolor: #333;\r\n\t\ttext-align: justify; /* 让文本两端对齐 */\r\n\t\tline-height: 1.8; /* 增加行高，提高可读性 */\r\n\t\tword-break: break-word; /* 长单词自动换行，防止溢出 */\r\n\t\twhite-space: pre-wrap; /* 保留原段落格式 */\r\n\t\tmax-width: 90%; /* 限制最大宽度，避免过长 */\r\n\t\tborder-left: 4px solid #3498db; /* 添加左侧蓝色边框，强调数据段落 */\r\n\t\tbackground: rgba(255, 255, 255, 0.9); /* 增加一点背景透明度 */\r\n\t\tbox-shadow: inset 2px 2px 8px rgba(0, 0, 0, 0.05); /* 添加内阴影，使文本框更有层次感 */\r\n\t}\r\n\r\n\t/* 加载动画容器 */\r\n\t.loading-container {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\theight: 200px;\r\n\t}\r\n\r\n\t/* 加载动画 */\r\n\t.loading-spinner {\r\n\t\twidth: 40px;\r\n\t\theight: 40px;\r\n\t\tborder: 4px solid #f3f3f3;\r\n\t\tborder-top: 4px solid #3498db;\r\n\t\tborder-radius: 50%;\r\n\t\tanimation: spin 1s linear infinite;\r\n\t}\r\n\r\n\t@keyframes spin {\r\n\t\t0% {\r\n\t\t\ttransform: rotate(0deg);\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform: rotate(360deg);\r\n\t\t}\r\n\t}\r\n\r\n\t/* 加载文字 */\r\n\t.loading-text {\r\n\t\tmargin-top: 10px;\r\n\t\tfont-size: 16px;\r\n\t\tcolor: #3498db;\r\n\t}\r\n\r\n\t/* 错误信息容器 */\r\n\t.error-container {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #fff3f3;\r\n\t\tborder: 1px solid #ffcccc;\r\n\t\tborder-radius: 8px;\r\n\t\tanimation: fadeIn 0.5s ease;\r\n\t}\r\n\r\n\t/* 错误图标 */\r\n\t.error-icon {\r\n\t\tfont-size: 48px;\r\n\t\tcolor: #ff6b6b;\r\n\t\tmargin-bottom: 10px;\r\n\t}\r\n\r\n\t/* 错误信息 */\r\n\t.error-message {\r\n\t\tfont-size: 16px;\r\n\t\tcolor: #ff6b6b;\r\n\t\ttext-align: center;\r\n\t\tmargin-bottom: 20px;\r\n\t}\r\n\r\n\t/* 重试按钮 */\r\n\t.retry-button {\r\n\t\tpadding: 10px 20px;\r\n\t\tbackground-color: #ff6b6b;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tborder-radius: 8px;\r\n\t\tcursor: pointer;\r\n\t\tfont-size: 14px;\r\n\t\ttransition: background-color 0.3s ease;\r\n\t}\r\n\r\n\t.retry-button:hover {\r\n\t\tbackground-color: #ff4c4c;\r\n\t}\r\n\r\n\t.retry-button:active {\r\n\t\tbackground-color: #ff3333;\r\n\t}\r\n\r\n\t/* 错误信息淡入动画 */\r\n\t@keyframes fadeIn {\r\n\t\t0% {\r\n\t\t\topacity: 0;\r\n\t\t\ttransform: translateY(-10px);\r\n\t\t}\r\n\t\t100% {\r\n\t\t\topacity: 1;\r\n\t\t\ttransform: translateY(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/* 选中文本的高亮样式 */\r\n\t::selection {\r\n\t\tbackground-color: yellow;\r\n\t\tcolor: black;\r\n\t}\r\n\r\n\t/* 使用 ::v-deep 穿透 scoped 样式 */\r\n\t::v-deep .custom-table {\r\n\t\twidth: 100%;\r\n\t\tborder-collapse: collapse;\r\n\t\tmargin: 5px auto;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder: 1px solid #0077b6; /* 外边框颜色 */\r\n\t\tborder-radius: 8px;\r\n\t\toverflow: hidden;\r\n\t\tfont-family: \"Arial\", sans-serif;\r\n\t\tfont-size: 16px; /* 设置整体字体大小 */\r\n\t\tcolor: #333333; /* 设置默认文字颜色 */\r\n\t}\r\n\r\n\t/* 表头样式 */\r\n\t::v-deep .custom-table th {\r\n\t\tbackground-color: #0077b6; /* 深蓝色表头 */\r\n\t\tfont-weight: bold;\r\n\t\tcolor: #ffffff; /* 文字白色 */\r\n\t\ttext-align: left;\r\n\t\tpadding: 12px;\r\n\t\tborder: 1px solid #0077b6; /* 表头单元格边框 */\r\n\t\tfont-size: 18px; /* 表头字体稍大，增强层次感 */\r\n\t}\r\n\r\n\t/* 单元格样式 */\r\n\t::v-deep .custom-table th,\r\n\t::v-deep .custom-table td {\r\n\t\tpadding: 12px;\r\n\t\tborder: 1px solid #0077b6; /* 统一的单元格边框 */\r\n\t\tfont-size: 16px; /* 调整字体大小 */\r\n\t}\r\n\r\n\t/* 悬停行高亮 */\r\n\t::v-deep .custom-table tr:hover {\r\n\t\tbackground-color: #cbe8f6; /* 浅蓝色 */\r\n\t\ttransition: background-color 0.3s ease-in-out;\r\n\t}\r\n\t/* 新增样式：视图切换按钮 */\r\n\t.view-switcher {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\tmargin-bottom: 20px;\r\n\t}\r\n\r\n\t.view-switcher button {\r\n\t\tpadding: 8px 16px;\r\n\t\tmargin: 0 5px;\r\n\t\tborder: none;\r\n\t\tborder-radius: 4px;\r\n\t\tbackground-color: #f0f0f0;\r\n\t\tcursor: pointer;\r\n\t\ttransition: background-color 0.3s ease;\r\n\t}\r\n\r\n\t.view-switcher button.active {\r\n\t\tbackground-color: #0077b6;\r\n\t\tcolor: white;\r\n\t}\r\n\r\n\t.view-switcher button:hover {\r\n\t\tbackground-color: #ddd;\r\n\t}\r\n\r\n\t/* 可视化容器 */\r\n\t.visualization-container {\r\n\t\twidth: 100%;\r\n\t\theight: 300px;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}