{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-4d83b437\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  ref: \"chartEl\",\n  class: \"line-chart\"\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","_createElementBlock","_hoisted_1"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\charts\\LineChart.vue"],"sourcesContent":["<template>\r\n\t<div ref=\"chartEl\" class=\"line-chart\"></div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, watch, onBeforeUnmount } from \"vue\";\r\n\timport * as echarts from \"echarts\";\r\n\r\n\tconst props = defineProps({\r\n\t  data: {\r\n\t    type: [Array, Object],\r\n\t    default: () => []\r\n\t  },\r\n\t  isCombined: {\r\n\t    type: Boolean,\r\n\t    default: false\r\n\t  },\r\n\t  showTrend: {\r\n\t    type: Boolean,\r\n\t    default: false\r\n\t  }\r\n\t});\r\n\r\n\tconst chartEl = ref(null);\r\n\tlet chartInstance = null;\r\n\r\n\t// 颜色配置\r\n\tconst colorPalette = {\r\n\t  left: \"#4e79a7\",  // 左侧数据源颜色\r\n\t  right: \"#e15759\"  // 右侧数据源颜色\r\n\t};\r\n\r\n\t// 初始化图表\r\n\tconst initChart = () => {\r\n\t  if (!chartEl.value) return;\r\n\r\n\t  // 销毁旧实例\r\n\t  if (chartInstance) {\r\n\t    chartInstance.dispose();\r\n\t  }\r\n\r\n\t  // 创建新实例\r\n\t  chartInstance = echarts.init(chartEl.value);\r\n\r\n\t  // 基础配置\r\n\t  const baseOption = {\r\n\t    tooltip: {\r\n\t      trigger: \"axis\",\r\n\t      formatter: params => {\r\n\t        return params\r\n\t          .filter(param => param.value != null)\r\n\t          .map(param => {\r\n\t            return `${param.seriesName}<br/>${param.axisValue}: ${param.value}%`;\r\n\t          })\r\n\t          .join(\"<br/>\");\r\n\t      }\r\n\t    },\r\n\t    legend: {\r\n\t      show: props.isCombined,\r\n\t      data: props.isCombined ? getSeriesNames() : []\r\n\t    },\r\n\t    grid: {\r\n\t      top: props.isCombined ? \"20%\" : \"15%\",\r\n\t      left: \"3%\",\r\n\t      right: \"4%\",\r\n\t      bottom: \"3%\",\r\n\t      containLabel: true\r\n\t    },\r\n\t    xAxis: {\r\n\t      type: \"category\",\r\n\t      axisLabel: {\r\n\t        formatter: value => value  // 直接显示完整年份\r\n\t      }\r\n\t    },\r\n\t    yAxis: {\r\n\t      type: \"value\",\r\n\t      axisLabel: {\r\n\t        formatter: \"{value}%\"\r\n\t      },\r\n\t      min: value => Math.max(0, Math.floor(value.min) - 1  // 动态计算Y轴最小值\r\n\t    }\r\n\t  };\r\n\r\n\t  // 合并图表配置\r\n\t  if (props.isCombined) {\r\n\t    const { categories, series } = processCombinedData();\r\n\r\n\t    const option = {\r\n\t      ...baseOption,\r\n\t      xAxis: {\r\n\t        ...baseOption.xAxis,\r\n\t        data: categories\r\n\t      },\r\n\t      series: series.map((s, index) => ({\r\n\t        name: s.name,\r\n\t        data: s.data,\r\n\t        type: \"line\",\r\n\t        symbol: \"circle\",\r\n\t        symbolSize: 8,\r\n\t        lineStyle: {\r\n\t          width: 3,\r\n\t          color: s.color\r\n\t        },\r\n\t        itemStyle: {\r\n\t          color: s.color\r\n\t        },\r\n\t        label: {\r\n\t          show: true,\r\n\t          position: \"top\",\r\n\t          formatter: params => {\r\n\t            return params.value !== null ? `${params.value}%` : \"\";\r\n\t          }\r\n\t        },\r\n\t        emphasis: {\r\n\t          focus: \"series\",\r\n\t          itemStyle: {\r\n\t            borderWidth: 2,\r\n\t            borderColor: \"#fff\"\r\n\t          }\r\n\t        }\r\n\t      }))\r\n\t    };\r\n\r\n\t    chartInstance.setOption(option);\r\n\t  }\r\n\t  // 普通折线图配置\r\n\t  else {\r\n\t    const option = {\r\n\t      ...baseOption,\r\n\t      xAxis: {\r\n\t        ...baseOption.xAxis,\r\n\t        data: props.data.map(item => item.year)\r\n\t      },\r\n\t      series: [\r\n\t        {\r\n\t          name: \"数据\",\r\n\t          data: props.data.map(item => item.value),\r\n\t          type: \"line\",\r\n\t          symbol: \"circle\",\r\n\t          symbolSize: 8,\r\n\t          lineStyle: {\r\n\t            width: 3,\r\n\t            color: colorPalette.left\r\n\t          },\r\n\t          label: {\r\n\t            show: true,\r\n\t            formatter: params => `${params.value}%`\r\n\t          }\r\n\t        }\r\n\t      ]\r\n\t    };\r\n\t    chartInstance.setOption(option);\r\n\t  }\r\n\r\n\t  // 响应式调整\r\n\t  window.addEventListener(\"resize\", handleResize);\r\n\t};\r\n\r\n\t// 处理合并数据\r\n\tconst processCombinedData = () => {\r\n\t  if (!props.isCombined || !props.data.series) {\r\n\t    return { categories: [], series: [] };\r\n\t  }\r\n\r\n\t  // 获取所有唯一且排序后的年份\r\n\t  const allYears = [...new Set(\r\n\t    props.data.series.flatMap(series =>\r\n\t      series.data.map((value, index) =>\r\n\t        value !== null ? props.data.categories[index] : null\r\n\t      )\r\n\t    )\r\n\t  )].filter(Boolean).sort((a, b) => a - b);\r\n\r\n\t  // 重组系列数据\r\n\t  const series = props.data.series.map((s, index) => ({\r\n\t    ...s,\r\n\t    color: index === 0 ? colorPalette.left : colorPalette.right\r\n\t  }));\r\n\r\n\t  return {\r\n\t    categories: allYears,\r\n\t    series\r\n\t  };\r\n\t};\r\n\r\n\t// 获取系列名称\r\n\tconst getSeriesNames = () => {\r\n\t  return props.isCombined && props.data.series\r\n\t    ? props.data.series.map(s => s.name)\r\n\t    : [];\r\n\t};\r\n\r\n\t// 处理窗口大小变化\r\n\tconst handleResize = () => {\r\n\t  chartInstance?.resize();\r\n\t};\r\n\r\n\t// 生命周期\r\n\tonMounted(() => {\r\n\t  initChart();\r\n\t});\r\n\r\n\tonBeforeUnmount(() => {\r\n\t  if (chartInstance) {\r\n\t    chartInstance.dispose();\r\n\t    window.removeEventListener(\"resize\", handleResize);\r\n\t  }\r\n\t});\r\n\r\n\t// 监听数据变化\r\n\twatch(\r\n\t  () => [props.data, props.isCombined],\r\n\t  () => {\r\n\t    initChart();\r\n\t  },\r\n\t  { deep: true }\r\n\t);\r\n</script>\r\n\r\n<style scoped>\r\n\t.line-chart {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tmin-height: 400px;\r\n\t\tbackground-color: #fff;\r\n\t\tborder-radius: 4px;\r\n\t\tbox-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,GAAG,EAAC,SAAS;EAACC,KAAK,EAAC;;;uBAAzBC,mBAAA,CAA4C,OAA5CC,UAA4C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}