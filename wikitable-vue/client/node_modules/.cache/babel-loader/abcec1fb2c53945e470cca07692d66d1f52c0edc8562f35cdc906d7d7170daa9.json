{"ast":null,"code":"import { computed } from \"vue\";\nimport PieChart from \"./charts/PieChart.vue\"; // 假设路径正确\nimport BarChart from \"./charts/BarChart.vue\"; // 假设路径正确\nimport LineChart from \"./charts/LineChart.vue\"; // 假设路径正确\n\nexport default {\n  __name: 'FullChart',\n  props: {\n    field: [Object, Array, String, Number],\n    // Data from getField\n    type: String,\n    // e.g., \"percentage\", \"number\", \"text\"\n    visualization: String,\n    // e.g., \"line-chart\", \"bar-chart\", \"text-only\"\n    fieldKey: String // e.g., \"GDP growth\"\n  },\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const props = __props;\n\n    // Helper function to extract year from raw string\n    const extractYearFromRaw = rawString => {\n      if (typeof rawString !== \"string\") return null;\n      const matchInParentheses = rawString.match(/\\((\\d{4})\\)/); // e.g., \"(2023)\"\n      if (matchInParentheses && matchInParentheses[1]) {\n        return parseInt(matchInParentheses[1], 10);\n      }\n      // Fallback: Look for standalone 4-digit years (be cautious with this)\n      const standaloneYearMatch = rawString.match(/\\b(19[89]\\d|20\\d{2})\\b/g);\n      if (standaloneYearMatch && standaloneYearMatch.length > 0) {\n        return parseInt(standaloneYearMatch[standaloneYearMatch.length - 1], 10); // Take the last one\n      }\n      return null;\n    };\n\n    // Normalize individual data items\n    const normalizeItem = item => {\n      if (typeof item === \"object\" && item !== null) {\n        // Item is already an object, likely from the new getField\n        const value = item.value ?? null;\n        const raw = item.raw ?? (value !== null ? String(value) : \"\");\n        let year = item.year ?? null; // Prefer explicit year if present\n        if (year === null && typeof raw === \"string\" && raw) {\n          year = extractYearFromRaw(raw);\n        }\n        const unit = item.unit ?? (props.type === \"percentage\" && value !== null ? \"%\" : null);\n        return {\n          value: value,\n          raw: raw,\n          unit: unit,\n          year: year,\n          currency: item.currency ?? null,\n          extracted: item.extracted ?? false,\n          originalItem: item // Keep the original for more complex scenarios if needed\n        };\n      }\n      // Item is a primitive (less likely if getField is used correctly)\n      const rawString = String(item);\n      const numValue = parseFloat(rawString); // Try to parse a number\n      return {\n        value: !isNaN(numValue) ? numValue : null,\n        raw: rawString,\n        unit: props.type === \"percentage\" ? \"%\" : null,\n        year: extractYearFromRaw(rawString),\n        currency: null,\n        extracted: false,\n        originalItem: {\n          raw: rawString,\n          value: !isNaN(numValue) ? numValue : null\n        }\n      };\n    };\n\n    // Processed and standardized data\n    const normalizedData = computed(() => {\n      if (!props.field) return [];\n      if (Array.isArray(props.field)) {\n        return props.field.map(item => normalizeItem(item));\n      }\n      return [normalizeItem(props.field)]; // Single item wrapped in an array\n    });\n\n    // Format value for display (for text-only or fallback)\n    const formatDisplayValue = normalizedItem => {\n      if (!normalizedItem) return \"-\";\n\n      // Priority 1: Use raw if it's meaningful and likely complete\n      if (normalizedItem.raw && String(normalizedItem.raw).trim() !== \"\") {\n        // If raw already contains year and unit, it might be best as is.\n        // This logic might need refinement based on how `raw` is structured.\n        // For now, let's assume `raw` is a good representation.\n        return String(normalizedItem.raw);\n      }\n\n      // Priority 2: Construct from value, unit, year\n      if (normalizedItem.value !== null && typeof normalizedItem.value !== \"undefined\") {\n        let num = Number(normalizedItem.value);\n        if (isNaN(num)) return String(normalizedItem.value); // If value is non-numeric text\n\n        let textValue = \"\";\n        if (props.type === \"percentage\") {\n          textValue = `${num > 0 ? \"+\" : \"\"}${num.toFixed(1)}`;\n          if (normalizedItem.unit && normalizedItem.unit !== \"%\") {\n            textValue += ` ${normalizedItem.unit}`;\n          } else if (!normalizedItem.unit) {\n            textValue += \"%\";\n          }\n        } else {\n          if (Math.abs(num) >= 100000000) textValue = (num / 100000000).toFixed(2) + \"亿\";else if (Math.abs(num) >= 10000) textValue = (num / 10000).toFixed(1) + \"万\";else textValue = num.toLocaleString(undefined, {\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 2\n          });\n          if (normalizedItem.unit) textValue += ` ${normalizedItem.unit}`;\n        }\n        if (normalizedItem.year) textValue += ` (${normalizedItem.year})`;\n        return textValue.trim();\n      }\n      return String(normalizedItem.value ?? normalizedItem.raw ?? \"-\");\n    };\n\n    // Data specifically for text display, applying formatDisplayValue\n    const formattedDataForTextDisplay = computed(() => {\n      return normalizedData.value.map(item => ({\n        ...item,\n        displayValue: formatDisplayValue(item)\n      }));\n    });\n\n    // Pie chart data\n    const pieChartData = computed(() => {\n      return normalizedData.value.filter(item => item.value !== null).map((item, index) => ({\n        name: item.raw || `数据点 ${index + 1}`,\n        // Label for pie slice\n        value: Math.min(100, Math.max(0, Number(item.value))),\n        // Assuming percentage for pie, or adjust as needed\n        raw: item.raw,\n        unit: item.unit\n      }));\n    });\n\n    // Bar chart data\n    const barChartData = computed(() => {\n      return normalizedData.value.map((item, index) => ({\n        // X-axis label for BarChart: Use year if available, otherwise raw or index\n        name: item.year ? String(item.year) : item.raw || `系列 ${index + 1}`,\n        value: item.value !== null ? Number(item.value) : 0,\n        raw: item.raw,\n        unit: item.unit,\n        year: item.year // Pass year for potential grouping or detailed tooltips in BarChart\n      }));\n    });\n\n    // Line chart data (crucial for time series)\n    const lineChartData = computed(() => {\n      return normalizedData.value\n      // Ensure items have a value and a year for a meaningful line chart\n      .filter(item => item.value !== null && item.year !== null).map(item => ({\n        year: item.year,\n        // This will be the X-axis\n        value: Number(item.value),\n        // This will be the Y-axis\n        raw: item.raw,\n        // For tooltips\n        unit: item.unit // For tooltips or Y-axis formatting\n      })).sort((a, b) => a.year - b.year); // Essential: sort by year\n    });\n    const hasData = computed(() => {\n      if (props.visualization === \"line-chart\") {\n        return lineChartData.value.length > 0;\n      }\n      return normalizedData.value.length > 0 && normalizedData.value.some(item => item.value !== null || item.raw && String(item.raw).trim() !== \"\");\n    });\n    const __returned__ = {\n      props,\n      extractYearFromRaw,\n      normalizeItem,\n      normalizedData,\n      formatDisplayValue,\n      formattedDataForTextDisplay,\n      pieChartData,\n      barChartData,\n      lineChartData,\n      hasData,\n      computed,\n      PieChart,\n      BarChart,\n      LineChart\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","PieChart","BarChart","LineChart","props","__props","extractYearFromRaw","rawString","matchInParentheses","match","parseInt","standaloneYearMatch","length","normalizeItem","item","value","raw","String","year","unit","type","currency","extracted","originalItem","numValue","parseFloat","isNaN","normalizedData","field","Array","isArray","map","formatDisplayValue","normalizedItem","trim","num","Number","textValue","toFixed","Math","abs","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","formattedDataForTextDisplay","displayValue","pieChartData","filter","index","name","min","max","barChartData","lineChartData","sort","a","b","hasData","visualization","some"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/FullChart.vue"],"sourcesContent":["<template>\r\n\t<div class=\"full-chart-component-root\">\r\n\t\t<!-- 文本显示 -->\r\n\t\t<template v-if=\"visualization === 'text-only'\">\r\n\t\t\t<div class=\"full-text\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tv-for=\"(item, index) in formattedDataForTextDisplay\"\r\n\t\t\t\t\t:key=\"index\"\r\n\t\t\t\t\tclass=\"text-item\">\r\n\t\t\t\t\t{{ item.displayValue }}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</template>\r\n\r\n\t\t<!-- 完整饼图 -->\r\n\t\t<template v-else-if=\"visualization === 'pie-chart'\">\r\n\t\t\t<div v-if=\"hasData\" class=\"chart-container\">\r\n\t\t\t\t<PieChart :data=\"pieChartData\" />\r\n\t\t\t</div>\r\n\t\t\t<div v-else class=\"no-data\">无可用数据</div>\r\n\t\t</template>\r\n\r\n\t\t<!-- 完整柱状图 -->\r\n\t\t<template v-else-if=\"visualization === 'bar-chart'\">\r\n\t\t\t<div v-if=\"hasData\" class=\"chart-container\">\r\n\t\t\t\t<BarChart\r\n\t\t\t\t\t:data=\"barChartData\"\r\n\t\t\t\t\t:field-key=\"props.fieldKey\"\r\n\t\t\t\t\t:show-value=\"true\" />\r\n\t\t\t</div>\r\n\t\t\t<div v-else class=\"no-data\">无可用数据</div>\r\n\t\t</template>\r\n\r\n\t\t<!-- 完整折线图 -->\r\n\t\t<template v-else-if=\"visualization === 'line-chart'\">\r\n\t\t\t<div v-if=\"hasData\" class=\"chart-container\">\r\n\t\t\t\t<!-- Ensure LineChart component can handle this data structure -->\r\n\t\t\t\t<LineChart :data=\"lineChartData\" :show-trend=\"true\" />\r\n\t\t\t</div>\r\n\t\t\t<div v-else class=\"no-data\">无可用数据</div>\r\n\t\t</template>\r\n\r\n\t\t<!-- 默认显示 (通常是文本) -->\r\n\t\t<template v-else>\r\n\t\t\t<div class=\"full-text\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tv-for=\"(item, index) in formattedDataForTextDisplay\"\r\n\t\t\t\t\t:key=\"index\"\r\n\t\t\t\t\tclass=\"text-item\">\r\n\t\t\t\t\t{{ item.displayValue }}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</template>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { computed } from \"vue\";\r\n\timport PieChart from \"./charts/PieChart.vue\"; // 假设路径正确\r\n\timport BarChart from \"./charts/BarChart.vue\"; // 假设路径正确\r\n\timport LineChart from \"./charts/LineChart.vue\"; // 假设路径正确\r\n\r\n\tconst props = defineProps({\r\n\t\tfield: [Object, Array, String, Number], // Data from getField\r\n\t\ttype: String, // e.g., \"percentage\", \"number\", \"text\"\r\n\t\tvisualization: String, // e.g., \"line-chart\", \"bar-chart\", \"text-only\"\r\n\t\tfieldKey: String // e.g., \"GDP growth\"\r\n\t});\r\n\r\n\t// Helper function to extract year from raw string\r\n\tconst extractYearFromRaw = rawString => {\r\n\t\tif (typeof rawString !== \"string\") return null;\r\n\t\tconst matchInParentheses = rawString.match(/\\((\\d{4})\\)/); // e.g., \"(2023)\"\r\n\t\tif (matchInParentheses && matchInParentheses[1]) {\r\n\t\t\treturn parseInt(matchInParentheses[1], 10);\r\n\t\t}\r\n\t\t// Fallback: Look for standalone 4-digit years (be cautious with this)\r\n\t\tconst standaloneYearMatch = rawString.match(/\\b(19[89]\\d|20\\d{2})\\b/g);\r\n\t\tif (standaloneYearMatch && standaloneYearMatch.length > 0) {\r\n\t\t\treturn parseInt(standaloneYearMatch[standaloneYearMatch.length - 1], 10); // Take the last one\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\t// Normalize individual data items\r\n\tconst normalizeItem = item => {\r\n\t\tif (typeof item === \"object\" && item !== null) {\r\n\t\t\t// Item is already an object, likely from the new getField\r\n\t\t\tconst value = item.value ?? null;\r\n\t\t\tconst raw = item.raw ?? (value !== null ? String(value) : \"\");\r\n\t\t\tlet year = item.year ?? null; // Prefer explicit year if present\r\n\t\t\tif (year === null && typeof raw === \"string\" && raw) {\r\n\t\t\t\tyear = extractYearFromRaw(raw);\r\n\t\t\t}\r\n\t\t\tconst unit =\r\n\t\t\t\titem.unit ??\r\n\t\t\t\t(props.type === \"percentage\" && value !== null ? \"%\" : null);\r\n\r\n\t\t\treturn {\r\n\t\t\t\tvalue: value,\r\n\t\t\t\traw: raw,\r\n\t\t\t\tunit: unit,\r\n\t\t\t\tyear: year,\r\n\t\t\t\tcurrency: item.currency ?? null,\r\n\t\t\t\textracted: item.extracted ?? false,\r\n\t\t\t\toriginalItem: item // Keep the original for more complex scenarios if needed\r\n\t\t\t};\r\n\t\t}\r\n\t\t// Item is a primitive (less likely if getField is used correctly)\r\n\t\tconst rawString = String(item);\r\n\t\tconst numValue = parseFloat(rawString); // Try to parse a number\r\n\t\treturn {\r\n\t\t\tvalue: !isNaN(numValue) ? numValue : null,\r\n\t\t\traw: rawString,\r\n\t\t\tunit: props.type === \"percentage\" ? \"%\" : null,\r\n\t\t\tyear: extractYearFromRaw(rawString),\r\n\t\t\tcurrency: null,\r\n\t\t\textracted: false,\r\n\t\t\toriginalItem: {\r\n\t\t\t\traw: rawString,\r\n\t\t\t\tvalue: !isNaN(numValue) ? numValue : null\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t// Processed and standardized data\r\n\tconst normalizedData = computed(() => {\r\n\t\tif (!props.field) return [];\r\n\t\tif (Array.isArray(props.field)) {\r\n\t\t\treturn props.field.map(item => normalizeItem(item));\r\n\t\t}\r\n\t\treturn [normalizeItem(props.field)]; // Single item wrapped in an array\r\n\t});\r\n\r\n\t// Format value for display (for text-only or fallback)\r\n\tconst formatDisplayValue = normalizedItem => {\r\n\t\tif (!normalizedItem) return \"-\";\r\n\r\n\t\t// Priority 1: Use raw if it's meaningful and likely complete\r\n\t\tif (normalizedItem.raw && String(normalizedItem.raw).trim() !== \"\") {\r\n\t\t\t// If raw already contains year and unit, it might be best as is.\r\n\t\t\t// This logic might need refinement based on how `raw` is structured.\r\n\t\t\t// For now, let's assume `raw` is a good representation.\r\n\t\t\treturn String(normalizedItem.raw);\r\n\t\t}\r\n\r\n\t\t// Priority 2: Construct from value, unit, year\r\n\t\tif (\r\n\t\t\tnormalizedItem.value !== null &&\r\n\t\t\ttypeof normalizedItem.value !== \"undefined\"\r\n\t\t) {\r\n\t\t\tlet num = Number(normalizedItem.value);\r\n\t\t\tif (isNaN(num)) return String(normalizedItem.value); // If value is non-numeric text\r\n\r\n\t\t\tlet textValue = \"\";\r\n\t\t\tif (props.type === \"percentage\") {\r\n\t\t\t\ttextValue = `${num > 0 ? \"+\" : \"\"}${num.toFixed(1)}`;\r\n\t\t\t\tif (normalizedItem.unit && normalizedItem.unit !== \"%\") {\r\n\t\t\t\t\ttextValue += ` ${normalizedItem.unit}`;\r\n\t\t\t\t} else if (!normalizedItem.unit) {\r\n\t\t\t\t\ttextValue += \"%\";\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (Math.abs(num) >= 100000000)\r\n\t\t\t\t\ttextValue = (num / 100000000).toFixed(2) + \"亿\";\r\n\t\t\t\telse if (Math.abs(num) >= 10000)\r\n\t\t\t\t\ttextValue = (num / 10000).toFixed(1) + \"万\";\r\n\t\t\t\telse\r\n\t\t\t\t\ttextValue = num.toLocaleString(undefined, {\r\n\t\t\t\t\t\tminimumFractionDigits: 0,\r\n\t\t\t\t\t\tmaximumFractionDigits: 2\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\tif (normalizedItem.unit) textValue += ` ${normalizedItem.unit}`;\r\n\t\t\t}\r\n\t\t\tif (normalizedItem.year) textValue += ` (${normalizedItem.year})`;\r\n\t\t\treturn textValue.trim();\r\n\t\t}\r\n\t\treturn String(normalizedItem.value ?? normalizedItem.raw ?? \"-\");\r\n\t};\r\n\r\n\t// Data specifically for text display, applying formatDisplayValue\r\n\tconst formattedDataForTextDisplay = computed(() => {\r\n\t\treturn normalizedData.value.map(item => ({\r\n\t\t\t...item,\r\n\t\t\tdisplayValue: formatDisplayValue(item)\r\n\t\t}));\r\n\t});\r\n\r\n\t// Pie chart data\r\n\tconst pieChartData = computed(() => {\r\n\t\treturn normalizedData.value\r\n\t\t\t.filter(item => item.value !== null)\r\n\t\t\t.map((item, index) => ({\r\n\t\t\t\tname: item.raw || `数据点 ${index + 1}`, // Label for pie slice\r\n\t\t\t\tvalue: Math.min(100, Math.max(0, Number(item.value))), // Assuming percentage for pie, or adjust as needed\r\n\t\t\t\traw: item.raw,\r\n\t\t\t\tunit: item.unit\r\n\t\t\t}));\r\n\t});\r\n\r\n\t// Bar chart data\r\n\tconst barChartData = computed(() => {\r\n\t\treturn normalizedData.value.map((item, index) => ({\r\n\t\t\t// X-axis label for BarChart: Use year if available, otherwise raw or index\r\n\t\t\tname: item.year ? String(item.year) : item.raw || `系列 ${index + 1}`,\r\n\t\t\tvalue: item.value !== null ? Number(item.value) : 0,\r\n\t\t\traw: item.raw,\r\n\t\t\tunit: item.unit,\r\n\t\t\tyear: item.year // Pass year for potential grouping or detailed tooltips in BarChart\r\n\t\t}));\r\n\t});\r\n\r\n\t// Line chart data (crucial for time series)\r\n\tconst lineChartData = computed(() => {\r\n\t\treturn (\r\n\t\t\tnormalizedData.value\r\n\t\t\t\t// Ensure items have a value and a year for a meaningful line chart\r\n\t\t\t\t.filter(item => item.value !== null && item.year !== null)\r\n\t\t\t\t.map(item => ({\r\n\t\t\t\t\tyear: item.year, // This will be the X-axis\r\n\t\t\t\t\tvalue: Number(item.value), // This will be the Y-axis\r\n\t\t\t\t\traw: item.raw, // For tooltips\r\n\t\t\t\t\tunit: item.unit // For tooltips or Y-axis formatting\r\n\t\t\t\t}))\r\n\t\t\t\t.sort((a, b) => a.year - b.year)\r\n\t\t); // Essential: sort by year\r\n\t});\r\n\r\n\tconst hasData = computed(() => {\r\n\t\tif (props.visualization === \"line-chart\") {\r\n\t\t\treturn lineChartData.value.length > 0;\r\n\t\t}\r\n\t\treturn (\r\n\t\t\tnormalizedData.value.length > 0 &&\r\n\t\t\tnormalizedData.value.some(\r\n\t\t\t\titem =>\r\n\t\t\t\t\titem.value !== null || (item.raw && String(item.raw).trim() !== \"\")\r\n\t\t\t)\r\n\t\t);\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.full-chart-component-root {\r\n\t\t/* Renamed to avoid conflict if nested */\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tpadding: 16px;\r\n\t\tbox-sizing: border-box;\r\n\t\tdisplay: flex; /* Added for better layout control */\r\n\t\tflex-direction: column; /* Added */\r\n\t}\r\n\r\n\t.full-text {\r\n\t\tmax-height: 400px; /* Or adjust as needed */\r\n\t\toverflow-y: auto;\r\n\t\tflex-grow: 1; /* Added */\r\n\t}\r\n\r\n\t.text-item {\r\n\t\tmargin-bottom: 8px;\r\n\t\tpadding: 8px;\r\n\t\tbackground: #f8f9fa;\r\n\t\tborder-radius: 4px;\r\n\t\tword-break: break-word;\r\n\t}\r\n\r\n\t.chart-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%; /* Ensure this works with parent constraints */\r\n\t\tmin-height: 300px; /* Ensure chart has some space */\r\n\t\tflex-grow: 1; /* Added */\r\n\t\tdisplay: flex; /* Added */\r\n\t\talign-items: center; /* Added */\r\n\t\tjustify-content: center; /* Added */\r\n\t}\r\n\r\n\t.no-data {\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\theight: 100%;\r\n\t\tmin-height: 100px; /* Ensure \"no data\" message is visible */\r\n\t\tcolor: #999;\r\n\t\tfont-style: italic;\r\n\t\tfont-size: 1.2em;\r\n\t\tflex-grow: 1; /* Added */\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}