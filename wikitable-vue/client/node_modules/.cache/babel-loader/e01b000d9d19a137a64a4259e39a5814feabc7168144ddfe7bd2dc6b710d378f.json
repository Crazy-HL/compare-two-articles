{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, onMounted, watch, onBeforeUnmount, computed } from \"vue\";\nimport * as echarts from \"echarts\";\nexport default {\n  __name: 'LineChart',\n  props: {\n    data: {\n      type: [Array, Object],\n      default: () => []\n    },\n    isCombined: {\n      type: Boolean,\n      default: false\n    },\n    sources: {\n      type: Array,\n      default: () => []\n    },\n    showTrend: {\n      type: Boolean,\n      default: false\n    },\n    fieldKey: {\n      type: String,\n      default: \"\"\n    }\n  },\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const props = __props;\n    const chartEl = ref(null);\n    let chartInstance = null;\n\n    // 颜色集合（确保颜色对比明显）\n    const colorPalette = [\"#4e79a7\", \"#e15759\", \"#76b7b2\", \"#f28e2b\", \"#59a14f\"];\n\n    // 格式化数值显示\n    const formatNumber = (value, unit) => {\n      const num = Number(value);\n      if (isNaN(num)) return \"N/A\";\n\n      // 根据不同的字段类型使用不同的格式化方式\n      if (props.fieldKey === \"GDP growth\" || props.fieldKey === \"Inflation (CPI)\") {\n        return `${num > 0 ? \"+\" : \"\"}${num.toFixed(1)}%`;\n      } else if (props.fieldKey === \"GDP\") {\n        return `$${(num / 1e12).toFixed(2)}T`; // 以万亿美元显示\n      } else if (props.fieldKey === \"Population\") {\n        return `${(num / 1e8).toFixed(2)}亿`; // 以亿人显示\n      } else {\n        return num.toLocaleString() + (unit ? ` ${unit}` : \"\");\n      }\n    };\n\n    // 处理合并数据 - 修复数据分组和颜色分配\n    const processedData = computed(() => {\n      if (!props.isCombined || !Array.isArray(props.data)) return props.data;\n\n      // 获取所有有效数据源（优先用props.sources，否则自动从data提取）\n      const validSources = props.sources?.length > 0 ? props.sources : [...new Set(props.data.map(item => item?.source))].filter(Boolean);\n\n      // 按数据源分组，并分配颜色\n      const seriesData = validSources.map((source, index) => {\n        const sourceData = props.data.filter(item => item?.source === source);\n        return {\n          name: source,\n          data: sourceData.map(item => ({\n            value: item.value,\n            year: item.year,\n            unit: item.unit || (props.fieldKey === \"GDP growth\" ? \"%\" : \"\")\n          })),\n          color: colorPalette[index % colorPalette.length] // 按索引分配固定颜色\n        };\n      });\n\n      // 获取所有年份用于x轴\n      const allYears = [...new Set(props.data.map(item => item.year))].sort((a, b) => a - b);\n      return {\n        series: seriesData,\n        categories: allYears\n      };\n    });\n\n    // 初始化图表\n    const initChart = () => {\n      if (!chartEl.value) return;\n\n      // 销毁旧图表（避免内存泄漏）\n      if (chartInstance) chartInstance.dispose();\n      chartInstance = echarts.init(chartEl.value);\n\n      // 通用配置\n      const baseOption = {\n        tooltip: {\n          trigger: \"axis\",\n          formatter: params => {\n            return params.filter(param => param.value != null).map(param => {\n              const dataItem = param.data;\n              return `\n              <div style=\"margin-bottom: 5px;\">\n                <span style=\"display:inline-block;width:10px;height:10px;border-radius:50%;background:${param.color};margin-right:5px;\"></span>\n                ${param.seriesName}\n              </div>\n              <div>${dataItem.year}: ${formatNumber(dataItem.value, dataItem.unit)}</div>\n            `;\n            }).join(\"\");\n          },\n          backgroundColor: \"rgba(255,255,255,0.9)\",\n          borderColor: \"#ddd\",\n          borderWidth: 1,\n          padding: [8, 12],\n          textStyle: {\n            color: \"#333\",\n            fontSize: 12\n          },\n          extraCssText: \"box-shadow: 0 0 10px rgba(0,0,0,0.1);\"\n        },\n        legend: {\n          show: props.isCombined,\n          // 仅合并图表显示图例\n          data: props.isCombined ? processedData.value.series.map(s => s.name) : [],\n          top: 10,\n          itemWidth: 12,\n          itemHeight: 12,\n          textStyle: {\n            fontSize: 12\n          }\n        },\n        grid: {\n          top: props.isCombined ? \"20%\" : \"15%\",\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          axisLine: {\n            lineStyle: {\n              color: \"#999\"\n            }\n          },\n          axisLabel: {\n            color: \"#666\",\n            interval: 0,\n            rotate: 0,\n            formatter: value => {\n              // 如果是年份，只显示后两位\n              if (/^\\d{4}$/.test(value)) {\n                return value.toString().slice(-2);\n              }\n              return value;\n            }\n          },\n          axisTick: {\n            alignWithLabel: true\n          }\n        },\n        yAxis: {\n          type: \"value\",\n          axisLine: {\n            show: true,\n            lineStyle: {\n              color: \"#999\"\n            }\n          },\n          axisLabel: {\n            color: \"#666\",\n            formatter: value => {\n              return formatNumber(value);\n            }\n          },\n          splitLine: {\n            lineStyle: {\n              type: \"dashed\",\n              color: \"#eee\"\n            }\n          },\n          min: value => {\n            // 自动调整y轴最小值，留出一些空间\n            if (props.fieldKey === \"GDP growth\" || props.fieldKey === \"Inflation (CPI)\") {\n              return Math.min(0, value.min * 1.1); // 对于百分比数据，确保包含0\n            }\n            return value.min >= 0 ? 0 : value.min * 1.1;\n          }\n        },\n        animationDuration: 1000,\n        animationEasing: \"cubicOut\"\n      };\n\n      // 合并图表配置\n      if (props.isCombined) {\n        const option = {\n          ...baseOption,\n          xAxis: {\n            ...baseOption.xAxis,\n            data: processedData.value.categories\n          },\n          series: processedData.value.series.map(series => ({\n            name: series.name,\n            data: series.data.map(d => ({\n              value: d.value,\n              year: d.year,\n              unit: d.unit\n            })),\n            type: \"line\",\n            symbol: \"circle\",\n            symbolSize: 8,\n            lineStyle: {\n              width: 3,\n              color: series.color\n            },\n            itemStyle: {\n              color: series.color\n            },\n            label: {\n              show: true,\n              position: \"top\",\n              formatter: params => {\n                return formatNumber(params.value, series.data[params.dataIndex].unit);\n              },\n              color: \"#333\",\n              fontSize: 12\n            },\n            emphasis: {\n              itemStyle: {\n                borderWidth: 2,\n                borderColor: \"#fff\",\n                shadowBlur: 10,\n                shadowColor: \"rgba(0, 0, 0, 0.5)\"\n              },\n              lineStyle: {\n                width: 4\n              }\n            },\n            smooth: true\n          }))\n        };\n\n        // 如果需要显示趋势线\n        if (props.showTrend) {\n          option.series = option.series.concat(processedData.value.series.map(series => ({\n            name: `${series.name}趋势线`,\n            type: \"line\",\n            data: series.data.map(d => d.value),\n            smooth: true,\n            lineStyle: {\n              type: \"dashed\",\n              width: 1,\n              color: series.color\n            },\n            symbol: \"none\",\n            silent: true,\n            tooltip: {\n              show: false\n            }\n          })));\n        }\n        chartInstance.setOption(option);\n      }\n      // 普通折线图配置\n      else {\n        const option = {\n          ...baseOption,\n          xAxis: {\n            ...baseOption.xAxis,\n            data: props.data.map(item => item.year)\n          },\n          series: [{\n            name: \"数据\",\n            data: props.data.map(item => ({\n              value: item.value,\n              year: item.year,\n              unit: item.unit\n            })),\n            type: \"line\",\n            symbol: \"circle\",\n            symbolSize: 8,\n            lineStyle: {\n              width: 3,\n              color: colorPalette[0]\n            },\n            itemStyle: {\n              color: colorPalette[0]\n            },\n            label: {\n              show: true,\n              position: \"top\",\n              formatter: params => {\n                return formatNumber(params.value, props.data[params.dataIndex].unit);\n              },\n              color: \"#333\",\n              fontSize: 12\n            },\n            emphasis: {\n              itemStyle: {\n                borderWidth: 2,\n                borderColor: \"#fff\",\n                shadowBlur: 10,\n                shadowColor: \"rgba(0, 0, 0, 0.5)\"\n              },\n              lineStyle: {\n                width: 4\n              }\n            },\n            smooth: true\n          }]\n        };\n\n        // 如果需要显示趋势线\n        if (props.showTrend) {\n          option.series.push({\n            name: \"趋势线\",\n            type: \"line\",\n            data: props.data.map(item => item.value),\n            smooth: true,\n            lineStyle: {\n              type: \"dashed\",\n              width: 1,\n              color: colorPalette[0]\n            },\n            symbol: \"none\",\n            silent: true,\n            tooltip: {\n              show: false\n            }\n          });\n        }\n        chartInstance.setOption(option);\n      }\n\n      // 响应式调整大小\n      window.addEventListener(\"resize\", handleResize);\n    };\n    const handleResize = () => {\n      if (chartInstance) {\n        chartInstance.resize();\n      }\n    };\n\n    // 生命周期和监听\n    onMounted(() => {\n      initChart();\n    });\n    onBeforeUnmount(() => {\n      if (chartInstance) {\n        chartInstance.dispose();\n        window.removeEventListener(\"resize\", handleResize);\n      }\n    });\n\n    // 深度监听数据变化\n    watch(() => [props.data, props.isCombined, props.sources, props.showTrend, props.fieldKey], () => {\n      initChart();\n    }, {\n      deep: true\n    });\n    const __returned__ = {\n      props,\n      chartEl,\n      get chartInstance() {\n        return chartInstance;\n      },\n      set chartInstance(v) {\n        chartInstance = v;\n      },\n      colorPalette,\n      formatNumber,\n      processedData,\n      initChart,\n      handleResize,\n      ref,\n      onMounted,\n      watch,\n      onBeforeUnmount,\n      computed,\n      get echarts() {\n        return echarts;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","watch","onBeforeUnmount","computed","echarts","props","__props","chartEl","chartInstance","colorPalette","formatNumber","value","unit","num","Number","isNaN","fieldKey","toFixed","toLocaleString","processedData","isCombined","Array","isArray","data","validSources","sources","length","Set","map","item","source","filter","Boolean","seriesData","index","sourceData","name","year","color","allYears","sort","a","b","series","categories","initChart","dispose","init","baseOption","tooltip","trigger","formatter","params","param","dataItem","seriesName","join","backgroundColor","borderColor","borderWidth","padding","textStyle","fontSize","extraCssText","legend","show","s","top","itemWidth","itemHeight","grid","left","right","bottom","containLabel","xAxis","type","axisLine","lineStyle","axisLabel","interval","rotate","test","toString","slice","axisTick","alignWithLabel","yAxis","splitLine","min","Math","animationDuration","animationEasing","option","d","symbol","symbolSize","width","itemStyle","label","position","dataIndex","emphasis","shadowBlur","shadowColor","smooth","showTrend","concat","silent","setOption","push","window","addEventListener","handleResize","resize","removeEventListener","deep"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/charts/LineChart.vue"],"sourcesContent":["<template>\r\n\t<div ref=\"chartEl\" class=\"line-chart\"></div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, watch, onBeforeUnmount, computed } from \"vue\";\r\n\timport * as echarts from \"echarts\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdata: {\r\n\t\t\ttype: [Array, Object],\r\n\t\t\tdefault: () => []\r\n\t\t},\r\n\t\tisCombined: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false\r\n\t\t},\r\n\t\tsources: {\r\n\t\t\ttype: Array,\r\n\t\t\tdefault: () => []\r\n\t\t},\r\n\t\tshowTrend: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false\r\n\t\t},\r\n\t\tfieldKey: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: \"\"\r\n\t\t}\r\n\t});\r\n\r\n\tconst chartEl = ref(null);\r\n\tlet chartInstance = null;\r\n\r\n\t// 颜色集合（确保颜色对比明显）\r\n\tconst colorPalette = [\"#4e79a7\", \"#e15759\", \"#76b7b2\", \"#f28e2b\", \"#59a14f\"];\r\n\r\n\t// 格式化数值显示\r\n\tconst formatNumber = (value, unit) => {\r\n\t\tconst num = Number(value);\r\n\t\tif (isNaN(num)) return \"N/A\";\r\n\r\n\t\t// 根据不同的字段类型使用不同的格式化方式\r\n\t\tif (\r\n\t\t\tprops.fieldKey === \"GDP growth\" ||\r\n\t\t\tprops.fieldKey === \"Inflation (CPI)\"\r\n\t\t) {\r\n\t\t\treturn `${num > 0 ? \"+\" : \"\"}${num.toFixed(1)}%`;\r\n\t\t} else if (props.fieldKey === \"GDP\") {\r\n\t\t\treturn `$${(num / 1e12).toFixed(2)}T`; // 以万亿美元显示\r\n\t\t} else if (props.fieldKey === \"Population\") {\r\n\t\t\treturn `${(num / 1e8).toFixed(2)}亿`; // 以亿人显示\r\n\t\t} else {\r\n\t\t\treturn num.toLocaleString() + (unit ? ` ${unit}` : \"\");\r\n\t\t}\r\n\t};\r\n\r\n\t// 处理合并数据 - 修复数据分组和颜色分配\r\n\tconst processedData = computed(() => {\r\n\t\tif (!props.isCombined || !Array.isArray(props.data)) return props.data;\r\n\r\n\t\t// 获取所有有效数据源（优先用props.sources，否则自动从data提取）\r\n\t\tconst validSources =\r\n\t\t\tprops.sources?.length > 0\r\n\t\t\t\t? props.sources\r\n\t\t\t\t: [...new Set(props.data.map(item => item?.source))].filter(Boolean);\r\n\r\n\t\t// 按数据源分组，并分配颜色\r\n\t\tconst seriesData = validSources.map((source, index) => {\r\n\t\t\tconst sourceData = props.data.filter(item => item?.source === source);\r\n\t\t\treturn {\r\n\t\t\t\tname: source,\r\n\t\t\t\tdata: sourceData.map(item => ({\r\n\t\t\t\t\tvalue: item.value,\r\n\t\t\t\t\tyear: item.year,\r\n\t\t\t\t\tunit: item.unit || (props.fieldKey === \"GDP growth\" ? \"%\" : \"\")\r\n\t\t\t\t})),\r\n\t\t\t\tcolor: colorPalette[index % colorPalette.length] // 按索引分配固定颜色\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\t// 获取所有年份用于x轴\r\n\t\tconst allYears = [...new Set(props.data.map(item => item.year))].sort(\r\n\t\t\t(a, b) => a - b\r\n\t\t);\r\n\r\n\t\treturn {\r\n\t\t\tseries: seriesData,\r\n\t\t\tcategories: allYears\r\n\t\t};\r\n\t});\r\n\r\n\t// 初始化图表\r\n\tconst initChart = () => {\r\n\t\tif (!chartEl.value) return;\r\n\r\n\t\t// 销毁旧图表（避免内存泄漏）\r\n\t\tif (chartInstance) chartInstance.dispose();\r\n\t\tchartInstance = echarts.init(chartEl.value);\r\n\r\n\t\t// 通用配置\r\n\t\tconst baseOption = {\r\n\t\t\ttooltip: {\r\n\t\t\t\ttrigger: \"axis\",\r\n\t\t\t\tformatter: params => {\r\n\t\t\t\t\treturn params\r\n\t\t\t\t\t\t.filter(param => param.value != null)\r\n\t\t\t\t\t\t.map(param => {\r\n\t\t\t\t\t\t\tconst dataItem = param.data;\r\n\t\t\t\t\t\t\treturn `\r\n              <div style=\"margin-bottom: 5px;\">\r\n                <span style=\"display:inline-block;width:10px;height:10px;border-radius:50%;background:${\r\n\t\t\t\t\t\t\t\t\tparam.color\r\n\t\t\t\t\t\t\t\t};margin-right:5px;\"></span>\r\n                ${param.seriesName}\r\n              </div>\r\n              <div>${dataItem.year}: ${formatNumber(\r\n\t\t\t\t\t\t\t\tdataItem.value,\r\n\t\t\t\t\t\t\t\tdataItem.unit\r\n\t\t\t\t\t\t\t)}</div>\r\n            `;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.join(\"\");\r\n\t\t\t\t},\r\n\t\t\t\tbackgroundColor: \"rgba(255,255,255,0.9)\",\r\n\t\t\t\tborderColor: \"#ddd\",\r\n\t\t\t\tborderWidth: 1,\r\n\t\t\t\tpadding: [8, 12],\r\n\t\t\t\ttextStyle: {\r\n\t\t\t\t\tcolor: \"#333\",\r\n\t\t\t\t\tfontSize: 12\r\n\t\t\t\t},\r\n\t\t\t\textraCssText: \"box-shadow: 0 0 10px rgba(0,0,0,0.1);\"\r\n\t\t\t},\r\n\t\t\tlegend: {\r\n\t\t\t\tshow: props.isCombined, // 仅合并图表显示图例\r\n\t\t\t\tdata: props.isCombined\r\n\t\t\t\t\t? processedData.value.series.map(s => s.name)\r\n\t\t\t\t\t: [],\r\n\t\t\t\ttop: 10,\r\n\t\t\t\titemWidth: 12,\r\n\t\t\t\titemHeight: 12,\r\n\t\t\t\ttextStyle: {\r\n\t\t\t\t\tfontSize: 12\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tgrid: {\r\n\t\t\t\ttop: props.isCombined ? \"20%\" : \"15%\",\r\n\t\t\t\tleft: \"3%\",\r\n\t\t\t\tright: \"4%\",\r\n\t\t\t\tbottom: \"3%\",\r\n\t\t\t\tcontainLabel: true\r\n\t\t\t},\r\n\t\t\txAxis: {\r\n\t\t\t\ttype: \"category\",\r\n\t\t\t\taxisLine: {\r\n\t\t\t\t\tlineStyle: {\r\n\t\t\t\t\t\tcolor: \"#999\"\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\taxisLabel: {\r\n\t\t\t\t\tcolor: \"#666\",\r\n\t\t\t\t\tinterval: 0,\r\n\t\t\t\t\trotate: 0,\r\n\t\t\t\t\tformatter: value => {\r\n\t\t\t\t\t\t// 如果是年份，只显示后两位\r\n\t\t\t\t\t\tif (/^\\d{4}$/.test(value)) {\r\n\t\t\t\t\t\t\treturn value.toString().slice(-2);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\taxisTick: {\r\n\t\t\t\t\talignWithLabel: true\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tyAxis: {\r\n\t\t\t\ttype: \"value\",\r\n\t\t\t\taxisLine: {\r\n\t\t\t\t\tshow: true,\r\n\t\t\t\t\tlineStyle: {\r\n\t\t\t\t\t\tcolor: \"#999\"\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\taxisLabel: {\r\n\t\t\t\t\tcolor: \"#666\",\r\n\t\t\t\t\tformatter: value => {\r\n\t\t\t\t\t\treturn formatNumber(value);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tsplitLine: {\r\n\t\t\t\t\tlineStyle: {\r\n\t\t\t\t\t\ttype: \"dashed\",\r\n\t\t\t\t\t\tcolor: \"#eee\"\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tmin: value => {\r\n\t\t\t\t\t// 自动调整y轴最小值，留出一些空间\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tprops.fieldKey === \"GDP growth\" ||\r\n\t\t\t\t\t\tprops.fieldKey === \"Inflation (CPI)\"\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\treturn Math.min(0, value.min * 1.1); // 对于百分比数据，确保包含0\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn value.min >= 0 ? 0 : value.min * 1.1;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tanimationDuration: 1000,\r\n\t\t\tanimationEasing: \"cubicOut\"\r\n\t\t};\r\n\r\n\t\t// 合并图表配置\r\n\t\tif (props.isCombined) {\r\n\t\t\tconst option = {\r\n\t\t\t\t...baseOption,\r\n\t\t\t\txAxis: {\r\n\t\t\t\t\t...baseOption.xAxis,\r\n\t\t\t\t\tdata: processedData.value.categories\r\n\t\t\t\t},\r\n\t\t\t\tseries: processedData.value.series.map(series => ({\r\n\t\t\t\t\tname: series.name,\r\n\t\t\t\t\tdata: series.data.map(d => ({\r\n\t\t\t\t\t\tvalue: d.value,\r\n\t\t\t\t\t\tyear: d.year,\r\n\t\t\t\t\t\tunit: d.unit\r\n\t\t\t\t\t})),\r\n\t\t\t\t\ttype: \"line\",\r\n\t\t\t\t\tsymbol: \"circle\",\r\n\t\t\t\t\tsymbolSize: 8,\r\n\t\t\t\t\tlineStyle: {\r\n\t\t\t\t\t\twidth: 3,\r\n\t\t\t\t\t\tcolor: series.color\r\n\t\t\t\t\t},\r\n\t\t\t\t\titemStyle: {\r\n\t\t\t\t\t\tcolor: series.color\r\n\t\t\t\t\t},\r\n\t\t\t\t\tlabel: {\r\n\t\t\t\t\t\tshow: true,\r\n\t\t\t\t\t\tposition: \"top\",\r\n\t\t\t\t\t\tformatter: params => {\r\n\t\t\t\t\t\t\treturn formatNumber(\r\n\t\t\t\t\t\t\t\tparams.value,\r\n\t\t\t\t\t\t\t\tseries.data[params.dataIndex].unit\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tcolor: \"#333\",\r\n\t\t\t\t\t\tfontSize: 12\r\n\t\t\t\t\t},\r\n\t\t\t\t\temphasis: {\r\n\t\t\t\t\t\titemStyle: {\r\n\t\t\t\t\t\t\tborderWidth: 2,\r\n\t\t\t\t\t\t\tborderColor: \"#fff\",\r\n\t\t\t\t\t\t\tshadowBlur: 10,\r\n\t\t\t\t\t\t\tshadowColor: \"rgba(0, 0, 0, 0.5)\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tlineStyle: {\r\n\t\t\t\t\t\t\twidth: 4\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsmooth: true\r\n\t\t\t\t}))\r\n\t\t\t};\r\n\r\n\t\t\t// 如果需要显示趋势线\r\n\t\t\tif (props.showTrend) {\r\n\t\t\t\toption.series = option.series.concat(\r\n\t\t\t\t\tprocessedData.value.series.map(series => ({\r\n\t\t\t\t\t\tname: `${series.name}趋势线`,\r\n\t\t\t\t\t\ttype: \"line\",\r\n\t\t\t\t\t\tdata: series.data.map(d => d.value),\r\n\t\t\t\t\t\tsmooth: true,\r\n\t\t\t\t\t\tlineStyle: {\r\n\t\t\t\t\t\t\ttype: \"dashed\",\r\n\t\t\t\t\t\t\twidth: 1,\r\n\t\t\t\t\t\t\tcolor: series.color\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tsymbol: \"none\",\r\n\t\t\t\t\t\tsilent: true,\r\n\t\t\t\t\t\ttooltip: {\r\n\t\t\t\t\t\t\tshow: false\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}))\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tchartInstance.setOption(option);\r\n\t\t}\r\n\t\t// 普通折线图配置\r\n\t\telse {\r\n\t\t\tconst option = {\r\n\t\t\t\t...baseOption,\r\n\t\t\t\txAxis: {\r\n\t\t\t\t\t...baseOption.xAxis,\r\n\t\t\t\t\tdata: props.data.map(item => item.year)\r\n\t\t\t\t},\r\n\t\t\t\tseries: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"数据\",\r\n\t\t\t\t\t\tdata: props.data.map(item => ({\r\n\t\t\t\t\t\t\tvalue: item.value,\r\n\t\t\t\t\t\t\tyear: item.year,\r\n\t\t\t\t\t\t\tunit: item.unit\r\n\t\t\t\t\t\t})),\r\n\t\t\t\t\t\ttype: \"line\",\r\n\t\t\t\t\t\tsymbol: \"circle\",\r\n\t\t\t\t\t\tsymbolSize: 8,\r\n\t\t\t\t\t\tlineStyle: {\r\n\t\t\t\t\t\t\twidth: 3,\r\n\t\t\t\t\t\t\tcolor: colorPalette[0]\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\titemStyle: {\r\n\t\t\t\t\t\t\tcolor: colorPalette[0]\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tlabel: {\r\n\t\t\t\t\t\t\tshow: true,\r\n\t\t\t\t\t\t\tposition: \"top\",\r\n\t\t\t\t\t\t\tformatter: params => {\r\n\t\t\t\t\t\t\t\treturn formatNumber(\r\n\t\t\t\t\t\t\t\t\tparams.value,\r\n\t\t\t\t\t\t\t\t\tprops.data[params.dataIndex].unit\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tcolor: \"#333\",\r\n\t\t\t\t\t\t\tfontSize: 12\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\temphasis: {\r\n\t\t\t\t\t\t\titemStyle: {\r\n\t\t\t\t\t\t\t\tborderWidth: 2,\r\n\t\t\t\t\t\t\t\tborderColor: \"#fff\",\r\n\t\t\t\t\t\t\t\tshadowBlur: 10,\r\n\t\t\t\t\t\t\t\tshadowColor: \"rgba(0, 0, 0, 0.5)\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tlineStyle: {\r\n\t\t\t\t\t\t\t\twidth: 4\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tsmooth: true\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t};\r\n\r\n\t\t\t// 如果需要显示趋势线\r\n\t\t\tif (props.showTrend) {\r\n\t\t\t\toption.series.push({\r\n\t\t\t\t\tname: \"趋势线\",\r\n\t\t\t\t\ttype: \"line\",\r\n\t\t\t\t\tdata: props.data.map(item => item.value),\r\n\t\t\t\t\tsmooth: true,\r\n\t\t\t\t\tlineStyle: {\r\n\t\t\t\t\t\ttype: \"dashed\",\r\n\t\t\t\t\t\twidth: 1,\r\n\t\t\t\t\t\tcolor: colorPalette[0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsymbol: \"none\",\r\n\t\t\t\t\tsilent: true,\r\n\t\t\t\t\ttooltip: {\r\n\t\t\t\t\t\tshow: false\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tchartInstance.setOption(option);\r\n\t\t}\r\n\r\n\t\t// 响应式调整大小\r\n\t\twindow.addEventListener(\"resize\", handleResize);\r\n\t};\r\n\r\n\tconst handleResize = () => {\r\n\t\tif (chartInstance) {\r\n\t\t\tchartInstance.resize();\r\n\t\t}\r\n\t};\r\n\r\n\t// 生命周期和监听\r\n\tonMounted(() => {\r\n\t\tinitChart();\r\n\t});\r\n\r\n\tonBeforeUnmount(() => {\r\n\t\tif (chartInstance) {\r\n\t\t\tchartInstance.dispose();\r\n\t\t\twindow.removeEventListener(\"resize\", handleResize);\r\n\t\t}\r\n\t});\r\n\r\n\t// 深度监听数据变化\r\n\twatch(\r\n\t\t() => [\r\n\t\t\tprops.data,\r\n\t\t\tprops.isCombined,\r\n\t\t\tprops.sources,\r\n\t\t\tprops.showTrend,\r\n\t\t\tprops.fieldKey\r\n\t\t],\r\n\t\t() => {\r\n\t\t\tinitChart();\r\n\t\t},\r\n\t\t{ deep: true }\r\n\t);\r\n</script>\r\n\r\n<style scoped>\r\n\t.line-chart {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tmin-height: 400px;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}