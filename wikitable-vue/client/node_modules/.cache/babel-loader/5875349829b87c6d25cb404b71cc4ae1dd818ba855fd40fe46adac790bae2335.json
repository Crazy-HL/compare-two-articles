{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, watch, onMounted, onUnmounted } from \"vue\";\nimport eventBus from \"@/js/eventBus.js\";\nexport default {\n  __name: 'ArticleOutline',\n  props: {\n    content: String,\n    // 文章 HTML\n    divId: String // \"div1\" 或 \"div3\"\n  },\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const props = __props;\n    const isVisible = ref(false);\n    const outline = ref([]);\n    const buttonStyle = ref({});\n    const outlineStyle = ref({});\n    const linkedOutline = ref([]); // 共享的关联章节数据\n\n    // **切换大纲的显示**\n    const toggleOutline = () => {\n      isVisible.value = !isVisible.value;\n    };\n\n    // **解析文章，提取 h1-h6 标题**\n    const extractOutline = (content, containerId) => {\n      if (!content) return [];\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(content, \"text/html\");\n      const headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\n      return Array.from(headings).map((heading, index) => {\n        const level = parseInt(heading.tagName.substring(1));\n        const id = `heading-${index}-${containerId}`;\n        heading.id = id;\n        return {\n          id,\n          text: heading.textContent,\n          level\n        };\n      });\n    };\n\n    // **动态生成关联关系**    结合 标准化处理 + 编辑距离 + 关键词匹配\n    const normalizeText = text => {\n      // 去除多余的空格，换行符，并转换为小写\n      return text.trim().replace(/\\s+/g, \" \").toLowerCase();\n    };\n\n    // 计算 Levenshtein 编辑距离\n    const levenshteinDistance = (a, b) => {\n      const dp = Array(a.length + 1).fill(null).map(() => Array(b.length + 1).fill(0));\n      for (let i = 0; i <= a.length; i++) dp[i][0] = i;\n      for (let j = 0; j <= b.length; j++) dp[0][j] = j;\n      for (let i = 1; i <= a.length; i++) {\n        for (let j = 1; j <= b.length; j++) {\n          const cost = a[i - 1] === b[j - 1] ? 0 : 1;\n          dp[i][j] = Math.min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + cost);\n        }\n      }\n      return dp[a.length][b.length];\n    };\n\n    // 判断是否有相同的关键词\n    const hasCommonWords = (text1, text2) => {\n      const words1 = new Set(text1.split(/\\s+/));\n      const words2 = new Set(text2.split(/\\s+/));\n      const commonWords = [...words1].filter(word => words2.has(word));\n      return commonWords.length > 0;\n    };\n\n    // 关联大纲\n    const generateLinkedOutline = (outline1, outline2) => {\n      const linked = [];\n      const matchedIds = new Set(); // 记录已匹配的 ID，防止重复匹配\n\n      // **第一轮：完全匹配**\n      outline1.forEach(item1 => {\n        outline2.forEach(item2 => {\n          if (normalizeText(item1.text) === normalizeText(item2.text)) {\n            linked.push({\n              leftId: item1.id,\n              rightId: item2.id\n            });\n            matchedIds.add(item1.id);\n            matchedIds.add(item2.id);\n          }\n        });\n      });\n\n      // **第二轮：编辑距离匹配（仅匹配未被第一轮匹配的项）**\n      outline1.forEach(item1 => {\n        if (matchedIds.has(item1.id)) return;\n        outline2.forEach(item2 => {\n          if (matchedIds.has(item2.id)) return;\n          if (levenshteinDistance(normalizeText(item1.text), normalizeText(item2.text)) <= 3) {\n            linked.push({\n              leftId: item1.id,\n              rightId: item2.id\n            });\n            matchedIds.add(item1.id);\n            matchedIds.add(item2.id);\n          }\n        });\n      });\n\n      // **第三轮：关键词匹配（仅匹配未被前两轮匹配的项）**\n      outline1.forEach(item1 => {\n        if (matchedIds.has(item1.id)) return;\n        outline2.forEach(item2 => {\n          if (matchedIds.has(item2.id)) return;\n          if (hasCommonWords(normalizeText(item1.text), normalizeText(item2.text))) {\n            linked.push({\n              leftId: item1.id,\n              rightId: item2.id\n            });\n            matchedIds.add(item1.id);\n            matchedIds.add(item2.id);\n          }\n        });\n      });\n      return linked;\n    };\n\n    // **监听 content 变化，更新大纲**\n    watch(() => props.content, newContent => {\n      outline.value = extractOutline(newContent, props.divId);\n\n      // 提取另一个容器的大纲数据\n      const otherContainerId = props.divId === \"div1\" ? \"div3\" : \"div1\";\n      const otherContainer = document.getElementById(otherContainerId);\n      if (otherContainer) {\n        const otherContent = otherContainer.innerHTML;\n        const otherOutline = extractOutline(otherContent, otherContainerId);\n        const newLinkedOutline = generateLinkedOutline(outline.value, otherOutline);\n        linkedOutline.value = newLinkedOutline;\n\n        // 通过 eventBus 通知另一个大纲组件\n        eventBus.emit(\"update-linked-outline\", newLinkedOutline);\n      }\n    }, {\n      immediate: true\n    });\n\n    // **监听 eventBus，确保两边大纲同步**\n    eventBus.on(\"update-linked-outline\", newLinkedOutline => {\n      linkedOutline.value = newLinkedOutline;\n    });\n\n    // **检查是否存在关联章节**\n    const isLinked = item => linkedOutline.value.some(linked => linked.leftId === item.id || linked.rightId === item.id);\n\n    // **滚动到章节**\n    const scrollToChapter = id => {\n      // 跳转到当前文章的章节\n      const element = document.getElementById(id);\n      if (element) element.scrollIntoView({\n        behavior: \"smooth\"\n      });\n\n      // 找到关联章节并跳转\n      const linkedItem = linkedOutline.value.find(linked => linked.leftId === id || linked.rightId === id);\n      if (linkedItem) {\n        const targetId = linkedItem.leftId === id ? linkedItem.rightId : linkedItem.leftId;\n        eventBus.emit(\"scroll-to-chapter\", targetId);\n      }\n    };\n\n    // **监听 eventBus，确保两个组件同步跳转**\n    eventBus.on(\"scroll-to-chapter\", targetId => {\n      const targetElement = document.getElementById(targetId);\n      if (targetElement) targetElement.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    });\n\n    // **更新按钮和大纲的相对位置**\n    const updatePosition = () => {\n      const isDiv1 = props.divId === \"div1\";\n      buttonStyle.value = {\n        position: \"absolute\",\n        top: \"10px\",\n        [isDiv1 ? \"right\" : \"left\"]: \"10px\"\n      };\n      outlineStyle.value = {\n        position: \"absolute\",\n        top: \"50px\",\n        [isDiv1 ? \"right\" : \"left\"]: \"10px\",\n        width: \"260px\",\n        maxHeight: \"80vh\",\n        overflowY: \"auto\",\n        zIndex: \"1000\",\n        background: \"white\",\n        borderRadius: \"8px\",\n        boxShadow: \"0 4px 12px rgba(0, 0, 0, 0.15)\",\n        padding: \"15px\"\n      };\n    };\n\n    // **窗口滚动时更新大纲位置**\n    const handleScroll = () => {\n      const referenceElement = document.getElementById(props.divId);\n      if (!referenceElement) return;\n      const scrollY = referenceElement.scrollTop;\n      buttonStyle.value.top = `${scrollY + 10}px`;\n      outlineStyle.value.top = `${scrollY + 50}px`;\n    };\n\n    // **初始化**\n    onMounted(() => {\n      outline.value = extractOutline(props.content, props.divId);\n      updatePosition();\n      const referenceElement = document.getElementById(props.divId);\n      if (referenceElement) referenceElement.addEventListener(\"scroll\", handleScroll);\n    });\n\n    // **组件销毁时移除事件**\n    onUnmounted(() => {\n      const referenceElement = document.getElementById(props.divId);\n      if (referenceElement) referenceElement.removeEventListener(\"scroll\", handleScroll);\n      eventBus.off(\"update-linked-outline\");\n      eventBus.off(\"scroll-to-chapter\");\n    });\n    const __returned__ = {\n      props,\n      isVisible,\n      outline,\n      buttonStyle,\n      outlineStyle,\n      linkedOutline,\n      toggleOutline,\n      extractOutline,\n      normalizeText,\n      levenshteinDistance,\n      hasCommonWords,\n      generateLinkedOutline,\n      isLinked,\n      scrollToChapter,\n      updatePosition,\n      handleScroll,\n      ref,\n      watch,\n      onMounted,\n      onUnmounted,\n      get eventBus() {\n        return eventBus;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","onMounted","onUnmounted","eventBus","props","__props","isVisible","outline","buttonStyle","outlineStyle","linkedOutline","toggleOutline","value","extractOutline","content","containerId","parser","DOMParser","doc","parseFromString","headings","querySelectorAll","Array","from","map","heading","index","level","parseInt","tagName","substring","id","text","textContent","normalizeText","trim","replace","toLowerCase","levenshteinDistance","a","b","dp","length","fill","i","j","cost","Math","min","hasCommonWords","text1","text2","words1","Set","split","words2","commonWords","filter","word","has","generateLinkedOutline","outline1","outline2","linked","matchedIds","forEach","item1","item2","push","leftId","rightId","add","newContent","divId","otherContainerId","otherContainer","document","getElementById","otherContent","innerHTML","otherOutline","newLinkedOutline","emit","immediate","on","isLinked","item","some","scrollToChapter","element","scrollIntoView","behavior","linkedItem","find","targetId","targetElement","updatePosition","isDiv1","position","top","width","maxHeight","overflowY","zIndex","background","borderRadius","boxShadow","padding","handleScroll","referenceElement","scrollY","scrollTop","addEventListener","removeEventListener","off"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/ArticleOutline.vue"],"sourcesContent":["<template>\r\n\t<!-- 大纲切换按钮 -->\r\n\t<button @click=\"toggleOutline\" class=\"toggle-btn\" :style=\"buttonStyle\">\r\n\t\t<svg v-if=\"!isVisible\" class=\"icon\" viewBox=\"0 0 24 24\">\r\n\t\t\t<path\r\n\t\t\t\tfill=\"currentColor\"\r\n\t\t\t\td=\"M3 6h18v2H3V6zm0 5h18v2H3v-2zm0 5h18v2H3v-2z\"></path>\r\n\t\t</svg>\r\n\t\t<svg v-else class=\"icon close\" viewBox=\"0 0 24 24\">\r\n\t\t\t<path fill=\"currentColor\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n\t\t</svg>\r\n\t</button>\r\n\r\n\t<!-- 大纲内容 -->\r\n\t<div v-if=\"isVisible\" class=\"outline-container\" :style=\"outlineStyle\">\r\n\t\t<div class=\"outline\">\r\n\t\t\t<ul>\r\n\t\t\t\t<li\r\n\t\t\t\t\tv-for=\"(item, index) in outline\"\r\n\t\t\t\t\t:key=\"item.id\"\r\n\t\t\t\t\t:class=\"{ highlight: isLinked(item), linked: isLinked(item) }\"\r\n\t\t\t\t\t:style=\"{ paddingLeft: `${(item.level - 1) * 15}px` }\">\r\n\t\t\t\t\t<a :href=\"'#' + item.id\" @click.prevent=\"scrollToChapter(item.id)\">{{\r\n\t\t\t\t\t\titem.text\r\n\t\t\t\t\t}}</a>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, watch, onMounted, onUnmounted } from \"vue\";\r\n\timport eventBus from \"@/js/eventBus.js\";\r\n\r\n\tconst props = defineProps({\r\n\t\tcontent: String, // 文章 HTML\r\n\t\tdivId: String // \"div1\" 或 \"div3\"\r\n\t});\r\n\r\n\tconst isVisible = ref(false);\r\n\tconst outline = ref([]);\r\n\tconst buttonStyle = ref({});\r\n\tconst outlineStyle = ref({});\r\n\tconst linkedOutline = ref([]); // 共享的关联章节数据\r\n\r\n\t// **切换大纲的显示**\r\n\tconst toggleOutline = () => {\r\n\t\tisVisible.value = !isVisible.value;\r\n\t};\r\n\r\n\t// **解析文章，提取 h1-h6 标题**\r\n\tconst extractOutline = (content, containerId) => {\r\n\t\tif (!content) return [];\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst doc = parser.parseFromString(content, \"text/html\");\r\n\t\tconst headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\r\n\r\n\t\treturn Array.from(headings).map((heading, index) => {\r\n\t\t\tconst level = parseInt(heading.tagName.substring(1));\r\n\t\t\tconst id = `heading-${index}-${containerId}`;\r\n\t\t\theading.id = id;\r\n\t\t\treturn { id, text: heading.textContent, level };\r\n\t\t});\r\n\t};\r\n\r\n\t// **动态生成关联关系**    结合 标准化处理 + 编辑距离 + 关键词匹配\r\n\tconst normalizeText = text => {\r\n\t\t// 去除多余的空格，换行符，并转换为小写\r\n\t\treturn text.trim().replace(/\\s+/g, \" \").toLowerCase();\r\n\t};\r\n\r\n\t// 计算 Levenshtein 编辑距离\r\n\tconst levenshteinDistance = (a, b) => {\r\n\t\tconst dp = Array(a.length + 1)\r\n\t\t\t.fill(null)\r\n\t\t\t.map(() => Array(b.length + 1).fill(0));\r\n\r\n\t\tfor (let i = 0; i <= a.length; i++) dp[i][0] = i;\r\n\t\tfor (let j = 0; j <= b.length; j++) dp[0][j] = j;\r\n\r\n\t\tfor (let i = 1; i <= a.length; i++) {\r\n\t\t\tfor (let j = 1; j <= b.length; j++) {\r\n\t\t\t\tconst cost = a[i - 1] === b[j - 1] ? 0 : 1;\r\n\t\t\t\tdp[i][j] = Math.min(\r\n\t\t\t\t\tdp[i - 1][j] + 1,\r\n\t\t\t\t\tdp[i][j - 1] + 1,\r\n\t\t\t\t\tdp[i - 1][j - 1] + cost\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn dp[a.length][b.length];\r\n\t};\r\n\r\n\t// 判断是否有相同的关键词\r\n\tconst hasCommonWords = (text1, text2) => {\r\n\t\tconst words1 = new Set(text1.split(/\\s+/));\r\n\t\tconst words2 = new Set(text2.split(/\\s+/));\r\n\t\tconst commonWords = [...words1].filter(word => words2.has(word));\r\n\t\treturn commonWords.length > 0;\r\n\t};\r\n\r\n\t// 关联大纲\r\n\tconst generateLinkedOutline = (outline1, outline2) => {\r\n\t\tconst linked = [];\r\n\t\tconst matchedIds = new Set(); // 记录已匹配的 ID，防止重复匹配\r\n\r\n\t\t// **第一轮：完全匹配**\r\n\t\toutline1.forEach(item1 => {\r\n\t\t\toutline2.forEach(item2 => {\r\n\t\t\t\tif (normalizeText(item1.text) === normalizeText(item2.text)) {\r\n\t\t\t\t\tlinked.push({ leftId: item1.id, rightId: item2.id });\r\n\t\t\t\t\tmatchedIds.add(item1.id);\r\n\t\t\t\t\tmatchedIds.add(item2.id);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t// **第二轮：编辑距离匹配（仅匹配未被第一轮匹配的项）**\r\n\t\toutline1.forEach(item1 => {\r\n\t\t\tif (matchedIds.has(item1.id)) return;\r\n\t\t\toutline2.forEach(item2 => {\r\n\t\t\t\tif (matchedIds.has(item2.id)) return;\r\n\t\t\t\tif (\r\n\t\t\t\t\tlevenshteinDistance(\r\n\t\t\t\t\t\tnormalizeText(item1.text),\r\n\t\t\t\t\t\tnormalizeText(item2.text)\r\n\t\t\t\t\t) <= 3\r\n\t\t\t\t) {\r\n\t\t\t\t\tlinked.push({ leftId: item1.id, rightId: item2.id });\r\n\t\t\t\t\tmatchedIds.add(item1.id);\r\n\t\t\t\t\tmatchedIds.add(item2.id);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t// **第三轮：关键词匹配（仅匹配未被前两轮匹配的项）**\r\n\t\toutline1.forEach(item1 => {\r\n\t\t\tif (matchedIds.has(item1.id)) return;\r\n\t\t\toutline2.forEach(item2 => {\r\n\t\t\t\tif (matchedIds.has(item2.id)) return;\r\n\t\t\t\tif (\r\n\t\t\t\t\thasCommonWords(normalizeText(item1.text), normalizeText(item2.text))\r\n\t\t\t\t) {\r\n\t\t\t\t\tlinked.push({ leftId: item1.id, rightId: item2.id });\r\n\t\t\t\t\tmatchedIds.add(item1.id);\r\n\t\t\t\t\tmatchedIds.add(item2.id);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\treturn linked;\r\n\t};\r\n\r\n\t// **监听 content 变化，更新大纲**\r\n\twatch(\r\n\t\t() => props.content,\r\n\t\tnewContent => {\r\n\t\t\toutline.value = extractOutline(newContent, props.divId);\r\n\r\n\t\t\t// 提取另一个容器的大纲数据\r\n\t\t\tconst otherContainerId = props.divId === \"div1\" ? \"div3\" : \"div1\";\r\n\t\t\tconst otherContainer = document.getElementById(otherContainerId);\r\n\t\t\tif (otherContainer) {\r\n\t\t\t\tconst otherContent = otherContainer.innerHTML;\r\n\t\t\t\tconst otherOutline = extractOutline(otherContent, otherContainerId);\r\n\t\t\t\tconst newLinkedOutline = generateLinkedOutline(\r\n\t\t\t\t\toutline.value,\r\n\t\t\t\t\totherOutline\r\n\t\t\t\t);\r\n\t\t\t\tlinkedOutline.value = newLinkedOutline;\r\n\r\n\t\t\t\t// 通过 eventBus 通知另一个大纲组件\r\n\t\t\t\teventBus.emit(\"update-linked-outline\", newLinkedOutline);\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\t// **监听 eventBus，确保两边大纲同步**\r\n\teventBus.on(\"update-linked-outline\", newLinkedOutline => {\r\n\t\tlinkedOutline.value = newLinkedOutline;\r\n\t});\r\n\r\n\t// **检查是否存在关联章节**\r\n\tconst isLinked = item =>\r\n\t\tlinkedOutline.value.some(\r\n\t\t\tlinked => linked.leftId === item.id || linked.rightId === item.id\r\n\t\t);\r\n\r\n\t// **滚动到章节**\r\n\tconst scrollToChapter = id => {\r\n\t\t// 跳转到当前文章的章节\r\n\t\tconst element = document.getElementById(id);\r\n\t\tif (element) element.scrollIntoView({ behavior: \"smooth\" });\r\n\r\n\t\t// 找到关联章节并跳转\r\n\t\tconst linkedItem = linkedOutline.value.find(\r\n\t\t\tlinked => linked.leftId === id || linked.rightId === id\r\n\t\t);\r\n\t\tif (linkedItem) {\r\n\t\t\tconst targetId =\r\n\t\t\t\tlinkedItem.leftId === id ? linkedItem.rightId : linkedItem.leftId;\r\n\t\t\teventBus.emit(\"scroll-to-chapter\", targetId);\r\n\t\t}\r\n\t};\r\n\r\n\t// **监听 eventBus，确保两个组件同步跳转**\r\n\teventBus.on(\"scroll-to-chapter\", targetId => {\r\n\t\tconst targetElement = document.getElementById(targetId);\r\n\t\tif (targetElement) targetElement.scrollIntoView({ behavior: \"smooth\" });\r\n\t});\r\n\r\n\t// **更新按钮和大纲的相对位置**\r\n\tconst updatePosition = () => {\r\n\t\tconst isDiv1 = props.divId === \"div1\";\r\n\t\tbuttonStyle.value = {\r\n\t\t\tposition: \"absolute\",\r\n\t\t\ttop: \"10px\",\r\n\t\t\t[isDiv1 ? \"right\" : \"left\"]: \"10px\"\r\n\t\t};\r\n\t\toutlineStyle.value = {\r\n\t\t\tposition: \"absolute\",\r\n\t\t\ttop: \"50px\",\r\n\t\t\t[isDiv1 ? \"right\" : \"left\"]: \"10px\",\r\n\t\t\twidth: \"260px\",\r\n\t\t\tmaxHeight: \"80vh\",\r\n\t\t\toverflowY: \"auto\",\r\n\t\t\tzIndex: \"1000\",\r\n\t\t\tbackground: \"white\",\r\n\t\t\tborderRadius: \"8px\",\r\n\t\t\tboxShadow: \"0 4px 12px rgba(0, 0, 0, 0.15)\",\r\n\t\t\tpadding: \"15px\"\r\n\t\t};\r\n\t};\r\n\r\n\t// **窗口滚动时更新大纲位置**\r\n\tconst handleScroll = () => {\r\n\t\tconst referenceElement = document.getElementById(props.divId);\r\n\t\tif (!referenceElement) return;\r\n\r\n\t\tconst scrollY = referenceElement.scrollTop;\r\n\t\tbuttonStyle.value.top = `${scrollY + 10}px`;\r\n\t\toutlineStyle.value.top = `${scrollY + 50}px`;\r\n\t};\r\n\r\n\t// **初始化**\r\n\tonMounted(() => {\r\n\t\toutline.value = extractOutline(props.content, props.divId);\r\n\t\tupdatePosition();\r\n\t\tconst referenceElement = document.getElementById(props.divId);\r\n\t\tif (referenceElement)\r\n\t\t\treferenceElement.addEventListener(\"scroll\", handleScroll);\r\n\t});\r\n\r\n\t// **组件销毁时移除事件**\r\n\tonUnmounted(() => {\r\n\t\tconst referenceElement = document.getElementById(props.divId);\r\n\t\tif (referenceElement)\r\n\t\t\treferenceElement.removeEventListener(\"scroll\", handleScroll);\r\n\t\teventBus.off(\"update-linked-outline\");\r\n\t\teventBus.off(\"scroll-to-chapter\");\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t/* **按钮样式** */\r\n\t.toggle-btn {\r\n\t\tpadding: 10px;\r\n\t\tborder-radius: 50%;\r\n\t\tcursor: pointer;\r\n\t\tz-index: 2000;\r\n\t\tbackground-color: #0077b6;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\twidth: 36px;\r\n\t\theight: 36px;\r\n\t\tbox-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n\t\ttransition: all 0.3s ease-in-out;\r\n\t}\r\n\r\n\t/* **大纲样式** */\r\n\t.outline-container {\r\n\t\tbackground: white;\r\n\t\tborder-radius: 8px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n\t\tpadding: 15px;\r\n\t\tmax-height: 80vh;\r\n\t\toverflow-y: auto;\r\n\t\twidth: 260px;\r\n\t\ttransition: all 0.3s ease-in-out;\r\n\t}\r\n\r\n\t.outline ul {\r\n\t\tlist-style-type: none;\r\n\t\tpadding-left: 0;\r\n\t}\r\n\r\n\t.outline li {\r\n\t\tmargin-bottom: 8px;\r\n\t\tfont-size: 14px;\r\n\t\ttransition: padding-left 0.2s ease-in-out;\r\n\t}\r\n\r\n\t/* **高亮和关联章节样式** */\r\n\t.outline li.highlight a {\r\n\t\tbackground-color: #ffff00;\r\n\t\tborder-radius: 5px;\r\n\t}\r\n\r\n\t.outline li.linked a {\r\n\t\tfont-weight: bold;\r\n\t\tcolor: #0077b6;\r\n\t}\r\n\r\n\t.outline li a {\r\n\t\ttext-decoration: none;\r\n\t\tcolor: #0077b6;\r\n\t}\r\n\r\n\t.outline li a:hover {\r\n\t\ttext-decoration: underline;\r\n\t\tcolor: #005f8a;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}