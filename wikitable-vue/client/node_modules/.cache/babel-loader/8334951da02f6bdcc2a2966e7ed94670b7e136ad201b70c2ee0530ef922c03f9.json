{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-4d83b437\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  ref: \"chartEl\",\n  class: \"line-chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","_createElementBlock","_hoisted_1"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\charts\\LineChart.vue"],"sourcesContent":["<template>\r\n\t<div ref=\"chartEl\" class=\"line-chart\"></div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, watch, onBeforeUnmount, computed } from \"vue\";\r\n\timport * as echarts from \"echarts\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdata: {\r\n\t\t\ttype: [Array, Object],\r\n\t\t\tdefault: () => []\r\n\t\t},\r\n\t\tisCombined: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false\r\n\t\t},\r\n\t\tsources: {\r\n\t\t\ttype: Array,\r\n\t\t\tdefault: () => []\r\n\t\t},\r\n\t\tshowTrend: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false\r\n\t\t},\r\n\t\tfieldKey: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: \"\"\r\n\t\t}\r\n\t});\r\n\r\n\tconst chartEl = ref(null);\r\n\tlet chartInstance = null;\r\n\r\n\t// 颜色集合（确保颜色对比明显）\r\n\tconst colorPalette = [\"#4e79a7\", \"#e15759\", \"#76b7b2\", \"#f28e2b\", \"#59a14f\"];\r\n\r\n\t// 格式化数值显示\r\n\tconst formatNumber = (value, unit) => {\r\n\t\tconst num = Number(value);\r\n\t\tif (isNaN(num)) return \"N/A\";\r\n\r\n\t\t// 根据不同的字段类型使用不同的格式化方式\r\n\t\tif (\r\n\t\t\tprops.fieldKey === \"GDP growth\" ||\r\n\t\t\tprops.fieldKey === \"Inflation (CPI)\"\r\n\t\t) {\r\n\t\t\treturn `${num > 0 ? \"+\" : \"\"}${num.toFixed(1)}%`;\r\n\t\t} else if (props.fieldKey === \"GDP\") {\r\n\t\t\treturn `$${(num / 1e12).toFixed(2)}T`; // 以万亿美元显示\r\n\t\t} else if (props.fieldKey === \"Population\") {\r\n\t\t\treturn `${(num / 1e8).toFixed(2)}亿`; // 以亿人显示\r\n\t\t} else {\r\n\t\t\treturn num.toLocaleString() + (unit ? ` ${unit}` : \"\");\r\n\t\t}\r\n\t};\r\n\r\n\t// 处理合并数据 - 修复数据分组和颜色分配\r\n\tconst processedData = computed(() => {\r\n\t\tif (!props.isCombined || !Array.isArray(props.data)) return props.data;\r\n\r\n\t\t// 获取所有有效数据源（优先用props.sources，否则自动从data提取）\r\n\t\tconst validSources =\r\n\t\t\tprops.sources?.length > 0\r\n\t\t\t\t? props.sources\r\n\t\t\t\t: [...new Set(props.data.map(item => item?.source))].filter(Boolean);\r\n\r\n\t\t// 按数据源分组，并分配颜色\r\n\t\tconst seriesData = validSources.map((source, index) => {\r\n\t\t\tconst sourceData = props.data.filter(item => item?.source === source);\r\n\t\t\treturn {\r\n\t\t\t\tname: source,\r\n\t\t\t\tdata: sourceData.map(item => ({\r\n\t\t\t\t\tvalue: item.value,\r\n\t\t\t\t\tyear: item.year,\r\n\t\t\t\t\tunit: item.unit || (props.fieldKey === \"GDP growth\" ? \"%\" : \"\")\r\n\t\t\t\t})),\r\n\t\t\t\tcolor: colorPalette[index % colorPalette.length] // 按索引分配固定颜色\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\t// 获取所有年份用于x轴\r\n\t\tconst allYears = [...new Set(props.data.map(item => item.year))].sort(\r\n\t\t\t(a, b) => a - b\r\n\t\t);\r\n\r\n\t\treturn {\r\n\t\t\tseries: seriesData,\r\n\t\t\tcategories: allYears\r\n\t\t};\r\n\t});\r\n\r\n\t// 初始化图表\r\n\tconst initChart = () => {\r\n\t\tif (!chartEl.value) return;\r\n\r\n\t\t// 销毁旧图表（避免内存泄漏）\r\n\t\tif (chartInstance) chartInstance.dispose();\r\n\t\tchartInstance = echarts.init(chartEl.value);\r\n\r\n\t\t// 通用配置\r\n\t\tconst baseOption = {\r\n\t\t\ttooltip: {\r\n\t\t\t\ttrigger: \"axis\",\r\n\t\t\t\tformatter: params => {\r\n\t\t\t\t\treturn params\r\n\t\t\t\t\t\t.filter(param => param.value != null)\r\n\t\t\t\t\t\t.map(param => {\r\n\t\t\t\t\t\t\tconst dataItem = param.data;\r\n\t\t\t\t\t\t\treturn `\r\n              <div style=\"margin-bottom: 5px;\">\r\n                <span style=\"display:inline-block;width:10px;height:10px;border-radius:50%;background:${\r\n\t\t\t\t\t\t\t\t\tparam.color\r\n\t\t\t\t\t\t\t\t};margin-right:5px;\"></span>\r\n                ${param.seriesName}\r\n              </div>\r\n              <div>${dataItem.year}: ${formatNumber(\r\n\t\t\t\t\t\t\t\tdataItem.value,\r\n\t\t\t\t\t\t\t\tdataItem.unit\r\n\t\t\t\t\t\t\t)}</div>\r\n            `;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.join(\"\");\r\n\t\t\t\t},\r\n\t\t\t\tbackgroundColor: \"rgba(255,255,255,0.9)\",\r\n\t\t\t\tborderColor: \"#ddd\",\r\n\t\t\t\tborderWidth: 1,\r\n\t\t\t\tpadding: [8, 12],\r\n\t\t\t\ttextStyle: {\r\n\t\t\t\t\tcolor: \"#333\",\r\n\t\t\t\t\tfontSize: 12\r\n\t\t\t\t},\r\n\t\t\t\textraCssText: \"box-shadow: 0 0 10px rgba(0,0,0,0.1);\"\r\n\t\t\t},\r\n\t\t\tlegend: {\r\n\t\t\t\tshow: props.isCombined, // 仅合并图表显示图例\r\n\t\t\t\tdata: props.isCombined\r\n\t\t\t\t\t? processedData.value.series.map(s => s.name)\r\n\t\t\t\t\t: [],\r\n\t\t\t\ttop: 10,\r\n\t\t\t\titemWidth: 12,\r\n\t\t\t\titemHeight: 12,\r\n\t\t\t\ttextStyle: {\r\n\t\t\t\t\tfontSize: 12\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tgrid: {\r\n\t\t\t\ttop: props.isCombined ? \"20%\" : \"15%\",\r\n\t\t\t\tleft: \"3%\",\r\n\t\t\t\tright: \"4%\",\r\n\t\t\t\tbottom: \"3%\",\r\n\t\t\t\tcontainLabel: true\r\n\t\t\t},\r\n\t\t\txAxis: {\r\n\t\t\t\ttype: \"category\",\r\n\t\t\t\taxisLine: {\r\n\t\t\t\t\tlineStyle: {\r\n\t\t\t\t\t\tcolor: \"#999\"\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\taxisLabel: {\r\n\t\t\t\t\tcolor: \"#666\",\r\n\t\t\t\t\tinterval: 0,\r\n\t\t\t\t\trotate: 0,\r\n\t\t\t\t\tformatter: value => {\r\n\t\t\t\t\t\t// 如果是年份，只显示后两位\r\n\t\t\t\t\t\tif (/^\\d{4}$/.test(value)) {\r\n\t\t\t\t\t\t\treturn value.toString().slice(-2);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\taxisTick: {\r\n\t\t\t\t\talignWithLabel: true\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tyAxis: {\r\n\t\t\t\ttype: \"value\",\r\n\t\t\t\taxisLine: {\r\n\t\t\t\t\tshow: true,\r\n\t\t\t\t\tlineStyle: {\r\n\t\t\t\t\t\tcolor: \"#999\"\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\taxisLabel: {\r\n\t\t\t\t\tcolor: \"#666\",\r\n\t\t\t\t\tformatter: value => {\r\n\t\t\t\t\t\treturn formatNumber(value);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tsplitLine: {\r\n\t\t\t\t\tlineStyle: {\r\n\t\t\t\t\t\ttype: \"dashed\",\r\n\t\t\t\t\t\tcolor: \"#eee\"\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tmin: value => {\r\n\t\t\t\t\t// 自动调整y轴最小值，留出一些空间\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tprops.fieldKey === \"GDP growth\" ||\r\n\t\t\t\t\t\tprops.fieldKey === \"Inflation (CPI)\"\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\treturn Math.min(0, value.min * 1.1); // 对于百分比数据，确保包含0\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn value.min >= 0 ? 0 : value.min * 1.1;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tanimationDuration: 1000,\r\n\t\t\tanimationEasing: \"cubicOut\"\r\n\t\t};\r\n\r\n\t\t// 合并图表配置\r\n\t\tif (props.isCombined) {\r\n\t\t\tconst option = {\r\n\t\t\t\t...baseOption,\r\n\t\t\t\txAxis: {\r\n\t\t\t\t\t...baseOption.xAxis,\r\n\t\t\t\t\tdata: processedData.value.categories\r\n\t\t\t\t},\r\n\t\t\t\tseries: processedData.value.series.map(series => ({\r\n\t\t\t\t\tname: series.name,\r\n\t\t\t\t\tdata: series.data.map(d => ({\r\n\t\t\t\t\t\tvalue: d.value,\r\n\t\t\t\t\t\tyear: d.year,\r\n\t\t\t\t\t\tunit: d.unit\r\n\t\t\t\t\t})),\r\n\t\t\t\t\ttype: \"line\",\r\n\t\t\t\t\tsymbol: \"circle\",\r\n\t\t\t\t\tsymbolSize: 8,\r\n\t\t\t\t\tlineStyle: {\r\n\t\t\t\t\t\twidth: 3,\r\n\t\t\t\t\t\tcolor: series.color\r\n\t\t\t\t\t},\r\n\t\t\t\t\titemStyle: {\r\n\t\t\t\t\t\tcolor: series.color\r\n\t\t\t\t\t},\r\n\t\t\t\t\tlabel: {\r\n\t\t\t\t\t\tshow: true,\r\n\t\t\t\t\t\tposition: \"top\",\r\n\t\t\t\t\t\tformatter: params => {\r\n\t\t\t\t\t\t\treturn formatNumber(\r\n\t\t\t\t\t\t\t\tparams.value,\r\n\t\t\t\t\t\t\t\tseries.data[params.dataIndex].unit\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tcolor: \"#333\",\r\n\t\t\t\t\t\tfontSize: 12\r\n\t\t\t\t\t},\r\n\t\t\t\t\temphasis: {\r\n\t\t\t\t\t\titemStyle: {\r\n\t\t\t\t\t\t\tborderWidth: 2,\r\n\t\t\t\t\t\t\tborderColor: \"#fff\",\r\n\t\t\t\t\t\t\tshadowBlur: 10,\r\n\t\t\t\t\t\t\tshadowColor: \"rgba(0, 0, 0, 0.5)\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tlineStyle: {\r\n\t\t\t\t\t\t\twidth: 4\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsmooth: true\r\n\t\t\t\t}))\r\n\t\t\t};\r\n\r\n\t\t\t// 如果需要显示趋势线\r\n\t\t\tif (props.showTrend) {\r\n\t\t\t\toption.series = option.series.concat(\r\n\t\t\t\t\tprocessedData.value.series.map(series => ({\r\n\t\t\t\t\t\tname: `${series.name}趋势线`,\r\n\t\t\t\t\t\ttype: \"line\",\r\n\t\t\t\t\t\tdata: series.data.map(d => d.value),\r\n\t\t\t\t\t\tsmooth: true,\r\n\t\t\t\t\t\tlineStyle: {\r\n\t\t\t\t\t\t\ttype: \"dashed\",\r\n\t\t\t\t\t\t\twidth: 1,\r\n\t\t\t\t\t\t\tcolor: series.color\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tsymbol: \"none\",\r\n\t\t\t\t\t\tsilent: true,\r\n\t\t\t\t\t\ttooltip: {\r\n\t\t\t\t\t\t\tshow: false\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}))\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tchartInstance.setOption(option);\r\n\t\t}\r\n\t\t// 普通折线图配置\r\n\t\telse {\r\n\t\t\tconst option = {\r\n\t\t\t\t...baseOption,\r\n\t\t\t\txAxis: {\r\n\t\t\t\t\t...baseOption.xAxis,\r\n\t\t\t\t\tdata: props.data.map(item => item.year)\r\n\t\t\t\t},\r\n\t\t\t\tseries: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"数据\",\r\n\t\t\t\t\t\tdata: props.data.map(item => ({\r\n\t\t\t\t\t\t\tvalue: item.value,\r\n\t\t\t\t\t\t\tyear: item.year,\r\n\t\t\t\t\t\t\tunit: item.unit\r\n\t\t\t\t\t\t})),\r\n\t\t\t\t\t\ttype: \"line\",\r\n\t\t\t\t\t\tsymbol: \"circle\",\r\n\t\t\t\t\t\tsymbolSize: 8,\r\n\t\t\t\t\t\tlineStyle: {\r\n\t\t\t\t\t\t\twidth: 3,\r\n\t\t\t\t\t\t\tcolor: colorPalette[0]\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\titemStyle: {\r\n\t\t\t\t\t\t\tcolor: colorPalette[0]\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tlabel: {\r\n\t\t\t\t\t\t\tshow: true,\r\n\t\t\t\t\t\t\tposition: \"top\",\r\n\t\t\t\t\t\t\tformatter: params => {\r\n\t\t\t\t\t\t\t\treturn formatNumber(\r\n\t\t\t\t\t\t\t\t\tparams.value,\r\n\t\t\t\t\t\t\t\t\tprops.data[params.dataIndex].unit\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tcolor: \"#333\",\r\n\t\t\t\t\t\t\tfontSize: 12\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\temphasis: {\r\n\t\t\t\t\t\t\titemStyle: {\r\n\t\t\t\t\t\t\t\tborderWidth: 2,\r\n\t\t\t\t\t\t\t\tborderColor: \"#fff\",\r\n\t\t\t\t\t\t\t\tshadowBlur: 10,\r\n\t\t\t\t\t\t\t\tshadowColor: \"rgba(0, 0, 0, 0.5)\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tlineStyle: {\r\n\t\t\t\t\t\t\t\twidth: 4\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tsmooth: true\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t};\r\n\r\n\t\t\t// 如果需要显示趋势线\r\n\t\t\tif (props.showTrend) {\r\n\t\t\t\toption.series.push({\r\n\t\t\t\t\tname: \"趋势线\",\r\n\t\t\t\t\ttype: \"line\",\r\n\t\t\t\t\tdata: props.data.map(item => item.value),\r\n\t\t\t\t\tsmooth: true,\r\n\t\t\t\t\tlineStyle: {\r\n\t\t\t\t\t\ttype: \"dashed\",\r\n\t\t\t\t\t\twidth: 1,\r\n\t\t\t\t\t\tcolor: colorPalette[0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsymbol: \"none\",\r\n\t\t\t\t\tsilent: true,\r\n\t\t\t\t\ttooltip: {\r\n\t\t\t\t\t\tshow: false\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tchartInstance.setOption(option);\r\n\t\t}\r\n\r\n\t\t// 响应式调整大小\r\n\t\twindow.addEventListener(\"resize\", handleResize);\r\n\t};\r\n\r\n\tconst handleResize = () => {\r\n\t\tif (chartInstance) {\r\n\t\t\tchartInstance.resize();\r\n\t\t}\r\n\t};\r\n\r\n\t// 生命周期和监听\r\n\tonMounted(() => {\r\n\t\tinitChart();\r\n\t});\r\n\r\n\tonBeforeUnmount(() => {\r\n\t\tif (chartInstance) {\r\n\t\t\tchartInstance.dispose();\r\n\t\t\twindow.removeEventListener(\"resize\", handleResize);\r\n\t\t}\r\n\t});\r\n\r\n\t// 深度监听数据变化\r\n\twatch(\r\n\t\t() => [\r\n\t\t\tprops.data,\r\n\t\t\tprops.isCombined,\r\n\t\t\tprops.sources,\r\n\t\t\tprops.showTrend,\r\n\t\t\tprops.fieldKey\r\n\t\t],\r\n\t\t() => {\r\n\t\t\tinitChart();\r\n\t\t},\r\n\t\t{ deep: true }\r\n\t);\r\n</script>\r\n\r\n<style scoped>\r\n\t.line-chart {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tmin-height: 400px;\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,GAAG,EAAC,SAAS;EAACC,KAAK,EAAC;;;uBAAzBC,mBAAA,CAA4C,OAA5CC,UAA4C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}