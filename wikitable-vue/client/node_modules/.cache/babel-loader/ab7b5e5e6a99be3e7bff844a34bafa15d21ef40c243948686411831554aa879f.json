{"ast":null,"code":"import { toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-0c150cb4\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  ref: \"chartContainer\",\n  class: \"sparkline-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"no-data-message\"\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [!_ctx.hasData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _toDisplayString(_ctx.noDataMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","key","_createElementBlock","_hoisted_1","_ctx","hasData","_hoisted_2","_toDisplayString","noDataMessage","_createCommentVNode"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\SparklineChart.vue"],"sourcesContent":["<template>\r\n\t<div ref=\"chartContainer\" class=\"sparkline-container\">\r\n\t\t<div v-if=\"!hasData\" class=\"no-data-message\">\r\n\t\t\t{{ noDataMessage }}\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, watch, computed } from \"vue\";\r\n\timport * as d3 from \"d3\";\r\n\r\n\tconst props = defineProps({\r\n\t  data: {\r\n\t    type: Array,\r\n\t    default: () => [],\r\n\t    validator: value => Array.isArray(value)\r\n\t  },\r\n\t  compareData: {\r\n\t    type: Array,\r\n\t    default: null\r\n\t  },\r\n\t  width: {\r\n\t    type: Number,\r\n\t    default: 250\r\n\t  },\r\n\t  height: {\r\n\t    type: Number,\r\n\t    default: 80\r\n\t  },\r\n\t  margin: {\r\n\t    type: Object,\r\n\t    default: () => ({ top: 5, right: 5, bottom: 5, left: 5 })\r\n\t  },\r\n\t  lineColor: {\r\n\t    type: String,\r\n\t    default: \"#4a90e2\"\r\n\t  },\r\n\t  highlightColor: {\r\n\t    type: String,\r\n\t    default: \"#FFD700\"\r\n\t  },\r\n\t  showYearMarkers: {\r\n\t    type: Boolean,\r\n\t    default: true\r\n\t  },\r\n\t  teamColors: {\r\n\t    type: Object,\r\n\t    default: () => ({})\r\n\t  }\r\n\t});\r\n\r\n\tconst emit = defineEmits(['chart-mounted']);\r\n\r\n\tconst chartContainer = ref(null);\r\n\tconst svg = ref(null);\r\n\r\n\tconst innerWidth = computed(() => props.width - props.margin.left - props.margin.right);\r\n\tconst innerHeight = computed(() => props.height - props.margin.top - props.margin.bottom);\r\n\r\n\tconst sortedData = computed(() => {\r\n\t  if (!Array.isArray(props.data)) return [];\r\n\t  return [...props.data]\r\n\t    .filter(item => item && !isNaN(item.year) && !isNaN(item.value))\r\n\t    .sort((a, b) => a.year - b.year);\r\n\t});\r\n\r\n\tconst hasData = computed(() => sortedData.value.length > 0);\r\n\tconst noDataMessage = computed(() => \"无数据\");\r\n\tconst chartType = computed(() => sortedData.value.length <= 3 ? 'bar' : 'line');\r\n\r\n\tdefineExpose({\r\n\t  chartType\r\n\t});\r\n\r\n\t// 清理团队名称中的特殊字符\r\n\tconst sanitizeTeamName = (team) => {\r\n\t  return team.replace(/[^a-zA-Z0-9]/g, '-');\r\n\t};\r\n\r\n\tconst initChart = () => {\r\n\t  if (!chartContainer.value) return;\r\n\t  d3.select(chartContainer.value).selectAll(\"*\").remove();\r\n\t  if (!hasData.value) return;\r\n\r\n\t  svg.value = d3.select(chartContainer.value)\r\n\t    .append(\"svg\")\r\n\t    .attr(\"width\", props.width)\r\n\t    .attr(\"height\", props.height);\r\n\r\n\t  const chart = svg.value.append(\"g\")\r\n\t    .attr(\"transform\", `translate(${props.margin.left},${props.margin.top})`);\r\n\r\n\t  if (chartType.value === 'bar') {\r\n\t    drawBarChart(chart);\r\n\t  } else {\r\n\t    drawLineChart(chart);\r\n\t  }\r\n\r\n\t  emit('chart-mounted', {\r\n\t    chartType: chartType.value\r\n\t  });\r\n\t};\r\n\r\n\tconst drawLineChart = (chart) => {\r\n\t  const xScale = d3.scaleLinear()\r\n\t    .domain(d3.extent(sortedData.value, d => d.year))\r\n\t    .range([0, innerWidth.value]);\r\n\r\n\t  const yScale = d3.scaleLinear()\r\n\t    .domain([0, d3.max(sortedData.value, d => d.value) * 1.1])\r\n\t    .range([innerHeight.value, 0]);\r\n\r\n\t  // 按团队分组\r\n\t  const teamGroups = d3.group(sortedData.value, d => d.team || 'Unknown');\r\n\r\n\t  teamGroups.forEach((teamData, team) => {\r\n\t    const safeTeamName = sanitizeTeamName(team);\r\n\t    const line = d3.line()\r\n\t      .x(d => xScale(d.year))\r\n\t      .y(d => yScale(d.value))\r\n\t      .curve(d3.curveMonotoneX);\r\n\r\n\t    // 绘制折线\r\n\t    chart.append(\"path\")\r\n\t      .datum(teamData)\r\n\t      .attr(\"fill\", \"none\")\r\n\t      .attr(\"stroke\", props.teamColors[team] || props.lineColor)\r\n\t      .attr(\"stroke-width\", 2)\r\n\t      .attr(\"d\", line);\r\n\r\n\t    // 绘制数据点\r\n\t    chart.selectAll(`.dot-${safeTeamName}`)\r\n\t      .data(teamData)\r\n\t      .enter().append(\"circle\")\r\n\t      .attr(\"class\", `dot-${safeTeamName}`)\r\n\t      .attr(\"cx\", d => xScale(d.year))\r\n\t      .attr(\"cy\", d => yScale(d.value))\r\n\t      .attr(\"r\", 3)\r\n\t      .attr(\"fill\", props.teamColors[team] || props.lineColor);\r\n\t  });\r\n\r\n\t  // 高亮相同年份的点\r\n\t  if (props.compareData && props.showYearMarkers) {\r\n\t    const commonYears = getCommonYears(sortedData.value, props.compareData);\r\n\t    commonYears.forEach(year => {\r\n\t      const points = sortedData.value.filter(d => d.year === year);\r\n\t      points.forEach(point => {\r\n\t        chart.append(\"circle\")\r\n\t          .attr(\"cx\", xScale(point.year))\r\n\t          .attr(\"cy\", yScale(point.value))\r\n\t          .attr(\"r\", 5)\r\n\t          .attr(\"fill\", props.highlightColor)\r\n\t          .attr(\"stroke\", \"#FF8C00\")\r\n\t          .attr(\"stroke-width\", 1.5);\r\n\t      });\r\n\t    });\r\n\t  }\r\n\t};\r\n\r\n\tconst drawBarChart = (chart) => {\r\n\t  const xScale = d3.scaleBand()\r\n\t    .domain(sortedData.value.map(d => d.year.toString()))\r\n\t    .range([0, innerWidth.value])\r\n\t    .paddingInner(0.4)\r\n\t    .paddingOuter(0.2);\r\n\r\n\t  const calculatedWidth = xScale.bandwidth();\r\n\t  const barWidth = Math.min(calculatedWidth, props.maxBarWidth);\r\n\t  const adjustedPadding = (innerWidth.value - barWidth * sortedData.value.length) / (sortedData.value.length + 1);\r\n\r\n\t  const adjustedXScale = d3.scaleBand()\r\n\t    .domain(sortedData.value.map(d => d.year.toString()))\r\n\t    .range([0, innerWidth.value])\r\n\t    .paddingInner(adjustedPadding / barWidth)\r\n\t    .paddingOuter(adjustedPadding / barWidth);\r\n\r\n\t  const maxValue = d3.max(sortedData.value, d => d.value));\r\n\t  const yScale = d3.scaleLinear()\r\n\t    .domain([0, maxValue * 1.1])\r\n\t    .range([innerHeight.value, 0]);\r\n\r\n\t  // 绘制柱子\r\n\t  chart.selectAll(\".bar\")\r\n\t    .data(sortedData.value)\r\n\t    .enter().append(\"rect\")\r\n\t    .attr(\"class\", \"bar\")\r\n\t    .attr(\"x\", d => adjustedXScale(d.year.toString()) + (adjustedXScale.bandwidth() - barWidth) / 2)\r\n\t    .attr(\"width\", barWidth)\r\n\t    .attr(\"y\", d => yScale(d.value))\r\n\t    .attr(\"height\", d => innerHeight.value - yScale(d.value))\r\n\t    .attr(\"fill\", d => props.teamColors[d.team] || props.lineColor)\r\n\t    .attr(\"rx\", 2)\r\n\t    .attr(\"ry\", 2);\r\n\r\n\t  // 添加数值标签\r\n\t  chart.selectAll(\".bar-label\")\r\n\t    .data(sortedData.value)\r\n\t    .enter().append(\"text\")\r\n\t    .attr(\"class\", \"bar-label\")\r\n\t    .attr(\"x\", d => adjustedXScale(d.year.toString()) + adjustedXScale.bandwidth() / 2)\r\n\t    .attr(\"y\", d => yScale(d.value) - 5)\r\n\t    .attr(\"text-anchor\", \"middle\")\r\n\t    .text(d => formatValue(d.value))\r\n\t    .attr(\"font-size\", \"10px\")\r\n\t    .attr(\"fill\", \"#64748b\")\r\n\t    .style(\"visibility\", d => (innerHeight.value - yScale(d.value) > 20 ? \"visible\" : \"hidden\"));\r\n\t};\r\n\r\n\tconst getCommonYears = (data1, data2) => {\r\n\t  const years1 = new Set(data1.map(d => d.year));\r\n\t  const years2 = new Set(data2.filter(d => d).map(d => d.year));\r\n\t  return [...years1].filter(year => years2.has(year)));\r\n\t};\r\n\r\n\tconst formatValue = (value) => {\r\n\t  if (value >= 1000000) return `$${(value / 1000000).toFixed(1)}M`;\r\n\t  if (value >= 1000) return `$${(value / 1000).toFixed(1)}K`;\r\n\t  return value.toLocaleString();\r\n\t};\r\n\r\n\twatch(() => [\r\n\t  props.data,\r\n\t  props.compareData,\r\n\t  props.width,\r\n\t  props.height,\r\n\t  props.showYearMarkers,\r\n\t  props.teamColors\r\n\t], initChart, { deep: true });\r\n\r\n\tonMounted(initChart);\r\n</script>\r\n\r\n<style scoped>\r\n\t.sparkline-container {\r\n\t\tposition: relative;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t}\r\n\r\n\t.no-data-message {\r\n\t\tposition: absolute;\r\n\t\ttop: 50%;\r\n\t\tleft: 50%;\r\n\t\ttransform: translate(-50%, -50%);\r\n\t\tcolor: #ccc;\r\n\t\tfont-size: 12px;\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,GAAG,EAAC,gBAAgB;EAACC,KAAK,EAAC;;;EADjCC,GAAA;EAEuBD,KAAK,EAAC;;;uBAD5BE,mBAAA,CAIM,OAJNC,UAIM,G,CAHOC,IAAA,CAAAC,OAAO,I,cAAnBH,mBAAA,CAEM,OAFNI,UAEM,EAAAC,gBAAA,CADFH,IAAA,CAAAI,aAAa,oBAHnBC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}