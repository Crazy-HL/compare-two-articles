{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, onMounted, onUnmounted, nextTick, computed } from \"vue\";\nimport LoadingSpinner from \"./LoadingSpinner.vue\";\nimport ErrorDisplay from \"./ErrorDisplay.vue\";\nimport WikipediaContent from \"./WikipediaContent.vue\";\nimport TextPopup from \"./TextPopup.vue\";\nimport ArticleOutline from \"./ArticleOutline.vue\";\nimport * as d3 from \"d3\";\nimport bus from \"@/js/eventBus.js\";\nimport { parseInfoboxForComparison } from \"@/js/wikiInfoboxParser\";\nexport default {\n  __name: 'ParentComponent',\n  props: {\n    pageTitle: String,\n    divId: String,\n    selectContentClass: String,\n    linkedOutline: Array\n  },\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const props = __props;\n\n    // 原有状态\n    const pageHtml = ref(\"\");\n    const loading = ref(true);\n    const error = ref(\"\");\n    const selectedText = ref({});\n    const showPopup = ref({});\n    const divRef = ref(null);\n    const highlightedParagraphs = ref({});\n\n    // 新增调试状态\n    const debugMode = ref(false);\n    const debugText = ref(\"\");\n    const matchResult = ref(null);\n\n    // 计算属性\n    const matchStatusText = computed(() => {\n      if (!matchResult.value) return \"未测试\";\n      return matchResult.value.success ? \"匹配成功\" : \"匹配失败\";\n    });\n    const matchStatusClass = computed(() => {\n      return matchResult.value?.success ? \"match-success\" : \"match-fail\";\n    });\n\n    // 原有方法（完全保留）\n    const fetchWikipediaContent = async () => {\n      /* 原有实现 */\n    };\n    const injectWikipediaStyles = () => {\n      /* 原有实现 */\n    };\n    const handleHoverInfobox = _ref2 => {\n      let {\n        fieldKey,\n        infoboxTitle\n      } = _ref2;\n    } /* 原有实现 */;\n    const handleUnhoverInfobox = () => {\n      /* 原有实现 */\n    };\n    const clearInfoboxHighlights = () => {\n      /* 原有实现 */\n    };\n    const handleSelection = content => {\n      /* 原有实现 */\n    };\n    const handleSelectionWithSourceId = (content, sourceId, isTable) => {\n      /* 原有实现 */\n    };\n    const closePopup = () => {\n      /* 原有实现 */\n    };\n    const updatePopupPosition = () => {\n      /* 原有实现 */\n    };\n    const extractLinkedChapterContent = (sourceId, sourceContainerId) => {\n      /* 原有实现 */\n    };\n\n    // 修改后的高亮方法（新增智能匹配）\n    const highlightParagraphs = fieldKey => {\n      clearHighlights();\n      if (!divRef.value) return;\n\n      // 1. 尝试精准匹配\n      const exactMatches = getExactMatchesForField(fieldKey);\n      let matched = false;\n\n      // 先尝试原始精准匹配\n      for (const match of exactMatches) {\n        if (tryExactMatch(match)) {\n          matched = true;\n          break;\n        }\n      }\n\n      // 2. 失败后尝试智能段落匹配\n      if (!matched) {\n        for (const match of exactMatches) {\n          if (trySmartParagraphMatch(match)) {\n            matched = true;\n            break;\n          }\n        }\n      }\n\n      // 3. 最终回退到模糊匹配\n      if (!matched) {\n        highlightFuzzyMatches(fieldKey);\n      }\n    };\n\n    // 新增方法：智能段落匹配\n    const trySmartParagraphMatch = textToMatch => {\n      const contentElement = divRef.value.querySelector(\".wikipedia-content\");\n      if (!contentElement) return false;\n\n      // 获取标准化文本\n      const normalizedTarget = normalizeText(textToMatch);\n      let bestMatch = null;\n      let highestScore = 0;\n\n      // 遍历所有段落\n      const paragraphs = contentElement.querySelectorAll(\"p, li, td, th, div.section\");\n      paragraphs.forEach(para => {\n        const paraText = normalizeText(para.textContent);\n        const score = calculateSimilarity(normalizedTarget, paraText);\n        if (score > highestScore && score > 0.7) {\n          highestScore = score;\n          bestMatch = para;\n        }\n      });\n      if (bestMatch) {\n        highlightBestMatch(bestMatch, textToMatch);\n        return true;\n      }\n      return false;\n    };\n\n    // 新增辅助方法\n    const normalizeText = text => {\n      return text.toLowerCase().replace(/\\s+/g, \" \").replace(/[^\\w\\u4e00-\\u9fa5]/g, \"\") // 保留字母数字和汉字\n      .trim();\n    };\n    const calculateSimilarity = (a, b) => {\n      // 简单相似度计算 - 可根据需求替换更复杂算法\n      if (a === b) return 1.0;\n      if (a.length < 2 || b.length < 2) return 0.0;\n      const aBigrams = new Set();\n      for (let i = 0; i < a.length - 1; i++) {\n        aBigrams.add(a.substring(i, i + 2));\n      }\n      let intersectionSize = 0;\n      for (let i = 0; i < b.length - 1; i++) {\n        const bigram = b.substring(i, i + 2);\n        if (aBigrams.has(bigram)) {\n          intersectionSize++;\n        }\n      }\n      return 2.0 * intersectionSize / (a.length + b.length - 2);\n    };\n    const highlightBestMatch = (element, originalText) => {\n      // 创建临时容器处理HTML\n      const tempDiv = document.createElement(\"div\");\n      tempDiv.innerHTML = element.innerHTML;\n\n      // 标记所有文本节点\n      const textNodes = [];\n      const walker = document.createTreeWalker(tempDiv, NodeFilter.SHOW_TEXT, null, false);\n      let node;\n      while (node = walker.nextNode()) {\n        textNodes.push(node);\n      }\n\n      // 尝试找到最相似的文本片段\n      let bestNode = null;\n      let bestScore = 0;\n      const normalizedOriginal = normalizeText(originalText);\n      textNodes.forEach(node => {\n        const nodeText = normalizeText(node.nodeValue);\n        const score = calculateSimilarity(normalizedOriginal, nodeText);\n        if (score > bestScore) {\n          bestScore = score;\n          bestNode = node;\n        }\n      });\n      if (bestNode) {\n        // 高亮最佳匹配节点\n        const span = document.createElement(\"span\");\n        span.className = \"highlight-smart\";\n        span.textContent = bestNode.nodeValue;\n        bestNode.parentNode.replaceChild(span, bestNode);\n        element.innerHTML = tempDiv.innerHTML;\n\n        // 保存引用\n        if (!highlightedParagraphs.value[props.divId]) {\n          highlightedParagraphs.value[props.divId] = [];\n        }\n        highlightedParagraphs.value[props.divId].push(span);\n\n        // 滚动到视图\n        span.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"center\"\n        });\n        return true;\n      }\n      return false;\n    };\n\n    // 原有高亮方法（保持不变）\n    const tryExactMatch = textToHighlight => {\n      /* 原有实现 */\n    };\n    const highlightFuzzyMatches = fieldKey => {\n      /* 原有实现 */\n    };\n    const getExactMatchesForField = fieldKey => {\n      /* 原有实现 */\n    };\n    const getKeywordsForField = fieldKey => {\n      /* 原有实现 */\n    };\n    const clearHighlights = () => {\n      /* 原有实现 */\n    };\n\n    // 新增调试方法\n    const toggleDebugMode = () => {\n      debugMode.value = !debugMode.value;\n      if (!debugMode.value) {\n        matchResult.value = null;\n        clearHighlights();\n      }\n    };\n    const testTextMatch = () => {\n      if (!debugText.value.trim()) return;\n      clearHighlights();\n      matchResult.value = {\n        success: false\n      };\n\n      // 尝试精确匹配\n      if (tryExactMatch(debugText.value)) {\n        matchResult.value.success = true;\n        return;\n      }\n\n      // 尝试智能匹配\n      if (trySmartParagraphMatch(debugText.value)) {\n        matchResult.value.success = true;\n        return;\n      }\n\n      // 尝试模糊匹配\n      highlightFuzzyMatches(debugText.value);\n      matchResult.value.success = true;\n    };\n\n    // 原有生命周期（保持不变）\n    onMounted(() => {\n      fetchWikipediaContent();\n      if (divRef.value) {\n        divRef.value.addEventListener(\"scroll\", updatePopupPosition);\n      }\n      const hoverEvent = `hover-${props.divId === \"div1\" ? \"left\" : \"right\"}-infobox`;\n      const unhoverEvent = `unhover-${props.divId === \"div1\" ? \"left\" : \"right\"}-infobox`;\n      bus.on(hoverEvent, handleHoverInfobox);\n      bus.on(unhoverEvent, handleUnhoverInfobox);\n      bus.on(`${props.divId}Event`, _ref3 => {\n        let {\n          content,\n          sourceId\n        } = _ref3;\n        selectedText.value[props.divId] = content;\n        showPopup.value[props.divId] = true;\n        nextTick(() => {\n          updatePopupPosition();\n        });\n      });\n\n      // 新增事件监听\n      bus.on(`highlight-${props.divId}-paragraphs`, highlightParagraphs);\n      bus.on(`clear-${props.divId}-highlights`, clearHighlights);\n    });\n    onUnmounted(() => {\n      if (divRef.value) {\n        divRef.value.removeEventListener(\"scroll\", updatePopupPosition);\n      }\n      const hoverEvent = `hover-${props.divId === \"div1\" ? \"left\" : \"right\"}-infobox`;\n      const unhoverEvent = `unhover-${props.divId === \"div1\" ? \"left\" : \"right\"}-infobox`;\n      bus.off(hoverEvent, handleHoverInfobox);\n      bus.off(unhoverEvent, handleUnhoverInfobox);\n      bus.off(`${props.divId}Event`);\n\n      // 移除新增事件监听\n      bus.off(`highlight-${props.divId}-paragraphs`, highlightParagraphs);\n      bus.off(`clear-${props.divId}-highlights`, clearHighlights);\n    });\n    const __returned__ = {\n      props,\n      pageHtml,\n      loading,\n      error,\n      selectedText,\n      showPopup,\n      divRef,\n      highlightedParagraphs,\n      debugMode,\n      debugText,\n      matchResult,\n      matchStatusText,\n      matchStatusClass,\n      fetchWikipediaContent,\n      injectWikipediaStyles,\n      handleHoverInfobox,\n      handleUnhoverInfobox,\n      clearInfoboxHighlights,\n      handleSelection,\n      handleSelectionWithSourceId,\n      closePopup,\n      updatePopupPosition,\n      extractLinkedChapterContent,\n      highlightParagraphs,\n      trySmartParagraphMatch,\n      normalizeText,\n      calculateSimilarity,\n      highlightBestMatch,\n      tryExactMatch,\n      highlightFuzzyMatches,\n      getExactMatchesForField,\n      getKeywordsForField,\n      clearHighlights,\n      toggleDebugMode,\n      testTextMatch,\n      ref,\n      onMounted,\n      onUnmounted,\n      nextTick,\n      computed,\n      LoadingSpinner,\n      ErrorDisplay,\n      WikipediaContent,\n      TextPopup,\n      ArticleOutline,\n      get d3() {\n        return d3;\n      },\n      get bus() {\n        return bus;\n      },\n      get parseInfoboxForComparison() {\n        return parseInfoboxForComparison;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","nextTick","computed","LoadingSpinner","ErrorDisplay","WikipediaContent","TextPopup","ArticleOutline","d3","bus","parseInfoboxForComparison","props","__props","pageHtml","loading","error","selectedText","showPopup","divRef","highlightedParagraphs","debugMode","debugText","matchResult","matchStatusText","value","success","matchStatusClass","fetchWikipediaContent","injectWikipediaStyles","handleHoverInfobox","_ref2","fieldKey","infoboxTitle","handleUnhoverInfobox","clearInfoboxHighlights","handleSelection","content","handleSelectionWithSourceId","sourceId","isTable","closePopup","updatePopupPosition","extractLinkedChapterContent","sourceContainerId","highlightParagraphs","clearHighlights","exactMatches","getExactMatchesForField","matched","match","tryExactMatch","trySmartParagraphMatch","highlightFuzzyMatches","textToMatch","contentElement","querySelector","normalizedTarget","normalizeText","bestMatch","highestScore","paragraphs","querySelectorAll","forEach","para","paraText","textContent","score","calculateSimilarity","highlightBestMatch","text","toLowerCase","replace","trim","a","b","length","aBigrams","Set","i","add","substring","intersectionSize","bigram","has","element","originalText","tempDiv","document","createElement","innerHTML","textNodes","walker","createTreeWalker","NodeFilter","SHOW_TEXT","node","nextNode","push","bestNode","bestScore","normalizedOriginal","nodeText","nodeValue","span","className","parentNode","replaceChild","divId","scrollIntoView","behavior","block","textToHighlight","getKeywordsForField","toggleDebugMode","testTextMatch","addEventListener","hoverEvent","unhoverEvent","on","_ref3","removeEventListener","off"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/ParentComponent.vue"],"sourcesContent":["<template>\r\n\t<div :class=\"['div0', selectContentClass]\" :id=\"divId\" ref=\"divRef\">\r\n\t\t<h1>{{ props.pageTitle }}</h1>\r\n\r\n\t\t<LoadingSpinner v-if=\"loading\" />\r\n\r\n\t\t<ErrorDisplay\r\n\t\t\tv-else-if=\"error\"\r\n\t\t\t:message=\"error\"\r\n\t\t\t@retry=\"fetchWikipediaContent\" />\r\n\r\n\t\t<WikipediaContent v-else :content=\"pageHtml\" @select=\"handleSelection\" />\r\n\r\n\t\t<TextPopup\r\n\t\t\t:visible=\"showPopup[divId]\"\r\n\t\t\t:content=\"selectedText[divId]\"\r\n\t\t\t:containerClass=\"\r\n\t\t\t\tdivId === 'div1' ? 'chart-container1' : 'chart-container2'\r\n\t\t\t\"\r\n\t\t\t:containerRef=\"divRef\"\r\n\t\t\t@close=\"closePopup\" />\r\n\r\n\t\t<ArticleOutline :content=\"pageHtml\" :divId=\"divId\" />\r\n\r\n\t\t<!-- 新增匹配调试工具 -->\r\n\t\t<div v-if=\"!loading && !error\" class=\"match-debug-tool\">\r\n\t\t\t<button @click=\"toggleDebugMode\">\r\n\t\t\t\t{{ debugMode ? \"关闭调试\" : \"开启匹配调试\" }}\r\n\t\t\t</button>\r\n\t\t\t<div v-if=\"debugMode\" class=\"debug-panel\">\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tv-model=\"debugText\"\r\n\t\t\t\t\tplaceholder=\"粘贴需要测试匹配的文本\"></textarea>\r\n\t\t\t\t<button @click=\"testTextMatch\">测试匹配</button>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t匹配状态: <span :class=\"matchStatusClass\">{{ matchStatusText }}</span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted, nextTick, computed } from \"vue\";\r\n\timport LoadingSpinner from \"./LoadingSpinner.vue\";\r\n\timport ErrorDisplay from \"./ErrorDisplay.vue\";\r\n\timport WikipediaContent from \"./WikipediaContent.vue\";\r\n\timport TextPopup from \"./TextPopup.vue\";\r\n\timport ArticleOutline from \"./ArticleOutline.vue\";\r\n\timport * as d3 from \"d3\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\timport { parseInfoboxForComparison } from \"@/js/wikiInfoboxParser\";\r\n\r\n\tconst props = defineProps({\r\n\t\tpageTitle: String,\r\n\t\tdivId: String,\r\n\t\tselectContentClass: String,\r\n\t\tlinkedOutline: Array\r\n\t});\r\n\r\n\t// 原有状态\r\n\tconst pageHtml = ref(\"\");\r\n\tconst loading = ref(true);\r\n\tconst error = ref(\"\");\r\n\tconst selectedText = ref({});\r\n\tconst showPopup = ref({});\r\n\tconst divRef = ref(null);\r\n\tconst highlightedParagraphs = ref({});\r\n\r\n\t// 新增调试状态\r\n\tconst debugMode = ref(false);\r\n\tconst debugText = ref(\"\");\r\n\tconst matchResult = ref(null);\r\n\r\n\t// 计算属性\r\n\tconst matchStatusText = computed(() => {\r\n\t\tif (!matchResult.value) return \"未测试\";\r\n\t\treturn matchResult.value.success ? \"匹配成功\" : \"匹配失败\";\r\n\t});\r\n\r\n\tconst matchStatusClass = computed(() => {\r\n\t\treturn matchResult.value?.success ? \"match-success\" : \"match-fail\";\r\n\t});\r\n\r\n\t// 原有方法（完全保留）\r\n\tconst fetchWikipediaContent = async () => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst injectWikipediaStyles = () => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst handleHoverInfobox = ({ fieldKey, infoboxTitle }) => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst handleUnhoverInfobox = () => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst clearInfoboxHighlights = () => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst handleSelection = content => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst handleSelectionWithSourceId = (content, sourceId, isTable) => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst closePopup = () => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst updatePopupPosition = () => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst extractLinkedChapterContent = (sourceId, sourceContainerId) => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\r\n\t// 修改后的高亮方法（新增智能匹配）\r\n\tconst highlightParagraphs = fieldKey => {\r\n\t\tclearHighlights();\r\n\r\n\t\tif (!divRef.value) return;\r\n\r\n\t\t// 1. 尝试精准匹配\r\n\t\tconst exactMatches = getExactMatchesForField(fieldKey);\r\n\t\tlet matched = false;\r\n\r\n\t\t// 先尝试原始精准匹配\r\n\t\tfor (const match of exactMatches) {\r\n\t\t\tif (tryExactMatch(match)) {\r\n\t\t\t\tmatched = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 2. 失败后尝试智能段落匹配\r\n\t\tif (!matched) {\r\n\t\t\tfor (const match of exactMatches) {\r\n\t\t\t\tif (trySmartParagraphMatch(match)) {\r\n\t\t\t\t\tmatched = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 3. 最终回退到模糊匹配\r\n\t\tif (!matched) {\r\n\t\t\thighlightFuzzyMatches(fieldKey);\r\n\t\t}\r\n\t};\r\n\r\n\t// 新增方法：智能段落匹配\r\n\tconst trySmartParagraphMatch = textToMatch => {\r\n\t\tconst contentElement = divRef.value.querySelector(\".wikipedia-content\");\r\n\t\tif (!contentElement) return false;\r\n\r\n\t\t// 获取标准化文本\r\n\t\tconst normalizedTarget = normalizeText(textToMatch);\r\n\t\tlet bestMatch = null;\r\n\t\tlet highestScore = 0;\r\n\r\n\t\t// 遍历所有段落\r\n\t\tconst paragraphs = contentElement.querySelectorAll(\r\n\t\t\t\"p, li, td, th, div.section\"\r\n\t\t);\r\n\t\tparagraphs.forEach(para => {\r\n\t\t\tconst paraText = normalizeText(para.textContent);\r\n\t\t\tconst score = calculateSimilarity(normalizedTarget, paraText);\r\n\r\n\t\t\tif (score > highestScore && score > 0.7) {\r\n\t\t\t\thighestScore = score;\r\n\t\t\t\tbestMatch = para;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (bestMatch) {\r\n\t\t\thighlightBestMatch(bestMatch, textToMatch);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t// 新增辅助方法\r\n\tconst normalizeText = text => {\r\n\t\treturn text\r\n\t\t\t.toLowerCase()\r\n\t\t\t.replace(/\\s+/g, \" \")\r\n\t\t\t.replace(/[^\\w\\u4e00-\\u9fa5]/g, \"\") // 保留字母数字和汉字\r\n\t\t\t.trim();\r\n\t};\r\n\r\n\tconst calculateSimilarity = (a, b) => {\r\n\t\t// 简单相似度计算 - 可根据需求替换更复杂算法\r\n\t\tif (a === b) return 1.0;\r\n\t\tif (a.length < 2 || b.length < 2) return 0.0;\r\n\r\n\t\tconst aBigrams = new Set();\r\n\t\tfor (let i = 0; i < a.length - 1; i++) {\r\n\t\t\taBigrams.add(a.substring(i, i + 2));\r\n\t\t}\r\n\r\n\t\tlet intersectionSize = 0;\r\n\t\tfor (let i = 0; i < b.length - 1; i++) {\r\n\t\t\tconst bigram = b.substring(i, i + 2);\r\n\t\t\tif (aBigrams.has(bigram)) {\r\n\t\t\t\tintersectionSize++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (2.0 * intersectionSize) / (a.length + b.length - 2);\r\n\t};\r\n\r\n\tconst highlightBestMatch = (element, originalText) => {\r\n\t\t// 创建临时容器处理HTML\r\n\t\tconst tempDiv = document.createElement(\"div\");\r\n\t\ttempDiv.innerHTML = element.innerHTML;\r\n\r\n\t\t// 标记所有文本节点\r\n\t\tconst textNodes = [];\r\n\t\tconst walker = document.createTreeWalker(\r\n\t\t\ttempDiv,\r\n\t\t\tNodeFilter.SHOW_TEXT,\r\n\t\t\tnull,\r\n\t\t\tfalse\r\n\t\t);\r\n\r\n\t\tlet node;\r\n\t\twhile ((node = walker.nextNode())) {\r\n\t\t\ttextNodes.push(node);\r\n\t\t}\r\n\r\n\t\t// 尝试找到最相似的文本片段\r\n\t\tlet bestNode = null;\r\n\t\tlet bestScore = 0;\r\n\t\tconst normalizedOriginal = normalizeText(originalText);\r\n\r\n\t\ttextNodes.forEach(node => {\r\n\t\t\tconst nodeText = normalizeText(node.nodeValue);\r\n\t\t\tconst score = calculateSimilarity(normalizedOriginal, nodeText);\r\n\t\t\tif (score > bestScore) {\r\n\t\t\t\tbestScore = score;\r\n\t\t\t\tbestNode = node;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (bestNode) {\r\n\t\t\t// 高亮最佳匹配节点\r\n\t\t\tconst span = document.createElement(\"span\");\r\n\t\t\tspan.className = \"highlight-smart\";\r\n\t\t\tspan.textContent = bestNode.nodeValue;\r\n\t\t\tbestNode.parentNode.replaceChild(span, bestNode);\r\n\r\n\t\t\telement.innerHTML = tempDiv.innerHTML;\r\n\r\n\t\t\t// 保存引用\r\n\t\t\tif (!highlightedParagraphs.value[props.divId]) {\r\n\t\t\t\thighlightedParagraphs.value[props.divId] = [];\r\n\t\t\t}\r\n\t\t\thighlightedParagraphs.value[props.divId].push(span);\r\n\r\n\t\t\t// 滚动到视图\r\n\t\t\tspan.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t};\r\n\r\n\t// 原有高亮方法（保持不变）\r\n\tconst tryExactMatch = textToHighlight => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst highlightFuzzyMatches = fieldKey => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst getExactMatchesForField = fieldKey => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst getKeywordsForField = fieldKey => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst clearHighlights = () => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\r\n\t// 新增调试方法\r\n\tconst toggleDebugMode = () => {\r\n\t\tdebugMode.value = !debugMode.value;\r\n\t\tif (!debugMode.value) {\r\n\t\t\tmatchResult.value = null;\r\n\t\t\tclearHighlights();\r\n\t\t}\r\n\t};\r\n\r\n\tconst testTextMatch = () => {\r\n\t\tif (!debugText.value.trim()) return;\r\n\r\n\t\tclearHighlights();\r\n\t\tmatchResult.value = { success: false };\r\n\r\n\t\t// 尝试精确匹配\r\n\t\tif (tryExactMatch(debugText.value)) {\r\n\t\t\tmatchResult.value.success = true;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 尝试智能匹配\r\n\t\tif (trySmartParagraphMatch(debugText.value)) {\r\n\t\t\tmatchResult.value.success = true;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 尝试模糊匹配\r\n\t\thighlightFuzzyMatches(debugText.value);\r\n\t\tmatchResult.value.success = true;\r\n\t};\r\n\r\n\t// 原有生命周期（保持不变）\r\n\tonMounted(() => {\r\n\t\tfetchWikipediaContent();\r\n\r\n\t\tif (divRef.value) {\r\n\t\t\tdivRef.value.addEventListener(\"scroll\", updatePopupPosition);\r\n\t\t}\r\n\r\n\t\tconst hoverEvent = `hover-${\r\n\t\t\tprops.divId === \"div1\" ? \"left\" : \"right\"\r\n\t\t}-infobox`;\r\n\t\tconst unhoverEvent = `unhover-${\r\n\t\t\tprops.divId === \"div1\" ? \"left\" : \"right\"\r\n\t\t}-infobox`;\r\n\r\n\t\tbus.on(hoverEvent, handleHoverInfobox);\r\n\t\tbus.on(unhoverEvent, handleUnhoverInfobox);\r\n\t\tbus.on(`${props.divId}Event`, ({ content, sourceId }) => {\r\n\t\t\tselectedText.value[props.divId] = content;\r\n\t\t\tshowPopup.value[props.divId] = true;\r\n\t\t\tnextTick(() => {\r\n\t\t\t\tupdatePopupPosition();\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t// 新增事件监听\r\n\t\tbus.on(`highlight-${props.divId}-paragraphs`, highlightParagraphs);\r\n\t\tbus.on(`clear-${props.divId}-highlights`, clearHighlights);\r\n\t});\r\n\r\n\tonUnmounted(() => {\r\n\t\tif (divRef.value) {\r\n\t\t\tdivRef.value.removeEventListener(\"scroll\", updatePopupPosition);\r\n\t\t}\r\n\r\n\t\tconst hoverEvent = `hover-${\r\n\t\t\tprops.divId === \"div1\" ? \"left\" : \"right\"\r\n\t\t}-infobox`;\r\n\t\tconst unhoverEvent = `unhover-${\r\n\t\t\tprops.divId === \"div1\" ? \"left\" : \"right\"\r\n\t\t}-infobox`;\r\n\r\n\t\tbus.off(hoverEvent, handleHoverInfobox);\r\n\t\tbus.off(unhoverEvent, handleUnhoverInfobox);\r\n\t\tbus.off(`${props.divId}Event`);\r\n\r\n\t\t// 移除新增事件监听\r\n\t\tbus.off(`highlight-${props.divId}-paragraphs`, highlightParagraphs);\r\n\t\tbus.off(`clear-${props.divId}-highlights`, clearHighlights);\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t/* 原有样式保持不变 */\r\n\th1 {\r\n\t\ttext-align: center;\r\n\t\tmargin-bottom: 20px;\r\n\t\tcolor: #2c3e50;\r\n\t}\r\n\r\n\t.div0 {\r\n\t\tposition: relative;\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t\tmargin: 10px;\r\n\t}\r\n\r\n\t#div1,\r\n\t#div3 {\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t\tmargin: 10px;\r\n\t}\r\n\r\n\t.showHtml {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\toverflow: auto;\r\n\t}\r\n\r\n\t::selection {\r\n\t\tbackground-color: rgba(255, 255, 0, 0.3);\r\n\t\tcolor: inherit;\r\n\t}\r\n\r\n\t/* 新增调试工具样式 */\r\n\t.match-debug-tool {\r\n\t\tposition: fixed;\r\n\t\tbottom: 20px;\r\n\t\tright: 20px;\r\n\t\tz-index: 1000;\r\n\t}\r\n\r\n\t.match-debug-tool button {\r\n\t\tpadding: 8px 12px;\r\n\t\tbackground: #2196f3;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tborder-radius: 4px;\r\n\t\tcursor: pointer;\r\n\t}\r\n\r\n\t.debug-panel {\r\n\t\tmargin-top: 10px;\r\n\t\tpadding: 15px;\r\n\t\tbackground: white;\r\n\t\tborder-radius: 8px;\r\n\t\tbox-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\r\n\t}\r\n\r\n\t.debug-panel textarea {\r\n\t\twidth: 100%;\r\n\t\theight: 100px;\r\n\t\tmargin: 10px 0;\r\n\t}\r\n\r\n\t.match-success {\r\n\t\tcolor: #4caf50;\r\n\t\tfont-weight: bold;\r\n\t}\r\n\r\n\t.match-fail {\r\n\t\tcolor: #f44336;\r\n\t\tfont-weight: bold;\r\n\t}\r\n</style>\r\n\r\n<style>\r\n\t/* 原有全局样式保持不变 */\r\n\t.infobox tr.infobox-highlight th,\r\n\t.infobox tr.infobox-highlight td,\r\n\t.sidebar tr.infobox-highlight th,\r\n\t.sidebar tr.infobox-highlight td,\r\n\t.toccolours tr.infobox-highlight th,\r\n\t.toccolours tr.infobox-highlight td {\r\n\t\tbackground-color: #fffacd !important;\r\n\t\tbox-shadow: 0 0 8px rgba(255, 235, 59, 0.8) !important;\r\n\t\ttransition: all 0.15s ease !important;\r\n\t}\r\n\r\n\t.highlight-exact {\r\n\t\tbackground-color: rgba(255, 235, 59, 0.6);\r\n\t\tpadding: 2px 0;\r\n\t\tborder-radius: 3px;\r\n\t\tbox-shadow: 0 0 0 2px rgba(255, 235, 59, 0.3);\r\n\t\ttransition: all 0.3s ease;\r\n\t}\r\n\r\n\t.highlight-smart {\r\n\t\tbackground-color: rgba(100, 221, 23, 0.4);\r\n\t\tpadding: 2px 0;\r\n\t\tborder-radius: 3px;\r\n\t\tbox-shadow: 0 0 0 2px rgba(76, 175, 80, 0.3);\r\n\t\ttransition: all 0.3s ease;\r\n\t}\r\n\r\n\t.highlight-fuzzy {\r\n\t\tbackground-color: rgba(255, 152, 0, 0.4);\r\n\t\tpadding: 2px 0;\r\n\t\tborder-radius: 3px;\r\n\t\ttransition: all 0.3s ease;\r\n\t}\r\n</style>\r\n"],"mappings":";;;;;;;;AA2CC,SAASA,GAAG,EAAEC,SAAS,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,KAAK;AACrE,OAAOC,cAAc,MAAM,sBAAsB;AACjD,OAAOC,YAAY,MAAM,oBAAoB;AAC7C,OAAOC,gBAAgB,MAAM,wBAAwB;AACrD,OAAOC,SAAS,MAAM,iBAAiB;AACvC,OAAOC,cAAc,MAAM,sBAAsB;AACjD,OAAO,KAAKC,EAAE,MAAM,IAAI;AACxB,OAAOC,GAAG,MAAM,kBAAkB;AAClC,SAASC,yBAAyB,QAAQ,wBAAwB;;;;;;;;;;;;;;IAElE,MAAMC,KAAK,GAAGC,OAKZ;;IAEF;IACA,MAAMC,QAAQ,GAAGf,GAAG,CAAC,EAAE,CAAC;IACxB,MAAMgB,OAAO,GAAGhB,GAAG,CAAC,IAAI,CAAC;IACzB,MAAMiB,KAAK,GAAGjB,GAAG,CAAC,EAAE,CAAC;IACrB,MAAMkB,YAAY,GAAGlB,GAAG,CAAC,CAAC,CAAC,CAAC;IAC5B,MAAMmB,SAAS,GAAGnB,GAAG,CAAC,CAAC,CAAC,CAAC;IACzB,MAAMoB,MAAM,GAAGpB,GAAG,CAAC,IAAI,CAAC;IACxB,MAAMqB,qBAAqB,GAAGrB,GAAG,CAAC,CAAC,CAAC,CAAC;;IAErC;IACA,MAAMsB,SAAS,GAAGtB,GAAG,CAAC,KAAK,CAAC;IAC5B,MAAMuB,SAAS,GAAGvB,GAAG,CAAC,EAAE,CAAC;IACzB,MAAMwB,WAAW,GAAGxB,GAAG,CAAC,IAAI,CAAC;;IAE7B;IACA,MAAMyB,eAAe,GAAGrB,QAAQ,CAAC,MAAM;MACtC,IAAI,CAACoB,WAAW,CAACE,KAAK,EAAE,OAAO,KAAK;MACpC,OAAOF,WAAW,CAACE,KAAK,CAACC,OAAO,GAAG,MAAM,GAAG,MAAM;IACnD,CAAC,CAAC;IAEF,MAAMC,gBAAgB,GAAGxB,QAAQ,CAAC,MAAM;MACvC,OAAOoB,WAAW,CAACE,KAAK,EAAEC,OAAO,GAAG,eAAe,GAAG,YAAY;IACnE,CAAC,CAAC;;IAEF;IACA,MAAME,qBAAqB,GAAG,MAAAA,CAAA,KAAY;MACzC;IAAA,CACA;IACD,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;MACnC;IAAA,CACA;IACD,MAAMC,kBAAkB,GAAGC,KAAA,IAAgC;MAAA,IAA/B;QAAEC,QAAQ;QAAEC;MAAa,CAAC,GAAAF,KAAA;IAEtD,CAAC,CADA,UACA;IACD,MAAMG,oBAAoB,GAAGA,CAAA,KAAM;MAClC;IAAA,CACA;IACD,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;MACpC;IAAA,CACA;IACD,MAAMC,eAAe,GAAGC,OAAO,IAAI;MAClC;IAAA,CACA;IACD,MAAMC,2BAA2B,GAAGA,CAACD,OAAO,EAAEE,QAAQ,EAAEC,OAAO,KAAK;MACnE;IAAA,CACA;IACD,MAAMC,UAAU,GAAGA,CAAA,KAAM;MACxB;IAAA,CACA;IACD,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;MACjC;IAAA,CACA;IACD,MAAMC,2BAA2B,GAAGA,CAACJ,QAAQ,EAAEK,iBAAiB,KAAK;MACpE;IAAA,CACA;;IAED;IACA,MAAMC,mBAAmB,GAAGb,QAAQ,IAAI;MACvCc,eAAe,CAAC,CAAC;MAEjB,IAAI,CAAC3B,MAAM,CAACM,KAAK,EAAE;;MAEnB;MACA,MAAMsB,YAAY,GAAGC,uBAAuB,CAAChB,QAAQ,CAAC;MACtD,IAAIiB,OAAO,GAAG,KAAK;;MAEnB;MACA,KAAK,MAAMC,KAAK,IAAIH,YAAY,EAAE;QACjC,IAAII,aAAa,CAACD,KAAK,CAAC,EAAE;UACzBD,OAAO,GAAG,IAAI;UACd;QACD;MACD;;MAEA;MACA,IAAI,CAACA,OAAO,EAAE;QACb,KAAK,MAAMC,KAAK,IAAIH,YAAY,EAAE;UACjC,IAAIK,sBAAsB,CAACF,KAAK,CAAC,EAAE;YAClCD,OAAO,GAAG,IAAI;YACd;UACD;QACD;MACD;;MAEA;MACA,IAAI,CAACA,OAAO,EAAE;QACbI,qBAAqB,CAACrB,QAAQ,CAAC;MAChC;IACD,CAAC;;IAED;IACA,MAAMoB,sBAAsB,GAAGE,WAAW,IAAI;MAC7C,MAAMC,cAAc,GAAGpC,MAAM,CAACM,KAAK,CAAC+B,aAAa,CAAC,oBAAoB,CAAC;MACvE,IAAI,CAACD,cAAc,EAAE,OAAO,KAAK;;MAEjC;MACA,MAAME,gBAAgB,GAAGC,aAAa,CAACJ,WAAW,CAAC;MACnD,IAAIK,SAAS,GAAG,IAAI;MACpB,IAAIC,YAAY,GAAG,CAAC;;MAEpB;MACA,MAAMC,UAAU,GAAGN,cAAc,CAACO,gBAAgB,CACjD,4BACD,CAAC;MACDD,UAAU,CAACE,OAAO,CAACC,IAAI,IAAI;QAC1B,MAAMC,QAAQ,GAAGP,aAAa,CAACM,IAAI,CAACE,WAAW,CAAC;QAChD,MAAMC,KAAK,GAAGC,mBAAmB,CAACX,gBAAgB,EAAEQ,QAAQ,CAAC;QAE7D,IAAIE,KAAK,GAAGP,YAAY,IAAIO,KAAK,GAAG,GAAG,EAAE;UACxCP,YAAY,GAAGO,KAAK;UACpBR,SAAS,GAAGK,IAAI;QACjB;MACD,CAAC,CAAC;MAEF,IAAIL,SAAS,EAAE;QACdU,kBAAkB,CAACV,SAAS,EAAEL,WAAW,CAAC;QAC1C,OAAO,IAAI;MACZ;MACA,OAAO,KAAK;IACb,CAAC;;IAED;IACA,MAAMI,aAAa,GAAGY,IAAI,IAAI;MAC7B,OAAOA,IAAI,CACTC,WAAW,CAAC,CAAC,CACbC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CACpBA,OAAO,CAAC,qBAAqB,EAAE,EAAE,CAAC,CAAC;MAAA,CACnCC,IAAI,CAAC,CAAC;IACT,CAAC;IAED,MAAML,mBAAmB,GAAGA,CAACM,CAAC,EAAEC,CAAC,KAAK;MACrC;MACA,IAAID,CAAC,KAAKC,CAAC,EAAE,OAAO,GAAG;MACvB,IAAID,CAAC,CAACE,MAAM,GAAG,CAAC,IAAID,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE,OAAO,GAAG;MAE5C,MAAMC,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAAC;MAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,CAAC,CAACE,MAAM,GAAG,CAAC,EAAEG,CAAC,EAAE,EAAE;QACtCF,QAAQ,CAACG,GAAG,CAACN,CAAC,CAACO,SAAS,CAACF,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC,CAAC;MACpC;MAEA,IAAIG,gBAAgB,GAAG,CAAC;MACxB,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,CAAC,CAACC,MAAM,GAAG,CAAC,EAAEG,CAAC,EAAE,EAAE;QACtC,MAAMI,MAAM,GAAGR,CAAC,CAACM,SAAS,CAACF,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC;QACpC,IAAIF,QAAQ,CAACO,GAAG,CAACD,MAAM,CAAC,EAAE;UACzBD,gBAAgB,EAAE;QACnB;MACD;MAEA,OAAQ,GAAG,GAAGA,gBAAgB,IAAKR,CAAC,CAACE,MAAM,GAAGD,CAAC,CAACC,MAAM,GAAG,CAAC,CAAC;IAC5D,CAAC;IAED,MAAMP,kBAAkB,GAAGA,CAACgB,OAAO,EAAEC,YAAY,KAAK;MACrD;MACA,MAAMC,OAAO,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MAC7CF,OAAO,CAACG,SAAS,GAAGL,OAAO,CAACK,SAAS;;MAErC;MACA,MAAMC,SAAS,GAAG,EAAE;MACpB,MAAMC,MAAM,GAAGJ,QAAQ,CAACK,gBAAgB,CACvCN,OAAO,EACPO,UAAU,CAACC,SAAS,EACpB,IAAI,EACJ,KACD,CAAC;MAED,IAAIC,IAAI;MACR,OAAQA,IAAI,GAAGJ,MAAM,CAACK,QAAQ,CAAC,CAAC,EAAG;QAClCN,SAAS,CAACO,IAAI,CAACF,IAAI,CAAC;MACrB;;MAEA;MACA,IAAIG,QAAQ,GAAG,IAAI;MACnB,IAAIC,SAAS,GAAG,CAAC;MACjB,MAAMC,kBAAkB,GAAG3C,aAAa,CAAC4B,YAAY,CAAC;MAEtDK,SAAS,CAAC5B,OAAO,CAACiC,IAAI,IAAI;QACzB,MAAMM,QAAQ,GAAG5C,aAAa,CAACsC,IAAI,CAACO,SAAS,CAAC;QAC9C,MAAMpC,KAAK,GAAGC,mBAAmB,CAACiC,kBAAkB,EAAEC,QAAQ,CAAC;QAC/D,IAAInC,KAAK,GAAGiC,SAAS,EAAE;UACtBA,SAAS,GAAGjC,KAAK;UACjBgC,QAAQ,GAAGH,IAAI;QAChB;MACD,CAAC,CAAC;MAEF,IAAIG,QAAQ,EAAE;QACb;QACA,MAAMK,IAAI,GAAGhB,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;QAC3Ce,IAAI,CAACC,SAAS,GAAG,iBAAiB;QAClCD,IAAI,CAACtC,WAAW,GAAGiC,QAAQ,CAACI,SAAS;QACrCJ,QAAQ,CAACO,UAAU,CAACC,YAAY,CAACH,IAAI,EAAEL,QAAQ,CAAC;QAEhDd,OAAO,CAACK,SAAS,GAAGH,OAAO,CAACG,SAAS;;QAErC;QACA,IAAI,CAACtE,qBAAqB,CAACK,KAAK,CAACb,KAAK,CAACgG,KAAK,CAAC,EAAE;UAC9CxF,qBAAqB,CAACK,KAAK,CAACb,KAAK,CAACgG,KAAK,CAAC,GAAG,EAAE;QAC9C;QACAxF,qBAAqB,CAACK,KAAK,CAACb,KAAK,CAACgG,KAAK,CAAC,CAACV,IAAI,CAACM,IAAI,CAAC;;QAEnD;QACAA,IAAI,CAACK,cAAc,CAAC;UAAEC,QAAQ,EAAE,QAAQ;UAAEC,KAAK,EAAE;QAAS,CAAC,CAAC;QAC5D,OAAO,IAAI;MACZ;MAEA,OAAO,KAAK;IACb,CAAC;;IAED;IACA,MAAM5D,aAAa,GAAG6D,eAAe,IAAI;MACxC;IAAA,CACA;IACD,MAAM3D,qBAAqB,GAAGrB,QAAQ,IAAI;MACzC;IAAA,CACA;IACD,MAAMgB,uBAAuB,GAAGhB,QAAQ,IAAI;MAC3C;IAAA,CACA;IACD,MAAMiF,mBAAmB,GAAGjF,QAAQ,IAAI;MACvC;IAAA,CACA;IACD,MAAMc,eAAe,GAAGA,CAAA,KAAM;MAC7B;IAAA,CACA;;IAED;IACA,MAAMoE,eAAe,GAAGA,CAAA,KAAM;MAC7B7F,SAAS,CAACI,KAAK,GAAG,CAACJ,SAAS,CAACI,KAAK;MAClC,IAAI,CAACJ,SAAS,CAACI,KAAK,EAAE;QACrBF,WAAW,CAACE,KAAK,GAAG,IAAI;QACxBqB,eAAe,CAAC,CAAC;MAClB;IACD,CAAC;IAED,MAAMqE,aAAa,GAAGA,CAAA,KAAM;MAC3B,IAAI,CAAC7F,SAAS,CAACG,KAAK,CAACgD,IAAI,CAAC,CAAC,EAAE;MAE7B3B,eAAe,CAAC,CAAC;MACjBvB,WAAW,CAACE,KAAK,GAAG;QAAEC,OAAO,EAAE;MAAM,CAAC;;MAEtC;MACA,IAAIyB,aAAa,CAAC7B,SAAS,CAACG,KAAK,CAAC,EAAE;QACnCF,WAAW,CAACE,KAAK,CAACC,OAAO,GAAG,IAAI;QAChC;MACD;;MAEA;MACA,IAAI0B,sBAAsB,CAAC9B,SAAS,CAACG,KAAK,CAAC,EAAE;QAC5CF,WAAW,CAACE,KAAK,CAACC,OAAO,GAAG,IAAI;QAChC;MACD;;MAEA;MACA2B,qBAAqB,CAAC/B,SAAS,CAACG,KAAK,CAAC;MACtCF,WAAW,CAACE,KAAK,CAACC,OAAO,GAAG,IAAI;IACjC,CAAC;;IAED;IACA1B,SAAS,CAAC,MAAM;MACf4B,qBAAqB,CAAC,CAAC;MAEvB,IAAIT,MAAM,CAACM,KAAK,EAAE;QACjBN,MAAM,CAACM,KAAK,CAAC2F,gBAAgB,CAAC,QAAQ,EAAE1E,mBAAmB,CAAC;MAC7D;MAEA,MAAM2E,UAAU,GAAG,SAClBzG,KAAK,CAACgG,KAAK,KAAK,MAAM,GAAG,MAAM,GAAG,OAAO,UAChC;MACV,MAAMU,YAAY,GAAG,WACpB1G,KAAK,CAACgG,KAAK,KAAK,MAAM,GAAG,MAAM,GAAG,OAAO,UAChC;MAEVlG,GAAG,CAAC6G,EAAE,CAACF,UAAU,EAAEvF,kBAAkB,CAAC;MACtCpB,GAAG,CAAC6G,EAAE,CAACD,YAAY,EAAEpF,oBAAoB,CAAC;MAC1CxB,GAAG,CAAC6G,EAAE,CAAC,GAAG3G,KAAK,CAACgG,KAAK,OAAO,EAAEY,KAAA,IAA2B;QAAA,IAA1B;UAAEnF,OAAO;UAAEE;QAAS,CAAC,GAAAiF,KAAA;QACnDvG,YAAY,CAACQ,KAAK,CAACb,KAAK,CAACgG,KAAK,CAAC,GAAGvE,OAAO;QACzCnB,SAAS,CAACO,KAAK,CAACb,KAAK,CAACgG,KAAK,CAAC,GAAG,IAAI;QACnC1G,QAAQ,CAAC,MAAM;UACdwC,mBAAmB,CAAC,CAAC;QACtB,CAAC,CAAC;MACH,CAAC,CAAC;;MAEF;MACAhC,GAAG,CAAC6G,EAAE,CAAC,aAAa3G,KAAK,CAACgG,KAAK,aAAa,EAAE/D,mBAAmB,CAAC;MAClEnC,GAAG,CAAC6G,EAAE,CAAC,SAAS3G,KAAK,CAACgG,KAAK,aAAa,EAAE9D,eAAe,CAAC;IAC3D,CAAC,CAAC;IAEF7C,WAAW,CAAC,MAAM;MACjB,IAAIkB,MAAM,CAACM,KAAK,EAAE;QACjBN,MAAM,CAACM,KAAK,CAACgG,mBAAmB,CAAC,QAAQ,EAAE/E,mBAAmB,CAAC;MAChE;MAEA,MAAM2E,UAAU,GAAG,SAClBzG,KAAK,CAACgG,KAAK,KAAK,MAAM,GAAG,MAAM,GAAG,OAAO,UAChC;MACV,MAAMU,YAAY,GAAG,WACpB1G,KAAK,CAACgG,KAAK,KAAK,MAAM,GAAG,MAAM,GAAG,OAAO,UAChC;MAEVlG,GAAG,CAACgH,GAAG,CAACL,UAAU,EAAEvF,kBAAkB,CAAC;MACvCpB,GAAG,CAACgH,GAAG,CAACJ,YAAY,EAAEpF,oBAAoB,CAAC;MAC3CxB,GAAG,CAACgH,GAAG,CAAC,GAAG9G,KAAK,CAACgG,KAAK,OAAO,CAAC;;MAE9B;MACAlG,GAAG,CAACgH,GAAG,CAAC,aAAa9G,KAAK,CAACgG,KAAK,aAAa,EAAE/D,mBAAmB,CAAC;MACnEnC,GAAG,CAACgH,GAAG,CAAC,SAAS9G,KAAK,CAACgG,KAAK,aAAa,EAAE9D,eAAe,CAAC;IAC5D,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}