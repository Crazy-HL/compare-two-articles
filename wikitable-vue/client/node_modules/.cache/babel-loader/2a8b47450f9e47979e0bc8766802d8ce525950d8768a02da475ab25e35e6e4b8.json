{"ast":null,"code":"import { toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-0c150cb4\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  ref: \"chartContainer\",\n  class: \"sparkline-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"no-data-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [!$setup.hasData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _toDisplayString($setup.noDataMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","key","_createElementBlock","_hoisted_1","$setup","hasData","_hoisted_2","_toDisplayString","noDataMessage","_createCommentVNode"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\SparklineChart.vue"],"sourcesContent":["<template>\r\n\t<div ref=\"chartContainer\" class=\"sparkline-container\">\r\n\t\t<div v-if=\"!hasData\" class=\"no-data-message\">\r\n\t\t\t{{ noDataMessage }}\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport {\r\n\t\tref,\r\n\t\tonMounted,\r\n\t\twatch,\r\n\t\tcomputed,\r\n\t\tnextTick,\r\n\t\tonBeforeUnmount\r\n\t} from \"vue\";\r\n\timport * as d3 from \"d3\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdata: {\r\n\t\t\ttype: Array,\r\n\t\t\tdefault: () => [],\r\n\t\t\tvalidator: value => Array.isArray(value)\r\n\t\t},\r\n\t\tcompareData: {\r\n\t\t\ttype: Array,\r\n\t\t\tdefault: null\r\n\t\t},\r\n\t\tmaxWidth: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 250\r\n\t\t},\r\n\t\tmaxHeight: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 80\r\n\t\t},\r\n\t\tmargin: {\r\n\t\t\ttype: Object,\r\n\t\t\tdefault: () => ({ top: 5, right: 5, bottom: 5, left: 5 })\r\n\t\t},\r\n\t\tlineColor: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: \"#4a90e2\"\r\n\t\t},\r\n\t\tareaColor: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: \"#4a90e2\"\r\n\t\t},\r\n\t\tdotColor: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: \"#4a90e2\"\r\n\t\t},\r\n\t\thighlightColor: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: \"#FFD700\"\r\n\t\t},\r\n\t\tshowTooltip: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true\r\n\t\t},\r\n\t\tshowDots: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true\r\n\t\t},\r\n\t\tshowArea: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true\r\n\t\t},\r\n\t\tshowYearMarkers: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true\r\n\t\t},\r\n\t\tcurveType: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: \"curveMonotoneX\"\r\n\t\t},\r\n\t\tmaxBarWidth: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 60\r\n\t\t}\r\n\t});\r\n\r\n\tconst emit = defineEmits([\"chart-mounted\"]);\r\n\r\n\tconst chartContainer = ref(null);\r\n\tconst svg = ref(null);\r\n\tconst tooltip = ref(null);\r\n\tconst resizeObserver = ref(null);\r\n\tconst containerSize = ref({\r\n\t\twidth: props.maxWidth,\r\n\t\theight: props.maxHeight\r\n\t});\r\n\r\n\tconst updateContainerSize = () => {\r\n\t\tif (chartContainer.value) {\r\n\t\t\tcontainerSize.value = {\r\n\t\t\t\twidth: Math.min(chartContainer.value.clientWidth, props.maxWidth),\r\n\t\t\t\theight: Math.min(\r\n\t\t\t\t\tchartContainer.value.clientHeight || props.maxHeight,\r\n\t\t\t\t\tprops.maxHeight\r\n\t\t\t\t)\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n\r\n\tconst innerWidth = computed(() => {\r\n\t\treturn Math.max(\r\n\t\t\t10,\r\n\t\t\tcontainerSize.value.width - props.margin.left - props.margin.right\r\n\t\t);\r\n\t});\r\n\r\n\tconst innerHeight = computed(() => {\r\n\t\treturn Math.max(\r\n\t\t\t10,\r\n\t\t\tcontainerSize.value.height - props.margin.top - props.margin.bottom\r\n\t\t);\r\n\t});\r\n\r\n\tconst sortedData = computed(() => {\r\n\t\tif (!Array.isArray(props.data)) return [];\r\n\t\treturn [...props.data]\r\n\t\t\t.filter(item => item && !isNaN(item.year) && !isNaN(item.value))\r\n\t\t\t.sort((a, b) => a.year - b.year);\r\n\t});\r\n\r\n\tconst hasData = computed(() => sortedData.value.length > 0);\r\n\tconst showBarChart = computed(() => sortedData.value.length <= 3);\r\n\tconst showLineChart = computed(() => sortedData.value.length > 3);\r\n\tconst noDataMessage = computed(() => \"无数据\");\r\n\tconst chartType = computed(() => (showBarChart.value ? \"bar\" : \"line\"));\r\n\r\n\tconst initChart = () => {\r\n\t\tif (!chartContainer.value) return;\r\n\r\n\t\tupdateContainerSize();\r\n\r\n\t\td3.select(chartContainer.value).selectAll(\"*\").remove();\r\n\t\tif (!hasData.value) return;\r\n\r\n\t\tsvg.value = d3\r\n\t\t\t.select(chartContainer.value)\r\n\t\t\t.append(\"svg\")\r\n\t\t\t.attr(\"width\", containerSize.value.width)\r\n\t\t\t.attr(\"height\", containerSize.value.height)\r\n\t\t\t.attr(\r\n\t\t\t\t\"viewBox\",\r\n\t\t\t\t`0 0 ${containerSize.value.width} ${containerSize.value.height}`\r\n\t\t\t)\r\n\t\t\t.attr(\"preserveAspectRatio\", \"xMidYMid meet\");\r\n\r\n\t\tconst chart = svg.value\r\n\t\t\t.append(\"g\")\r\n\t\t\t.attr(\"transform\", `translate(${props.margin.left},${props.margin.top})`);\r\n\r\n\t\tif (showBarChart.value) {\r\n\t\t\tdrawBarChart(chart);\r\n\t\t} else if (showLineChart.value) {\r\n\t\t\tdrawLineChart(chart);\r\n\t\t}\r\n\r\n\t\temit(\"chart-mounted\", {\r\n\t\t\tchartType: chartType.value\r\n\t\t});\r\n\t};\r\n\r\n\tconst drawBarChart = chart => {\r\n\t\tconst xScale = d3\r\n\t\t\t.scaleBand()\r\n\t\t\t.domain(sortedData.value.map(d => d.year.toString()))\r\n\t\t\t.range([0, innerWidth.value])\r\n\t\t\t.paddingInner(0.4)\r\n\t\t\t.paddingOuter(0.2);\r\n\r\n\t\tconst calculatedWidth = xScale.bandwidth();\r\n\t\tconst barWidth = Math.min(calculatedWidth, props.maxBarWidth);\r\n\t\tconst adjustedPadding =\r\n\t\t\t(innerWidth.value - barWidth * sortedData.value.length) /\r\n\t\t\t(sortedData.value.length + 1);\r\n\r\n\t\tconst adjustedXScale = d3\r\n\t\t\t.scaleBand()\r\n\t\t\t.domain(sortedData.value.map(d => d.year.toString()))\r\n\t\t\t.range([0, innerWidth.value])\r\n\t\t\t.paddingInner(adjustedPadding / barWidth)\r\n\t\t\t.paddingOuter(adjustedPadding / barWidth);\r\n\r\n\t\tconst maxValue = d3.max(sortedData.value, d => d.value);\r\n\t\tconst yScale = d3\r\n\t\t\t.scaleLinear()\r\n\t\t\t.domain([0, maxValue * 1.1])\r\n\t\t\t.range([innerHeight.value, 0]);\r\n\r\n\t\t// 绘制柱状图\r\n\t\tchart\r\n\t\t\t.selectAll(\".bar\")\r\n\t\t\t.data(sortedData.value)\r\n\t\t\t.enter()\r\n\t\t\t.append(\"rect\")\r\n\t\t\t.attr(\"class\", \"bar\")\r\n\t\t\t.attr(\r\n\t\t\t\t\"x\",\r\n\t\t\t\td =>\r\n\t\t\t\t\tadjustedXScale(d.year.toString()) +\r\n\t\t\t\t\t(adjustedXScale.bandwidth() - barWidth) / 2\r\n\t\t\t)\r\n\t\t\t.attr(\"width\", barWidth)\r\n\t\t\t.attr(\"y\", d => yScale(d.value))\r\n\t\t\t.attr(\"height\", d => innerHeight.value - yScale(d.value))\r\n\t\t\t.attr(\"fill\", props.lineColor)\r\n\t\t\t.attr(\"rx\", 2)\r\n\t\t\t.attr(\"ry\", 2);\r\n\r\n\t\t// 绘制柱状图上的数值标签\r\n\t\tchart\r\n\t\t\t.selectAll(\".bar-label\")\r\n\t\t\t.data(sortedData.value)\r\n\t\t\t.enter()\r\n\t\t\t.append(\"text\")\r\n\t\t\t.attr(\"class\", \"bar-label\")\r\n\t\t\t.attr(\r\n\t\t\t\t\"x\",\r\n\t\t\t\td => adjustedXScale(d.year.toString()) + adjustedXScale.bandwidth() / 2\r\n\t\t\t)\r\n\t\t\t.attr(\"y\", d => yScale(d.value) - 5)\r\n\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t.text(d => formatValue(d.value))\r\n\t\t\t.attr(\"font-size\", \"10px\")\r\n\t\t\t.attr(\"fill\", \"#64748b\")\r\n\t\t\t.style(\"visibility\", d =>\r\n\t\t\t\tinnerHeight.value - yScale(d.value) > 20 ? \"visible\" : \"hidden\"\r\n\t\t\t);\r\n\r\n\t\t// 绘制每个柱子下方的年份标签\r\n\t\tchart\r\n\t\t\t.selectAll(\".year-label\")\r\n\t\t\t.data(sortedData.value)\r\n\t\t\t.enter()\r\n\t\t\t.append(\"text\")\r\n\t\t\t.attr(\"class\", \"year-label\")\r\n\t\t\t.attr(\r\n\t\t\t\t\"x\",\r\n\t\t\t\td => adjustedXScale(d.year.toString()) + adjustedXScale.bandwidth() / 2\r\n\t\t\t)\r\n\t\t\t.attr(\"y\", innerHeight.value + 15) // 将标签放置在矩形下方\r\n\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t.text(d => d.year)\r\n\t\t\t.attr(\"font-size\", \"10px\")\r\n\t\t\t.attr(\"fill\", \"#64748b\");\r\n\t};\r\n\r\n\tconst drawLineChart = chart => {\r\n\t\tconst years = sortedData.value.map(d => d.year);\r\n\t\tconst xScale = d3\r\n\t\t\t.scaleLinear()\r\n\t\t\t.domain(d3.extent(years))\r\n\t\t\t.range([0, innerWidth.value]);\r\n\r\n\t\tconst values = sortedData.value.map(d => d.value);\r\n\t\tconst minValue = d3.min(values);\r\n\t\tconst maxValue = d3.max(values);\r\n\t\tconst padding = (maxValue - minValue) * 0.1;\r\n\r\n\t\tconst yScale = d3\r\n\t\t\t.scaleLinear()\r\n\t\t\t.domain([minValue - padding, maxValue + padding])\r\n\t\t\t.range([innerHeight.value, 0]);\r\n\r\n\t\tconst lineGenerator = d3\r\n\t\t\t.line()\r\n\t\t\t.x(d => xScale(d.year))\r\n\t\t\t.y(d => yScale(d.value))\r\n\t\t\t.curve(d3[props.curveType]);\r\n\r\n\t\tchart\r\n\t\t\t.append(\"path\")\r\n\t\t\t.attr(\"class\", \"sparkline-line\")\r\n\t\t\t.attr(\"d\", lineGenerator(sortedData.value))\r\n\t\t\t.attr(\"stroke\", props.lineColor)\r\n\t\t\t.attr(\"stroke-width\", 2)\r\n\t\t\t.attr(\"fill\", \"none\");\r\n\r\n\t\tif (props.showDots) {\r\n\t\t\tchart\r\n\t\t\t\t.selectAll(\".sparkline-dot\")\r\n\t\t\t\t.data(sortedData.value)\r\n\t\t\t\t.enter()\r\n\t\t\t\t.append(\"circle\")\r\n\t\t\t\t.attr(\"class\", \"sparkline-dot\")\r\n\t\t\t\t.attr(\"cx\", d => xScale(d.year))\r\n\t\t\t\t.attr(\"cy\", d => yScale(d.value))\r\n\t\t\t\t.attr(\"r\", 3)\r\n\t\t\t\t.attr(\"fill\", props.dotColor);\r\n\t\t}\r\n\r\n\t\tif (props.compareData && props.showYearMarkers) {\r\n\t\t\tconst commonYears = getCommonYears(sortedData.value, props.compareData);\r\n\t\t\tcommonYears.forEach(year => {\r\n\t\t\t\tconst points = sortedData.value.filter(d => d.year === year);\r\n\t\t\t\tpoints.forEach(point => {\r\n\t\t\t\t\tchart\r\n\t\t\t\t\t\t.append(\"circle\")\r\n\t\t\t\t\t\t.attr(\"cx\", xScale(point.year))\r\n\t\t\t\t\t\t.attr(\"cy\", yScale(point.value))\r\n\t\t\t\t\t\t.attr(\"r\", 5)\r\n\t\t\t\t\t\t.attr(\"fill\", props.highlightColor)\r\n\t\t\t\t\t\t.attr(\"stroke\", \"#FF8C00\")\r\n\t\t\t\t\t\t.attr(\"stroke-width\", 1.5)\r\n\t\t\t\t\t\t.attr(\"class\", \"highlight-point\");\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (props.showTooltip) {\r\n\t\t\taddTooltip(chart, xScale, yScale);\r\n\t\t}\r\n\t};\r\n\r\n\tconst getCommonYears = (data1, data2) => {\r\n\t\tconst years1 = new Set(data1.map(d => d.year));\r\n\t\tconst years2 = new Set(data2.filter(d => d).map(d => d.year));\r\n\t\treturn [...years1].filter(year => years2.has(year));\r\n\t};\r\n\r\n\tconst formatValue = value => {\r\n\t\tif (value >= 1000000) return `$${(value / 1000000).toFixed(1)}M`;\r\n\t\tif (value >= 1000) return `$${(value / 1000).toFixed(1)}K`;\r\n\t\treturn value.toLocaleString();\r\n\t};\r\n\r\n\tconst addTooltip = (chart, xScale, yScale) => {\r\n\t\ttooltip.value = chart\r\n\t\t\t.append(\"g\")\r\n\t\t\t.attr(\"class\", \"tooltip\")\r\n\t\t\t.style(\"opacity\", 0)\r\n\t\t\t.attr(\"pointer-events\", \"none\");\r\n\r\n\t\ttooltip.value\r\n\t\t\t.append(\"rect\")\r\n\t\t\t.attr(\"class\", \"tooltip-box\")\r\n\t\t\t.attr(\"rx\", 4)\r\n\t\t\t.attr(\"ry\", 4);\r\n\r\n\t\ttooltip.value\r\n\t\t\t.append(\"text\")\r\n\t\t\t.attr(\"class\", \"tooltip-year\")\r\n\t\t\t.attr(\"x\", 6)\r\n\t\t\t.attr(\"y\", 18);\r\n\r\n\t\ttooltip.value\r\n\t\t\t.append(\"text\")\r\n\t\t\t.attr(\"class\", \"tooltip-value\")\r\n\t\t\t.attr(\"x\", 6)\r\n\t\t\t.attr(\"y\", 36);\r\n\r\n\t\tconst referenceLine = chart\r\n\t\t\t.append(\"line\")\r\n\t\t\t.attr(\"class\", \"reference-line\")\r\n\t\t\t.attr(\"stroke\", \"#64748b\")\r\n\t\t\t.attr(\"stroke-width\", 1)\r\n\t\t\t.attr(\"stroke-dasharray\", \"2,2\")\r\n\t\t\t.attr(\"y1\", 0)\r\n\t\t\t.attr(\"y2\", innerHeight.value)\r\n\t\t\t.style(\"opacity\", 0);\r\n\r\n\t\tchart\r\n\t\t\t.append(\"rect\")\r\n\t\t\t.attr(\"class\", \"overlay\")\r\n\t\t\t.attr(\"width\", innerWidth.value)\r\n\t\t\t.attr(\"height\", innerHeight.value)\r\n\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t.attr(\"pointer-events\", \"all\")\r\n\t\t\t.on(\"mouseover\", () => tooltip.value.style(\"opacity\", 1))\r\n\t\t\t.on(\"mouseout\", () => {\r\n\t\t\t\ttooltip.value.style(\"opacity\", 0);\r\n\t\t\t\treferenceLine.style(\"opacity\", 0);\r\n\t\t\t})\r\n\t\t\t.on(\"mousemove\", event => {\r\n\t\t\t\tconst [mouseX] = d3.pointer(event);\r\n\t\t\t\tconst year = xScale.invert(mouseX);\r\n\t\t\t\tconst closest = d3.least(sortedData.value, d =>\r\n\t\t\t\t\tMath.abs(xScale(d.year) - mouseX)\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (!closest) return;\r\n\r\n\t\t\t\treferenceLine\r\n\t\t\t\t\t.attr(\"x1\", xScale(closest.year))\r\n\t\t\t\t\t.attr(\"x2\", xScale(closest.year))\r\n\t\t\t\t\t.style(\"opacity\", 1);\r\n\r\n\t\t\t\ttooltip.value.select(\".tooltip-year\").text(`Year: ${closest.year}`);\r\n\t\t\t\ttooltip.value\r\n\t\t\t\t\t.select(\".tooltip-value\")\r\n\t\t\t\t\t.text(`Value: ${formatValue(closest.value)}`);\r\n\r\n\t\t\t\tconst tooltipText = tooltip.value.node().querySelectorAll(\"text\");\r\n\t\t\t\tconst bbox = tooltipText[0].getBBox();\r\n\t\t\t\tconst bbox2 = tooltipText[1].getBBox();\r\n\t\t\t\tconst tooltipWidth = Math.max(bbox.width, bbox2.width) + 12;\r\n\t\t\t\tconst tooltipHeight = bbox.height + bbox2.height + 16;\r\n\r\n\t\t\t\tlet x = xScale(closest.year) + 10;\r\n\t\t\t\tlet y = yScale(closest.value) - tooltipHeight / 2;\r\n\r\n\t\t\t\tif (x + tooltipWidth > innerWidth.value) {\r\n\t\t\t\t\tx = xScale(closest.year) - tooltipWidth - 10;\r\n\t\t\t\t}\r\n\t\t\t\ty = Math.max(0, Math.min(y, innerHeight.value - tooltipHeight));\r\n\r\n\t\t\t\ttooltip.value\r\n\t\t\t\t\t.select(\".tooltip-box\")\r\n\t\t\t\t\t.attr(\"x\", x)\r\n\t\t\t\t\t.attr(\"y\", y)\r\n\t\t\t\t\t.attr(\"width\", tooltipWidth)\r\n\t\t\t\t\t.attr(\"height\", tooltipHeight);\r\n\r\n\t\t\t\ttooltip.value\r\n\t\t\t\t\t.select(\".tooltip-year\")\r\n\t\t\t\t\t.attr(\"x\", x + 6)\r\n\t\t\t\t\t.attr(\"y\", y + 18);\r\n\r\n\t\t\t\ttooltip.value\r\n\t\t\t\t\t.select(\".tooltip-value\")\r\n\t\t\t\t\t.attr(\"x\", x + 6)\r\n\t\t\t\t\t.attr(\"y\", y + 36);\r\n\t\t\t});\r\n\t};\r\n\r\n\tconst setupResizeObserver = () => {\r\n\t\tif (resizeObserver.value) {\r\n\t\t\tresizeObserver.value.disconnect();\r\n\t\t}\r\n\r\n\t\tif (chartContainer.value) {\r\n\t\t\tresizeObserver.value = new ResizeObserver(() => {\r\n\t\t\t\tnextTick(() => {\r\n\t\t\t\t\tupdateContainerSize();\r\n\t\t\t\t\tinitChart();\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\tresizeObserver.value.observe(chartContainer.value);\r\n\t\t}\r\n\t};\r\n\r\n\tonMounted(() => {\r\n\t\tsetupResizeObserver();\r\n\t\tinitChart();\r\n\t});\r\n\r\n\tonBeforeUnmount(() => {\r\n\t\tif (resizeObserver.value) {\r\n\t\t\tresizeObserver.value.disconnect();\r\n\t\t}\r\n\t});\r\n\r\n\twatch(\r\n\t\t() => [\r\n\t\t\tprops.data,\r\n\t\t\tprops.compareData,\r\n\t\t\tprops.maxWidth,\r\n\t\t\tprops.maxHeight,\r\n\t\t\tprops.margin,\r\n\t\t\tprops.lineColor,\r\n\t\t\tprops.highlightColor,\r\n\t\t\tprops.showTooltip,\r\n\t\t\tprops.showDots,\r\n\t\t\tprops.showYearMarkers,\r\n\t\t\tprops.curveType,\r\n\t\t\tprops.maxBarWidth\r\n\t\t],\r\n\t\tinitChart,\r\n\t\t{ deep: true }\r\n\t);\r\n\r\n\tdefineExpose({\r\n\t\tchartType\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.sparkline-container {\r\n\t\tposition: relative;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tmin-width: 100px;\r\n\t\tmin-height: 60px;\r\n\t\toverflow: hidden;\r\n\t}\r\n\r\n\t.no-data-message {\r\n\t\tposition: absolute;\r\n\t\ttop: 50%;\r\n\t\tleft: 50%;\r\n\t\ttransform: translate(-50%, -50%);\r\n\t\tcolor: #94a3b8;\r\n\t\tfont-size: 12px;\r\n\t\ttext-align: center;\r\n\t\twidth: 100%;\r\n\t\tpointer-events: none;\r\n\t}\r\n\r\n\t.sparkline-container :deep(svg) {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tdisplay: block;\r\n\t}\r\n\r\n\t.sparkline-container :deep(.tooltip-box) {\r\n\t\tfill: white;\r\n\t\tstroke: #e2e8f0;\r\n\t\tstroke-width: 1;\r\n\t\tfilter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));\r\n\t}\r\n\r\n\t.sparkline-container :deep(.tooltip-year) {\r\n\t\tfont-size: 12px;\r\n\t\tfont-weight: bold;\r\n\t\tfill: #334155;\r\n\t}\r\n\r\n\t.sparkline-container :deep(.tooltip-value) {\r\n\t\tfont-size: 12px;\r\n\t\tfill: #1e40af;\r\n\t\tfont-weight: 600;\r\n\t}\r\n\r\n\t.sparkline-container :deep(.reference-line) {\r\n\t\tpointer-events: none;\r\n\t}\r\n\r\n\t.sparkline-container :deep(.bar) {\r\n\t\ttransition: height 0.3s ease, y 0.3s ease;\r\n\t}\r\n\r\n\t.sparkline-container :deep(.bar-label) {\r\n\t\tpointer-events: none;\r\n\t\tfont-family: system-ui, -apple-system, sans-serif;\r\n\t}\r\n\r\n\t.sparkline-container :deep(.highlight-point) {\r\n\t\tanimation: pulse 1.5s infinite;\r\n\t}\r\n\r\n\t@keyframes pulse {\r\n\t\t0% {\r\n\t\t\tr: 4;\r\n\t\t\topacity: 1;\r\n\t\t}\r\n\t\t50% {\r\n\t\t\tr: 6;\r\n\t\t\topacity: 0.8;\r\n\t\t}\r\n\t\t100% {\r\n\t\t\tr: 4;\r\n\t\t\topacity: 1;\r\n\t\t}\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,GAAG,EAAC,gBAAgB;EAACC,KAAK,EAAC;;;EADjCC,GAAA;EAEuBD,KAAK,EAAC;;;uBAD5BE,mBAAA,CAIM,OAJNC,UAIM,G,CAHOC,MAAA,CAAAC,OAAO,I,cAAnBH,mBAAA,CAEM,OAFNI,UAEM,EAAAC,gBAAA,CADFH,MAAA,CAAAI,aAAa,oBAHnBC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}