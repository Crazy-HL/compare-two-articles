{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, withModifiers as _withModifiers, vModelText as _vModelText, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-2e821d1e\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"main-container\"\n};\nconst _hoisted_2 = {\n  class: \"chat-history\"\n};\nconst _hoisted_3 = {\n  class: \"message-content\"\n};\nconst _hoisted_4 = [\"innerHTML\"];\nconst _hoisted_5 = {\n  class: \"vis-container\"\n};\nconst _hoisted_6 = {\n  class: \"input-container\"\n};\nconst _hoisted_7 = {\n  class: \"button-container\"\n};\nconst _hoisted_8 = {\n  key: 0,\n  class: \"debug-panel\"\n};\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h4\", null, \"事件接收状态\", -1 /* HOISTED */));\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", null, \"Div1内容: \", -1 /* HOISTED */));\nconst _hoisted_11 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", null, \"Div3内容: \", -1 /* HOISTED */));\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 聊天容器 \"), _createElementVNode(\"div\", {\n    class: \"chat-container\",\n    onDragover: _cache[0] || (_cache[0] = _withModifiers(() => {}, [\"prevent\"])),\n    onDrop: _cache[1] || (_cache[1] = function () {\n      return _ctx.handleDrop && _ctx.handleDrop(...arguments);\n    })\n  }, [_createCommentVNode(\" 历史对话记录 \"), _createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.chatHistory, (message, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass(['message', message.role])\n    }, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"strong\", null, _toDisplayString(message.role === \"user\" ? \"用户\" : \"GPT\") + \":\", 1 /* TEXT */), _createElementVNode(\"p\", {\n      innerHTML: message.content\n    }, null, 8 /* PROPS */, _hoisted_4)])], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))])], 32 /* NEED_HYDRATION */), _createCommentVNode(\" 视觉内容容器 \"), _createElementVNode(\"div\", _hoisted_5, [_createCommentVNode(\" 图表容器 \"), _createElementVNode(\"div\", {\n    ref: \"chart\",\n    class: \"chart-container\",\n    draggable: \"true\",\n    onDragstart: _cache[2] || (_cache[2] = function () {\n      return _ctx.handleDragStart && _ctx.handleDragStart(...arguments);\n    })\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), _createCommentVNode(\" 输入框和操作按钮 \"), _createElementVNode(\"div\", _hoisted_6, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => _ctx.userQuestion = $event),\n    rows: \"2\",\n    placeholder: \"请输入你想问的问题...\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.userQuestion]]), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = function () {\n      return _ctx.askQuestion && _ctx.askQuestion(...arguments);\n    })\n  }, \"发送\"), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = function () {\n      return _ctx.compareTexts && _ctx.compareTexts(...arguments);\n    })\n  }, \"对比文章\"), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = function () {\n      return _ctx.mergedJson && _ctx.mergedJson(...arguments);\n    }),\n    class: \"submit-btn\"\n  }, \"合并数据可视化\")])])]), _createCommentVNode(\" 调试面板（开发模式可见） \"), _ctx.debugMode ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_hoisted_9, _createElementVNode(\"div\", null, [_hoisted_10, _createElementVNode(\"span\", {\n    class: _normalizeClass({\n      'status-received': _ctx.receivedContents.div1.primary\n    })\n  }, _toDisplayString(_ctx.receivedContents.div1.primary ? \"已接收\" : \"等待中\"), 3 /* TEXT, CLASS */)]), _createElementVNode(\"div\", null, [_hoisted_11, _createElementVNode(\"span\", {\n    class: _normalizeClass({\n      'status-received': _ctx.receivedContents.div3.primary\n    })\n  }, _toDisplayString(_ctx.receivedContents.div3.primary ? \"已接收\" : \"等待中\"), 3 /* TEXT, CLASS */)]), _createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = function () {\n      return _ctx.showEventLog && _ctx.showEventLog(...arguments);\n    })\n  }, \"显示事件日志\")])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementVNode","_createElementBlock","_hoisted_1","_createCommentVNode","onDragover","_cache","_withModifiers","onDrop","_ctx","handleDrop","arguments","_hoisted_2","_Fragment","_renderList","chatHistory","message","index","_normalizeClass","role","_hoisted_3","_toDisplayString","innerHTML","content","_hoisted_4","_hoisted_5","ref","draggable","onDragstart","handleDragStart","_hoisted_6","$event","userQuestion","rows","placeholder","_hoisted_7","onClick","askQuestion","compareTexts","mergedJson","debugMode","_hoisted_8","_hoisted_9","_hoisted_10","receivedContents","div1","primary","_hoisted_11","div3","showEventLog"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\Div2.vue"],"sourcesContent":["<template>\r\n\t<div class=\"main-container\">\r\n\t\t<!-- 聊天容器 -->\r\n\t\t<div class=\"chat-container\" @dragover.prevent @drop=\"handleDrop\">\r\n\t\t\t<!-- 历史对话记录 -->\r\n\t\t\t<div class=\"chat-history\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tv-for=\"(message, index) in chatHistory\"\r\n\t\t\t\t\t:key=\"index\"\r\n\t\t\t\t\t:class=\"['message', message.role]\">\r\n\t\t\t\t\t<div class=\"message-content\">\r\n\t\t\t\t\t\t<strong>{{ message.role === \"user\" ? \"用户\" : \"GPT\" }}:</strong>\r\n\t\t\t\t\t\t<p v-html=\"message.content\"></p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- 视觉内容容器 -->\r\n\t\t<div class=\"vis-container\">\r\n\t\t\t<!-- 图表容器 -->\r\n\t\t\t<div\r\n\t\t\t\tref=\"chart\"\r\n\t\t\t\tclass=\"chart-container\"\r\n\t\t\t\tdraggable=\"true\"\r\n\t\t\t\t@dragstart=\"handleDragStart\"></div>\r\n\r\n\t\t\t<!-- 输入框和操作按钮 -->\r\n\t\t\t<div class=\"input-container\">\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tv-model=\"userQuestion\"\r\n\t\t\t\t\trows=\"2\"\r\n\t\t\t\t\tplaceholder=\"请输入你想问的问题...\"></textarea>\r\n\t\t\t\t<div class=\"button-container\">\r\n\t\t\t\t\t<button @click=\"askQuestion\">发送</button>\r\n\t\t\t\t\t<button @click=\"compareTexts\">对比文章</button>\r\n\t\t\t\t\t<button @click=\"mergedJson\" class=\"submit-btn\">合并数据可视化</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- 调试面板（开发模式可见） -->\r\n\t\t<div v-if=\"debugMode\" class=\"debug-panel\">\r\n\t\t\t<h4>事件接收状态</h4>\r\n\t\t\t<div>\r\n\t\t\t\t<span>Div1内容: </span>\r\n\t\t\t\t<span :class=\"{ 'status-received': receivedContents.div1.primary }\">\r\n\t\t\t\t\t{{ receivedContents.div1.primary ? \"已接收\" : \"等待中\" }}\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<span>Div3内容: </span>\r\n\t\t\t\t<span :class=\"{ 'status-received': receivedContents.div3.primary }\">\r\n\t\t\t\t\t{{ receivedContents.div3.primary ? \"已接收\" : \"等待中\" }}\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t\t<button @click=\"showEventLog\">显示事件日志</button>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted } from \"vue\";\r\n\timport * as d3 from \"d3\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\timport {\r\n\t  renderLineChart,\r\n\t  renderBarChart,\r\n\t  renderPieChart,\r\n\t  renderNonVisualChart,\r\n\t  renderRadarChart,\r\n\t  renderStackedBarChart,\r\n\t  renderScatterChart\r\n\t} from \"@/js/chartUtils\";\r\n\r\n\t// 状态管理\r\n\tconst userQuestion = ref(\"\");\r\n\tconst chatHistory = ref([]);\r\n\tconst currentChartData = ref(null);\r\n\tconst currentChartType = ref(null);\r\n\tconst debugMode = ref(import.meta.env.DEV); // 开发模式下启用调试\r\n\r\n\t// 接收内容存储（结构化存储）\r\n\tconst receivedContents = ref({\r\n\t  div1: {\r\n\t    primary: null, // 主内容\r\n\t    linked: null   // 关联内容\r\n\t  },\r\n\t  div3: {\r\n\t    primary: null,\r\n\t    linked: null\r\n\t  }\r\n\t});\r\n\r\n\t// 事件日志（调试用）\r\n\tconst eventLog = ref([]);\r\n\r\n\t// 安全事件处理器\r\n\tconst createEventHandler = (source) => (eventData) => {\r\n\t  if (!eventData) {\r\n\t    console.error(`[Div2] 收到空事件数据从 ${source}`);\r\n\t    return;\r\n\t  }\r\n\r\n\t  // 分类存储内容\r\n\t  const key = eventData.type === \"linked\" ? \"linked\" : \"primary\";\r\n\t  receivedContents.value[source][key] = eventData.content;\r\n\r\n\t  // 记录事件日志\r\n\t  eventLog.value.push({\r\n\t    timestamp: new Date().toISOString(),\r\n\t    source,\r\n\t    type: eventData.type || \"legacy\",\r\n\t    contentLength: eventData.content?.length\r\n\t  });\r\n\r\n\t  if (debugMode.value) {\r\n\t    console.groupCollapsed(`[Div2] ${source} 事件处理`);\r\n\t    console.log(\"事件类型:\", eventData.type || \"普通事件\");\r\n\t    console.log(\"内容摘要:\", eventData.content?.substring(0, 100) + \"...\");\r\n\t    console.groupEnd();\r\n\t  }\r\n\t};\r\n\r\n\t// 初始化事件监听\r\n\tconst initEventListeners = () => {\r\n\t  const handlers = {\r\n\t    div1: createEventHandler('div1'),\r\n\t    div3: createEventHandler('div3')\r\n\t  };\r\n\r\n\t  // 主事件监听\r\n\t  bus.on('div1Event', handlers.div1);\r\n\t  bus.on('div3Event', handlers.div3);\r\n\r\n\t  // 兼容旧版事件名（带下划线）\r\n\t  bus.on('div1_Event', handlers.div1);\r\n\t  bus.on('div3_Event', handlers.div3);\r\n\r\n\t  // 调试：全局事件监听\r\n\t  if (debugMode.value) {\r\n\t    bus.on('*', (type, data) => {\r\n\t      if (type.includes('div1') || type.includes('div3')) {\r\n\t        console.log(`[Div2全局事件] ${type}`, data);\r\n\t      }\r\n\t    });\r\n\t  }\r\n\r\n\t  // 返回清理函数\r\n\t  return () => {\r\n\t    bus.off('div1Event', handlers.div1);\r\n\t    bus.off('div3Event', handlers.div3);\r\n\t    bus.off('div1_Event', handlers.div1);\r\n\t    bus.off('div3_Event', handlers.div3);\r\n\t  };\r\n\t};\r\n\r\n\t// 生命周期\r\n\tonMounted(() => {\r\n\t  const cleanupListeners = initEventListeners();\r\n\r\n\t  if (debugMode.value) {\r\n\t    console.log(\"[Div2] 当前监听的事件:\",\r\n\t      Object.keys(bus.all).filter(e => e.includes('div1') || e.includes('div3'))\r\n\t  );\r\n\r\n\t  onUnmounted(() => {\r\n\t    cleanupListeners();\r\n\t    console.log(\"[Div2] 已卸载并清理事件监听\");\r\n\t  });\r\n\t});\r\n\r\n\t// 调试功能\r\n\tconst showEventLog = () => {\r\n\t  console.group(\"[Div2] 事件日志\");\r\n\t  eventLog.value.forEach(log => {\r\n\t    console.log(`${log.timestamp} ${log.source.padEnd(4)} ${log.type.padEnd(8)} 长度:${log.contentLength}`);\r\n\t  });\r\n\t  console.groupEnd();\r\n\t  alert(`已记录 ${eventLog.value.length} 个事件，请查看控制台`);\r\n\t};\r\n\r\n\t// 从HTML提取纯文本（兼容旧代码）\r\n\tconst getPlainTextFromSelection = (htmlContent) => {\r\n\t  const container = document.createElement(\"div\");\r\n\t  container.innerHTML = htmlContent;\r\n\t  return container.innerText || container.textContent || \"\";\r\n\t};\r\n\r\n\t// 图表拖拽处理\r\n\tconst handleDragStart = (event) => {\r\n\t  event.dataTransfer.setData(\r\n\t    \"application/json\",\r\n\t    JSON.stringify({\r\n\t      chartData: currentChartData.value,\r\n\t      chartType: currentChartType.value\r\n\t    })\r\n\t  );\r\n\t};\r\n\r\n\tconst handleDrop = (event) => {\r\n\t  event.preventDefault();\r\n\t  const data = event.dataTransfer.getData(\"application/json\");\r\n\t  if (!data) return;\r\n\r\n\t  try {\r\n\t    const { chartData, chartType } = JSON.parse(data);\r\n\t    currentChartData.value = chartData;\r\n\t    currentChartType.value = chartType;\r\n\t    analyzeChart(chartData, chartType);\r\n\t  } catch (error) {\r\n\t    console.error(\"解析拖拽数据失败:\", error);\r\n\t  }\r\n\t};\r\n\r\n\t// 图表分析\r\n\tconst analyzeChart = (chartData, chartType) => {\r\n\t  api.post(\r\n\t    \"analyze_chart\",\r\n\t    { chartData, chartType },\r\n\t    response => {\r\n\t      if (response?.analysis) {\r\n\t        chatHistory.value.push({\r\n\t          role: \"assistant\",\r\n\t          content: formatAnalysisResult(response.analysis)\r\n\t        });\r\n\t      }\r\n\t    },\r\n\t    error => {\r\n\t      console.error(\"图表分析失败:\", error);\r\n\t      chatHistory.value.push({\r\n\t        role: \"assistant\",\r\n\t        content: \"图表分析失败，请稍后重试。\"\r\n\t      });\r\n\t    }\r\n\t  );\r\n\t};\r\n\r\n\t// 格式化分析结果\r\n\tconst formatAnalysisResult = (text) => {\r\n\t  return text\r\n\t    .replace(/### (.*)/g, \"<h3>$1</h3>\")\r\n\t    .replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\")\r\n\t    .replace(/\\n/g, \"<br>\")\r\n\t    .replace(/(?:^|\\n)(\\d+\\.\\s+.*)/g, \"<li>$1</li>\")\r\n\t    .replace(/(?:^|\\n)-\\s+(.*)/g, \"<li>$1</li>\")\r\n\t    .replace(/(<li>.*<\\/li>)/gs, \"<ul>$1</ul>\");\r\n\t};\r\n\r\n\t// 提问功能\r\n\tconst askQuestion = () => {\r\n\t  if (!userQuestion.value.trim()) {\r\n\t    alert(\"请输入问题！\");\r\n\t    return;\r\n\t  }\r\n\r\n\t  chatHistory.value.push({ role: \"user\", content: userQuestion.value });\r\n\r\n\t  api.post(\r\n\t    \"gpt_ask_chart\",\r\n\t    {\r\n\t      question: userQuestion.value,\r\n\t      chartData: currentChartData.value,\r\n\t      chartType: currentChartType.value\r\n\t    },\r\n\t    response => {\r\n\t      chatHistory.value.push({\r\n\t        role: \"assistant\",\r\n\t        content: formatAnalysisResult(response.answer)\r\n\t      });\r\n\t    },\r\n\t    error => {\r\n\t      console.error(\"请求失败:\", error);\r\n\t      chatHistory.value.push({\r\n\t        role: \"assistant\",\r\n\t        content: \"请求失败，请稍后重试。\"\r\n\t      });\r\n\t    }\r\n\t  );\r\n\r\n\t  userQuestion.value = \"\";\r\n\t};\r\n\r\n\t// 文本对比\r\n\tconst compareTexts = async () => {\r\n\t  const { div1, div3 } = receivedContents.value;\r\n\t  if (!div1.primary || !div3.primary) {\r\n\t    alert(\"请先选择两段文本！\");\r\n\t    return;\r\n\t  }\r\n\r\n\t  try {\r\n\t    api.post(\r\n\t      \"gpt_compare\",\r\n\t      {\r\n\t        text1: getPlainTextFromSelection(div1.primary),\r\n\t        text2: getPlainTextFromSelection(div3.primary)\r\n\t      },\r\n\t      data => {\r\n\t        if (data) {\r\n\t          chatHistory.value.push({\r\n\t            role: \"assistant\",\r\n\t            content: data.result\r\n\t          });\r\n\t        }\r\n\t      }\r\n\t    );\r\n\t  } catch (error) {\r\n\t    console.error(\"对比失败:\", error);\r\n\t  }\r\n\t};\r\n\r\n\t// 合并可视化\r\n\tconst mergedJson = async () => {\r\n\t  const { div1, div3 } = receivedContents.value;\r\n\r\n\t  if (!div1.primary || !div3.primary) {\r\n\t    alert(\"请先在两篇文章中选择内容！\");\r\n\t    return;\r\n\t  }\r\n\r\n\t  try {\r\n\t    api.post(\r\n\t      \"merged_json\",\r\n\t      {\r\n\t        text1: div1.primary,\r\n\t        text2: div3.primary,\r\n\t        text1Plain: getPlainTextFromSelection(div1.primary),\r\n\t        text2Plain: getPlainTextFromSelection(div3.primary)\r\n\t      },\r\n\t      data => {\r\n\t        if (data.error) {\r\n\t          console.error(\"后端错误:\", data.error);\r\n\t          return;\r\n\t        }\r\n\r\n\t        currentChartData.value = data.json_data;\r\n\t        currentChartType.value = data.chart_classification;\r\n\r\n\t        if (data.yes_no === \"no\") {\r\n\t          renderNonVisualChart(\".chart-container\", data, {\r\n\t            message: \"当前数据无法合并\"\r\n\t          });\r\n\t          return;\r\n\t        }\r\n\r\n\t        renderChart(data.json_data, data.chart_classification);\r\n\r\n\t        // 更新两侧图表\r\n\t        if (data.div1_json) {\r\n\t          bus.emit(\"updateChart1\", {\r\n\t            jsonData: data.div1_json,\r\n\t            chartType: data.chart_classification\r\n\t          });\r\n\t        }\r\n\r\n\t        if (data.div3_json) {\r\n\t          bus.emit(\"updateChart3\", {\r\n\t            jsonData: data.div3_json,\r\n\t            chartType: data.chart_classification\r\n\t          });\r\n\t        }\r\n\t      }\r\n\t    );\r\n\t  } catch (error) {\r\n\t    console.error(\"合并失败:\", error);\r\n\t    alert(\"合并数据时出错，请稍后重试\");\r\n\t  }\r\n\t};\r\n\r\n\t// 图表渲染\r\n\tconst renderChart = (rawJsonData, chartType) => {\r\n\t  const container = document.querySelector(\".chart-container\");\r\n\t  if (!container) return;\r\n\r\n\t  container.innerHTML = \"\";\r\n\r\n\t  if (!rawJsonData || typeof rawJsonData !== \"object\") {\r\n\t    renderNonVisualChart(container, rawJsonData, {\r\n\t      message: \"JSON数据无效\"\r\n\t    });\r\n\t    return;\r\n\t  }\r\n\r\n\t  const data = rawJsonData.data || rawJsonData;\r\n\t  const options = rawJsonData.options || {};\r\n\r\n\t  switch (chartType) {\r\n\t    case \"Line Chart\":\r\n\t      renderLineChart(container, data, options);\r\n\t      break;\r\n\t    case \"Bar Chart\":\r\n\t      renderBarChart(container, rawJsonData);\r\n\t      break;\r\n\t    case \"Pie Chart\":\r\n\t      renderPieChart(container, data, options);\r\n\t      break;\r\n\t    case \"Stacked Bar Chart\":\r\n\t      renderStackedBarChart(container, data, options);\r\n\t      break;\r\n\t    case \"Radar Chart\":\r\n\t      renderRadarChart(container, rawJsonData);\r\n\t      break;\r\n\t    case \"Scatter Chart\":\r\n\t      renderScatterChart(container, rawJsonData);\r\n\t      break;\r\n\t    default:\r\n\t      console.error(\"未知图表类型:\", chartType);\r\n\t      renderNonVisualChart(container, null, {\r\n\t        message: `不支持的图表类型: ${chartType}`\r\n\t      });\r\n\t  }\r\n\t};\r\n</script>\r\n\r\n<style scoped>\r\n\t/* 原有样式保持不变 */\r\n\t.main-container {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\twidth: 100%;\r\n\t\theight: 100vh;\r\n\t\tmargin: 0 auto;\r\n\t\tpadding: 5px;\r\n\t\tbackground-color: #f5f5f5;\r\n\t}\r\n\r\n\t.chat-container {\r\n\t\tflex: 0.5;\r\n\t\tbackground-color: #ffffff;\r\n\t\tpadding: 20px;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t\tmargin-bottom: 10px;\r\n\t}\r\n\r\n\t.chat-history {\r\n\t\tflex: 0.5;\r\n\t\toverflow-y: auto;\r\n\t\theight: 95%;\r\n\t\tpadding: 10px;\r\n\t\tbackground-color: #fafafa;\r\n\t\tborder-radius: 8px;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t\tmargin-bottom: 20px;\r\n\t}\r\n\r\n\t.vis-container {\r\n\t\tflex: 1;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t\tpadding: 20px;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tgap: 20px;\r\n\t}\r\n\r\n\t/* 新增调试面板样式 */\r\n\t.debug-panel {\r\n\t\tposition: fixed;\r\n\t\tbottom: 10px;\r\n\t\tright: 10px;\r\n\t\tbackground: rgba(255, 255, 255, 0.9);\r\n\t\tpadding: 10px 15px;\r\n\t\tborder-radius: 8px;\r\n\t\tbox-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n\t\tfont-family: monospace;\r\n\t\tfont-size: 12px;\r\n\t\tz-index: 1000;\r\n\t}\r\n\r\n\t.debug-panel h4 {\r\n\t\tmargin: 0 0 8px 0;\r\n\t\tcolor: #333;\r\n\t}\r\n\r\n\t.debug-panel div {\r\n\t\tmargin: 4px 0;\r\n\t}\r\n\r\n\t.status-received {\r\n\t\tcolor: #4caf50;\r\n\t\tfont-weight: bold;\r\n\t}\r\n\r\n\t.debug-panel button {\r\n\t\tmargin-top: 8px;\r\n\t\tpadding: 4px 8px;\r\n\t\tbackground: #2196f3;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tborder-radius: 4px;\r\n\t\tcursor: pointer;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}