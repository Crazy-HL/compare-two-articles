{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, watch, computed } from \"vue\";\nexport default {\n  __name: 'CompareTable',\n  props: {\n    div1RawData: String,\n    div3RawData: String\n  },\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const props = __props;\n\n    // 标准化表格数据输出\n    const processedTable1 = ref({\n      title: \"表格1\",\n      rows: [],\n      columns: []\n    });\n    const processedTable2 = ref({\n      title: \"表格2\",\n      rows: [],\n      columns: []\n    });\n\n    // 监听数据变化\n    watch(() => [props.div1RawData, props.div3RawData], () => {\n      if (props.div1RawData) {\n        processedTable1.value = parseTableToStandardJSON(props.div1RawData, \"表格1\");\n      }\n      if (props.div3RawData) {\n        processedTable2.value = parseTableToStandardJSON(props.div3RawData, \"表格2\");\n      }\n    }, {\n      immediate: true\n    });\n\n    /**\r\n     * 通用表格解析方法\r\n     * 输出标准格式：\r\n     * {\r\n     *   title: string,\r\n     *   rows: [属性名1, 属性名2...],\r\n     *   columns: [\r\n     *     { name: \"记录名\", data: { 属性1: 值, 属性2: 值... }},\r\n     *     ...\r\n     *   ]\r\n     * }\r\n     */\n    function parseTableToStandardJSON(html) {\n      let defaultTitle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"未命名表格\";\n      const result = {\n        title: extractTitleFromHTML(html) || defaultTitle,\n        rows: [],\n        columns: []\n      };\n      try {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(html, \"text/html\");\n        const table = doc.querySelector(\"table\");\n        if (!table) return result;\n\n        // 提取表头（兼容th/td混用）\n        const headerCells = table.querySelector(\"tr\")?.children || [];\n        result.rows = Array.from(headerCells).map(cell => {\n          return cell.textContent.replace(/[\\n†*]/g, \"\").trim().replace(/\\s+/g, \" \");\n        });\n\n        // 提取数据行\n        const dataRows = Array.from(table.querySelectorAll(\"tr:not(:first-child)\"));\n        dataRows.forEach(row => {\n          const cells = Array.from(row.children);\n          if (cells.length === 0) return;\n          const recordName = cells[0].textContent.trim();\n          const recordData = {};\n          result.rows.forEach((header, index) => {\n            if (index < cells.length) {\n              recordData[header] = smartValueConversion(cells[index].textContent.trim());\n            }\n          });\n          result.columns.push({\n            name: recordName,\n            data: recordData\n          });\n        });\n        return result;\n      } catch (error) {\n        console.error(\"表格解析错误:\", error);\n        return result;\n      }\n    }\n\n    // 智能值类型转换\n    function smartValueConversion(rawValue) {\n      if (!rawValue || [\"-\", \"—\", \"N/A\"].includes(rawValue)) return null;\n      if (/^\\.\\d+$/.test(rawValue)) return parseFloat(rawValue);\n      const numericValue = parseFloat(rawValue.replace(/[^\\d.-]/g, \"\"));\n      return isNaN(numericValue) ? rawValue : numericValue;\n    }\n\n    // 从HTML提取标题\n    function extractTitleFromHTML(html) {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(html, \"text/html\");\n      return doc.querySelector(\"h1, h2, h3, h4, caption\")?.textContent.trim() || null;\n    }\n    const __returned__ = {\n      props,\n      processedTable1,\n      processedTable2,\n      parseTableToStandardJSON,\n      smartValueConversion,\n      extractTitleFromHTML,\n      ref,\n      watch,\n      computed\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","computed","props","__props","processedTable1","title","rows","columns","processedTable2","div1RawData","div3RawData","value","parseTableToStandardJSON","immediate","html","defaultTitle","arguments","length","undefined","result","extractTitleFromHTML","parser","DOMParser","doc","parseFromString","table","querySelector","headerCells","children","Array","from","map","cell","textContent","replace","trim","dataRows","querySelectorAll","forEach","row","cells","recordName","recordData","header","index","smartValueConversion","push","name","data","error","console","rawValue","includes","test","parseFloat","numericValue","isNaN"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/CompareTable.vue"],"sourcesContent":["<template>\r\n\t<div class=\"data-processor\">\r\n\t\t<slot\r\n\t\t\t:processedData=\"{\r\n\t\t\t\ttable1: processedTable1,\r\n\t\t\t\ttable2: processedTable2\r\n\t\t\t}\"></slot>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, watch, computed } from \"vue\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdiv1RawData: String,\r\n\t\tdiv3RawData: String\r\n\t});\r\n\r\n\t// 标准化表格数据输出\r\n\tconst processedTable1 = ref({ title: \"表格1\", rows: [], columns: [] });\r\n\tconst processedTable2 = ref({ title: \"表格2\", rows: [], columns: [] });\r\n\r\n\t// 监听数据变化\r\n\twatch(\r\n\t\t() => [props.div1RawData, props.div3RawData],\r\n\t\t() => {\r\n\t\t\tif (props.div1RawData) {\r\n\t\t\t\tprocessedTable1.value = parseTableToStandardJSON(\r\n\t\t\t\t\tprops.div1RawData,\r\n\t\t\t\t\t\"表格1\"\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tif (props.div3RawData) {\r\n\t\t\t\tprocessedTable2.value = parseTableToStandardJSON(\r\n\t\t\t\t\tprops.div3RawData,\r\n\t\t\t\t\t\"表格2\"\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\t/**\r\n\t * 通用表格解析方法\r\n\t * 输出标准格式：\r\n\t * {\r\n\t *   title: string,\r\n\t *   rows: [属性名1, 属性名2...],\r\n\t *   columns: [\r\n\t *     { name: \"记录名\", data: { 属性1: 值, 属性2: 值... }},\r\n\t *     ...\r\n\t *   ]\r\n\t * }\r\n\t */\r\n\tfunction parseTableToStandardJSON(html, defaultTitle = \"未命名表格\") {\r\n\t\tconst result = {\r\n\t\t\ttitle: extractTitleFromHTML(html) || defaultTitle,\r\n\t\t\trows: [],\r\n\t\t\tcolumns: []\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\t\tconst table = doc.querySelector(\"table\");\r\n\t\t\tif (!table) return result;\r\n\r\n\t\t\t// 提取表头（兼容th/td混用）\r\n\t\t\tconst headerCells = table.querySelector(\"tr\")?.children || [];\r\n\t\t\tresult.rows = Array.from(headerCells).map(cell => {\r\n\t\t\t\treturn cell.textContent\r\n\t\t\t\t\t.replace(/[\\n†*]/g, \"\")\r\n\t\t\t\t\t.trim()\r\n\t\t\t\t\t.replace(/\\s+/g, \" \");\r\n\t\t\t});\r\n\r\n\t\t\t// 提取数据行\r\n\t\t\tconst dataRows = Array.from(\r\n\t\t\t\ttable.querySelectorAll(\"tr:not(:first-child)\")\r\n\t\t\t);\r\n\t\t\tdataRows.forEach(row => {\r\n\t\t\t\tconst cells = Array.from(row.children);\r\n\t\t\t\tif (cells.length === 0) return;\r\n\r\n\t\t\t\tconst recordName = cells[0].textContent.trim();\r\n\t\t\t\tconst recordData = {};\r\n\r\n\t\t\t\tresult.rows.forEach((header, index) => {\r\n\t\t\t\t\tif (index < cells.length) {\r\n\t\t\t\t\t\trecordData[header] = smartValueConversion(\r\n\t\t\t\t\t\t\tcells[index].textContent.trim()\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tresult.columns.push({\r\n\t\t\t\t\tname: recordName,\r\n\t\t\t\t\tdata: recordData\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\treturn result;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"表格解析错误:\", error);\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\n\t// 智能值类型转换\r\n\tfunction smartValueConversion(rawValue) {\r\n\t\tif (!rawValue || [\"-\", \"—\", \"N/A\"].includes(rawValue)) return null;\r\n\t\tif (/^\\.\\d+$/.test(rawValue)) return parseFloat(rawValue);\r\n\t\tconst numericValue = parseFloat(rawValue.replace(/[^\\d.-]/g, \"\"));\r\n\t\treturn isNaN(numericValue) ? rawValue : numericValue;\r\n\t}\r\n\r\n\t// 从HTML提取标题\r\n\tfunction extractTitleFromHTML(html) {\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\treturn (\r\n\t\t\tdoc.querySelector(\"h1, h2, h3, h4, caption\")?.textContent.trim() || null\r\n\t\t);\r\n\t}\r\n</script>\r\n\r\n<style scoped>\r\n\t.data-processor {\r\n\t\tdisplay: contents; /* 不影响父容器布局 */\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}