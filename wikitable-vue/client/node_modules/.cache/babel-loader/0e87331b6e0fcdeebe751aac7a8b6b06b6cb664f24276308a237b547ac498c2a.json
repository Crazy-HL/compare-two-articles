{"ast":null,"code":"import { ref, computed, onMounted } from \"vue\";\nimport SimpleChart from \"./SimpleChart.vue\";\nimport FullChart from \"./FullChart.vue\";\nimport bus from \"@/js/eventBus.js\";\nexport default {\n  __name: 'CompareTable',\n  props: {\n    div1RawData: Object,\n    div3RawData: Object\n  },\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const props = __props;\n    const leftInfobox = ref({\n      title: \"\",\n      type: \"\",\n      data: {}\n    });\n    const rightInfobox = ref({\n      title: \"\",\n      type: \"\",\n      data: {}\n    });\n    const showFullChartModal = ref(false);\n    const currentChart = ref({\n      title: \"\",\n      field: {},\n      data: []\n    });\n    const COMPARABLE_FIELDS = [{\n      key: \"GDP\",\n      type: \"number\",\n      typeLabel: \"数值(万亿美元)\",\n      visualization: \"bar-chart\",\n      legend: \"国内生产总值（单位：万亿美元）\"\n    }, {\n      key: \"Population\",\n      type: \"number\",\n      typeLabel: \"数值(人)\",\n      visualization: \"bar-chart\",\n      legend: \"人口数量（单位：亿人）\"\n    }, {\n      key: \"GDP growth\",\n      type: \"percentage\",\n      typeLabel: \"百分比(%)\",\n      visualization: \"line-chart\",\n      legend: \"GDP年增长率（%）\"\n    }, {\n      key: \"Inflation (CPI)\",\n      type: \"percentage\",\n      typeLabel: \"百分比(%)\",\n      visualization: \"pie-chart\",\n      legend: \"消费者价格指数变化\"\n    }, {\n      key: \"Labor force by occupation\",\n      type: \"percentage\",\n      typeLabel: \"百分比(%)\",\n      visualization: \"pie-chart\",\n      legend: \"劳动力分布比例\"\n    }, {\n      key: \"GDP rank\",\n      type: \"text\",\n      typeLabel: \"文本\",\n      visualization: \"text-only\",\n      legend: \"全球GDP排名\"\n    }];\n\n    // 新增：计算所有可比字段的最大值\n    const maxValues = computed(() => {\n      const values = {};\n      COMPARABLE_FIELDS.forEach(field => {\n        if (field.visualization === \"bar-chart\") {\n          const leftData = getField(leftInfobox.value, field.key);\n          const rightData = getField(rightInfobox.value, field.key);\n          const leftValues = Array.isArray(leftData) ? leftData.map(item => safeToNumber(item, field.key)) : [safeToNumber(leftData, field.key)];\n          const rightValues = Array.isArray(rightData) ? rightData.map(item => safeToNumber(item, field.key)) : [safeToNumber(rightData, field.key)];\n          const allValues = [...leftValues, ...rightValues].filter(v => !isNaN(v));\n          values[field.key] = allValues.length > 0 ? Math.max(...allValues) : 0;\n        }\n      });\n      return values;\n    });\n\n    // 辅助函数：安全转换为数字\n    const safeToNumber = (value, fieldKey) => {\n      if (value === null || value === undefined) return NaN;\n      if (typeof value === \"number\") return value;\n      if (typeof value === \"object\") {\n        const numValue = Number(value.value || value.raw || 0);\n        return isNaN(numValue) ? NaN : numValue;\n      }\n      const strValue = String(value).replace(/[^0-9.-]/g, \"\");\n      const num = parseFloat(strValue);\n      return isNaN(num) ? NaN : num;\n    };\n    const showFullChart = (infobox, field) => {\n      currentChart.value = {\n        title: infobox.title,\n        field: field,\n        data: getField(infobox, field.key)\n      };\n      showFullChartModal.value = true;\n    };\n    const closeFullChart = () => {\n      showFullChartModal.value = false;\n    };\n    const hoverInfobox = (infobox, fieldKey, side) => {\n      bus.emit(`hover-${side}-infobox`, {\n        fieldKey,\n        infoboxTitle: infobox.title\n      });\n    };\n    const unhoverInfobox = side => {\n      bus.emit(`unhover-${side}-infobox`);\n    };\n    const hoverBothInfoboxes = fieldKey => {\n      hoverInfobox(leftInfobox.value, fieldKey, \"left\");\n      hoverInfobox(rightInfobox.value, fieldKey, \"right\");\n    };\n    const unhoverBothInfoboxes = () => {\n      unhoverInfobox(\"left\");\n      unhoverInfobox(\"right\");\n    };\n    const getField = (infobox, fieldKey) => {\n      if (!infobox?.data) return [];\n      for (const section of Object.values(infobox.data)) {\n        if (section[fieldKey] !== undefined) {\n          return Array.isArray(section[fieldKey]) ? section[fieldKey] : [section[fieldKey]];\n        }\n      }\n      return [];\n    };\n    const comparableFields = computed(() => {\n      return COMPARABLE_FIELDS.filter(field => {\n        const leftVal = getField(leftInfobox.value, field.key);\n        const rightVal = getField(rightInfobox.value, field.key);\n        return leftVal.length > 0 || rightVal.length > 0;\n      });\n    });\n    const processInfoboxData = data => {\n      if (!data) return {\n        title: \"\",\n        type: \"\",\n        data: {}\n      };\n      return {\n        title: data.title || \"无标题\",\n        type: data.type || \"未知类型\",\n        data: data.sections || {}\n      };\n    };\n    onMounted(() => {\n      bus.on(\"div1_InfoboxData\", data => {\n        leftInfobox.value = processInfoboxData(data);\n      });\n      bus.on(\"div3_InfoboxData\", data => {\n        rightInfobox.value = processInfoboxData(data);\n      });\n    });\n    const __returned__ = {\n      props,\n      leftInfobox,\n      rightInfobox,\n      showFullChartModal,\n      currentChart,\n      COMPARABLE_FIELDS,\n      maxValues,\n      safeToNumber,\n      showFullChart,\n      closeFullChart,\n      hoverInfobox,\n      unhoverInfobox,\n      hoverBothInfoboxes,\n      unhoverBothInfoboxes,\n      getField,\n      comparableFields,\n      processInfoboxData,\n      ref,\n      computed,\n      onMounted,\n      SimpleChart,\n      FullChart,\n      get bus() {\n        return bus;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","SimpleChart","FullChart","bus","props","__props","leftInfobox","title","type","data","rightInfobox","showFullChartModal","currentChart","field","COMPARABLE_FIELDS","key","typeLabel","visualization","legend","maxValues","values","forEach","leftData","getField","value","rightData","leftValues","Array","isArray","map","item","safeToNumber","rightValues","allValues","filter","v","isNaN","length","Math","max","fieldKey","undefined","NaN","numValue","Number","raw","strValue","String","replace","num","parseFloat","showFullChart","infobox","closeFullChart","hoverInfobox","side","emit","infoboxTitle","unhoverInfobox","hoverBothInfoboxes","unhoverBothInfoboxes","section","Object","comparableFields","leftVal","rightVal","processInfoboxData","sections","on"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/CompareTable.vue"],"sourcesContent":["<template>\r\n\t<div class=\"compare-container\">\r\n\t\t<div class=\"comparison-grid\">\r\n\t\t\t<div class=\"header left-column\">\r\n\t\t\t\t{{ leftInfobox.title }}\r\n\t\t\t</div>\r\n\t\t\t<div class=\"header middle-column\">对比属性</div>\r\n\t\t\t<div class=\"header right-column\">\r\n\t\t\t\t{{ rightInfobox.title }}\r\n\t\t\t</div>\r\n\r\n\t\t\t<template v-for=\"field in comparableFields\" :key=\"field.key\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell left-column\"\r\n\t\t\t\t\t@mouseover=\"hoverInfobox(leftInfobox, field.key, 'left')\"\r\n\t\t\t\t\t@mouseout=\"unhoverInfobox('left')\"\r\n\t\t\t\t\t@click=\"showFullChart(leftInfobox, field)\">\r\n\t\t\t\t\t<SimpleChart\r\n\t\t\t\t\t\t:field=\"getField(leftInfobox, field.key)\"\r\n\t\t\t\t\t\t:type=\"field.type\"\r\n\t\t\t\t\t\t:visualization=\"field.visualization\"\r\n\t\t\t\t\t\t:maxValue=\"maxValues[field.key]\"\r\n\t\t\t\t\t\t:fieldKey=\"field.key\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell middle-column\"\r\n\t\t\t\t\t@mouseover=\"hoverBothInfoboxes(field.key)\"\r\n\t\t\t\t\t@mouseout=\"unhoverBothInfoboxes()\">\r\n\t\t\t\t\t<div class=\"field-name\">{{ field.key }}</div>\r\n\t\t\t\t\t<div class=\"field-type\">{{ field.typeLabel }}</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell right-column\"\r\n\t\t\t\t\t@mouseover=\"hoverInfobox(rightInfobox, field.key, 'right')\"\r\n\t\t\t\t\t@mouseout=\"unhoverInfobox('right')\"\r\n\t\t\t\t\t@click=\"showFullChart(rightInfobox, field)\">\r\n\t\t\t\t\t<SimpleChart\r\n\t\t\t\t\t\t:field=\"getField(rightInfobox, field.key)\"\r\n\t\t\t\t\t\t:type=\"field.type\"\r\n\t\t\t\t\t\t:visualization=\"field.visualization\"\r\n\t\t\t\t\t\t:maxValue=\"maxValues[field.key]\"\r\n\t\t\t\t\t\t:fieldKey=\"field.key\" />\r\n\t\t\t\t</div>\r\n\t\t\t</template>\r\n\t\t</div>\r\n\r\n\t\t<!-- 全屏图表模态框 -->\r\n\t\t<div\r\n\t\t\tv-if=\"showFullChartModal\"\r\n\t\t\tclass=\"full-chart-modal\"\r\n\t\t\t@click.self=\"closeFullChart\">\r\n\t\t\t<div class=\"modal-content\">\r\n\t\t\t\t<button class=\"close-btn\" @click=\"closeFullChart\">×</button>\r\n\t\t\t\t<h3>{{ currentChart.title }} - {{ currentChart.field.key }}</h3>\r\n\t\t\t\t<div class=\"chart-container\">\r\n\t\t\t\t\t<FullChart\r\n\t\t\t\t\t\t:field=\"currentChart.data\"\r\n\t\t\t\t\t\t:type=\"currentChart.field.type\"\r\n\t\t\t\t\t\t:visualization=\"currentChart.field.visualization\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"chart-legend\" v-if=\"currentChart.field.legend\">\r\n\t\t\t\t\t{{ currentChart.field.legend }}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, onMounted } from \"vue\";\r\n\timport SimpleChart from \"./SimpleChart.vue\";\r\n\timport FullChart from \"./FullChart.vue\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdiv1RawData: Object,\r\n\t\tdiv3RawData: Object\r\n\t});\r\n\r\n\tconst leftInfobox = ref({ title: \"\", type: \"\", data: {} });\r\n\tconst rightInfobox = ref({ title: \"\", type: \"\", data: {} });\r\n\tconst showFullChartModal = ref(false);\r\n\tconst currentChart = ref({\r\n\t\ttitle: \"\",\r\n\t\tfield: {},\r\n\t\tdata: []\r\n\t});\r\n\r\n\tconst COMPARABLE_FIELDS = [\r\n\t\t{\r\n\t\t\tkey: \"GDP\",\r\n\t\t\ttype: \"number\",\r\n\t\t\ttypeLabel: \"数值(万亿美元)\",\r\n\t\t\tvisualization: \"bar-chart\",\r\n\t\t\tlegend: \"国内生产总值（单位：万亿美元）\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Population\",\r\n\t\t\ttype: \"number\",\r\n\t\t\ttypeLabel: \"数值(人)\",\r\n\t\t\tvisualization: \"bar-chart\",\r\n\t\t\tlegend: \"人口数量（单位：亿人）\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"GDP growth\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"line-chart\",\r\n\t\t\tlegend: \"GDP年增长率（%）\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Inflation (CPI)\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"pie-chart\",\r\n\t\t\tlegend: \"消费者价格指数变化\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Labor force by occupation\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"pie-chart\",\r\n\t\t\tlegend: \"劳动力分布比例\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"GDP rank\",\r\n\t\t\ttype: \"text\",\r\n\t\t\ttypeLabel: \"文本\",\r\n\t\t\tvisualization: \"text-only\",\r\n\t\t\tlegend: \"全球GDP排名\"\r\n\t\t}\r\n\t];\r\n\r\n\t// 新增：计算所有可比字段的最大值\r\n\tconst maxValues = computed(() => {\r\n\t\tconst values = {};\r\n\r\n\t\tCOMPARABLE_FIELDS.forEach(field => {\r\n\t\t\tif (field.visualization === \"bar-chart\") {\r\n\t\t\t\tconst leftData = getField(leftInfobox.value, field.key);\r\n\t\t\t\tconst rightData = getField(rightInfobox.value, field.key);\r\n\r\n\t\t\t\tconst leftValues = Array.isArray(leftData)\r\n\t\t\t\t\t? leftData.map(item => safeToNumber(item, field.key))\r\n\t\t\t\t\t: [safeToNumber(leftData, field.key)];\r\n\r\n\t\t\t\tconst rightValues = Array.isArray(rightData)\r\n\t\t\t\t\t? rightData.map(item => safeToNumber(item, field.key))\r\n\t\t\t\t\t: [safeToNumber(rightData, field.key)];\r\n\r\n\t\t\t\tconst allValues = [...leftValues, ...rightValues].filter(\r\n\t\t\t\t\tv => !isNaN(v)\r\n\t\t\t\t);\r\n\t\t\t\tvalues[field.key] = allValues.length > 0 ? Math.max(...allValues) : 0;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn values;\r\n\t});\r\n\r\n\t// 辅助函数：安全转换为数字\r\n\tconst safeToNumber = (value, fieldKey) => {\r\n\t\tif (value === null || value === undefined) return NaN;\r\n\t\tif (typeof value === \"number\") return value;\r\n\t\tif (typeof value === \"object\") {\r\n\t\t\tconst numValue = Number(value.value || value.raw || 0);\r\n\t\t\treturn isNaN(numValue) ? NaN : numValue;\r\n\t\t}\r\n\r\n\t\tconst strValue = String(value).replace(/[^0-9.-]/g, \"\");\r\n\t\tconst num = parseFloat(strValue);\r\n\t\treturn isNaN(num) ? NaN : num;\r\n\t};\r\n\r\n\tconst showFullChart = (infobox, field) => {\r\n\t\tcurrentChart.value = {\r\n\t\t\ttitle: infobox.title,\r\n\t\t\tfield: field,\r\n\t\t\tdata: getField(infobox, field.key)\r\n\t\t};\r\n\t\tshowFullChartModal.value = true;\r\n\t};\r\n\r\n\tconst closeFullChart = () => {\r\n\t\tshowFullChartModal.value = false;\r\n\t};\r\n\r\n\tconst hoverInfobox = (infobox, fieldKey, side) => {\r\n\t\tbus.emit(`hover-${side}-infobox`, {\r\n\t\t\tfieldKey,\r\n\t\t\tinfoboxTitle: infobox.title\r\n\t\t});\r\n\t};\r\n\r\n\tconst unhoverInfobox = side => {\r\n\t\tbus.emit(`unhover-${side}-infobox`);\r\n\t};\r\n\r\n\tconst hoverBothInfoboxes = fieldKey => {\r\n\t\thoverInfobox(leftInfobox.value, fieldKey, \"left\");\r\n\t\thoverInfobox(rightInfobox.value, fieldKey, \"right\");\r\n\t};\r\n\r\n\tconst unhoverBothInfoboxes = () => {\r\n\t\tunhoverInfobox(\"left\");\r\n\t\tunhoverInfobox(\"right\");\r\n\t};\r\n\r\n\tconst getField = (infobox, fieldKey) => {\r\n\t\tif (!infobox?.data) return [];\r\n\r\n\t\tfor (const section of Object.values(infobox.data)) {\r\n\t\t\tif (section[fieldKey] !== undefined) {\r\n\t\t\t\treturn Array.isArray(section[fieldKey])\r\n\t\t\t\t\t? section[fieldKey]\r\n\t\t\t\t\t: [section[fieldKey]];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn [];\r\n\t};\r\n\r\n\tconst comparableFields = computed(() => {\r\n\t\treturn COMPARABLE_FIELDS.filter(field => {\r\n\t\t\tconst leftVal = getField(leftInfobox.value, field.key);\r\n\t\t\tconst rightVal = getField(rightInfobox.value, field.key);\r\n\t\t\treturn leftVal.length > 0 || rightVal.length > 0;\r\n\t\t});\r\n\t});\r\n\r\n\tconst processInfoboxData = data => {\r\n\t\tif (!data) return { title: \"\", type: \"\", data: {} };\r\n\t\treturn {\r\n\t\t\ttitle: data.title || \"无标题\",\r\n\t\t\ttype: data.type || \"未知类型\",\r\n\t\t\tdata: data.sections || {}\r\n\t\t};\r\n\t};\r\n\r\n\tonMounted(() => {\r\n\t\tbus.on(\"div1_InfoboxData\", data => {\r\n\t\t\tleftInfobox.value = processInfoboxData(data);\r\n\t\t});\r\n\r\n\t\tbus.on(\"div3_InfoboxData\", data => {\r\n\t\t\trightInfobox.value = processInfoboxData(data);\r\n\t\t});\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.compare-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tpadding: 20px;\r\n\t\tbox-sizing: border-box;\r\n\t\toverflow-y: auto;\r\n\t}\r\n\r\n\t.comparison-grid {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: 1fr 150px 1fr;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t\tborder-radius: 4px;\r\n\t\toverflow: hidden;\r\n\t}\r\n\r\n\t.header {\r\n\t\tpadding: 12px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n\t\tposition: sticky;\r\n\t\ttop: 0;\r\n\t\tz-index: 1;\r\n\t\tborder-right: 1px solid #475569;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tmin-height: 50px;\r\n\t\twhite-space: nowrap;\r\n\t}\r\n\r\n\t.header.middle-column {\r\n\t\tpadding: 12px 10px;\r\n\t\tbackground: #1e293b;\r\n\t}\r\n\r\n\t.cell {\r\n\t\tpadding: 15px;\r\n\t\theight: 160px;\r\n\t\tborder-bottom: 1px solid #e0e0e0;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tjustify-content: center;\r\n\t\tposition: relative;\r\n\t\tcursor: pointer;\r\n\t\ttransition: all 0.3s ease;\r\n\t}\r\n\r\n\t.cell:hover {\r\n\t\tbackground-color: #f5f5f5;\r\n\t}\r\n\r\n\t.left-column:hover {\r\n\t\tbackground-color: #fff8e1;\r\n\t}\r\n\r\n\t.right-column:hover {\r\n\t\tbackground-color: #fff8e1;\r\n\t}\r\n\r\n\t.middle-column:hover {\r\n\t\tbackground-color: #e3f2fd;\r\n\t}\r\n\r\n\t.field-name {\r\n\t\tfont-weight: bold;\r\n\t\tmargin-bottom: 5px;\r\n\t\tfont-size: 14px;\r\n\t}\r\n\r\n\t.field-type {\r\n\t\tcolor: #666;\r\n\t\tfont-size: 12px;\r\n\t\tfont-style: italic;\r\n\t}\r\n\r\n\t.full-chart-modal {\r\n\t\tposition: fixed;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\tbottom: 0;\r\n\t\tbackground-color: rgba(0, 0, 0, 0.8);\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t\tz-index: 1000;\r\n\t}\r\n\r\n\t.modal-content {\r\n\t\tbackground: white;\r\n\t\tpadding: 20px;\r\n\t\tborder-radius: 8px;\r\n\t\twidth: 80%;\r\n\t\tmax-width: 900px;\r\n\t\tmax-height: 90vh;\r\n\t\tposition: relative;\r\n\t\toverflow-y: auto;\r\n\t}\r\n\r\n\t.chart-container {\r\n\t\theight: 60vh;\r\n\t\twidth: 100%;\r\n\t\tmargin: 20px 0;\r\n\t}\r\n\r\n\t.chart-legend {\r\n\t\tfont-size: 14px;\r\n\t\tcolor: #666;\r\n\t\ttext-align: center;\r\n\t\tmargin-top: 15px;\r\n\t\tpadding-top: 15px;\r\n\t\tborder-top: 1px solid #eee;\r\n\t}\r\n\r\n\t.close-btn {\r\n\t\tposition: absolute;\r\n\t\ttop: 10px;\r\n\t\tright: 10px;\r\n\t\tfont-size: 24px;\r\n\t\tbackground: none;\r\n\t\tborder: none;\r\n\t\tcursor: pointer;\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.close-btn:hover {\r\n\t\tcolor: #333;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}