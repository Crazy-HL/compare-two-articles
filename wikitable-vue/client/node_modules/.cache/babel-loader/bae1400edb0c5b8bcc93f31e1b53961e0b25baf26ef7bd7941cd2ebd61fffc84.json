{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createBlock as _createBlock, createVNode as _createVNode, Fragment as _Fragment, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-62c843dc\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = [\"id\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass(['div0', $props.selectContentClass]),\n    id: $props.divId,\n    ref: \"divRef\"\n  }, [_createElementVNode(\"h1\", null, _toDisplayString($props.pageTitle), 1 /* TEXT */), _createCommentVNode(\" 加载动画 \"), $setup.loading ? (_openBlock(), _createBlock($setup[\"LoadingSpinner\"], {\n    key: 0\n  })) : $setup.error ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" 错误信息 \"), _createVNode($setup[\"ErrorDisplay\"], {\n    message: $setup.error,\n    onRetry: $setup.fetchWikipediaContent\n  }, null, 8 /* PROPS */, [\"message\"])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 2\n  }, [_createCommentVNode(\" 文章内容 \"), _createVNode($setup[\"WikipediaContent\"], {\n    content: $setup.pageHtml,\n    onSelect: $setup.handleSelection\n  }, null, 8 /* PROPS */, [\"content\"])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)), _createCommentVNode(\" 弹出框 \"), _createVNode($setup[\"TextPopup\"], {\n    visible: $setup.showPopup[$props.divId],\n    content: $setup.selectedText[$props.divId],\n    containerClass: $props.divId === 'div1' ? 'chart-container1' : 'chart-container2',\n    containerRef: $setup.divRef,\n    onClose: $setup.closePopup\n  }, null, 8 /* PROPS */, [\"visible\", \"content\", \"containerClass\", \"containerRef\"]), _createCommentVNode(\" 悬浮大纲组件 \"), _createVNode($setup[\"ArticleOutline\"], {\n    content: $setup.pageHtml,\n    divId: $props.divId,\n    linkedOutline: _ctx.linkedOutline\n  }, null, 8 /* PROPS */, [\"content\", \"divId\", \"linkedOutline\"]), _createCommentVNode(\" 添加 key 属性 \")], 10 /* CLASS, PROPS */, _hoisted_1);\n}","map":{"version":3,"names":["_createElementBlock","class","_normalizeClass","$props","selectContentClass","id","divId","ref","_createElementVNode","_toDisplayString","pageTitle","_createCommentVNode","$setup","loading","_createBlock","key","error","_Fragment","_createVNode","message","onRetry","fetchWikipediaContent","content","pageHtml","onSelect","handleSelection","visible","showPopup","selectedText","containerClass","containerRef","divRef","onClose","closePopup","linkedOutline","_ctx","_hoisted_1"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\ParentComponent.vue"],"sourcesContent":["<template>\r\n\t<div :class=\"['div0', selectContentClass]\" :id=\"divId\" ref=\"divRef\">\r\n\t\t<h1>{{ pageTitle }}</h1>\r\n\r\n\t\t<!-- 加载动画 -->\r\n\t\t<LoadingSpinner v-if=\"loading\" />\r\n\r\n\t\t<!-- 错误信息 -->\r\n\t\t<ErrorDisplay\r\n\t\t\tv-else-if=\"error\"\r\n\t\t\t:message=\"error\"\r\n\t\t\t@retry=\"fetchWikipediaContent\" />\r\n\r\n\t\t<!-- 文章内容 -->\r\n\t\t<WikipediaContent v-else :content=\"pageHtml\" @select=\"handleSelection\" />\r\n\r\n\t\t<!-- 弹出框 -->\r\n\t\t<TextPopup\r\n\t\t\t:visible=\"showPopup[divId]\"\r\n\t\t\t:content=\"selectedText[divId]\"\r\n\t\t\t:containerClass=\"\r\n\t\t\t\tdivId === 'div1' ? 'chart-container1' : 'chart-container2'\r\n\t\t\t\"\r\n\t\t\t:containerRef=\"divRef\"\r\n\t\t\t@close=\"closePopup\" />\r\n\r\n\t\t<!-- 悬浮大纲组件 -->\r\n\t\t<ArticleOutline\r\n\t\t\t:content=\"pageHtml\"\r\n\t\t\t:divId=\"divId\"\r\n\t\t\t:linkedOutline=\"linkedOutline\" />\r\n\t\t<!-- 添加 key 属性 -->\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted, nextTick } from \"vue\";\r\n\timport LoadingSpinner from \"./LoadingSpinner.vue\";\r\n\timport ErrorDisplay from \"./ErrorDisplay.vue\";\r\n\timport WikipediaContent from \"./WikipediaContent.vue\";\r\n\timport TextPopup from \"./TextPopup.vue\";\r\n\timport ArticleOutline from \"./ArticleOutline.vue\"; // 引入大纲组件\r\n\timport * as d3 from \"d3\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\r\n\tconst props = defineProps({\r\n\t\tpageTitle: String,\r\n\t\tdivId: String,\r\n\t\tselectContentClass: String\r\n\t});\r\n\r\n\tconst pageHtml = ref(\"\"); // 文章 HTML 内容\r\n\tconst loading = ref(true); // 加载状态\r\n\tconst error = ref(\"\"); // 错误信息\r\n\tconst selectedText = ref({}); // 存储每个 div 的选中内容\r\n\tconst showPopup = ref({}); // 存储每个 div 的弹窗显示状态\r\n\tconst divRef = ref(null); // `Div1` 或 `Div3` 的 DOM 参考\r\n\tconst sections = ref({}); // 存储章节ID到内容的映射\r\n\r\n\t// **获取 Wikipedia 页面**\r\n\tconst fetchWikipediaContent = async () => {\r\n\t\ttry {\r\n\t\t\tconst apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(\r\n\t\t\t\tprops.pageTitle\r\n\t\t\t)}`;\r\n\t\t\tconst response = await fetch(apiUrl);\r\n\t\t\tif (!response.ok) throw new Error(\"Failed to fetch data\");\r\n\r\n\t\t\tconst html = await response.text();\r\n\r\n\t\t\t// 解析 HTML\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\r\n\t\t\t// 收集章节内容\r\n\t\t\tconst headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\r\n\t\t\theadings.forEach((heading, index) => {\r\n\t\t\t\tconst id = `heading-${index}-${props.divId}`;\r\n\t\t\t\theading.id = id;\r\n\r\n\t\t\t\t// 收集该标题下的内容\r\n\t\t\t\tlet content = [];\r\n\t\t\t\tlet nextElement = heading.nextElementSibling;\r\n\t\t\t\twhile (nextElement && !nextElement.matches(\"h1, h2, h3, h4, h5, h6\")) {\r\n\t\t\t\t\tcontent.push(nextElement.outerHTML);\r\n\t\t\t\t\tnextElement = nextElement.nextElementSibling;\r\n\t\t\t\t}\r\n\t\t\t\tsections.value[id] = content.join(\"\");\r\n\t\t\t});\r\n\r\n\t\t\t// 动态注入 Wikipedia 样式\r\n\t\t\tconst styles = Array.from(doc.querySelectorAll('link[rel=\"stylesheet\"]'));\r\n\t\t\tstyles.forEach(link => {\r\n\t\t\t\tif (!document.querySelector(`link[href=\"${link.href}\"]`)) {\r\n\t\t\t\t\tconst styleTag = document.createElement(\"link\");\r\n\t\t\t\t\tstyleTag.rel = \"stylesheet\";\r\n\t\t\t\t\tstyleTag.href = link.href;\r\n\t\t\t\t\tdocument.head.appendChild(styleTag);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// 仅获取正文部分\r\n\t\t\tconst contentElement = doc.querySelector(\"body\");\r\n\t\t\tif (!contentElement) throw new Error(\"Content not found\");\r\n\r\n\t\t\tpageHtml.value = contentElement.innerHTML;\r\n\r\n\t\t\t// 手动引入 Wikipedia CSS\r\n\t\t\tinjectWikipediaStyles();\r\n\t\t} catch (err) {\r\n\t\t\terror.value = \"Error fetching Wikipedia content: \" + err.message;\r\n\t\t} finally {\r\n\t\t\tloading.value = false;\r\n\t\t}\r\n\t};\r\n\r\n\t// **手动引入 Wikipedia CSS**\r\n\tconst injectWikipediaStyles = () => {\r\n\t\tconst wikipediaStyles = [\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=site.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=ext.cite.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=ext.scribunto.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=skins.vector.styles\"\r\n\t\t];\r\n\r\n\t\twikipediaStyles.forEach(url => {\r\n\t\t\tif (!document.querySelector(`link[href=\"${url}\"]`)) {\r\n\t\t\t\tconst styleTag = document.createElement(\"link\");\r\n\t\t\t\tstyleTag.rel = \"stylesheet\";\r\n\t\t\t\tstyleTag.href = url;\r\n\t\t\t\tdocument.head.appendChild(styleTag);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t// **处理选中内容**\r\n\tconst handleSelection = content => {\r\n\t\tconsole.log(`[${props.divId}] 收到选中内容`, content);\r\n\r\n\t\t// 获取选中区域最近的标题元素\r\n\t\tconst getNearestHeading = () => {\r\n\t\t\tconst selection = window.getSelection();\r\n\t\t\tif (!selection.rangeCount) return null;\r\n\r\n\t\t\tlet node = selection.getRangeAt(0).commonAncestorContainer;\r\n\t\t\twhile (node && !node.matches?.(\"h1, h2, h3, h4, h5, h6\")) {\r\n\t\t\t\tnode = node.parentNode;\r\n\t\t\t}\r\n\t\t\treturn node;\r\n\t\t};\r\n\r\n\t\tconst currentHeading = getNearestHeading();\r\n\t\tif (!currentHeading) {\r\n\t\t\tconsole.warn(\"未找到关联的标题元素\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst sectionId = currentHeading.id;\r\n\t\tconsole.log(`[${props.divId}] 当前章节ID: ${sectionId}`);\r\n\r\n\t\t// 查找关联章节\r\n\t\tconst linkedItem = linkedOutline.value.find(\r\n\t\t\titem => item.leftId === sectionId || item.rightId === sectionId\r\n\t\t);\r\n\r\n\t\tif (linkedItem) {\r\n\t\t\tconst targetDiv = props.divId === \"div1\" ? \"div3\" : \"div1\";\r\n\t\t\tconst targetSectionId =\r\n\t\t\t\tlinkedItem[props.divId === \"div1\" ? \"rightId\" : \"leftId\"];\r\n\t\t\tconsole.log(\r\n\t\t\t\t`[${props.divId}] 找到关联章节: ${targetSectionId} → 触发 ${targetDiv}`\r\n\t\t\t);\r\n\r\n\t\t\t// 触发关联更新\r\n\t\t\tbus.emit(`cross-update-${targetDiv}`, {\r\n\t\t\t\tsectionId: targetSectionId,\r\n\t\t\t\tcontent: sections.value[targetSectionId] || \"未找到相关内容\"\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// 显示当前弹窗\r\n\t\tselectedText.value = { ...selectedText.value, [props.divId]: content };\r\n\t\tshowPopup.value = { ...showPopup.value, [props.divId]: true };\r\n\t};\r\n\r\n\t// **关闭弹出框**\r\n\tconst closePopup = () => {\r\n\t\tshowPopup.value[props.divId] = false; // 根据 divId 关闭弹窗\r\n\t\tselectedText.value[props.divId] = \"\"; // 根据 divId 清除选中内容\r\n\r\n\t\t// 根据 divId 清空对应的容器\r\n\t\tconst container =\r\n\t\t\tprops.divId === \"div1\" ? \".chart-container1\" : \".chart-container2\";\r\n\t\td3.select(container).html(\"\");\r\n\t};\r\n\r\n\t// **更新遮罩层和弹出框的位置**\r\n\tconst updatePopupPosition = () => {\r\n\t\tif (showPopup.value[props.divId] && divRef.value) {\r\n\t\t\tconst popup = divRef.value.querySelector(\".text-popup\");\r\n\t\t\tconst overlay = divRef.value.querySelector(\".overlay\");\r\n\t\t\tif (popup && overlay) {\r\n\t\t\t\tconst rect = divRef.value.getBoundingClientRect();\r\n\t\t\t\tconst scrollTop = divRef.value.scrollTop;\r\n\t\t\t\tconst scrollLeft = divRef.value.scrollLeft;\r\n\r\n\t\t\t\t// 动态调整遮罩层和弹出框的位置\r\n\t\t\t\toverlay.style.top = `${scrollTop}px`;\r\n\t\t\t\toverlay.style.left = `${scrollLeft}px`;\r\n\t\t\t\toverlay.style.width = `${divRef.value.clientWidth}px`;\r\n\t\t\t\toverlay.style.height = `${divRef.value.clientHeight}px`;\r\n\r\n\t\t\t\tpopup.style.top = `${rect.height / 2 + scrollTop}px`;\r\n\t\t\t\tpopup.style.left = `${rect.width / 2 + scrollLeft}px`;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// **组件挂载后加载 Wikipedia 内容**\r\n\tonMounted(() => {\r\n\t\t// 确保 divRef 已初始化\r\n\t\tif (divRef.value) {\r\n\t\t\tconsole.log(\"divRef 已绑定到 DOM 元素:\", divRef.value);\r\n\t\t} else {\r\n\t\t\tconsole.error(\"divRef 未绑定到 DOM 元素\");\r\n\t\t}\r\n\t\tfetchWikipediaContent();\r\n\r\n\t\t// 监听父容器滚动事件\r\n\t\tif (divRef.value) {\r\n\t\t\tdivRef.value.addEventListener(\"scroll\", updatePopupPosition);\r\n\t\t}\r\n\r\n\t\t// 监听来自另一个Div的联动事件\r\n\t\tconst eventName = `cross-update-${props.divId}`;\r\n\t\tconsole.log(`[${props.divId}] 注册事件监听: ${eventName}`);\r\n\r\n\t\tbus.on(eventName, ({ sectionId, content }) => {\r\n\t\t\tconsole.log(`[${props.divId}] 收到跨容器更新:`, sectionId, content);\r\n\r\n\t\t\t// 更新选中内容\r\n\t\t\tselectedText.value = { ...selectedText.value, [props.divId]: content };\r\n\t\t\tshowPopup.value = { ...showPopup.value, [props.divId]: true };\r\n\r\n\t\t\tnextTick(() => {\r\n\t\t\t\t// 滚动到目标元素\r\n\t\t\t\tconst targetElement = document.getElementById(sectionId);\r\n\t\t\t\tif (targetElement) {\r\n\t\t\t\t\tconsole.log(`[${props.divId}] 滚动到元素:`, targetElement);\r\n\t\t\t\t\ttargetElement.scrollIntoView({\r\n\t\t\t\t\t\tbehavior: \"smooth\",\r\n\t\t\t\t\t\tblock: \"center\",\r\n\t\t\t\t\t\tinline: \"nearest\"\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// 添加视觉反馈\r\n\t\t\t\t\ttargetElement.classList.add(\"linked-highlight\");\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\ttargetElement.classList.remove(\"linked-highlight\");\r\n\t\t\t\t\t}, 2000);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n\r\n\t// **组件卸载时解绑事件**\r\n\tonUnmounted(() => {\r\n\t\t// 解绑父容器滚动事件\r\n\t\tif (divRef.value) {\r\n\t\t\tdivRef.value.removeEventListener(\"scroll\", updatePopupPosition);\r\n\t\t}\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\th1 {\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t/* 文章容器 */\r\n\t.div0 {\r\n\t\tposition: relative;\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t#div1,\r\n\t#div3 {\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t.showHtml {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\toverflow: auto;\r\n\t}\r\n\r\n\t/* 选中文本的高亮样式 */\r\n\t::selection {\r\n\t\tbackground-color: yellow;\r\n\t\tcolor: black;\r\n\t}\r\n\r\n\t/* 添加视觉反馈样式 */\r\n\t.linked-highlight {\r\n\t\tanimation: highlight-pulse 1.5s ease-out;\r\n\t\tbackground: linear-gradient(\r\n\t\t\tto right,\r\n\t\t\trgba(255, 215, 0, 0.3) 0%,\r\n\t\t\trgba(255, 215, 0, 0.1) 100%\r\n\t\t);\r\n\t}\r\n\r\n\t@keyframes highlight-pulse {\r\n\t\t0% {\r\n\t\t\tbox-shadow: 0 0 0 0 rgba(255, 215, 0, 0.3);\r\n\t\t}\r\n\t\t50% {\r\n\t\t\tbox-shadow: 0 0 0 10px rgba(255, 215, 0, 0);\r\n\t\t}\r\n\t\t100% {\r\n\t\t\tbox-shadow: 0 0 0 0 rgba(255, 215, 0, 0);\r\n\t\t}\r\n\t}\r\n</style>\r\n"],"mappings":";;mBAAA;;uBACCA,mBAAA,CA+BM;IA/BAC,KAAK,EADZC,eAAA,UACuBC,MAAA,CAAAC,kBAAkB;IAAIC,EAAE,EAAEF,MAAA,CAAAG,KAAK;IAAEC,GAAG,EAAC;MAC1DC,mBAAA,CAAwB,YAAAC,gBAAA,CAAjBN,MAAA,CAAAO,SAAS,kBAEhBC,mBAAA,UAAa,EACSC,MAAA,CAAAC,OAAO,I,cAA7BC,YAAA,CAAiCF,MAAA;IALnCG,GAAA;EAAA,MAScH,MAAA,CAAAI,KAAK,I,cADjBhB,mBAAA,CAGkCiB,SAAA;IAXpCF,GAAA;EAAA,IAOEJ,mBAAA,UAAa,EACbO,YAAA,CAGkCN,MAAA;IADhCO,OAAO,EAAEP,MAAA,CAAAI,KAAK;IACdI,OAAK,EAAER,MAAA,CAAAS;0GAGTrB,mBAAA,CAAyEiB,SAAA;IAd3EF,GAAA;EAAA,IAaEJ,mBAAA,UAAa,EACbO,YAAA,CAAyEN,MAAA;IAA/CU,OAAO,EAAEV,MAAA,CAAAW,QAAQ;IAAGC,QAAM,EAAEZ,MAAA,CAAAa;0FAEtDd,mBAAA,SAAY,EACZO,YAAA,CAOuBN,MAAA;IANrBc,OAAO,EAAEd,MAAA,CAAAe,SAAS,CAACxB,MAAA,CAAAG,KAAK;IACxBgB,OAAO,EAAEV,MAAA,CAAAgB,YAAY,CAACzB,MAAA,CAAAG,KAAK;IAC3BuB,cAAc,EAAQ1B,MAAA,CAAAG,KAAK;IAG3BwB,YAAY,EAAElB,MAAA,CAAAmB,MAAM;IACpBC,OAAK,EAAEpB,MAAA,CAAAqB;qFAETtB,mBAAA,YAAe,EACfO,YAAA,CAGkCN,MAAA;IAFhCU,OAAO,EAAEV,MAAA,CAAAW,QAAQ;IACjBjB,KAAK,EAAEH,MAAA,CAAAG,KAAK;IACZ4B,aAAa,EAAEC,IAAA,CAAAD;kEACjBvB,mBAAA,eAAkB,C,yBA/BpByB,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}