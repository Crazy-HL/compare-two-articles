{"ast":null,"code":"/**\r\n * 通用维基百科信息框解析器\r\n * @param {HTMLElement} infoboxElement - 信息框DOM元素\r\n * @returns {Object} 结构化数据\r\n */\nexport function parseGenericInfobox(infoboxElement) {\n  if (!infoboxElement) return null;\n\n  // 深度克隆以避免修改原始DOM\n  const infobox = infoboxElement.cloneNode(true);\n  const result = {\n    title: extractTitle(infobox),\n    type: detectInfoboxType(infobox),\n    data: {}\n  };\n\n  // 清理不需要的元素\n  infobox.querySelectorAll('.reference, .mw-editsection, sup').forEach(el => el.remove());\n\n  // 提取所有行\n  const rows = infobox.querySelectorAll('tr:has(th):has(td)');\n  rows.forEach(row => {\n    const th = row.querySelector('th');\n    const td = row.querySelector('td');\n    if (th && td) {\n      const label = normalizeFieldLabel(th.textContent);\n      const value = extractFieldValue(td);\n      if (label && value) {\n        result.data[label] = value;\n      }\n    }\n  });\n\n  // 处理合并单元格情况\n  const spanRows = infobox.querySelectorAll('tr:has(td[colspan])');\n  spanRows.forEach(row => {\n    const td = row.querySelector('td');\n    if (td && td.colSpan > 1) {\n      const label = \"备注\";\n      const value = extractFieldValue(td);\n      if (value) {\n        result.data[label] = value;\n      }\n    }\n  });\n  console.log(\"Parsed infobox:\", result);\n  return result;\n}\nfunction extractTitle(infobox) {\n  const caption = infobox.querySelector('caption');\n  if (caption) return caption.textContent.trim();\n  const titleElement = infobox.querySelector('.infobox-title, .infoboxcaption');\n  if (titleElement) return titleElement.textContent.trim();\n  const previousHeading = infobox.previousElementSibling;\n  if (previousHeading && /^h[1-6]$/i.test(previousHeading.tagName)) {\n    return previousHeading.textContent.trim();\n  }\n  return \"\";\n}\nfunction detectInfoboxType(infobox) {\n  const classNames = infobox.className.toLowerCase();\n  const content = infobox.textContent.toLowerCase();\n  if (/country|nation|state/.test(classNames) || /country|nation|state/.test(content)) return '国家';\n  if (/person|people|bio/.test(classNames) || /born|birth|died|death/.test(content)) return '人物';\n  if (/company|corporation|business/.test(classNames) || /revenue|profit|founded/.test(content)) return '公司';\n  if (/event|occurrence/.test(classNames) || /date|time|period/.test(content)) return '事件';\n  if (/location|place|settlement/.test(classNames) || /location|address|coordinates/.test(content)) return '地点';\n  if (/film|movie|television/.test(classNames) || /director|producer|runtime/.test(content)) return '影视';\n  return '通用';\n}\nfunction normalizeFieldLabel(label) {\n  return label.trim().replace(/[:：]\\s*$/, '').replace(/\\s+/g, ' ').replace(/[[\\]]/g, '').replace(/\\(.*?\\)/g, '').replace(/\\u00A0/g, ' ') // 替换不间断空格\n  .replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n}\nfunction extractFieldValue(tdElement) {\n  const td = tdElement.cloneNode(true);\n\n  // 移除不需要的元素\n  td.querySelectorAll('.reference, .mw-editsection, sup').forEach(el => el.remove());\n\n  // 提取纯文本\n  const textValue = td.textContent.replace(/\\[\\d+\\]/g, '') // 移除引用标记\n  .replace(/\\s+/g, ' ').replace(/^[:：]\\s*/, '').trim();\n\n  // 提取链接\n  const links = Array.from(td.querySelectorAll('a[href]')).map(a => ({\n    text: a.textContent.trim(),\n    href: a.href,\n    isWikiLink: a.href.includes('wikipedia.org/wiki/')\n  })).filter(link => link.text && !link.text.match(/^\\[\\d+\\]$/)); // 过滤引用链接\n\n  // 提取图片\n  let imageData = null;\n  const image = td.querySelector('img[src]');\n  if (image) {\n    imageData = {\n      src: image.src.startsWith('//') ? `https:${image.src}` : image.src,\n      alt: image.alt || '',\n      caption: image.title || image.closest('figure')?.querySelector('figcaption')?.textContent.trim() || ''\n    };\n  }\n\n  // 检测数据类型\n  const dataType = detectValueType(textValue, links, imageData);\n  return {\n    text: textValue,\n    html: td.innerHTML.trim(),\n    links,\n    image: imageData,\n    dataType\n  };\n}\nfunction detectValueType(text, links, image) {\n  if (image) return 'image';\n  if (links.length > 0) {\n    if (text.match(/^参见：|^见：|^链接：/)) return 'link';\n    if (links.length === 1 && text === links[0].text) return 'link';\n  }\n  if (!text) return 'unknown';\n  if (/(\\d{4}[年\\-]\\d{1,2}[月\\-]\\d{1,2}日?)|(\\d{1,2}[月\\/]\\d{1,2}[日\\/]\\d{4})/.test(text)) {\n    return 'date';\n  }\n  if (/^\\d{4}年?$/.test(text)) {\n    return 'year';\n  }\n  if (/^(\\d{1,3}(,\\d{3})*|\\d+)(\\.\\d+)?\\s*[^\\d\\s,\\.]+$/.test(text)) {\n    return 'measurement';\n  }\n  if (/^(是|否|有|无|存在|不存在|正确|错误|真|假)$/.test(text)) {\n    return 'boolean';\n  }\n  if (links.length > 0) return 'text_with_links';\n  return 'text';\n}","map":{"version":3,"names":["parseGenericInfobox","infoboxElement","infobox","cloneNode","result","title","extractTitle","type","detectInfoboxType","data","querySelectorAll","forEach","el","remove","rows","row","th","querySelector","td","label","normalizeFieldLabel","textContent","value","extractFieldValue","spanRows","colSpan","console","log","caption","trim","titleElement","previousHeading","previousElementSibling","test","tagName","classNames","className","toLowerCase","content","replace","tdElement","textValue","links","Array","from","map","a","text","href","isWikiLink","includes","filter","link","match","imageData","image","src","startsWith","alt","closest","dataType","detectValueType","html","innerHTML","length"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/js/wikiInfoboxParser.js"],"sourcesContent":["/**\r\n * 通用维基百科信息框解析器\r\n * @param {HTMLElement} infoboxElement - 信息框DOM元素\r\n * @returns {Object} 结构化数据\r\n */\r\nexport function parseGenericInfobox(infoboxElement) {\r\n  if (!infoboxElement) return null;\r\n\r\n  // 深度克隆以避免修改原始DOM\r\n  const infobox = infoboxElement.cloneNode(true);\r\n  \r\n  const result = {\r\n    title: extractTitle(infobox),\r\n    type: detectInfoboxType(infobox),\r\n    data: {}\r\n  };\r\n\r\n  // 清理不需要的元素\r\n  infobox.querySelectorAll('.reference, .mw-editsection, sup').forEach(el => el.remove());\r\n\r\n  // 提取所有行\r\n  const rows = infobox.querySelectorAll('tr:has(th):has(td)');\r\n  \r\n  rows.forEach(row => {\r\n    const th = row.querySelector('th');\r\n    const td = row.querySelector('td');\r\n    \r\n    if (th && td) {\r\n      const label = normalizeFieldLabel(th.textContent);\r\n      const value = extractFieldValue(td);\r\n      \r\n      if (label && value) {\r\n        result.data[label] = value;\r\n      }\r\n    }\r\n  });\r\n\r\n  // 处理合并单元格情况\r\n  const spanRows = infobox.querySelectorAll('tr:has(td[colspan])');\r\n  spanRows.forEach(row => {\r\n    const td = row.querySelector('td');\r\n    if (td && td.colSpan > 1) {\r\n      const label = \"备注\";\r\n      const value = extractFieldValue(td);\r\n      if (value) {\r\n        result.data[label] = value;\r\n      }\r\n    }\r\n  });\r\n\r\n  console.log(\"Parsed infobox:\", result);\r\n  return result;\r\n}\r\n\r\nfunction extractTitle(infobox) {\r\n  const caption = infobox.querySelector('caption');\r\n  if (caption) return caption.textContent.trim();\r\n  \r\n  const titleElement = infobox.querySelector('.infobox-title, .infoboxcaption');\r\n  if (titleElement) return titleElement.textContent.trim();\r\n  \r\n  const previousHeading = infobox.previousElementSibling;\r\n  if (previousHeading && /^h[1-6]$/i.test(previousHeading.tagName)) {\r\n    return previousHeading.textContent.trim();\r\n  }\r\n  \r\n  return \"\";\r\n}\r\n\r\nfunction detectInfoboxType(infobox) {\r\n  const classNames = infobox.className.toLowerCase();\r\n  const content = infobox.textContent.toLowerCase();\r\n  \r\n  if (/country|nation|state/.test(classNames) || /country|nation|state/.test(content)) return '国家';\r\n  if (/person|people|bio/.test(classNames) || /born|birth|died|death/.test(content)) return '人物';\r\n  if (/company|corporation|business/.test(classNames) || /revenue|profit|founded/.test(content)) return '公司';\r\n  if (/event|occurrence/.test(classNames) || /date|time|period/.test(content)) return '事件';\r\n  if (/location|place|settlement/.test(classNames) || /location|address|coordinates/.test(content)) return '地点';\r\n  if (/film|movie|television/.test(classNames) || /director|producer|runtime/.test(content)) return '影视';\r\n  \r\n  return '通用';\r\n}\r\n\r\nfunction normalizeFieldLabel(label) {\r\n  return label.trim()\r\n    .replace(/[:：]\\s*$/, '')\r\n    .replace(/\\s+/g, ' ')\r\n    .replace(/[[\\]]/g, '')\r\n    .replace(/\\(.*?\\)/g, '')\r\n    .replace(/\\u00A0/g, ' ') // 替换不间断空格\r\n    .replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n}\r\n\r\nfunction extractFieldValue(tdElement) {\r\n  const td = tdElement.cloneNode(true);\r\n  \r\n  // 移除不需要的元素\r\n  td.querySelectorAll('.reference, .mw-editsection, sup').forEach(el => el.remove());\r\n  \r\n  // 提取纯文本\r\n  const textValue = td.textContent\r\n    .replace(/\\[\\d+\\]/g, '') // 移除引用标记\r\n    .replace(/\\s+/g, ' ')\r\n    .replace(/^[:：]\\s*/, '')\r\n    .trim();\r\n  \r\n  // 提取链接\r\n  const links = Array.from(td.querySelectorAll('a[href]'))\r\n    .map(a => ({\r\n      text: a.textContent.trim(),\r\n      href: a.href,\r\n      isWikiLink: a.href.includes('wikipedia.org/wiki/')\r\n    }))\r\n    .filter(link => link.text && !link.text.match(/^\\[\\d+\\]$/)); // 过滤引用链接\r\n  \r\n  // 提取图片\r\n  let imageData = null;\r\n  const image = td.querySelector('img[src]');\r\n  if (image) {\r\n    imageData = {\r\n      src: image.src.startsWith('//') ? `https:${image.src}` : image.src,\r\n      alt: image.alt || '',\r\n      caption: image.title || \r\n               image.closest('figure')?.querySelector('figcaption')?.textContent.trim() || \r\n               ''\r\n    };\r\n  }\r\n  \r\n  // 检测数据类型\r\n  const dataType = detectValueType(textValue, links, imageData);\r\n  \r\n  return {\r\n    text: textValue,\r\n    html: td.innerHTML.trim(),\r\n    links,\r\n    image: imageData,\r\n    dataType\r\n  };\r\n}\r\n\r\nfunction detectValueType(text, links, image) {\r\n  if (image) return 'image';\r\n  if (links.length > 0) {\r\n    if (text.match(/^参见：|^见：|^链接：/)) return 'link';\r\n    if (links.length === 1 && text === links[0].text) return 'link';\r\n  }\r\n  \r\n  if (!text) return 'unknown';\r\n  \r\n  if (/(\\d{4}[年\\-]\\d{1,2}[月\\-]\\d{1,2}日?)|(\\d{1,2}[月\\/]\\d{1,2}[日\\/]\\d{4})/.test(text)) {\r\n    return 'date';\r\n  }\r\n  \r\n  if (/^\\d{4}年?$/.test(text)) {\r\n    return 'year';\r\n  }\r\n  \r\n  if (/^(\\d{1,3}(,\\d{3})*|\\d+)(\\.\\d+)?\\s*[^\\d\\s,\\.]+$/.test(text)) {\r\n    return 'measurement';\r\n  }\r\n  \r\n  if (/^(是|否|有|无|存在|不存在|正确|错误|真|假)$/.test(text)) {\r\n    return 'boolean';\r\n  }\r\n  \r\n  if (links.length > 0) return 'text_with_links';\r\n  \r\n  return 'text';\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}