{"ast":null,"code":"import { ref, onMounted, nextTick } from \"vue\";\nimport axios from \"axios\";\n// import TextSelectionTool from \"./textSelectionTool\";\nimport MouseSelection from \"@/js/mouse_selection\";\n\n// 用于存储 HTML 内容\n\nexport default {\n  __name: 'history',\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const htmlContent = ref(\"\");\n    const div3Content = ref(\"\");\n    const div3Ref = ref(null);\n\n    // 页面初始化时加载内容\n    onMounted(async () => {\n      // 获取并加载内容\n      await tang();\n\n      // 确保 DOM 渲染完成后，再初始化 TextSelectionTool\n      // nextTick(() => {\n      // \tconst div3 = div3Ref.value;\n      // \tconsole.log(\"div3=>\", div3);\n      // \tif (div3) {\n      // \t\tconst selectionTool = new TextSelectionTool({\n      // \t\t\tselector: div3, // 选择区域\n      // \t\t\toutputId: \"div2\", // 输出区域\n      // \t\t\tboxStyle: {\n      // \t\t\t\tborder: \"2px dashed rgba(0, 0, 255, 0.7)\",\n      // \t\t\t\tbackgroundColor: \"rgba(0, 0, 255, 0.1)\"\n      // \t\t\t}\n      // \t\t});\n      // \t}\n      // });\n\n      // 使用 nextTick 确保 v-html 渲染完成后再启动 MouseSelection\n      nextTick(() => {\n        MouseSelection.start({\n          rangeSelector: \".selectable\" // 传递范围选择器，支持向下检索\n        });\n      });\n    });\n\n    // 获取并展示内容\n    async function tang() {\n      try {\n        const res = await axios.get(\"http://localhost:8080/api/item/%E5%94%90%E6%9C%9D/53699\");\n        const html = res.data;\n        div3Content.value = htmlToDom(html);\n      } catch (err) {\n        console.log(\"请求失败：\", err.message);\n        div3Content.value = \"\"; // 如果请求失败，返回空字符串\n      }\n    }\n\n    // 将 HTML 内容转化为 DOM\n    function htmlToDom(html) {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(html, \"text/html\");\n      return doc.documentElement.outerHTML;\n    }\n    const __returned__ = {\n      htmlContent,\n      div3Content,\n      div3Ref,\n      tang,\n      htmlToDom,\n      ref,\n      onMounted,\n      nextTick,\n      get axios() {\n        return axios;\n      },\n      get MouseSelection() {\n        return MouseSelection;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","nextTick","axios","MouseSelection","htmlContent","div3Content","div3Ref","tang","start","rangeSelector","res","get","html","data","value","htmlToDom","err","console","log","message","parser","DOMParser","doc","parseFromString","documentElement","outerHTML"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/history.vue"],"sourcesContent":["<template>\r\n\t<div id=\"root\">\r\n\t\t<div class=\"div0\" id=\"div1\">\r\n\t\t\t<iframe\r\n\t\t\t\tref=\"frameLeft\"\r\n\t\t\t\tid=\"frameLeft\"\r\n\t\t\t\tsrc=\"https://zh.wikipedia.org/wiki/%E5%94%90%E6%9C%9D\"\r\n\t\t\t\ttitle=\"页面1\"></iframe>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"div0\" id=\"div2\">\r\n\t\t\t<div class=\"VisContainer\">\r\n\t\t\t\t<div class=\"topContainer\">\r\n\t\t\t\t\t<button class=\"styled-button\" @click=\"tang\">点击我</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"botContainer\">\r\n\t\t\t\t\t<!-- 用 v-html 动态绑定加载的 HTML -->\r\n\t\t\t\t\t<div v-html=\"htmlContent\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"div0 selectable\" id=\"div3\" ref=\"div3Ref\">\r\n\t\t\t<!-- 动态插入 HTML 内容 -->\r\n\t\t\t<div v-html=\"div3Content\"></div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, nextTick } from \"vue\";\r\n\timport axios from \"axios\";\r\n\t// import TextSelectionTool from \"./textSelectionTool\";\r\n\timport MouseSelection from \"@/js/mouse_selection\";\r\n\r\n\t// 用于存储 HTML 内容\r\n\tconst htmlContent = ref(\"\");\r\n\tconst div3Content = ref(\"\");\r\n\tconst div3Ref = ref(null);\r\n\r\n\t// 页面初始化时加载内容\r\n\tonMounted(async () => {\r\n\t\t// 获取并加载内容\r\n\t\tawait tang();\r\n\r\n\t\t// 确保 DOM 渲染完成后，再初始化 TextSelectionTool\r\n\t\t// nextTick(() => {\r\n\t\t// \tconst div3 = div3Ref.value;\r\n\t\t// \tconsole.log(\"div3=>\", div3);\r\n\t\t// \tif (div3) {\r\n\t\t// \t\tconst selectionTool = new TextSelectionTool({\r\n\t\t// \t\t\tselector: div3, // 选择区域\r\n\t\t// \t\t\toutputId: \"div2\", // 输出区域\r\n\t\t// \t\t\tboxStyle: {\r\n\t\t// \t\t\t\tborder: \"2px dashed rgba(0, 0, 255, 0.7)\",\r\n\t\t// \t\t\t\tbackgroundColor: \"rgba(0, 0, 255, 0.1)\"\r\n\t\t// \t\t\t}\r\n\t\t// \t\t});\r\n\t\t// \t}\r\n\t\t// });\r\n\r\n\t\t// 使用 nextTick 确保 v-html 渲染完成后再启动 MouseSelection\r\n\t\tnextTick(() => {\r\n\t\t\tMouseSelection.start({\r\n\t\t\t\trangeSelector: \".selectable\" // 传递范围选择器，支持向下检索\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n\r\n\t// 获取并展示内容\r\n\tasync function tang() {\r\n\t\ttry {\r\n\t\t\tconst res = await axios.get(\r\n\t\t\t\t\"http://localhost:8080/api/item/%E5%94%90%E6%9C%9D/53699\"\r\n\t\t\t);\r\n\t\t\tconst html = res.data;\r\n\t\t\tdiv3Content.value = htmlToDom(html);\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(\"请求失败：\", err.message);\r\n\t\t\tdiv3Content.value = \"\"; // 如果请求失败，返回空字符串\r\n\t\t}\r\n\t}\r\n\r\n\t// 将 HTML 内容转化为 DOM\r\n\tfunction htmlToDom(html) {\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\treturn doc.documentElement.outerHTML;\r\n\t}\r\n</script>\r\n\r\n<style scoped>\r\n\t#root {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-around;\r\n\t\talign-items: flex-start;\r\n\t\theight: 100vh;\r\n\t\tmargin: 0;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t.div0 {\r\n\t\tposition: absolute;\r\n\t\theight: 100vh;\r\n\t}\r\n\r\n\t#div1 {\r\n\t\tleft: 0;\r\n\t\twidth: 30%;\r\n\t}\r\n\r\n\t#div2 {\r\n\t\twidth: 40%;\r\n\t}\r\n\r\n\t#div3 {\r\n\t\twidth: 30%;\r\n\t\tright: 0;\r\n\t}\r\n\r\n\tiframe {\r\n\t\twidth: 100%;\r\n\t\theight: 100%; /* 确保 iframe 的内容充满容器 */\r\n\t\tborder: 1px solid #ccc;\r\n\t\toverflow: auto; /* 允许滚动 */\r\n\t}\r\n\r\n\t.selection-box {\r\n\t\tposition: absolute;\r\n\t\tborder: 2px dashed rgba(0, 0, 255, 0.7); /* 可见的蓝色虚线 */\r\n\t\tbackground-color: rgba(0, 0, 255, 0.1); /* 半透明蓝色背景 */\r\n\t\tz-index: 9999; /* 确保在最上层显示 */\r\n\t\tpointer-events: none; /* 确保不会影响鼠标事件 */\r\n\t}\r\n</style>\r\n"],"mappings":"AA8BC,SAASA,GAAG,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,KAAK;AAC9C,OAAOC,KAAK,MAAM,OAAO;AACzB;AACA,OAAOC,cAAc,MAAM,sBAAsB;;AAEjD;;;;;;;;;IACA,MAAMC,WAAW,GAAGL,GAAG,CAAC,EAAE,CAAC;IAC3B,MAAMM,WAAW,GAAGN,GAAG,CAAC,EAAE,CAAC;IAC3B,MAAMO,OAAO,GAAGP,GAAG,CAAC,IAAI,CAAC;;IAEzB;IACAC,SAAS,CAAC,YAAY;MACrB;MACA,MAAMO,IAAI,CAAC,CAAC;;MAEZ;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACAN,QAAQ,CAAC,MAAM;QACdE,cAAc,CAACK,KAAK,CAAC;UACpBC,aAAa,EAAE,aAAa,CAAC;QAC9B,CAAC,CAAC;MACH,CAAC,CAAC;IACH,CAAC,CAAC;;IAEF;IACA,eAAeF,IAAIA,CAAA,EAAG;MACrB,IAAI;QACH,MAAMG,GAAG,GAAG,MAAMR,KAAK,CAACS,GAAG,CAC1B,yDACD,CAAC;QACD,MAAMC,IAAI,GAAGF,GAAG,CAACG,IAAI;QACrBR,WAAW,CAACS,KAAK,GAAGC,SAAS,CAACH,IAAI,CAAC;MACpC,CAAC,CAAC,OAAOI,GAAG,EAAE;QACbC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,GAAG,CAACG,OAAO,CAAC;QACjCd,WAAW,CAACS,KAAK,GAAG,EAAE,CAAC,CAAC;MACzB;IACD;;IAEA;IACA,SAASC,SAASA,CAACH,IAAI,EAAE;MACxB,MAAMQ,MAAM,GAAG,IAAIC,SAAS,CAAC,CAAC;MAC9B,MAAMC,GAAG,GAAGF,MAAM,CAACG,eAAe,CAACX,IAAI,EAAE,WAAW,CAAC;MACrD,OAAOU,GAAG,CAACE,eAAe,CAACC,SAAS;IACrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}