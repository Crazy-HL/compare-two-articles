{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createVNode as _createVNode, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-201e19b8\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"full-chart-component-root\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"full-text\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"chart-container\"\n};\nconst _hoisted_4 = {\n  key: 1,\n  class: \"no-data\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"chart-container\"\n};\nconst _hoisted_6 = {\n  key: 1,\n  class: \"no-data\"\n};\nconst _hoisted_7 = {\n  key: 0,\n  class: \"chart-container\"\n};\nconst _hoisted_8 = {\n  key: 1,\n  class: \"no-data\"\n};\nconst _hoisted_9 = {\n  class: \"full-text\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 文本显示 \"), $props.visualization === 'text-only' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.formattedDataForTextDisplay, (item, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"text-item\"\n    }, _toDisplayString(item.displayValue), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])) : $props.visualization === 'pie-chart' ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" 完整饼图 \"), $setup.hasData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createVNode($setup[\"PieChart\"], {\n    data: $setup.pieChartData\n  }, null, 8 /* PROPS */, [\"data\"])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, \"无可用数据\"))], 64 /* STABLE_FRAGMENT */)) : $props.visualization === 'bar-chart' ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 2\n  }, [_createCommentVNode(\" 完整柱状图 \"), $setup.hasData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createVNode($setup[\"BarChart\"], {\n    data: $setup.barChartData,\n    \"field-key\": $setup.props.fieldKey,\n    \"show-value\": true\n  }, null, 8 /* PROPS */, [\"data\", \"field-key\"])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_6, \"无可用数据\"))], 64 /* STABLE_FRAGMENT */)) : $props.visualization === 'line-chart' ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 3\n  }, [_createCommentVNode(\" 完整折线图 \"), $setup.hasData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [_createCommentVNode(\" Ensure LineChart component can handle this data structure \"), _createVNode($setup[\"LineChart\"], {\n    data: $setup.lineChartData,\n    \"show-trend\": true\n  }, null, 8 /* PROPS */, [\"data\"])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_8, \"无可用数据\"))], 64 /* STABLE_FRAGMENT */)) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 4\n  }, [_createCommentVNode(\" 默认显示 (通常是文本) \"), _createElementVNode(\"div\", _hoisted_9, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.formattedDataForTextDisplay, (item, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"text-item\"\n    }, _toDisplayString(item.displayValue), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])], 64 /* STABLE_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createCommentVNode","$props","visualization","_hoisted_2","_Fragment","_renderList","$setup","formattedDataForTextDisplay","item","index","displayValue","hasData","_hoisted_3","_createVNode","data","pieChartData","_hoisted_4","_hoisted_5","barChartData","props","fieldKey","_hoisted_6","_hoisted_7","lineChartData","_hoisted_8","_createElementVNode","_hoisted_9"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\FullChart.vue"],"sourcesContent":["<template>\r\n\t<div class=\"full-chart-component-root\">\r\n\t\t<!-- 文本显示 -->\r\n\t\t<template v-if=\"visualization === 'text-only'\">\r\n\t\t\t<div class=\"full-text\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tv-for=\"(item, index) in formattedDataForTextDisplay\"\r\n\t\t\t\t\t:key=\"index\"\r\n\t\t\t\t\tclass=\"text-item\">\r\n\t\t\t\t\t{{ item.displayValue }}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</template>\r\n\r\n\t\t<!-- 完整饼图 -->\r\n\t\t<template v-else-if=\"visualization === 'pie-chart'\">\r\n\t\t\t<div v-if=\"hasData\" class=\"chart-container\">\r\n\t\t\t\t<PieChart :data=\"pieChartData\" />\r\n\t\t\t</div>\r\n\t\t\t<div v-else class=\"no-data\">无可用数据</div>\r\n\t\t</template>\r\n\r\n\t\t<!-- 完整柱状图 -->\r\n\t\t<template v-else-if=\"visualization === 'bar-chart'\">\r\n\t\t\t<div v-if=\"hasData\" class=\"chart-container\">\r\n\t\t\t\t<BarChart\r\n\t\t\t\t\t:data=\"barChartData\"\r\n\t\t\t\t\t:field-key=\"props.fieldKey\"\r\n\t\t\t\t\t:show-value=\"true\" />\r\n\t\t\t</div>\r\n\t\t\t<div v-else class=\"no-data\">无可用数据</div>\r\n\t\t</template>\r\n\r\n\t\t<!-- 完整折线图 -->\r\n\t\t<template v-else-if=\"visualization === 'line-chart'\">\r\n\t\t\t<div v-if=\"hasData\" class=\"chart-container\">\r\n\t\t\t\t<!-- Ensure LineChart component can handle this data structure -->\r\n\t\t\t\t<LineChart :data=\"lineChartData\" :show-trend=\"true\" />\r\n\t\t\t</div>\r\n\t\t\t<div v-else class=\"no-data\">无可用数据</div>\r\n\t\t</template>\r\n\r\n\t\t<!-- 默认显示 (通常是文本) -->\r\n\t\t<template v-else>\r\n\t\t\t<div class=\"full-text\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tv-for=\"(item, index) in formattedDataForTextDisplay\"\r\n\t\t\t\t\t:key=\"index\"\r\n\t\t\t\t\tclass=\"text-item\">\r\n\t\t\t\t\t{{ item.displayValue }}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</template>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { computed } from \"vue\";\r\n\timport PieChart from \"./charts/PieChart.vue\"; // 假设路径正确\r\n\timport BarChart from \"./charts/BarChart.vue\"; // 假设路径正确\r\n\timport LineChart from \"./charts/LineChart.vue\"; // 假设路径正确\r\n\r\n\tconst props = defineProps({\r\n\t\tfield: [Object, Array, String, Number], // Data from getField\r\n\t\ttype: String, // e.g., \"percentage\", \"number\", \"text\"\r\n\t\tvisualization: String, // e.g., \"line-chart\", \"bar-chart\", \"text-only\"\r\n\t\tfieldKey: String // e.g., \"GDP growth\"\r\n\t});\r\n\r\n\t// Helper function to extract year from raw string\r\n\tconst extractYearFromRaw = rawString => {\r\n\t\tif (typeof rawString !== \"string\") return null;\r\n\t\tconst matchInParentheses = rawString.match(/\\((\\d{4})\\)/); // e.g., \"(2023)\"\r\n\t\tif (matchInParentheses && matchInParentheses[1]) {\r\n\t\t\treturn parseInt(matchInParentheses[1], 10);\r\n\t\t}\r\n\t\t// Fallback: Look for standalone 4-digit years (be cautious with this)\r\n\t\tconst standaloneYearMatch = rawString.match(/\\b(19[89]\\d|20\\d{2})\\b/g);\r\n\t\tif (standaloneYearMatch && standaloneYearMatch.length > 0) {\r\n\t\t\treturn parseInt(standaloneYearMatch[standaloneYearMatch.length - 1], 10); // Take the last one\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\t// Normalize individual data items\r\n\tconst normalizeItem = item => {\r\n\t\tif (typeof item === \"object\" && item !== null) {\r\n\t\t\t// Item is already an object, likely from the new getField\r\n\t\t\tconst value = item.value ?? null;\r\n\t\t\tconst raw = item.raw ?? (value !== null ? String(value) : \"\");\r\n\t\t\tlet year = item.year ?? null; // Prefer explicit year if present\r\n\t\t\tif (year === null && typeof raw === \"string\" && raw) {\r\n\t\t\t\tyear = extractYearFromRaw(raw);\r\n\t\t\t}\r\n\t\t\tconst unit =\r\n\t\t\t\titem.unit ??\r\n\t\t\t\t(props.type === \"percentage\" && value !== null ? \"%\" : null);\r\n\r\n\t\t\treturn {\r\n\t\t\t\tvalue: value,\r\n\t\t\t\traw: raw,\r\n\t\t\t\tunit: unit,\r\n\t\t\t\tyear: year,\r\n\t\t\t\tcurrency: item.currency ?? null,\r\n\t\t\t\textracted: item.extracted ?? false,\r\n\t\t\t\toriginalItem: item // Keep the original for more complex scenarios if needed\r\n\t\t\t};\r\n\t\t}\r\n\t\t// Item is a primitive (less likely if getField is used correctly)\r\n\t\tconst rawString = String(item);\r\n\t\tconst numValue = parseFloat(rawString); // Try to parse a number\r\n\t\treturn {\r\n\t\t\tvalue: !isNaN(numValue) ? numValue : null,\r\n\t\t\traw: rawString,\r\n\t\t\tunit: props.type === \"percentage\" ? \"%\" : null,\r\n\t\t\tyear: extractYearFromRaw(rawString),\r\n\t\t\tcurrency: null,\r\n\t\t\textracted: false,\r\n\t\t\toriginalItem: {\r\n\t\t\t\traw: rawString,\r\n\t\t\t\tvalue: !isNaN(numValue) ? numValue : null\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t// Processed and standardized data\r\n\tconst normalizedData = computed(() => {\r\n\t\tif (!props.field) return [];\r\n\t\tif (Array.isArray(props.field)) {\r\n\t\t\treturn props.field.map(item => normalizeItem(item));\r\n\t\t}\r\n\t\treturn [normalizeItem(props.field)]; // Single item wrapped in an array\r\n\t});\r\n\r\n\t// Format value for display (for text-only or fallback)\r\n\tconst formatDisplayValue = normalizedItem => {\r\n\t\tif (!normalizedItem) return \"-\";\r\n\r\n\t\t// Priority 1: Use raw if it's meaningful and likely complete\r\n\t\tif (normalizedItem.raw && String(normalizedItem.raw).trim() !== \"\") {\r\n\t\t\t// If raw already contains year and unit, it might be best as is.\r\n\t\t\t// This logic might need refinement based on how `raw` is structured.\r\n\t\t\t// For now, let's assume `raw` is a good representation.\r\n\t\t\treturn String(normalizedItem.raw);\r\n\t\t}\r\n\r\n\t\t// Priority 2: Construct from value, unit, year\r\n\t\tif (\r\n\t\t\tnormalizedItem.value !== null &&\r\n\t\t\ttypeof normalizedItem.value !== \"undefined\"\r\n\t\t) {\r\n\t\t\tlet num = Number(normalizedItem.value);\r\n\t\t\tif (isNaN(num)) return String(normalizedItem.value); // If value is non-numeric text\r\n\r\n\t\t\tlet textValue = \"\";\r\n\t\t\tif (props.type === \"percentage\") {\r\n\t\t\t\ttextValue = `${num > 0 ? \"+\" : \"\"}${num.toFixed(1)}`;\r\n\t\t\t\tif (normalizedItem.unit && normalizedItem.unit !== \"%\") {\r\n\t\t\t\t\ttextValue += ` ${normalizedItem.unit}`;\r\n\t\t\t\t} else if (!normalizedItem.unit) {\r\n\t\t\t\t\ttextValue += \"%\";\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (Math.abs(num) >= 100000000)\r\n\t\t\t\t\ttextValue = (num / 100000000).toFixed(2) + \"亿\";\r\n\t\t\t\telse if (Math.abs(num) >= 10000)\r\n\t\t\t\t\ttextValue = (num / 10000).toFixed(1) + \"万\";\r\n\t\t\t\telse\r\n\t\t\t\t\ttextValue = num.toLocaleString(undefined, {\r\n\t\t\t\t\t\tminimumFractionDigits: 0,\r\n\t\t\t\t\t\tmaximumFractionDigits: 2\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\tif (normalizedItem.unit) textValue += ` ${normalizedItem.unit}`;\r\n\t\t\t}\r\n\t\t\tif (normalizedItem.year) textValue += ` (${normalizedItem.year})`;\r\n\t\t\treturn textValue.trim();\r\n\t\t}\r\n\t\treturn String(normalizedItem.value ?? normalizedItem.raw ?? \"-\");\r\n\t};\r\n\r\n\t// Data specifically for text display, applying formatDisplayValue\r\n\tconst formattedDataForTextDisplay = computed(() => {\r\n\t\treturn normalizedData.value.map(item => ({\r\n\t\t\t...item,\r\n\t\t\tdisplayValue: formatDisplayValue(item)\r\n\t\t}));\r\n\t});\r\n\r\n\t// Pie chart data\r\n\tconst pieChartData = computed(() => {\r\n\t\treturn normalizedData.value\r\n\t\t\t.filter(item => item.value !== null)\r\n\t\t\t.map((item, index) => ({\r\n\t\t\t\tname: item.raw || `数据点 ${index + 1}`, // Label for pie slice\r\n\t\t\t\tvalue: Math.min(100, Math.max(0, Number(item.value))), // Assuming percentage for pie, or adjust as needed\r\n\t\t\t\traw: item.raw,\r\n\t\t\t\tunit: item.unit\r\n\t\t\t}));\r\n\t});\r\n\r\n\t// Bar chart data\r\n\tconst barChartData = computed(() => {\r\n\t\treturn normalizedData.value.map((item, index) => ({\r\n\t\t\t// X-axis label for BarChart: Use year if available, otherwise raw or index\r\n\t\t\tname: item.year ? String(item.year) : item.raw || `系列 ${index + 1}`,\r\n\t\t\tvalue: item.value !== null ? Number(item.value) : 0,\r\n\t\t\traw: item.raw,\r\n\t\t\tunit: item.unit,\r\n\t\t\tyear: item.year // Pass year for potential grouping or detailed tooltips in BarChart\r\n\t\t}));\r\n\t});\r\n\r\n\t// Line chart data (crucial for time series)\r\n\tconst lineChartData = computed(() => {\r\n\t\treturn (\r\n\t\t\tnormalizedData.value\r\n\t\t\t\t// Ensure items have a value and a year for a meaningful line chart\r\n\t\t\t\t.filter(item => item.value !== null && item.year !== null)\r\n\t\t\t\t.map(item => ({\r\n\t\t\t\t\tyear: item.year, // This will be the X-axis\r\n\t\t\t\t\tvalue: Number(item.value), // This will be the Y-axis\r\n\t\t\t\t\traw: item.raw, // For tooltips\r\n\t\t\t\t\tunit: item.unit // For tooltips or Y-axis formatting\r\n\t\t\t\t}))\r\n\t\t\t\t.sort((a, b) => a.year - b.year)\r\n\t\t); // Essential: sort by year\r\n\t});\r\n\r\n\tconst hasData = computed(() => {\r\n\t\tif (props.visualization === \"line-chart\") {\r\n\t\t\treturn lineChartData.value.length > 0;\r\n\t\t}\r\n\t\treturn (\r\n\t\t\tnormalizedData.value.length > 0 &&\r\n\t\t\tnormalizedData.value.some(\r\n\t\t\t\titem =>\r\n\t\t\t\t\titem.value !== null || (item.raw && String(item.raw).trim() !== \"\")\r\n\t\t\t)\r\n\t\t);\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.full-chart-component-root {\r\n\t\t/* Renamed to avoid conflict if nested */\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tpadding: 16px;\r\n\t\tbox-sizing: border-box;\r\n\t\tdisplay: flex; /* Added for better layout control */\r\n\t\tflex-direction: column; /* Added */\r\n\t}\r\n\r\n\t.full-text {\r\n\t\tmax-height: 400px; /* Or adjust as needed */\r\n\t\toverflow-y: auto;\r\n\t\tflex-grow: 1; /* Added */\r\n\t}\r\n\r\n\t.text-item {\r\n\t\tmargin-bottom: 8px;\r\n\t\tpadding: 8px;\r\n\t\tbackground: #f8f9fa;\r\n\t\tborder-radius: 4px;\r\n\t\tword-break: break-word;\r\n\t}\r\n\r\n\t.chart-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%; /* Ensure this works with parent constraints */\r\n\t\tmin-height: 300px; /* Ensure chart has some space */\r\n\t\tflex-grow: 1; /* Added */\r\n\t\tdisplay: flex; /* Added */\r\n\t\talign-items: center; /* Added */\r\n\t\tjustify-content: center; /* Added */\r\n\t}\r\n\r\n\t.no-data {\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\theight: 100%;\r\n\t\tmin-height: 100px; /* Ensure \"no data\" message is visible */\r\n\t\tcolor: #999;\r\n\t\tfont-style: italic;\r\n\t\tfont-size: 1.2em;\r\n\t\tflex-grow: 1; /* Added */\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,KAAK,EAAC;AAA2B;;EADvCC,GAAA;EAIQD,KAAK,EAAC;;;EAJdC,GAAA;EAgBuBD,KAAK,EAAC;;;EAhB7BC,GAAA;EAmBeD,KAAK,EAAC;;;EAnBrBC,GAAA;EAwBuBD,KAAK,EAAC;;;EAxB7BC,GAAA;EA8BeD,KAAK,EAAC;;;EA9BrBC,GAAA;EAmCuBD,KAAK,EAAC;;;EAnC7BC,GAAA;EAuCeD,KAAK,EAAC;;;EAKbA,KAAK,EAAC;AAAW;;uBA3CxBE,mBAAA,CAoDM,OApDNC,UAoDM,GAnDLC,mBAAA,UAAa,EACGC,MAAA,CAAAC,aAAa,oB,cAC5BJ,mBAAA,CAOM,OAPNK,UAOM,I,kBANLL,mBAAA,CAKMM,SAAA,QAVVC,WAAA,CAM6BC,MAAA,CAAAC,2BAA2B,EANxD,CAMaC,IAAI,EAAEC,KAAK;yBADpBX,mBAAA,CAKM;MAHJD,GAAG,EAAEY,KAAK;MACXb,KAAK,EAAC;wBACHY,IAAI,CAACE,YAAY;sCAMFT,MAAA,CAAAC,aAAa,oB,cAAlCJ,mBAAA,CAKWM,SAAA;IApBbP,GAAA;EAAA,IAcEG,mBAAA,UAAa,EAEDM,MAAA,CAAAK,OAAO,I,cAAlBb,mBAAA,CAEM,OAFNc,UAEM,GADLC,YAAA,CAAiCP,MAAA;IAAtBQ,IAAI,EAAER,MAAA,CAAAS;EAAY,kC,oBAE9BjB,mBAAA,CAAuC,OAAvCkB,UAAuC,EAAX,OAAK,G,+BAIbf,MAAA,CAAAC,aAAa,oB,cAAlCJ,mBAAA,CAQWM,SAAA;IA/BbP,GAAA;EAAA,IAsBEG,mBAAA,WAAc,EAEFM,MAAA,CAAAK,OAAO,I,cAAlBb,mBAAA,CAKM,OALNmB,UAKM,GAJLJ,YAAA,CAGsBP,MAAA;IAFpBQ,IAAI,EAAER,MAAA,CAAAY,YAAY;IAClB,WAAS,EAAEZ,MAAA,CAAAa,KAAK,CAACC,QAAQ;IACzB,YAAU,EAAE;qEAEftB,mBAAA,CAAuC,OAAvCuB,UAAuC,EAAX,OAAK,G,+BAIbpB,MAAA,CAAAC,aAAa,qB,cAAlCJ,mBAAA,CAMWM,SAAA;IAxCbP,GAAA;EAAA,IAiCEG,mBAAA,WAAc,EAEFM,MAAA,CAAAK,OAAO,I,cAAlBb,mBAAA,CAGM,OAHNwB,UAGM,GAFLtB,mBAAA,+DAAkE,EAClEa,YAAA,CAAsDP,MAAA;IAA1CQ,IAAI,EAAER,MAAA,CAAAiB,aAAa;IAAG,YAAU,EAAE;wDAE/CzB,mBAAA,CAAuC,OAAvC0B,UAAuC,EAAX,OAAK,G,8CAIlC1B,mBAAA,CASWM,SAAA;IApDbP,GAAA;EAAA,IA0CEG,mBAAA,kBAAqB,EAEpByB,mBAAA,CAOM,OAPNC,UAOM,I,kBANL5B,mBAAA,CAKMM,SAAA,QAlDVC,WAAA,CA8C6BC,MAAA,CAAAC,2BAA2B,EA9CxD,CA8CaC,IAAI,EAAEC,KAAK;yBADpBX,mBAAA,CAKM;MAHJD,GAAG,EAAEY,KAAK;MACXb,KAAK,EAAC;wBACHY,IAAI,CAACE,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}