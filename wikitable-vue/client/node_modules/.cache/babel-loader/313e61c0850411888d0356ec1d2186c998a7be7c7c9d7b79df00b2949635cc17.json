{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed, watch } from \"vue\";\nimport SparklineChart from \"./SparklineChart.vue\";\nexport default {\n  __name: 'CompareTable',\n  props: {\n    div1RawData: String,\n    div3RawData: String\n  },\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const props = __props;\n    const processedTable1 = ref({\n      title: \"表格1\",\n      rows: [],\n      columns: [],\n      timeSeriesData: {}\n    });\n    const processedTable2 = ref({\n      title: \"表格2\",\n      rows: [],\n      columns: [],\n      timeSeriesData: {}\n    });\n    const hasData = computed(() => {\n      return props.div1RawData && props.div3RawData && processedTable1.value.columns.length > 0 && processedTable2.value.columns.length > 0;\n    });\n    const commonAttributes = computed(() => {\n      const attrs1 = processedTable1.value.rows || [];\n      const attrs2 = processedTable2.value.rows || [];\n      return attrs1.filter(attr => attrs2.includes(attr) && (hasDataForAttribute(processedTable1.value, attr) || hasDataForAttribute(processedTable2.value, attr)));\n    });\n    watch(() => props.div1RawData, html => {\n      if (html) {\n        processedTable1.value = parseTableToStandardJSON(html, \"表格1\");\n        if (props.div3RawData) sendToBackend();\n      }\n    }, {\n      immediate: true\n    });\n    watch(() => props.div3RawData, html => {\n      if (html) {\n        processedTable2.value = parseTableToStandardJSON(html, \"表格2\");\n        if (props.div1RawData) sendToBackend();\n      }\n    }, {\n      immediate: true\n    });\n    function parseTableToStandardJSON(html) {\n      let defaultTitle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"未命名表格\";\n      const result = {\n        title: extractTitleFromHTML(html) || defaultTitle,\n        rows: [],\n        columns: [],\n        timeSeriesData: {}\n      };\n      try {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(html, \"text/html\");\n        const table = doc.querySelector(\"table\");\n        if (!table) return result;\n\n        // 提取表头\n        const headerCells = table.querySelector(\"tr\")?.children || [];\n        result.rows = Array.from(headerCells).map(cell => {\n          return cell.textContent.replace(/[\\n†*]/g, \"\").trim().replace(/\\s+/g, \" \");\n        });\n\n        // 检查是否有Year列\n        const yearColumnIndex = result.rows.findIndex(header => header.toLowerCase().includes(\"year\"));\n        const hasYearColumn = yearColumnIndex !== -1;\n\n        // 辅助函数：清理年份格式\n        const cleanYear = yearStr => {\n          if (!yearStr) return null;\n\n          // 清理特殊字符\n          let cleaned = yearStr.toString().replace(/[†*]/g, \"\").trim();\n\n          // 处理\"2016–17\"这种格式\n          if (/^\\d{4}[\\u2013\\u2014-]\\d{2}$/.test(cleaned)) {\n            const startYear = cleaned.substring(0, 4);\n            return parseInt(startYear);\n          }\n\n          // 提取数字部分\n          const yearMatch = cleaned.match(/\\d{4}/);\n          return yearMatch ? parseInt(yearMatch[0]) : null;\n        };\n\n        // 辅助函数：检查是否是合并单元格行\n        const isMergedRow = row => {\n          const cells = Array.from(row.children);\n          return cells.some((cell, index) => index < 2 && (cell.hasAttribute(\"rowspan\") || cell.hasAttribute(\"colspan\")));\n        };\n\n        // 提取数据行\n        const dataRows = Array.from(table.querySelectorAll(\"tr:not(:first-child)\"));\n        dataRows.forEach(row => {\n          const cells = Array.from(row.children);\n          if (cells.length === 0) return;\n\n          // 跳过合并单元格行（通常是汇总行或注释行）\n          if (isMergedRow(row)) {\n            console.log(\"跳过合并行:\", row.textContent.trim());\n            return;\n          }\n          const recordName = cells[0].textContent.trim();\n          const recordData = {};\n          result.rows.forEach((header, index) => {\n            if (index < cells.length) {\n              let value = cells[index].textContent.trim();\n              // 特殊处理Year列\n              if (index === yearColumnIndex) {\n                value = cleanYear(value);\n              } else {\n                value = smartValueConversion(value);\n              }\n              recordData[header] = value;\n            }\n          });\n\n          // 只有当Year列有有效值时才添加到结果中\n          if (!hasYearColumn || hasYearColumn && recordData.Year) {\n            result.columns.push({\n              name: recordName,\n              data: recordData\n            });\n\n            // 收集时间序列数据\n            if (hasYearColumn && recordData.Year) {\n              const year = recordData.Year;\n              result.rows.forEach(header => {\n                // 跳过Year列和非数值属性\n                if (header === \"Year\" || typeof recordData[header] !== \"number\") {\n                  return;\n                }\n                if (!result.timeSeriesData[header]) {\n                  result.timeSeriesData[header] = [];\n                }\n                result.timeSeriesData[header].push({\n                  year: year,\n                  value: recordData[header],\n                  recordName: recordName\n                });\n              });\n            }\n          } else {\n            console.log(\"跳过无效Year的行:\", recordName);\n          }\n        });\n\n        // 对每个属性的时间序列数据按年份排序\n        if (hasYearColumn) {\n          Object.keys(result.timeSeriesData).forEach(attr => {\n            result.timeSeriesData[attr].sort((a, b) => a.year - b.year);\n          });\n        }\n        console.log(\"解析后的表格数据:\", result);\n        return result;\n      } catch (error) {\n        console.error(\"表格解析错误:\", error);\n        return result;\n      }\n    }\n    function smartValueConversion(rawValue) {\n      // 处理空值和特殊占位符\n      if (!rawValue || [\"-\", \"—\", \"N/A\"].includes(rawValue)) return null;\n\n      // 百分比值处理（如 \".472\"）\n      if (/^\\.\\d+$/.test(rawValue)) return parseFloat(rawValue);\n\n      // 常规数字处理（支持千分位逗号）\n      const numericValue = parseFloat(rawValue.replace(/[^\\d.-]/g, \"\"));\n      if (!isNaN(numericValue)) return numericValue;\n\n      // 日期格式检测\n      if (/(\\d{4}-\\d{2}-\\d{2})|(\\d{2}\\/\\d{2}\\/\\d{4})/.test(rawValue)) {\n        return rawValue; // 保持日期字符串原样\n      }\n\n      // 布尔值检测\n      if ([\"true\", \"false\"].includes(rawValue.toLowerCase())) {\n        return rawValue.toLowerCase() === \"true\";\n      }\n\n      // 其他情况返回字符串\n      return rawValue;\n    }\n    function extractTitleFromHTML(html) {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(html, \"text/html\");\n      return doc.querySelector(\"h1, h2, h3, h4, caption\")?.textContent.trim() || null;\n    }\n    function hasDataForAttribute(table, attr) {\n      return table.timeSeriesData[attr]?.length > 0;\n    }\n    function getAverage(table, attr) {\n      const values = table.timeSeriesData[attr]?.map(item => item.value) || [];\n      return values.length ? (values.reduce((a, b) => a + b, 0) / values.length).toFixed(2) : \"N/A\";\n    }\n    function getMax(table, attr) {\n      const values = table.timeSeriesData[attr]?.map(item => item.value) || [];\n      return values.length ? Math.max(...values).toFixed(2) : \"N/A\";\n    }\n    async function sendToBackend() {\n      try {\n        console.log(\"t1：\", processedTable1.value);\n        console.log(\"t2：\", processedTable2.value);\n        // const response = await api.post(\"table_attributes\", {\n        // \ttable1: processedTable1.value,\n        // \ttable2: processedTable2.value\n        // });\n        console.log(\"分析结果:\", response);\n      } catch (error) {\n        console.error(\"API请求失败:\", error);\n      }\n    }\n    const __returned__ = {\n      props,\n      processedTable1,\n      processedTable2,\n      hasData,\n      commonAttributes,\n      parseTableToStandardJSON,\n      smartValueConversion,\n      extractTitleFromHTML,\n      hasDataForAttribute,\n      getAverage,\n      getMax,\n      sendToBackend,\n      ref,\n      computed,\n      watch,\n      SparklineChart\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","watch","SparklineChart","props","__props","processedTable1","title","rows","columns","timeSeriesData","processedTable2","hasData","div1RawData","div3RawData","value","length","commonAttributes","attrs1","attrs2","filter","attr","includes","hasDataForAttribute","html","parseTableToStandardJSON","sendToBackend","immediate","defaultTitle","arguments","undefined","result","extractTitleFromHTML","parser","DOMParser","doc","parseFromString","table","querySelector","headerCells","children","Array","from","map","cell","textContent","replace","trim","yearColumnIndex","findIndex","header","toLowerCase","hasYearColumn","cleanYear","yearStr","cleaned","toString","test","startYear","substring","parseInt","yearMatch","match","isMergedRow","row","cells","some","index","hasAttribute","dataRows","querySelectorAll","forEach","console","log","recordName","recordData","smartValueConversion","Year","push","name","data","year","Object","keys","sort","a","b","error","rawValue","parseFloat","numericValue","isNaN","getAverage","values","item","reduce","toFixed","getMax","Math","max","response"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/CompareTable.vue"],"sourcesContent":["<template>\r\n\t<div class=\"compare-container\">\r\n\t\t<div class=\"table-grid\">\r\n\t\t\t<!-- 表头 -->\r\n\t\t\t<div class=\"header left-column\">\r\n\t\t\t\t{{ processedTable1.title || \"表格1\" }}\r\n\t\t\t</div>\r\n\t\t\t<div class=\"header middle-column\">对比属性</div>\r\n\t\t\t<div class=\"header right-column\">\r\n\t\t\t\t{{ processedTable2.title || \"表格2\" }}\r\n\t\t\t</div>\r\n\r\n\t\t\t<!-- 数据行 -->\r\n\t\t\t<template v-if=\"hasData\">\r\n\t\t\t\t<template v-for=\"attr in commonAttributes\" :key=\"attr\">\r\n\t\t\t\t\t<div class=\"cell left-column\">\r\n\t\t\t\t\t\t<template v-if=\"hasDataForAttribute(processedTable1, attr)\">\r\n\t\t\t\t\t\t\t<SparklineChart\r\n\t\t\t\t\t\t\t\t:data=\"processedTable1.timeSeriesData[attr]\"\r\n\t\t\t\t\t\t\t\t:compare-data=\"processedTable2.timeSeriesData[attr]\"\r\n\t\t\t\t\t\t\t\t:width=\"250\"\r\n\t\t\t\t\t\t\t\t:height=\"80\"\r\n\t\t\t\t\t\t\t\t:show-year-markers=\"true\" />\r\n\t\t\t\t\t\t\t<div class=\"stats-summary\">\r\n\t\t\t\t\t\t\t\t平均: {{ getAverage(processedTable1, attr) }} | 最大:\r\n\t\t\t\t\t\t\t\t{{ getMax(processedTable1, attr) }}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</template>\r\n\t\t\t\t\t\t<div v-else class=\"no-data\">无数据</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div class=\"cell middle-column\">\r\n\t\t\t\t\t\t<div class=\"attribute-name\">{{ attr }}</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div class=\"cell right-column\">\r\n\t\t\t\t\t\t<template v-if=\"hasDataForAttribute(processedTable2, attr)\">\r\n\t\t\t\t\t\t\t<SparklineChart\r\n\t\t\t\t\t\t\t\t:data=\"processedTable2.timeSeriesData[attr]\"\r\n\t\t\t\t\t\t\t\t:compare-data=\"processedTable1.timeSeriesData[attr]\"\r\n\t\t\t\t\t\t\t\t:width=\"250\"\r\n\t\t\t\t\t\t\t\t:height=\"80\"\r\n\t\t\t\t\t\t\t\t:show-year-markers=\"true\" />\r\n\t\t\t\t\t\t\t<div class=\"stats-summary\">\r\n\t\t\t\t\t\t\t\t平均: {{ getAverage(processedTable2, attr) }} | 最大:\r\n\t\t\t\t\t\t\t\t{{ getMax(processedTable2, attr) }}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</template>\r\n\t\t\t\t\t\t<div v-else class=\"no-data\">无数据</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</template>\r\n\t\t\t</template>\r\n\t\t\t<template v-else>\r\n\t\t\t\t<!-- 空状态下的行 -->\r\n\t\t\t\t<div class=\"cell left-column empty-cell\"></div>\r\n\t\t\t\t<div class=\"cell middle-column empty-cell\"></div>\r\n\t\t\t\t<div class=\"cell right-column empty-cell\"></div>\r\n\t\t\t\t<div class=\"cell left-column empty-cell\"></div>\r\n\t\t\t\t<div class=\"cell middle-column empty-cell\"></div>\r\n\t\t\t\t<div class=\"cell right-column empty-cell\"></div>\r\n\t\t\t\t<div class=\"cell left-column empty-cell\"></div>\r\n\t\t\t\t<div class=\"cell middle-column empty-cell\"></div>\r\n\t\t\t\t<div class=\"cell right-column empty-cell\"></div>\r\n\t\t\t</template>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, watch } from \"vue\";\r\n\timport SparklineChart from \"./SparklineChart.vue\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdiv1RawData: String,\r\n\t\tdiv3RawData: String\r\n\t});\r\n\r\n\tconst processedTable1 = ref({\r\n\t\ttitle: \"表格1\",\r\n\t\trows: [],\r\n\t\tcolumns: [],\r\n\t\ttimeSeriesData: {}\r\n\t});\r\n\tconst processedTable2 = ref({\r\n\t\ttitle: \"表格2\",\r\n\t\trows: [],\r\n\t\tcolumns: [],\r\n\t\ttimeSeriesData: {}\r\n\t});\r\n\r\n\tconst hasData = computed(() => {\r\n\t\treturn (\r\n\t\t\tprops.div1RawData &&\r\n\t\t\tprops.div3RawData &&\r\n\t\t\tprocessedTable1.value.columns.length > 0 &&\r\n\t\t\tprocessedTable2.value.columns.length > 0\r\n\t\t);\r\n\t});\r\n\r\n\tconst commonAttributes = computed(() => {\r\n\t\tconst attrs1 = processedTable1.value.rows || [];\r\n\t\tconst attrs2 = processedTable2.value.rows || [];\r\n\t\treturn attrs1.filter(\r\n\t\t\tattr =>\r\n\t\t\t\tattrs2.includes(attr) &&\r\n\t\t\t\t(hasDataForAttribute(processedTable1.value, attr) ||\r\n\t\t\t\t\thasDataForAttribute(processedTable2.value, attr))\r\n\t\t);\r\n\t});\r\n\r\n\twatch(\r\n\t\t() => props.div1RawData,\r\n\t\thtml => {\r\n\t\t\tif (html) {\r\n\t\t\t\tprocessedTable1.value = parseTableToStandardJSON(html, \"表格1\");\r\n\t\t\t\tif (props.div3RawData) sendToBackend();\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\twatch(\r\n\t\t() => props.div3RawData,\r\n\t\thtml => {\r\n\t\t\tif (html) {\r\n\t\t\t\tprocessedTable2.value = parseTableToStandardJSON(html, \"表格2\");\r\n\t\t\t\tif (props.div1RawData) sendToBackend();\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\tfunction parseTableToStandardJSON(html, defaultTitle = \"未命名表格\") {\r\n\t\tconst result = {\r\n\t\t\ttitle: extractTitleFromHTML(html) || defaultTitle,\r\n\t\t\trows: [],\r\n\t\t\tcolumns: [],\r\n\t\t\ttimeSeriesData: {}\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\t\tconst table = doc.querySelector(\"table\");\r\n\t\t\tif (!table) return result;\r\n\r\n\t\t\t// 提取表头\r\n\t\t\tconst headerCells = table.querySelector(\"tr\")?.children || [];\r\n\t\t\tresult.rows = Array.from(headerCells).map(cell => {\r\n\t\t\t\treturn cell.textContent\r\n\t\t\t\t\t.replace(/[\\n†*]/g, \"\")\r\n\t\t\t\t\t.trim()\r\n\t\t\t\t\t.replace(/\\s+/g, \" \");\r\n\t\t\t});\r\n\r\n\t\t\t// 检查是否有Year列\r\n\t\t\tconst yearColumnIndex = result.rows.findIndex(header =>\r\n\t\t\t\theader.toLowerCase().includes(\"year\")\r\n\t\t\t);\r\n\t\t\tconst hasYearColumn = yearColumnIndex !== -1;\r\n\r\n\t\t\t// 辅助函数：清理年份格式\r\n\t\t\tconst cleanYear = yearStr => {\r\n\t\t\t\tif (!yearStr) return null;\r\n\r\n\t\t\t\t// 清理特殊字符\r\n\t\t\t\tlet cleaned = yearStr.toString().replace(/[†*]/g, \"\").trim();\r\n\r\n\t\t\t\t// 处理\"2016–17\"这种格式\r\n\t\t\t\tif (/^\\d{4}[\\u2013\\u2014-]\\d{2}$/.test(cleaned)) {\r\n\t\t\t\t\tconst startYear = cleaned.substring(0, 4);\r\n\t\t\t\t\treturn parseInt(startYear);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 提取数字部分\r\n\t\t\t\tconst yearMatch = cleaned.match(/\\d{4}/);\r\n\t\t\t\treturn yearMatch ? parseInt(yearMatch[0]) : null;\r\n\t\t\t};\r\n\r\n\t\t\t// 辅助函数：检查是否是合并单元格行\r\n\t\t\tconst isMergedRow = row => {\r\n\t\t\t\tconst cells = Array.from(row.children);\r\n\t\t\t\treturn cells.some(\r\n\t\t\t\t\t(cell, index) =>\r\n\t\t\t\t\t\tindex < 2 &&\r\n\t\t\t\t\t\t(cell.hasAttribute(\"rowspan\") || cell.hasAttribute(\"colspan\"))\r\n\t\t\t\t);\r\n\t\t\t};\r\n\r\n\t\t\t// 提取数据行\r\n\t\t\tconst dataRows = Array.from(\r\n\t\t\t\ttable.querySelectorAll(\"tr:not(:first-child)\")\r\n\t\t\t);\r\n\r\n\t\t\tdataRows.forEach(row => {\r\n\t\t\t\tconst cells = Array.from(row.children);\r\n\t\t\t\tif (cells.length === 0) return;\r\n\r\n\t\t\t\t// 跳过合并单元格行（通常是汇总行或注释行）\r\n\t\t\t\tif (isMergedRow(row)) {\r\n\t\t\t\t\tconsole.log(\"跳过合并行:\", row.textContent.trim());\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst recordName = cells[0].textContent.trim();\r\n\t\t\t\tconst recordData = {};\r\n\r\n\t\t\t\tresult.rows.forEach((header, index) => {\r\n\t\t\t\t\tif (index < cells.length) {\r\n\t\t\t\t\t\tlet value = cells[index].textContent.trim();\r\n\t\t\t\t\t\t// 特殊处理Year列\r\n\t\t\t\t\t\tif (index === yearColumnIndex) {\r\n\t\t\t\t\t\t\tvalue = cleanYear(value);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvalue = smartValueConversion(value);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\trecordData[header] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// 只有当Year列有有效值时才添加到结果中\r\n\t\t\t\tif (!hasYearColumn || (hasYearColumn && recordData.Year)) {\r\n\t\t\t\t\tresult.columns.push({\r\n\t\t\t\t\t\tname: recordName,\r\n\t\t\t\t\t\tdata: recordData\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// 收集时间序列数据\r\n\t\t\t\t\tif (hasYearColumn && recordData.Year) {\r\n\t\t\t\t\t\tconst year = recordData.Year;\r\n\r\n\t\t\t\t\t\tresult.rows.forEach(header => {\r\n\t\t\t\t\t\t\t// 跳过Year列和非数值属性\r\n\t\t\t\t\t\t\tif (header === \"Year\" || typeof recordData[header] !== \"number\") {\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (!result.timeSeriesData[header]) {\r\n\t\t\t\t\t\t\t\tresult.timeSeriesData[header] = [];\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tresult.timeSeriesData[header].push({\r\n\t\t\t\t\t\t\t\tyear: year,\r\n\t\t\t\t\t\t\t\tvalue: recordData[header],\r\n\t\t\t\t\t\t\t\trecordName: recordName\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log(\"跳过无效Year的行:\", recordName);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// 对每个属性的时间序列数据按年份排序\r\n\t\t\tif (hasYearColumn) {\r\n\t\t\t\tObject.keys(result.timeSeriesData).forEach(attr => {\r\n\t\t\t\t\tresult.timeSeriesData[attr].sort((a, b) => a.year - b.year);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tconsole.log(\"解析后的表格数据:\", result);\r\n\t\t\treturn result;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"表格解析错误:\", error);\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction smartValueConversion(rawValue) {\r\n\t\t// 处理空值和特殊占位符\r\n\t\tif (!rawValue || [\"-\", \"—\", \"N/A\"].includes(rawValue)) return null;\r\n\r\n\t\t// 百分比值处理（如 \".472\"）\r\n\t\tif (/^\\.\\d+$/.test(rawValue)) return parseFloat(rawValue);\r\n\r\n\t\t// 常规数字处理（支持千分位逗号）\r\n\t\tconst numericValue = parseFloat(rawValue.replace(/[^\\d.-]/g, \"\"));\r\n\t\tif (!isNaN(numericValue)) return numericValue;\r\n\r\n\t\t// 日期格式检测\r\n\t\tif (/(\\d{4}-\\d{2}-\\d{2})|(\\d{2}\\/\\d{2}\\/\\d{4})/.test(rawValue)) {\r\n\t\t\treturn rawValue; // 保持日期字符串原样\r\n\t\t}\r\n\r\n\t\t// 布尔值检测\r\n\t\tif ([\"true\", \"false\"].includes(rawValue.toLowerCase())) {\r\n\t\t\treturn rawValue.toLowerCase() === \"true\";\r\n\t\t}\r\n\r\n\t\t// 其他情况返回字符串\r\n\t\treturn rawValue;\r\n\t}\r\n\r\n\tfunction extractTitleFromHTML(html) {\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\treturn (\r\n\t\t\tdoc.querySelector(\"h1, h2, h3, h4, caption\")?.textContent.trim() || null\r\n\t\t);\r\n\t}\r\n\r\n\tfunction hasDataForAttribute(table, attr) {\r\n\t\treturn table.timeSeriesData[attr]?.length > 0;\r\n\t}\r\n\r\n\tfunction getAverage(table, attr) {\r\n\t\tconst values = table.timeSeriesData[attr]?.map(item => item.value) || [];\r\n\t\treturn values.length\r\n\t\t\t? (values.reduce((a, b) => a + b, 0) / values.length).toFixed(2)\r\n\t\t\t: \"N/A\";\r\n\t}\r\n\r\n\tfunction getMax(table, attr) {\r\n\t\tconst values = table.timeSeriesData[attr]?.map(item => item.value) || [];\r\n\t\treturn values.length ? Math.max(...values).toFixed(2) : \"N/A\";\r\n\t}\r\n\r\n\tasync function sendToBackend() {\r\n\t\ttry {\r\n\t\t\tconsole.log(\"t1：\", processedTable1.value);\r\n\t\t\tconsole.log(\"t2：\", processedTable2.value);\r\n\t\t\t// const response = await api.post(\"table_attributes\", {\r\n\t\t\t// \ttable1: processedTable1.value,\r\n\t\t\t// \ttable2: processedTable2.value\r\n\t\t\t// });\r\n\t\t\tconsole.log(\"分析结果:\", response);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"API请求失败:\", error);\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style scoped>\r\n\t.empty-cell {\r\n\t\tmin-height: 120px;\r\n\t\tbackground-color: #f8f9fa;\r\n\t\tborder-bottom: 1px solid #e9ecef;\r\n\t}\r\n\t.compare-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tmax-height: 800px;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tfont-family: system-ui, -apple-system, sans-serif;\r\n\t}\r\n\r\n\t.table-grid {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: 1fr 0.3fr 1fr;\r\n\t\tgap: 1px;\r\n\t\tbackground: #e0e0e0;\r\n\t\tflex: 1;\r\n\t\toverflow-y: auto;\r\n\t}\r\n\r\n\t.header {\r\n\t\tpadding: 12px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n\t\tposition: sticky;\r\n\t\ttop: 0;\r\n\t\tz-index: 1;\r\n\t}\r\n\r\n\t.cell {\r\n\t\tpadding: 16px;\r\n\t\tbackground: white;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tmin-height: 120px;\r\n\t\tborder-bottom: 1px solid #f0f0f0;\r\n\t}\r\n\r\n\t.left-column {\r\n\t\tborder-right: 1px solid #e0e0e0;\r\n\t}\r\n\r\n\t.right-column {\r\n\t\tborder-left: 1px solid #e0e0e0;\r\n\t}\r\n\r\n\t.attribute-name {\r\n\t\tfont-weight: 600;\r\n\t\tmargin-bottom: 4px;\r\n\t\tcolor: #2c3e50;\r\n\t\tfont-size: 1.1em;\r\n\t}\r\n\r\n\t.attribute-desc {\r\n\t\tfont-size: 0.9em;\r\n\t\tcolor: #3498db;\r\n\t\tmargin-bottom: 6px;\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t.original-field {\r\n\t\tfont-size: 0.7em;\r\n\t\tcolor: #95a5a6;\r\n\t\tfont-family: monospace;\r\n\t\tmargin-top: 4px;\r\n\t}\r\n\r\n\t.stats-summary {\r\n\t\tmargin-top: 8px;\r\n\t\tfont-size: 0.85em;\r\n\t\tcolor: #34495e;\r\n\t\ttext-align: center;\r\n\t\tline-height: 1.5;\r\n\t}\r\n\r\n\t.no-data {\r\n\t\tcolor: #95a5a6;\r\n\t\tfont-style: italic;\r\n\t\tfont-size: 0.9em;\r\n\t}\r\n\r\n\t.empty-state {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\theight: 100%;\r\n\t\tcolor: #7f8c8d;\r\n\t\tgap: 12px;\r\n\t}\r\n\r\n\t.format-tip {\r\n\t\tfont-size: 0.9em;\r\n\t\tcolor: #bdc3c7;\r\n\t\tmax-width: 300px;\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t.table-grid::-webkit-scrollbar {\r\n\t\twidth: 8px;\r\n\t}\r\n\r\n\t.table-grid::-webkit-scrollbar-thumb {\r\n\t\tbackground: #95a5a6;\r\n\t\tborder-radius: 4px;\r\n\t}\r\n\r\n\t.table-grid::-webkit-scrollbar-track {\r\n\t\tbackground: #ecf0f1;\r\n\t}\r\n\r\n\t@media (max-width: 768px) {\r\n\t\t.table-grid {\r\n\t\t\tgrid-template-columns: 1fr;\r\n\t\t}\r\n\r\n\t\t.header {\r\n\t\t\tdisplay: none;\r\n\t\t}\r\n\r\n\t\t.cell {\r\n\t\t\tmin-height: auto;\r\n\t\t\tpadding: 12px;\r\n\t\t}\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}