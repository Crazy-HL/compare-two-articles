{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-4d83b437\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  ref: \"chartEl\",\n  class: \"line-chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","_createElementBlock","_hoisted_1"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\charts\\LineChart.vue"],"sourcesContent":["<template>\r\n\t<div ref=\"chartEl\" class=\"line-chart\"></div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, watch, onBeforeUnmount, computed } from \"vue\";\r\n\timport * as echarts from \"echarts\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdata: {\r\n\t\t\ttype: [Array, Object],\r\n\t\t\tdefault: () => []\r\n\t\t},\r\n\t\tisCombined: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false\r\n\t\t},\r\n\t\tsources: {\r\n\t\t\ttype: Array,\r\n\t\t\tdefault: () => []\r\n\t\t}\r\n\t});\r\n\r\n\tconst chartEl = ref(null);\r\n\tlet chartInstance = null;\r\n\r\n\t// 颜色集合\r\n\tconst colorPalette = [\"#4e79a7\", \"#e15759\", \"#76b7b2\", \"#f28e2b\", \"#59a14f\"];\r\n\r\n\t// 格式化数值显示\r\n\tconst formatNumber = value => {\r\n\t\tconst num = Number(value);\r\n\t\treturn isNaN(num) ? \"0%\" : num.toFixed(2) + \"%\";\r\n\t};\r\n\r\n\t// 处理合并数据 - 现在保留所有原始数据点\r\n\tconst processedData = computed(() => {\r\n\t\tif (!props.isCombined || !Array.isArray(props.data)) return props.data;\r\n\r\n\t\t// 按数据源分组，保留所有原始数据点\r\n\t\tconst seriesData = props.sources.map((source, index) => {\r\n\t\t\tconst sourceData = props.data.filter(item => item.source === source);\r\n\t\t\treturn {\r\n\t\t\t\tname: source,\r\n\t\t\t\tdata: sourceData.map(item => ({\r\n\t\t\t\t\tvalue: item.value,\r\n\t\t\t\t\tyear: item.year,\r\n\t\t\t\t\tunit: item.unit || \"%\"\r\n\t\t\t\t})),\r\n\t\t\t\tcolor: colorPalette[index % colorPalette.length]\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\t// 获取所有年份用于x轴刻度\r\n\t\tconst allYears = [...new Set(props.data.map(item => item.year))].sort(\r\n\t\t\t(a, b) => a - b\r\n\t\t);\r\n\r\n\t\treturn {\r\n\t\t\tseries: seriesData,\r\n\t\t\tcategories: allYears\r\n\t\t};\r\n\t});\r\n\r\n\tconst initChart = () => {\r\n\t\tif (!chartEl.value) return;\r\n\r\n\t\tchartInstance = echarts.init(chartEl.value);\r\n\r\n\t\tif (props.isCombined) {\r\n\t\t\tconst option = {\r\n\t\t\t\ttooltip: {\r\n\t\t\t\t\ttrigger: \"axis\",\r\n\t\t\t\t\tformatter: params => {\r\n\t\t\t\t\t\treturn params\r\n\t\t\t\t\t\t\t.filter(param => param.value != null)\r\n\t\t\t\t\t\t\t.map(param => {\r\n\t\t\t\t\t\t\t\treturn `${param.seriesName}<br/>${\r\n\t\t\t\t\t\t\t\t\tparam.data.year\r\n\t\t\t\t\t\t\t\t}: ${formatNumber(param.value)}`;\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t.join(\"<br/>\");\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tlegend: {\r\n\t\t\t\t\tdata: props.sources\r\n\t\t\t\t},\r\n\t\t\t\txAxis: {\r\n\t\t\t\t\ttype: \"category\",\r\n\t\t\t\t\tdata: processedData.value.categories,\r\n\t\t\t\t\taxisLabel: {\r\n\t\t\t\t\t\tinterval: 0,\r\n\t\t\t\t\t\trotate: 0\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tyAxis: {\r\n\t\t\t\t\ttype: \"value\",\r\n\t\t\t\t\taxisLabel: {\r\n\t\t\t\t\t\tformatter: \"{value}%\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmin: function (value) {\r\n\t\t\t\t\t\treturn Math.max(0, value.min - 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tseries: processedData.value.series.map(series => ({\r\n\t\t\t\t\tname: series.name,\r\n\t\t\t\t\tdata: series.data.map(item => ({\r\n\t\t\t\t\t\tvalue: item.value,\r\n\t\t\t\t\t\tyear: item.year,\r\n\t\t\t\t\t\titemStyle: {\r\n\t\t\t\t\t\t\tcolor: series.color\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})),\r\n\t\t\t\t\ttype: \"line\",\r\n\t\t\t\t\tsymbol: \"circle\",\r\n\t\t\t\t\tsymbolSize: 10,\r\n\t\t\t\t\tlineStyle: {\r\n\t\t\t\t\t\twidth: 3,\r\n\t\t\t\t\t\tcolor: series.color\r\n\t\t\t\t\t},\r\n\t\t\t\t\tlabel: {\r\n\t\t\t\t\t\tshow: true,\r\n\t\t\t\t\t\tformatter: params => {\r\n\t\t\t\t\t\t\treturn formatNumber(params.value);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tcolor: \"#333\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\temphasis: {\r\n\t\t\t\t\t\titemStyle: {\r\n\t\t\t\t\t\t\tborderWidth: 2,\r\n\t\t\t\t\t\t\tborderColor: \"#fff\",\r\n\t\t\t\t\t\t\tshadowBlur: 10,\r\n\t\t\t\t\t\t\tshadowColor: \"rgba(0, 0, 0, 0.5)\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}))\r\n\t\t\t};\r\n\t\t\tchartInstance.setOption(option);\r\n\t\t} else {\r\n\t\t\t// 普通折线图处理（保持不变）\r\n\t\t\tconst option = {\r\n\t\t\t\ttooltip: {\r\n\t\t\t\t\ttrigger: \"axis\",\r\n\t\t\t\t\tformatter: params => {\r\n\t\t\t\t\t\treturn params\r\n\t\t\t\t\t\t\t.map(param => {\r\n\t\t\t\t\t\t\t\treturn `${param.seriesName}<br/>${\r\n\t\t\t\t\t\t\t\t\tparam.data.year\r\n\t\t\t\t\t\t\t\t}: ${formatNumber(param.value)}`;\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t.join(\"<br/>\");\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\txAxis: {\r\n\t\t\t\t\ttype: \"category\",\r\n\t\t\t\t\tdata: props.data.map(item => item.year),\r\n\t\t\t\t\taxisLabel: {\r\n\t\t\t\t\t\tinterval: 0,\r\n\t\t\t\t\t\trotate: 0\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tyAxis: {\r\n\t\t\t\t\ttype: \"value\",\r\n\t\t\t\t\taxisLabel: {\r\n\t\t\t\t\t\tformatter: \"{value}%\"\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tseries: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"数据\",\r\n\t\t\t\t\t\tdata: props.data.map(item => ({\r\n\t\t\t\t\t\t\tvalue: item.value,\r\n\t\t\t\t\t\t\tyear: item.year\r\n\t\t\t\t\t\t})),\r\n\t\t\t\t\t\ttype: \"line\",\r\n\t\t\t\t\t\tsymbol: \"circle\",\r\n\t\t\t\t\t\tsymbolSize: 10,\r\n\t\t\t\t\t\tlineStyle: {\r\n\t\t\t\t\t\t\twidth: 3,\r\n\t\t\t\t\t\t\tcolor: \"#4e79a7\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tlabel: {\r\n\t\t\t\t\t\t\tshow: true,\r\n\t\t\t\t\t\t\tformatter: params => {\r\n\t\t\t\t\t\t\t\treturn formatNumber(params.value);\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tcolor: \"#333\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t};\r\n\t\t\tchartInstance.setOption(option);\r\n\t\t}\r\n\t};\r\n\r\n\t// 其他方法保持不变...\r\n\tonMounted(initChart);\r\n\tonBeforeUnmount(() => {\r\n\t\tif (chartInstance) {\r\n\t\t\tchartInstance.dispose();\r\n\t\t\twindow.removeEventListener(\"resize\", handleResize);\r\n\t\t}\r\n\t});\r\n\tconst handleResize = () => chartInstance?.resize();\r\n\twatch(() => [props.data, props.isCombined, props.sources], initChart, {\r\n\t\tdeep: true\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.line-chart {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tmin-height: 400px;\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,GAAG,EAAC,SAAS;EAACC,KAAK,EAAC;;;uBAAzBC,mBAAA,CAA4C,OAA5CC,UAA4C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}