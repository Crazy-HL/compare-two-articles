{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-201e19b8\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  ref: \"chartContainer\",\n  class: \"full-chart\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"no-data-message\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"team-legend\"\n};\nconst _hoisted_4 = {\n  class: \"legend-text\"\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [!_ctx.hasData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, \"无数据可显示\")) : _createCommentVNode(\"v-if\", true), _ctx.teamLegend.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.teamLegend, item => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: item.team,\n      class: \"legend-item\"\n    }, [_createElementVNode(\"span\", {\n      class: \"legend-color\",\n      style: _normalizeStyle({\n        backgroundColor: item.color\n      })\n    }, null, 4 /* STYLE */), _createElementVNode(\"span\", _hoisted_4, _toDisplayString(item.team), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)], 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","key","_createElementBlock","_hoisted_1","_ctx","hasData","_hoisted_2","_createCommentVNode","teamLegend","length","_hoisted_3","_Fragment","_renderList","item","team","_createElementVNode","style","_normalizeStyle","backgroundColor","color","_hoisted_4","_toDisplayString"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\FullChart.vue"],"sourcesContent":["<template>\r\n\t<div ref=\"chartContainer\" class=\"full-chart\">\r\n\t\t<div v-if=\"!hasData\" class=\"no-data-message\">无数据可显示</div>\r\n\t\t<div v-if=\"teamLegend.length > 0\" class=\"team-legend\">\r\n\t\t\t<div v-for=\"item in teamLegend\" :key=\"item.team\" class=\"legend-item\">\r\n\t\t\t\t<span\r\n\t\t\t\t\tclass=\"legend-color\"\r\n\t\t\t\t\t:style=\"{ backgroundColor: item.color }\"></span>\r\n\t\t\t\t<span class=\"legend-text\">{{ item.team }}</span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, onMounted, watch } from \"vue\";\r\n\timport * as d3 from \"d3\";\r\n\r\n\tconst props = defineProps({\r\n\t  data: {\r\n\t    type: Object,\r\n\t    default: () => ({\r\n\t      type: \"line\",\r\n\t      data: []\r\n\t    }),\r\n\t    validator: value => {\r\n\t      return value && ['line', 'bar'].includes(value.type) && Array.isArray(value.data);\r\n\t    }\r\n\t  },\r\n\t  compareData: {\r\n\t    type: Array,\r\n\t    default: () => [],\r\n\t    validator: value => Array.isArray(value)\r\n\t  },\r\n\t  title: {\r\n\t    type: String,\r\n\t    default: \"\"\r\n\t  },\r\n\t  side: {\r\n\t    type: String,\r\n\t    default: \"left\",\r\n\t    validator: value => ['left', 'right'].includes(value)\r\n\t  },\r\n\t  teamColors: {\r\n\t    type: Object,\r\n\t    default: () => ({})\r\n\t  }\r\n\t});\r\n\r\n\tconst chartContainer = ref(null);\r\n\tconst teamLegend = ref([]);\r\n\tconst color = computed(() => props.side === \"left\" ? \"#4a90e2\" : \"#ef4444\");\r\n\tconst highlightColor = \"#FFD700\";\r\n\tconst hasData = computed(() => {\r\n\t  return props.data?.data?.length > 0 &&\r\n\t         props.data.data.every(item => item && !isNaN(item.year) && !isNaN(item.value));\r\n\t});\r\n\r\n\t// 清理团队名称中的特殊字符\r\n\tconst sanitizeTeamName = (team) => {\r\n\t  return team.replace(/[^a-zA-Z0-9]/g, '-');\r\n\t};\r\n\r\n\tconst drawChart = () => {\r\n\t  if (!chartContainer.value || !hasData.value) {\r\n\t    d3.select(chartContainer.value).selectAll(\"*\").remove();\r\n\t    return;\r\n\t  }\r\n\r\n\t  try {\r\n\t    d3.select(chartContainer.value).selectAll(\"*\").remove();\r\n\t    teamLegend.value = [];\r\n\r\n\t    const margin = { top: 30, right: 30, bottom: 70, left: 50 };\r\n\t    const width = 800 - margin.left - margin.right;\r\n\t    const height = 500 - margin.top - margin.bottom;\r\n\r\n\t    const svg = d3.select(chartContainer.value)\r\n\t      .append(\"svg\")\r\n\t      .attr(\"width\", width + margin.left + margin.right)\r\n\t      .attr(\"height\", height + margin.top + margin.bottom + 40)\r\n\t      .append(\"g\")\r\n\t      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n\t    const processedData = processTeamData(props.data.data);\r\n\t    if (processedData.length === 0) return;\r\n\r\n\t    const x = props.data.type === \"bar\"\r\n\t      ? d3.scaleBand()\r\n\t          .domain(processedData.map(d => d.year.toString()))\r\n\t          .range([0, width])\r\n\t          .padding(0.2)\r\n\t      : d3.scaleLinear()\r\n\t          .domain(d3.extent(processedData, d => d.year))\r\n\t          .range([0, width]);\r\n\r\n\t    const y = d3.scaleLinear()\r\n\t      .domain([0, d3.max(processedData, d => d.value) * 1.1])\r\n\t      .range([height, 0]);\r\n\r\n\t    // 绘制网格线\r\n\t    svg.append(\"g\")\r\n\t      .attr(\"class\", \"grid\")\r\n\t      .call(\r\n\t        d3.axisLeft(y)\r\n\t          .tickSize(-width)\r\n\t          .tickFormat(\"\")\r\n\t      )\r\n\t      .selectAll(\"line\")\r\n\t      .attr(\"stroke\", \"#e2e8f0\")\r\n\t      .attr(\"stroke-dasharray\", \"2,2\");\r\n\r\n\t    // 绘制坐标轴\r\n\t    svg.append(\"g\")\r\n\t      .attr(\"transform\", `translate(0,${height})`)\r\n\t      .call(\r\n\t        props.data.type === \"bar\"\r\n\t          ? d3.axisBottom(x)\r\n\t          : d3.axisBottom(x).tickFormat(d3.format(\"d\"))\r\n\t      );\r\n\t    svg.append(\"g\").call(d3.axisLeft(y));\r\n\r\n\t    // 添加标签\r\n\t    svg.append(\"text\")\r\n\t      .attr(\"transform\", `translate(${width/2},${height + margin.top + 10})`)\r\n\t      .style(\"text-anchor\", \"middle\")\r\n\t      .text(\"年份\");\r\n\t    svg.append(\"text\")\r\n\t      .attr(\"transform\", \"rotate(-90)\")\r\n\t      .attr(\"y\", 0 - margin.left)\r\n\t      .attr(\"x\", 0 - height/2)\r\n\t      .attr(\"dy\", \"1em\")\r\n\t      .style(\"text-anchor\", \"middle\")\r\n\t      .text(\"数值\");\r\n\t    svg.append(\"text\")\r\n\t      .attr(\"x\", width/2)\r\n\t      .attr(\"y\", 0 - margin.top/2)\r\n\t      .attr(\"text-anchor\", \"middle\")\r\n\t      .style(\"font-size\", \"16px\")\r\n\t      .style(\"font-weight\", \"bold\")\r\n\t      .text(props.title);\r\n\r\n\t    if (props.data.type === \"bar\") {\r\n\t      drawTeamBarChart(svg, processedData, x, y, width, height);\r\n\t    } else {\r\n\t      drawTeamLineChart(svg, processedData, x, y);\r\n\t    }\r\n\r\n\t    // 添加团队图例\r\n\t    if (teamLegend.value.length > 0) {\r\n\t      const legend = svg.append(\"g\")\r\n\t        .attr(\"class\", \"legend\")\r\n\t        .attr(\"transform\", `translate(0,${height + 40})`);\r\n\r\n\t      legend.selectAll(\".legend-item\")\r\n\t        .data(teamLegend.value)\r\n\t        .enter().append(\"g\")\r\n\t        .attr(\"class\", \"legend-item\")\r\n\t        .attr(\"transform\", (d, i) => `translate(${i * 150}, 0)`)\r\n\t        .each(function(d) {\r\n\t          d3.select(this).append(\"rect\")\r\n\t            .attr(\"width\", 12)\r\n\t            .attr(\"height\", 12)\r\n\t            .attr(\"fill\", d.color);\r\n\r\n\t          d3.select(this).append(\"text\")\r\n\t            .attr(\"x\", 16)\r\n\t            .attr(\"y\", 9)\r\n\t            .attr(\"dy\", \"0.35em\")\r\n\t            .style(\"font-size\", \"10px\")\r\n\t            .text(d.team);\r\n\t        });\r\n\t    }\r\n\t  } catch (error) {\r\n\t    console.error(\"图表渲染错误:\", error);\r\n\t  }\r\n\t};\r\n\r\n\tconst processTeamData = (data) => {\r\n\t  const teamMap = new Map();\r\n\t  const result = [];\r\n\r\n\t  data.forEach(item => {\r\n\t    if (!item || !item.year || isNaN(item.value)) return;\r\n\r\n\t    const key = `${item.year}-${item.team || 'Unknown'}`;\r\n\t    if (!teamMap.has(key)) {\r\n\t      teamMap.set(key, true);\r\n\t      result.push({\r\n\t        ...item,\r\n\t        displayYear: item.team ? `${item.year} (${item.team})` : item.year.toString()\r\n\t      });\r\n\r\n\t      if (item.team && props.teamColors[item.team] && !teamLegend.value.some(t => t.team === item.team)) {\r\n\t        teamLegend.value.push({\r\n\t          team: item.team,\r\n\t          color: props.teamColors[item.team]\r\n\t        });\r\n\t      }\r\n\t    }\r\n\t  });\r\n\r\n\t  return result.sort((a, b) => a.year - b.year);\r\n\t};\r\n\r\n\tconst drawTeamBarChart = (svg, data, x, y, width, height) => {\r\n\t  const teamGroups = d3.group(data, d => d.team);\r\n\t  const xSubgroup = d3.scaleBand()\r\n\t    .domain([...teamGroups.keys()])\r\n\t    .range([0, x.bandwidth()])\r\n\t    .padding(0.05);\r\n\r\n\t  svg.append(\"g\")\r\n\t    .selectAll(\"g\")\r\n\t    .data(d3.group(data, d => d.year))\r\n\t    .enter().append(\"g\")\r\n\t    .attr(\"transform\", d => `translate(${x(d[0])},0)`)\r\n\t    .selectAll(\"rect\")\r\n\t    .data(d => {\r\n\t      const yearData = d[1];\r\n\t      return [...teamGroups.keys()].map(team => {\r\n\t        const teamData = yearData.find(item => item.team === team);\r\n\t        return {\r\n\t          year: d[0],\r\n\t          team,\r\n\t          value: teamData?.value || 0,\r\n\t          color: props.teamColors[team] || \"#999\"\r\n\t        };\r\n\t      });\r\n\t    })\r\n\t    .enter().append(\"rect\")\r\n\t    .attr(\"x\", d => xSubgroup(d.team))\r\n\t    .attr(\"y\", d => y(d.value))\r\n\t    .attr(\"width\", xSubgroup.bandwidth())\r\n\t    .attr(\"height\", d => height - y(d.value))\r\n\t    .attr(\"fill\", d => d.color)\r\n\t    .attr(\"rx\", 2)\r\n\t    .attr(\"ry\", 2);\r\n\t};\r\n\r\n\tconst drawTeamLineChart = (svg, data, x, y) => {\r\n\t  const teamGroups = d3.group(data, d => d.team);\r\n\r\n\t  teamGroups.forEach((teamData, team) => {\r\n\t    const safeTeamName = sanitizeTeamName(team);\r\n\t    const line = d3.line()\r\n\t      .x(d => x(d.year))\r\n\t      .y(d => y(d.value))\r\n\t      .curve(d3.curveMonotoneX);\r\n\r\n\t    svg.append(\"path\")\r\n\t      .datum(teamData)\r\n\t      .attr(\"fill\", \"none\")\r\n\t      .attr(\"stroke\", props.teamColors[team] || \"#999\")\r\n\t      .attr(\"stroke-width\", 3)\r\n\t      .attr(\"d\", line);\r\n\r\n\t    svg.selectAll(`.dot-${safeTeamName}`)\r\n\t      .data(teamData)\r\n\t      .enter().append(\"circle\")\r\n\t      .attr(\"class\", `dot-${safeTeamName}`)\r\n\t      .attr(\"cx\", d => x(d.year))\r\n\t      .attr(\"cy\", d => y(d.value))\r\n\t      .attr(\"r\", 6)\r\n\t      .attr(\"fill\", props.teamColors[team] || \"#999\")\r\n\t      .attr(\"stroke\", \"white\")\r\n\t      .attr(\"stroke-width\", 2);\r\n\t  });\r\n\r\n\t  if (props.compareData && props.compareData.length > 0) {\r\n\t    const commonYears = getCommonYears(data, props.compareData);\r\n\t    commonYears.forEach(year => {\r\n\t      const points = data.filter(d => d.year === year);\r\n\t      points.forEach(point => {\r\n\t        svg.append(\"circle\")\r\n\t          .attr(\"cx\", x(point.year))\r\n\t          .attr(\"cy\", y(point.value))\r\n\t          .attr(\"r\", 8)\r\n\t          .attr(\"fill\", highlightColor)\r\n\t          .attr(\"stroke\", \"#FF8C00\")\r\n\t          .attr(\"stroke-width\", 2)\r\n\t          .attr(\"class\", \"highlight-point\");\r\n\t      });\r\n\t    });\r\n\t  }\r\n\t};\r\n\r\n\tconst getCommonYears = (data1, data2) => {\r\n\t  const years1 = new Set(data1.map(d => d.year));\r\n\t  const years2 = new Set(data2.filter(d => d).map(d => d.year));\r\n\t  return [...years1].filter(year => years2.has(year)));\r\n\t};\r\n\r\n\twatch(() => [props.data, props.compareData, props.title], drawChart, { deep: true });\r\n\r\n\tonMounted(() => {\r\n\t  setTimeout(drawChart, 100);\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.full-chart {\r\n\t\twidth: 100%;\r\n\t\theight: 550px;\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t.no-data-message {\r\n\t\tposition: absolute;\r\n\t\ttop: 50%;\r\n\t\tleft: 50%;\r\n\t\ttransform: translate(-50%, -50%);\r\n\t\tcolor: #94a3b8;\r\n\t\tfont-size: 14px;\r\n\t}\r\n\r\n\t.team-legend {\r\n\t\tposition: absolute;\r\n\t\tbottom: 10px;\r\n\t\tleft: 50%;\r\n\t\ttransform: translateX(-50%);\r\n\t\tdisplay: flex;\r\n\t\tflex-wrap: wrap;\r\n\t\tjustify-content: center;\r\n\t\tgap: 15px;\r\n\t\tpadding: 8px 15px;\r\n\t\tbackground: rgba(255, 255, 255, 0.9);\r\n\t\tborder-radius: 4px;\r\n\t\tbox-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t.legend-item {\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tgap: 5px;\r\n\t}\r\n\r\n\t.legend-color {\r\n\t\tdisplay: inline-block;\r\n\t\twidth: 12px;\r\n\t\theight: 12px;\r\n\t\tborder-radius: 2px;\r\n\t}\r\n\r\n\t.legend-text {\r\n\t\tfont-size: 12px;\r\n\t\tcolor: #333;\r\n\t}\r\n\r\n\t.full-chart :deep(.highlight-point) {\r\n\t\tanimation: pulse 1.5s infinite;\r\n\t}\r\n\r\n\t@keyframes pulse {\r\n\t\t0% {\r\n\t\t\tr: 6;\r\n\t\t\topacity: 1;\r\n\t\t}\r\n\t\t50% {\r\n\t\t\tr: 9;\r\n\t\t\topacity: 0.8;\r\n\t\t}\r\n\t\t100% {\r\n\t\t\tr: 6;\r\n\t\t\topacity: 1;\r\n\t\t}\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,GAAG,EAAC,gBAAgB;EAACC,KAAK,EAAC;;;EADjCC,GAAA;EAEuBD,KAAK,EAAC;;;EAF7BC,GAAA;EAGoCD,KAAK,EAAC;;;EAKhCA,KAAK,EAAC;AAAa;;uBAP5BE,mBAAA,CAUM,OAVNC,UAUM,G,CATOC,IAAA,CAAAC,OAAO,I,cAAnBH,mBAAA,CAAyD,OAAzDI,UAAyD,EAAZ,QAAM,KAFrDC,mBAAA,gBAGaH,IAAA,CAAAI,UAAU,CAACC,MAAM,Q,cAA5BP,mBAAA,CAOM,OAPNQ,UAOM,I,kBANLR,mBAAA,CAKMS,SAAA,QATTC,WAAA,CAIuBR,IAAA,CAAAI,UAAU,EAAlBK,IAAI;yBAAhBX,mBAAA,CAKM;MAL2BD,GAAG,EAAEY,IAAI,CAACC,IAAI;MAAEd,KAAK,EAAC;QACtDe,mBAAA,CAEiD;MADhDf,KAAK,EAAC,cAAc;MACnBgB,KAAK,EAPXC,eAAA;QAAAC,eAAA,EAOgCL,IAAI,CAACM;MAAK;6BACtCJ,mBAAA,CAAgD,QAAhDK,UAAgD,EAAAC,gBAAA,CAAnBR,IAAI,CAACC,IAAI,iB;sCAR1CP,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}