{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, vModelSelect as _vModelSelect, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createStaticVNode as _createStaticVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-1a5dde20\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"Data Visualization with D3.js\", -1 /* HOISTED */));\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"jsonData\"\n}, \"输入 JSON 数据：\", -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"visualizationType\"\n}, \"选择可视化类型：\", -1 /* HOISTED */));\nconst _hoisted_4 = /*#__PURE__*/_createStaticVNode(\"<option value=\\\"bar\\\" data-v-1a5dde20>柱状图 (Bar Chart)</option><option value=\\\"line\\\" data-v-1a5dde20>折线图 (Line Chart)</option><option value=\\\"pie\\\" data-v-1a5dde20>饼图 (Pie Chart)</option><option value=\\\"scatter\\\" data-v-1a5dde20>散点图 (Scatter Plot)</option><option value=\\\"treemap\\\" data-v-1a5dde20>树状图 (Treemap)</option><option value=\\\"AUTO\\\" data-v-1a5dde20>论证单元树 (AUTO)</option>\", 6);\nconst _hoisted_10 = [_hoisted_4];\nconst _hoisted_11 = {\n  key: 0\n};\nconst _hoisted_12 = {\n  ref: \"chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"div\", null, [_hoisted_2, _withDirectives(_createElementVNode(\"textarea\", {\n    id: \"jsonData\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.jsonData = $event),\n    rows: \"5\",\n    cols: \"50\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.jsonData]])]), _createElementVNode(\"div\", null, [_hoisted_3, _withDirectives(_createElementVNode(\"select\", {\n    id: \"visualizationType\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.selectedVisualizationType = $event)\n  }, [..._hoisted_10], 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedVisualizationType]])]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = function () {\n      return $options.fetchRecommendation && $options.fetchRecommendation(...arguments);\n    })\n  }, \"获取可视化推荐\"), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = function () {\n      return $options.renderChart && $options.renderChart(...arguments);\n    })\n  }, \"手动渲染图表\"), $data.visualizationType ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, [_createElementVNode(\"h2\", null, \"推荐的可视化类型：\" + _toDisplayString($data.visualizationType), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_12, null, 512 /* NEED_PATCH */)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["_createElementVNode","for","_createStaticVNode","_hoisted_4","key","ref","_createElementBlock","_hoisted_1","_hoisted_2","id","_cache","$event","$data","jsonData","rows","cols","_hoisted_3","selectedVisualizationType","_hoisted_10","onClick","$options","fetchRecommendation","arguments","renderChart","visualizationType","_hoisted_11","_toDisplayString","_hoisted_12","_createCommentVNode"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\Vis.vue"],"sourcesContent":["<template>\r\n\t<div>\r\n\t\t<h1>Data Visualization with D3.js</h1>\r\n\t\t<div>\r\n\t\t\t<label for=\"jsonData\">输入 JSON 数据：</label>\r\n\t\t\t<textarea id=\"jsonData\" v-model=\"jsonData\" rows=\"5\" cols=\"50\"></textarea>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<label for=\"visualizationType\">选择可视化类型：</label>\r\n\t\t\t<select id=\"visualizationType\" v-model=\"selectedVisualizationType\">\r\n\t\t\t\t<option value=\"bar\">柱状图 (Bar Chart)</option>\r\n\t\t\t\t<option value=\"line\">折线图 (Line Chart)</option>\r\n\t\t\t\t<option value=\"pie\">饼图 (Pie Chart)</option>\r\n\t\t\t\t<option value=\"scatter\">散点图 (Scatter Plot)</option>\r\n\t\t\t\t<option value=\"treemap\">树状图 (Treemap)</option>\r\n\t\t\t\t<option value=\"AUTO\">论证单元树 (AUTO)</option>\r\n\t\t\t</select>\r\n\t\t</div>\r\n\t\t<button @click=\"fetchRecommendation\">获取可视化推荐</button>\r\n\t\t<button @click=\"renderChart\">手动渲染图表</button>\r\n\t\t<div v-if=\"visualizationType\">\r\n\t\t\t<h2>推荐的可视化类型：{{ visualizationType }}</h2>\r\n\t\t\t<div ref=\"chart\"></div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\n\timport * as d3 from \"d3\";\r\n\r\n\texport default {\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t\tjsonData: '{\"A\": 10, \"B\": 20, \"C\": 30, \"D\": 40}', // 默认 JSON 数据\r\n\t\t\t\tvisualizationType: \"\", // 推荐的可视化类型\r\n\t\t\t\tselectedVisualizationType: \"bar\", // 用户选择的可视化类型\r\n\t\t\t\tchartData: {} // 用于存储图表数据\r\n\t\t\t};\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\t// 获取后端推荐的可视化类型\r\n\t\t\tasync fetchRecommendation() {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst response = await fetch(\r\n\t\t\t\t\t\t\"http://localhost:8888/recommend_visualization\",\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tmethod: \"POST\",\r\n\t\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\t\t\t\tdata: JSON.parse(this.jsonData)\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\t\tconst result = await response.json();\r\n\t\t\t\t\tthis.visualizationType = result.visualization_type;\r\n\t\t\t\t\tthis.chartData = result.data;\r\n\t\t\t\t\tthis.$nextTick(() => {\r\n\t\t\t\t\t\tthis.renderChart(); // 确保 DOM 更新后渲染图表\r\n\t\t\t\t\t});\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tconsole.error(\"获取推荐失败：\", error);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t// 手动渲染图表\r\n\t\t\trenderChart() {\r\n\t\t\t\tconst chartElement = this.$refs.chart;\r\n\t\t\t\tif (!chartElement) {\r\n\t\t\t\t\tconsole.error(\"图表容器未找到\");\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 清空之前的图表\r\n\t\t\t\tchartElement.innerHTML = \"\";\r\n\r\n\t\t\t\tconst svg = d3\r\n\t\t\t\t\t.select(chartElement)\r\n\t\t\t\t\t.append(\"svg\")\r\n\t\t\t\t\t.attr(\"width\", 500)\r\n\t\t\t\t\t.attr(\"height\", 500);\r\n\r\n\t\t\t\tconst data = Object.entries(this.chartData);\r\n\r\n\t\t\t\t// 根据用户选择的可视化类型渲染图表\r\n\t\t\t\tswitch (this.selectedVisualizationType) {\r\n\t\t\t\t\tcase \"bar\":\r\n\t\t\t\t\t\tthis.renderBarChart(svg, data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"line\":\r\n\t\t\t\t\t\tthis.renderLineChart(svg, data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"pie\":\r\n\t\t\t\t\t\tthis.renderPieChart(svg, data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"scatter\":\r\n\t\t\t\t\t\tthis.renderScatterChart(svg, data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"treemap\":\r\n\t\t\t\t\t\tthis.renderTreemap(svg, data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"AUTO\":\r\n\t\t\t\t\t\tthis.renderAuto(svg, data);\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tconsole.error(\"未知的可视化类型：\", this.selectedVisualizationType);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t// 渲染柱状图\r\n\t\t\trenderBarChart(svg, data) {\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.selectAll(\"rect\")\r\n\t\t\t\t\t.data(data)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"rect\")\r\n\t\t\t\t\t.attr(\"x\", (d, i) => i * 100)\r\n\t\t\t\t\t.attr(\"y\", d => 500 - d[1] * 10)\r\n\t\t\t\t\t.attr(\"width\", 50)\r\n\t\t\t\t\t.attr(\"height\", d => d[1] * 10)\r\n\t\t\t\t\t.attr(\"fill\", \"blue\");\r\n\t\t\t},\r\n\t\t\t// 渲染折线图\r\n\t\t\trenderLineChart(svg, data) {\r\n\t\t\t\tconst line = d3\r\n\t\t\t\t\t.line()\r\n\t\t\t\t\t.x((d, i) => i * 50)\r\n\t\t\t\t\t.y(d => 500 - d[1] * 10);\r\n\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.append(\"path\")\r\n\t\t\t\t\t.datum(data)\r\n\t\t\t\t\t.attr(\"d\", line)\r\n\t\t\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t\t\t.attr(\"stroke\", \"green\")\r\n\t\t\t\t\t.attr(\"stroke-width\", 2);\r\n\t\t\t},\r\n\t\t\t// 渲染饼图\r\n\t\t\trenderPieChart(svg, data) {\r\n\t\t\t\tconst pie = d3.pie().value(d => d[1]);\r\n\r\n\t\t\t\tconst arcs = pie(data);\r\n\r\n\t\t\t\tconst arc = d3.arc().innerRadius(0).outerRadius(200);\r\n\r\n\t\t\t\tconst g = svg.append(\"g\").attr(\"transform\", \"translate(250, 250)\");\r\n\r\n\t\t\t\tg.selectAll(\"path\")\r\n\t\t\t\t\t.data(arcs)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"path\")\r\n\t\t\t\t\t.attr(\"d\", arc)\r\n\t\t\t\t\t.attr(\"fill\", (d, i) => d3.schemeCategory10[i]);\r\n\t\t\t},\r\n\t\t\t// 渲染散点图\r\n\t\t\trenderScatterChart(svg, data) {\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.selectAll(\"circle\")\r\n\t\t\t\t\t.data(data)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"circle\")\r\n\t\t\t\t\t.attr(\"cx\", (d, i) => i * 100)\r\n\t\t\t\t\t.attr(\"cy\", d => 500 - d[1] * 10)\r\n\t\t\t\t\t.attr(\"r\", 5)\r\n\t\t\t\t\t.attr(\"fill\", \"red\");\r\n\t\t\t},\r\n\t\t\t// 渲染树状图\r\n\t\t\trenderTreemap(svg, data) {\r\n\t\t\t\tconst root = d3.hierarchy({ children: data }).sum(d => d[1]); // 使用数据的值作为权重\r\n\r\n\t\t\t\tconst treemap = d3\r\n\t\t\t\t\t.treemap()\r\n\t\t\t\t\t.size([500, 500]) // 设置树状图的大小\r\n\t\t\t\t\t.padding(1);\r\n\r\n\t\t\t\ttreemap(root);\r\n\r\n\t\t\t\tconst cells = svg\r\n\t\t\t\t\t.selectAll(\"g\")\r\n\t\t\t\t\t.data(root.leaves())\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"transform\", d => `translate(${d.x0},${d.y0})`);\r\n\r\n\t\t\t\tcells\r\n\t\t\t\t\t.append(\"rect\")\r\n\t\t\t\t\t.attr(\"width\", d => d.x1 - d.x0)\r\n\t\t\t\t\t.attr(\"height\", d => d.y1 - d.y0)\r\n\t\t\t\t\t.attr(\"fill\", (d, i) => d3.schemeCategory10[i % 10]);\r\n\r\n\t\t\t\tcells\r\n\t\t\t\t\t.append(\"text\")\r\n\t\t\t\t\t.attr(\"x\", 5)\r\n\t\t\t\t\t.attr(\"y\", 20)\r\n\t\t\t\t\t.text(d => d.data[0]); // 显示标签\r\n\t\t\t},\r\n\t\t\t// 渲染AUTO\r\n\t\t\trenderAuto(svg, data) {\r\n\t\t\t\t//维度\r\n\t\t\t\tconst dms = {\r\n\t\t\t\t\twidth: 100,\r\n\t\t\t\t\theight: 500,\r\n\t\t\t\t\tmargin: {\r\n\t\t\t\t\t\ttop: 50,\r\n\t\t\t\t\t\tbottom: 50,\r\n\t\t\t\t\t\tright: 100,\r\n\t\t\t\t\t\tleft: 100\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tdms.contentWidth = dms.width - dms.margin.left - dms.margin.right;\r\n\t\t\t\tdms.contentHeight = dms.height - dms.margin.top - dms.margin.bottom;\r\n\t\t\t\t//整个盒子\r\n\t\t\t\tconst box = svg\r\n\t\t\t\t\t.attr(\"id\", \"box\")\r\n\t\t\t\t\t.attr(\"width\", dms.width)\r\n\t\t\t\t\t.attr(\"height\", dms.height);\r\n\t\t\t\t//内容区\r\n\t\t\t\tconst content = box\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"id\", \"content\")\r\n\t\t\t\t\t.style(\r\n\t\t\t\t\t\t\"transform\",\r\n\t\t\t\t\t\t`translate(${dms.margin.left}px,${dms.margin.top}px)`\r\n\t\t\t\t\t);\r\n\t\t\t\tconst circles = content.append(\"g\").attr(\"class\", \"circles\");\r\n\t\t\t\tconst paths = content.append(\"g\").attr(\"class\", \"paths\");\r\n\t\t\t\tconst up_lines = content.append(\"g\");\r\n\t\t\t\tconst down_lines = content.append(\"g\");\r\n\t\t\t\tconst transverse_lines = paths\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"class\", \"transverse_lines\");\r\n\t\t\t\tconst rects = content.append(\"g\").attr(\"class\", \"circles\");\r\n\t\t\t\tlet root;\r\n\r\n\t\t\t\troot = d3.hierarchy(data);\r\n\t\t\t\troot = d3.tree().size([dms.contentWidth, dms.contentHeight])(root);\r\n\t\t\t\tconsole.log(\"root:\", root);\r\n\t\t\t\trender(root);\r\n\r\n\t\t\t\tfunction render(data) {\r\n\t\t\t\t\tlet levelObj = {};\r\n\t\t\t\t\tlet level = [];\r\n\t\t\t\t\tlet kData = data.descendants();\r\n\t\t\t\t\tfor (let i = 0; i < kData.length; i++) {\r\n\t\t\t\t\t\tkData[i].key = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tkData.forEach(d => {\r\n\t\t\t\t\t\tif (d.parent) {\r\n\t\t\t\t\t\t\t// 检查 levelObj 对象中是否已经存在以 d.parent.key 为键的数组\r\n\t\t\t\t\t\t\tif (!levelObj[d.parent.key]) {\r\n\t\t\t\t\t\t\t\t// 如果不存在，创建一个空数组\r\n\t\t\t\t\t\t\t\tlevelObj[d.parent.key] = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tkData.forEach(d => {\r\n\t\t\t\t\t\tif (d.parent) {\r\n\t\t\t\t\t\t\t// 直接使用 d.parent.key 作为键，向 levelObj 对象中的数组添加元素\r\n\t\t\t\t\t\t\tlevelObj[d.parent.key].push([d.x, d.y]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//把对象转成数组\r\n\t\t\t\t\tlevel = Object.values(levelObj);\r\n\t\t\t\t\t//画线\r\n\t\t\t\t\tdown_lines\r\n\t\t\t\t\t\t.selectAll(\"path\")\r\n\t\t\t\t\t\t//.links 生成一个包含源节点和目标节点信息的数组\r\n\t\t\t\t\t\t.data(data.links())\r\n\t\t\t\t\t\t.join(\"path\")\r\n\t\t\t\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t\t\t\t.attr(\"stroke\", \"black\")\r\n\t\t\t\t\t\t.attr(\"stroke-width\", 1.5)\r\n\t\t\t\t\t\t//画下竖线\r\n\t\t\t\t\t\t.attr(\"d\", d => {\r\n\t\t\t\t\t\t\t// console.log('root:',d.source.x);\r\n\t\t\t\t\t\t\treturn `M${d.source.x},${d.source.y + 50},${d.source.x},${\r\n\t\t\t\t\t\t\t\td.target.y - 20\r\n\t\t\t\t\t\t\t}`;\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t//画上竖线\r\n\t\t\t\t\tup_lines\r\n\t\t\t\t\t\t.selectAll(\"path\")\r\n\t\t\t\t\t\t//.links 生成一个包含源节点和目标节点信息的数组\r\n\t\t\t\t\t\t.data(data.links())\r\n\t\t\t\t\t\t.join(\"path\")\r\n\t\t\t\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t\t\t\t.attr(\"stroke\", \"black\")\r\n\t\t\t\t\t\t.attr(\"stroke-width\", 1.5)\r\n\t\t\t\t\t\t.attr(\"d\", d => {\r\n\t\t\t\t\t\t\treturn `M${d.target.x},${d.target.y},${d.target.x},${\r\n\t\t\t\t\t\t\t\td.target.y - 20\r\n\t\t\t\t\t\t\t}`;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t//画每一层的大横线\r\n\t\t\t\t\ttransverse_lines\r\n\t\t\t\t\t\t.selectAll(\"path\")\r\n\t\t\t\t\t\t.data(level)\r\n\t\t\t\t\t\t.join(\"path\")\r\n\t\t\t\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t\t\t\t.attr(\"stroke\", \"black\")\r\n\t\t\t\t\t\t.attr(\"stroke-width\", 1.5)\r\n\t\t\t\t\t\t.attr(\"d\", d => {\r\n\t\t\t\t\t\t\tconst startX = d[0][0];\r\n\t\t\t\t\t\t\tconst y = d[0][1] - 20;\r\n\t\t\t\t\t\t\tconst endX = d[d.length - 1][0];\r\n\t\t\t\t\t\t\treturn `M${startX},${y} L${endX},${y}`;\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t//画矩形\r\n\t\t\t\t\tcircles\r\n\t\t\t\t\t\t.selectAll()\r\n\t\t\t\t\t\t.data(root.descendants())\r\n\t\t\t\t\t\t.join(\"rect\")\r\n\t\t\t\t\t\t.attr(\"x\", d => d.x - 5)\r\n\t\t\t\t\t\t.attr(\"y\", d => d.y)\r\n\t\t\t\t\t\t.attr(\"width\", 10)\r\n\t\t\t\t\t\t.attr(\"height\", 50)\r\n\t\t\t\t\t\t.attr(\"stroke-width\", 3)\r\n\t\t\t\t\t\t.attr(\"fill\", d => {\r\n\t\t\t\t\t\t\tif (d.depth === 0) {\r\n\t\t\t\t\t\t\t\treturn \"blue\";\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tif (d.data.attitude == \"y\") {\r\n\t\t\t\t\t\t\t\t\treturn \"green\";\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\treturn \"red\";\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n</script>\r\n\r\n<style scoped>\r\n\ttextarea {\r\n\t\tmargin-bottom: 20px;\r\n\t}\r\n\tbutton {\r\n\t\tmargin-bottom: 20px;\r\n\t}\r\n\t.chart {\r\n\t\tmargin: 20px;\r\n\t}\r\n</style>\r\n"],"mappings":";;gEAEEA,mBAAA,CAAsC,YAAlC,+BAA6B;gEAEhCA,mBAAA,CAAyC;EAAlCC,GAAG,EAAC;AAAU,GAAC,aAAW;gEAIjCD,mBAAA,CAA+C;EAAxCC,GAAG,EAAC;AAAmB,GAAC,UAAQ;gCAR1CC,kBAAA;qBAUIC,UAA4C,C;;EAVhDC,GAAA;AAAA;;EAsBQC,GAAG,EAAC;AAAO;;uBArBlBC,mBAAA,CAuBM,cAtBLC,UAAsC,EACtCP,mBAAA,CAGM,cAFLQ,UAAyC,E,gBACzCR,mBAAA,CAAyE;IAA/DS,EAAE,EAAC,UAAU;IAL1B,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAKoCC,KAAA,CAAAC,QAAQ,GAAAF,MAAA;IAAEG,IAAI,EAAC,GAAG;IAACC,IAAI,EAAC;iDAAxBH,KAAA,CAAAC,QAAQ,E,KAE1Cb,mBAAA,CAUM,cATLgB,UAA+C,E,gBAC/ChB,mBAAA,CAOS;IAPDS,EAAE,EAAC,mBAAmB;IATjC,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAS2CC,KAAA,CAAAK,yBAAyB,GAAAN,MAAA;KATpE,IAAAO,WAAA,2B,gBAS2CN,KAAA,CAAAK,yBAAyB,E,KASlEjB,mBAAA,CAAqD;IAA5CmB,OAAK,EAAAT,MAAA,QAAAA,MAAA;MAAA,OAAEU,QAAA,CAAAC,mBAAA,IAAAD,QAAA,CAAAC,mBAAA,IAAAC,SAAA,CAAmB;IAAA;KAAE,SAAO,GAC5CtB,mBAAA,CAA4C;IAAnCmB,OAAK,EAAAT,MAAA,QAAAA,MAAA;MAAA,OAAEU,QAAA,CAAAG,WAAA,IAAAH,QAAA,CAAAG,WAAA,IAAAD,SAAA,CAAW;IAAA;KAAE,QAAM,GACxBV,KAAA,CAAAY,iBAAiB,I,cAA5BlB,mBAAA,CAGM,OAvBRmB,WAAA,GAqBGzB,mBAAA,CAAyC,YAArC,WAAS,GAAA0B,gBAAA,CAAGd,KAAA,CAAAY,iBAAiB,kBACjCxB,mBAAA,CAAuB,OAAvB2B,WAAuB,8B,KAtB1BC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}