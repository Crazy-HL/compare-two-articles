{"ast":null,"code":"import { ref, computed, onMounted } from \"vue\";\nimport SimpleChart from \"./SimpleChart.vue\";\nimport FullChart from \"./FullChart.vue\";\nimport bus from \"@/js/eventBus.js\";\nexport default {\n  __name: 'CompareTable',\n  props: {\n    div1RawData: Object,\n    div3RawData: Object\n  },\n  emits: [\"compareAttribute\"],\n  setup(__props, _ref) {\n    let {\n      expose: __expose,\n      emit: __emit\n    } = _ref;\n    __expose();\n    const props = __props;\n    const emit = __emit;\n    const leftInfobox = ref({\n      title: \"\",\n      type: \"\",\n      data: {}\n    });\n    const rightInfobox = ref({\n      title: \"\",\n      type: \"\",\n      data: {}\n    });\n    const showFullChartModal = ref(false);\n    const currentChart = ref({\n      title: \"\",\n      field: {},\n      data: []\n    });\n    const originalFieldsOrder = ref([]);\n    const isSortedByDifference = ref(false);\n    const COMPARABLE_FIELDS = [{\n      key: \"GDP\",\n      type: \"number\",\n      typeLabel: \"数值(万亿美元)\",\n      visualization: \"bar-chart\",\n      legend: \"国内生产总值（单位：万亿美元）\",\n      importance: 1.5\n    }, {\n      key: \"Population\",\n      type: \"number\",\n      typeLabel: \"数值(人)\",\n      visualization: \"bar-chart\",\n      legend: \"人口数量（单位：亿人）\",\n      importance: 1.3\n    }, {\n      key: \"GDP per capita\",\n      type: \"number\",\n      typeLabel: \"数值(美元)\",\n      visualization: \"bar-chart\",\n      legend: \"人均GDP（单位：美元）\",\n      importance: 1.4\n    }, {\n      key: \"GDP growth\",\n      type: \"percentage\",\n      typeLabel: \"百分比(%)\",\n      visualization: \"line-chart\",\n      legend: \"GDP年增长率（%）\",\n      importance: 1.2\n    }, {\n      key: \"Inflation (CPI)\",\n      type: \"percentage\",\n      typeLabel: \"百分比(%)\",\n      visualization: \"pie-chart\",\n      legend: \"消费者价格指数变化\",\n      importance: 1.1\n    }, {\n      key: \"Labor force by occupation\",\n      type: \"percentage\",\n      typeLabel: \"百分比(%)\",\n      visualization: \"pie-chart\",\n      legend: \"劳动力分布比例\",\n      importance: 1.0\n    }, {\n      key: \"GDP rank\",\n      type: \"text\",\n      typeLabel: \"文本\",\n      visualization: \"text-only\",\n      legend: \"全球GDP排名\",\n      importance: 0.8\n    }, {\n      key: \"Government type\",\n      type: \"text\",\n      typeLabel: \"文本\",\n      visualization: \"text-only\",\n      legend: \"政府类型\",\n      importance: 0.9\n    }];\n    const calculateDifferenceScore = (leftData, rightData, fieldType, fieldKey) => {\n      // 处理空数据情况\n      if (!leftData || !rightData || !leftData.length || !rightData.length) {\n        return 0;\n      }\n\n      // 获取字段配置\n      const fieldConfig = COMPARABLE_FIELDS.find(f => f.key === fieldKey) || {};\n      const importanceWeight = fieldConfig.importance || 1.0;\n\n      // 1. 处理文本类型\n      if (fieldType === \"text\") {\n        const leftText = String(leftData[0] || \"\").trim();\n        const rightText = String(rightData[0] || \"\").trim();\n\n        // 完全相同的文本\n        if (leftText === rightText) return 5 * importanceWeight;\n\n        // 完全不同的文本\n        const similarity = calculateTextSimilarity(leftText, rightText);\n        return (100 - similarity * 100) * importanceWeight;\n      }\n\n      // 2. 处理数值类型\n      let leftValue, rightValue;\n\n      // 处理数组数据\n      if (Array.isArray(leftData) && Array.isArray(rightData)) {\n        // 取数组第一个元素作为比较值\n        leftValue = parseFloat(leftData[0]) || 0;\n        rightValue = parseFloat(rightData[0]) || 0;\n\n        // 如果有多个值，计算趋势差异\n        if (leftData.length > 1 && rightData.length > 1) {\n          const leftTrend = calculateTrend(leftData);\n          const rightTrend = calculateTrend(rightData);\n\n          // 趋势相反的情况\n          if (leftTrend * rightTrend < 0) {\n            return 100 * importanceWeight; // 最高优先级\n          }\n\n          // 趋势差异\n          const trendDiff = Math.abs(leftTrend - rightTrend) * 10;\n          return Math.min(trendDiff * importanceWeight, 100);\n        }\n      }\n      // 处理单值数据\n      else {\n        leftValue = parseFloat(leftData[0]) || 0;\n        rightValue = parseFloat(rightData[0]) || 0;\n      }\n\n      // 3. 计算数值差异\n      // 处理除零情况\n      const maxValue = Math.max(Math.abs(leftValue), Math.abs(rightValue), 0.0001);\n      const difference = Math.abs(leftValue - rightValue);\n      let baseScore = difference / maxValue * 100;\n\n      // 对特别大的数值给予额外权重\n      if (maxValue > 1000) {\n        baseScore = Math.min(baseScore * 1.2, 100);\n      }\n\n      // 趋势相反的情况（一个正一个负）\n      if (leftValue * rightValue < 0) {\n        baseScore = 100; // 最高优先级\n      }\n      return Math.min(baseScore * importanceWeight, 100);\n    };\n\n    // 更健壮的文本相似度计算\n    const calculateTextSimilarity = (text1, text2) => {\n      if (!text1 || !text2) return 0;\n      if (text1 === text2) return 1;\n\n      // 简单相似度计算：基于共同词汇的比例\n      const words1 = text1.toLowerCase().match(/\\b\\w+\\b/g) || [];\n      const words2 = text2.toLowerCase().match(/\\b\\w+\\b/g) || [];\n      if (words1.length === 0 || words2.length === 0) return 0;\n      const commonWords = words1.filter(word => words2.includes(word));\n      const maxLength = Math.max(words1.length, words2.length);\n      return commonWords.length / maxLength;\n    };\n\n    // 更健壮的趋势计算\n    const calculateTrend = values => {\n      const numericValues = values.map(v => {\n        const num = parseFloat(v);\n        return isNaN(num) ? 0 : num;\n      });\n      if (numericValues.length < 2) return 0;\n      const x = numericValues.map((_, i) => i);\n      const y = numericValues;\n\n      // 简单线性回归计算斜率\n      const n = x.length;\n      const sumX = x.reduce((a, b) => a + b, 0);\n      const sumY = y.reduce((a, b) => a + b, 0);\n      const sumXY = x.reduce((a, _, i) => a + x[i] * y[i], 0);\n      const sumXX = x.reduce((a, b) => a + b * b, 0);\n      const denominator = n * sumXX - sumX * sumX;\n      if (denominator === 0) return 0;\n      return (n * sumXY - sumX * sumY) / denominator;\n    };\n    const sortByDifference = () => {\n      if (isSortedByDifference.value) return;\n      const fieldsWithDifference = comparableFields.value.map(field => {\n        const leftData = getField(leftInfobox.value, field.key);\n        const rightData = getField(rightInfobox.value, field.key);\n        return {\n          ...field,\n          differenceScore: calculateDifferenceScore(leftData, rightData, field.type, field.key),\n          leftData,\n          rightData\n        };\n      });\n\n      // 更精细的排序规则\n      fieldsWithDifference.sort((a, b) => {\n        // 1. 首先按差异分数排序\n        if (Math.abs(b.differenceScore - a.differenceScore) > 5) {\n          return b.differenceScore - a.differenceScore;\n        }\n\n        // 2. 相似分数时，重要字段优先\n        if (b.importance !== a.importance) {\n          return b.importance - a.importance;\n        }\n\n        // 3. 相同重要性时，按字段名称排序\n        return a.key.localeCompare(b.key);\n      });\n      comparableFields.value = fieldsWithDifference;\n      isSortedByDifference.value = true;\n    };\n    const resetSort = () => {\n      if (!isSortedByDifference.value) return;\n      comparableFields.value = [...originalFieldsOrder.value];\n      isSortedByDifference.value = false;\n    };\n    const showFullChart = (infobox, field) => {\n      currentChart.value = {\n        title: infobox.title,\n        field: field,\n        data: getField(infobox, field.key)\n      };\n      showFullChartModal.value = true;\n    };\n    const closeFullChart = () => {\n      showFullChartModal.value = false;\n    };\n    const hoverInfobox = (infobox, fieldKey, side) => {\n      bus.emit(`hover-${side}-infobox`, {\n        fieldKey,\n        infoboxTitle: infobox.title\n      });\n      const divId = side === \"left\" ? \"div1\" : \"div3\";\n      bus.emit(`highlight-${divId}-paragraphs`, fieldKey);\n    };\n    const unhoverInfobox = side => {\n      bus.emit(`unhover-${side}-infobox`);\n      const divId = side === \"left\" ? \"div1\" : \"div3\";\n      bus.emit(`clear-${divId}-highlights`);\n    };\n    const hoverBothInfoboxes = fieldKey => {\n      hoverInfobox(leftInfobox.value, fieldKey, \"left\");\n      hoverInfobox(rightInfobox.value, fieldKey, \"right\");\n    };\n    const unhoverBothInfoboxes = () => {\n      unhoverInfobox(\"left\");\n      unhoverInfobox(\"right\");\n    };\n    const getField = (infobox, fieldKey) => {\n      if (!infobox?.data) return [];\n      for (const section of Object.values(infobox.data)) {\n        if (section[fieldKey] !== undefined) {\n          return Array.isArray(section[fieldKey]) ? section[fieldKey] : [section[fieldKey]];\n        }\n      }\n      return [];\n    };\n    const handleMiddleColumnClick = field => {\n      emit(\"compareAttribute\", {\n        fieldKey: field.key,\n        leftData: getField(leftInfobox.value, field.key),\n        rightData: getField(rightInfobox.value, field.key),\n        leftTitle: leftInfobox.value.title,\n        rightTitle: rightInfobox.value.title,\n        fieldType: field.type,\n        fieldLabel: field.typeLabel\n      });\n      bus.emit(\"highlight-div1-paragraphs\", field.key);\n      bus.emit(\"highlight-div3-paragraphs\", field.key);\n    };\n    const showCombinedChart = field => {\n      const leftData = getField(leftInfobox.value, field.key);\n      const rightData = getField(rightInfobox.value, field.key);\n      currentChart.value = {\n        title: `合并图表 - ${field.key}`,\n        field: field,\n        data: [...leftData, ...rightData]\n      };\n      showFullChartModal.value = true;\n    };\n    const comparableFields = computed(() => {\n      const fields = COMPARABLE_FIELDS.filter(field => {\n        const leftVal = getField(leftInfobox.value, field.key);\n        const rightVal = getField(rightInfobox.value, field.key);\n        return leftVal.length > 0 || rightVal.length > 0;\n      });\n      if (!originalFieldsOrder.value.length) {\n        originalFieldsOrder.value = [...fields];\n      }\n      return fields;\n    });\n    const processInfoboxData = data => {\n      if (!data) return {\n        title: \"\",\n        type: \"\",\n        data: {}\n      };\n      return {\n        title: data.title || \"无标题\",\n        type: data.type || \"未知类型\",\n        data: data.sections || {}\n      };\n    };\n    onMounted(() => {\n      bus.on(\"div1_InfoboxData\", data => {\n        leftInfobox.value = processInfoboxData(data);\n      });\n      bus.on(\"div3_InfoboxData\", data => {\n        rightInfobox.value = processInfoboxData(data);\n      });\n    });\n    const __returned__ = {\n      props,\n      emit,\n      leftInfobox,\n      rightInfobox,\n      showFullChartModal,\n      currentChart,\n      originalFieldsOrder,\n      isSortedByDifference,\n      COMPARABLE_FIELDS,\n      calculateDifferenceScore,\n      calculateTextSimilarity,\n      calculateTrend,\n      sortByDifference,\n      resetSort,\n      showFullChart,\n      closeFullChart,\n      hoverInfobox,\n      unhoverInfobox,\n      hoverBothInfoboxes,\n      unhoverBothInfoboxes,\n      getField,\n      handleMiddleColumnClick,\n      showCombinedChart,\n      comparableFields,\n      processInfoboxData,\n      ref,\n      computed,\n      onMounted,\n      SimpleChart,\n      FullChart,\n      get bus() {\n        return bus;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","SimpleChart","FullChart","bus","props","__props","emit","__emit","leftInfobox","title","type","data","rightInfobox","showFullChartModal","currentChart","field","originalFieldsOrder","isSortedByDifference","COMPARABLE_FIELDS","key","typeLabel","visualization","legend","importance","calculateDifferenceScore","leftData","rightData","fieldType","fieldKey","length","fieldConfig","find","f","importanceWeight","leftText","String","trim","rightText","similarity","calculateTextSimilarity","leftValue","rightValue","Array","isArray","parseFloat","leftTrend","calculateTrend","rightTrend","trendDiff","Math","abs","min","maxValue","max","difference","baseScore","text1","text2","words1","toLowerCase","match","words2","commonWords","filter","word","includes","maxLength","values","numericValues","map","v","num","isNaN","x","_","i","y","n","sumX","reduce","a","b","sumY","sumXY","sumXX","denominator","sortByDifference","value","fieldsWithDifference","comparableFields","getField","differenceScore","sort","localeCompare","resetSort","showFullChart","infobox","closeFullChart","hoverInfobox","side","infoboxTitle","divId","unhoverInfobox","hoverBothInfoboxes","unhoverBothInfoboxes","section","Object","undefined","handleMiddleColumnClick","leftTitle","rightTitle","fieldLabel","showCombinedChart","fields","leftVal","rightVal","processInfoboxData","sections","on"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/CompareTable.vue"],"sourcesContent":["<template>\r\n\t<div class=\"compare-container\">\r\n\t\t<div class=\"sort-controls\">\r\n\t\t\t<button @click=\"sortByDifference\" class=\"sort-btn\">\r\n\t\t\t\t<i class=\"icon-sort\"></i> 按差异排序\r\n\t\t\t</button>\r\n\t\t\t<button @click=\"resetSort\" class=\"sort-btn\">\r\n\t\t\t\t<i class=\"icon-reset\"></i> 重置排序\r\n\t\t\t</button>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"comparison-grid\" :class=\"{ 'is-sorted': isSortedByDifference }\">\r\n\t\t\t<div class=\"header left-column\">\r\n\t\t\t\t{{ leftInfobox.title }}\r\n\t\t\t</div>\r\n\t\t\t<div class=\"header middle-column\">对比属性</div>\r\n\t\t\t<div class=\"header right-column\">\r\n\t\t\t\t{{ rightInfobox.title }}\r\n\t\t\t</div>\r\n\r\n\t\t\t<template v-for=\"field in comparableFields\" :key=\"field.key\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell left-column\"\r\n\t\t\t\t\t@mouseover=\"hoverInfobox(leftInfobox, field.key, 'left')\"\r\n\t\t\t\t\t@mouseout=\"unhoverInfobox('left')\"\r\n\t\t\t\t\t@click=\"showFullChart(leftInfobox, field)\">\r\n\t\t\t\t\t<SimpleChart\r\n\t\t\t\t\t\t:field=\"getField(leftInfobox, field.key)\"\r\n\t\t\t\t\t\t:type=\"field.type\"\r\n\t\t\t\t\t\t:visualization=\"field.visualization\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell middle-column\"\r\n\t\t\t\t\t@mouseover=\"hoverBothInfoboxes(field.key)\"\r\n\t\t\t\t\t@mouseout=\"unhoverBothInfoboxes()\">\r\n\t\t\t\t\t<div class=\"field-name\">{{ field.key }}</div>\r\n\t\t\t\t\t<div class=\"field-type\">{{ field.typeLabel }}</div>\r\n\t\t\t\t\t<div class=\"icon-actions\">\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tclass=\"icon-btn compare\"\r\n\t\t\t\t\t\t\ttitle=\"对比分析\"\r\n\t\t\t\t\t\t\t@click=\"handleMiddleColumnClick(field)\">\r\n\t\t\t\t\t\t\t⚖️\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tclass=\"icon-btn merge\"\r\n\t\t\t\t\t\t\ttitle=\"合并图表\"\r\n\t\t\t\t\t\t\t@click=\"showCombinedChart(field)\">\r\n\t\t\t\t\t\t\t📊\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div v-if=\"isSortedByDifference\" class=\"difference-score\">\r\n\t\t\t\t\t\t差异度:\r\n\t\t\t\t\t\t{{\r\n\t\t\t\t\t\t\tcalculateDifferenceScore(\r\n\t\t\t\t\t\t\t\tgetField(leftInfobox, field.key),\r\n\t\t\t\t\t\t\t\tgetField(rightInfobox, field.key),\r\n\t\t\t\t\t\t\t\tfield.type,\r\n\t\t\t\t\t\t\t\tfield.key\r\n\t\t\t\t\t\t\t).toFixed(1)\r\n\t\t\t\t\t\t}}%\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell right-column\"\r\n\t\t\t\t\t@mouseover=\"hoverInfobox(rightInfobox, field.key, 'right')\"\r\n\t\t\t\t\t@mouseout=\"unhoverInfobox('right')\"\r\n\t\t\t\t\t@click=\"showFullChart(rightInfobox, field)\">\r\n\t\t\t\t\t<SimpleChart\r\n\t\t\t\t\t\t:field=\"getField(rightInfobox, field.key)\"\r\n\t\t\t\t\t\t:type=\"field.type\"\r\n\t\t\t\t\t\t:visualization=\"field.visualization\" />\r\n\t\t\t\t</div>\r\n\t\t\t</template>\r\n\t\t</div>\r\n\r\n\t\t<div\r\n\t\t\tv-if=\"showFullChartModal\"\r\n\t\t\tclass=\"full-chart-modal\"\r\n\t\t\t@click.self=\"closeFullChart\">\r\n\t\t\t<div class=\"modal-content\">\r\n\t\t\t\t<button class=\"close-btn\" @click=\"closeFullChart\">×</button>\r\n\t\t\t\t<h3>{{ currentChart.title }} - {{ currentChart.field.key }}</h3>\r\n\t\t\t\t<div class=\"chart-container\">\r\n\t\t\t\t\t<FullChart\r\n\t\t\t\t\t\t:field=\"currentChart.data\"\r\n\t\t\t\t\t\t:type=\"currentChart.field.type\"\r\n\t\t\t\t\t\t:visualization=\"currentChart.field.visualization\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"chart-legend\" v-if=\"currentChart.field.legend\">\r\n\t\t\t\t\t{{ currentChart.field.legend }}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, onMounted } from \"vue\";\r\n\timport SimpleChart from \"./SimpleChart.vue\";\r\n\timport FullChart from \"./FullChart.vue\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdiv1RawData: Object,\r\n\t\tdiv3RawData: Object\r\n\t});\r\n\r\n\tconst emit = defineEmits([\"compareAttribute\"]);\r\n\r\n\tconst leftInfobox = ref({ title: \"\", type: \"\", data: {} });\r\n\tconst rightInfobox = ref({ title: \"\", type: \"\", data: {} });\r\n\tconst showFullChartModal = ref(false);\r\n\tconst currentChart = ref({\r\n\t\ttitle: \"\",\r\n\t\tfield: {},\r\n\t\tdata: []\r\n\t});\r\n\tconst originalFieldsOrder = ref([]);\r\n\tconst isSortedByDifference = ref(false);\r\n\r\n\tconst COMPARABLE_FIELDS = [\r\n\t\t{\r\n\t\t\tkey: \"GDP\",\r\n\t\t\ttype: \"number\",\r\n\t\t\ttypeLabel: \"数值(万亿美元)\",\r\n\t\t\tvisualization: \"bar-chart\",\r\n\t\t\tlegend: \"国内生产总值（单位：万亿美元）\",\r\n\t\t\timportance: 1.5\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Population\",\r\n\t\t\ttype: \"number\",\r\n\t\t\ttypeLabel: \"数值(人)\",\r\n\t\t\tvisualization: \"bar-chart\",\r\n\t\t\tlegend: \"人口数量（单位：亿人）\",\r\n\t\t\timportance: 1.3\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"GDP per capita\",\r\n\t\t\ttype: \"number\",\r\n\t\t\ttypeLabel: \"数值(美元)\",\r\n\t\t\tvisualization: \"bar-chart\",\r\n\t\t\tlegend: \"人均GDP（单位：美元）\",\r\n\t\t\timportance: 1.4\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"GDP growth\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"line-chart\",\r\n\t\t\tlegend: \"GDP年增长率（%）\",\r\n\t\t\timportance: 1.2\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Inflation (CPI)\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"pie-chart\",\r\n\t\t\tlegend: \"消费者价格指数变化\",\r\n\t\t\timportance: 1.1\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Labor force by occupation\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"pie-chart\",\r\n\t\t\tlegend: \"劳动力分布比例\",\r\n\t\t\timportance: 1.0\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"GDP rank\",\r\n\t\t\ttype: \"text\",\r\n\t\t\ttypeLabel: \"文本\",\r\n\t\t\tvisualization: \"text-only\",\r\n\t\t\tlegend: \"全球GDP排名\",\r\n\t\t\timportance: 0.8\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Government type\",\r\n\t\t\ttype: \"text\",\r\n\t\t\ttypeLabel: \"文本\",\r\n\t\t\tvisualization: \"text-only\",\r\n\t\t\tlegend: \"政府类型\",\r\n\t\t\timportance: 0.9\r\n\t\t}\r\n\t];\r\n\r\n\tconst calculateDifferenceScore = (\r\n\t\tleftData,\r\n\t\trightData,\r\n\t\tfieldType,\r\n\t\tfieldKey\r\n\t) => {\r\n\t\t// 处理空数据情况\r\n\t\tif (!leftData || !rightData || !leftData.length || !rightData.length) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// 获取字段配置\r\n\t\tconst fieldConfig = COMPARABLE_FIELDS.find(f => f.key === fieldKey) || {};\r\n\t\tconst importanceWeight = fieldConfig.importance || 1.0;\r\n\r\n\t\t// 1. 处理文本类型\r\n\t\tif (fieldType === \"text\") {\r\n\t\t\tconst leftText = String(leftData[0] || \"\").trim();\r\n\t\t\tconst rightText = String(rightData[0] || \"\").trim();\r\n\r\n\t\t\t// 完全相同的文本\r\n\t\t\tif (leftText === rightText) return 5 * importanceWeight;\r\n\r\n\t\t\t// 完全不同的文本\r\n\t\t\tconst similarity = calculateTextSimilarity(leftText, rightText);\r\n\t\t\treturn (100 - similarity * 100) * importanceWeight;\r\n\t\t}\r\n\r\n\t\t// 2. 处理数值类型\r\n\t\tlet leftValue, rightValue;\r\n\r\n\t\t// 处理数组数据\r\n\t\tif (Array.isArray(leftData) && Array.isArray(rightData)) {\r\n\t\t\t// 取数组第一个元素作为比较值\r\n\t\t\tleftValue = parseFloat(leftData[0]) || 0;\r\n\t\t\trightValue = parseFloat(rightData[0]) || 0;\r\n\r\n\t\t\t// 如果有多个值，计算趋势差异\r\n\t\t\tif (leftData.length > 1 && rightData.length > 1) {\r\n\t\t\t\tconst leftTrend = calculateTrend(leftData);\r\n\t\t\t\tconst rightTrend = calculateTrend(rightData);\r\n\r\n\t\t\t\t// 趋势相反的情况\r\n\t\t\t\tif (leftTrend * rightTrend < 0) {\r\n\t\t\t\t\treturn 100 * importanceWeight; // 最高优先级\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 趋势差异\r\n\t\t\t\tconst trendDiff = Math.abs(leftTrend - rightTrend) * 10;\r\n\t\t\t\treturn Math.min(trendDiff * importanceWeight, 100);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// 处理单值数据\r\n\t\telse {\r\n\t\t\tleftValue = parseFloat(leftData[0]) || 0;\r\n\t\t\trightValue = parseFloat(rightData[0]) || 0;\r\n\t\t}\r\n\r\n\t\t// 3. 计算数值差异\r\n\t\t// 处理除零情况\r\n\t\tconst maxValue = Math.max(\r\n\t\t\tMath.abs(leftValue),\r\n\t\t\tMath.abs(rightValue),\r\n\t\t\t0.0001\r\n\t\t);\r\n\t\tconst difference = Math.abs(leftValue - rightValue);\r\n\r\n\t\tlet baseScore = (difference / maxValue) * 100;\r\n\r\n\t\t// 对特别大的数值给予额外权重\r\n\t\tif (maxValue > 1000) {\r\n\t\t\tbaseScore = Math.min(baseScore * 1.2, 100);\r\n\t\t}\r\n\r\n\t\t// 趋势相反的情况（一个正一个负）\r\n\t\tif (leftValue * rightValue < 0) {\r\n\t\t\tbaseScore = 100; // 最高优先级\r\n\t\t}\r\n\r\n\t\treturn Math.min(baseScore * importanceWeight, 100);\r\n\t};\r\n\r\n\t// 更健壮的文本相似度计算\r\n\tconst calculateTextSimilarity = (text1, text2) => {\r\n\t\tif (!text1 || !text2) return 0;\r\n\t\tif (text1 === text2) return 1;\r\n\r\n\t\t// 简单相似度计算：基于共同词汇的比例\r\n\t\tconst words1 = text1.toLowerCase().match(/\\b\\w+\\b/g) || [];\r\n\t\tconst words2 = text2.toLowerCase().match(/\\b\\w+\\b/g) || [];\r\n\r\n\t\tif (words1.length === 0 || words2.length === 0) return 0;\r\n\r\n\t\tconst commonWords = words1.filter(word => words2.includes(word));\r\n\t\tconst maxLength = Math.max(words1.length, words2.length);\r\n\r\n\t\treturn commonWords.length / maxLength;\r\n\t};\r\n\r\n\t// 更健壮的趋势计算\r\n\tconst calculateTrend = values => {\r\n\t\tconst numericValues = values.map(v => {\r\n\t\t\tconst num = parseFloat(v);\r\n\t\t\treturn isNaN(num) ? 0 : num;\r\n\t\t});\r\n\r\n\t\tif (numericValues.length < 2) return 0;\r\n\r\n\t\tconst x = numericValues.map((_, i) => i);\r\n\t\tconst y = numericValues;\r\n\r\n\t\t// 简单线性回归计算斜率\r\n\t\tconst n = x.length;\r\n\t\tconst sumX = x.reduce((a, b) => a + b, 0);\r\n\t\tconst sumY = y.reduce((a, b) => a + b, 0);\r\n\t\tconst sumXY = x.reduce((a, _, i) => a + x[i] * y[i], 0);\r\n\t\tconst sumXX = x.reduce((a, b) => a + b * b, 0);\r\n\r\n\t\tconst denominator = n * sumXX - sumX * sumX;\r\n\t\tif (denominator === 0) return 0;\r\n\r\n\t\treturn (n * sumXY - sumX * sumY) / denominator;\r\n\t};\r\n\r\n\tconst sortByDifference = () => {\r\n\t\tif (isSortedByDifference.value) return;\r\n\r\n\t\tconst fieldsWithDifference = comparableFields.value.map(field => {\r\n\t\t\tconst leftData = getField(leftInfobox.value, field.key);\r\n\t\t\tconst rightData = getField(rightInfobox.value, field.key);\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...field,\r\n\t\t\t\tdifferenceScore: calculateDifferenceScore(\r\n\t\t\t\t\tleftData,\r\n\t\t\t\t\trightData,\r\n\t\t\t\t\tfield.type,\r\n\t\t\t\t\tfield.key\r\n\t\t\t\t),\r\n\t\t\t\tleftData,\r\n\t\t\t\trightData\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\t// 更精细的排序规则\r\n\t\tfieldsWithDifference.sort((a, b) => {\r\n\t\t\t// 1. 首先按差异分数排序\r\n\t\t\tif (Math.abs(b.differenceScore - a.differenceScore) > 5) {\r\n\t\t\t\treturn b.differenceScore - a.differenceScore;\r\n\t\t\t}\r\n\r\n\t\t\t// 2. 相似分数时，重要字段优先\r\n\t\t\tif (b.importance !== a.importance) {\r\n\t\t\t\treturn b.importance - a.importance;\r\n\t\t\t}\r\n\r\n\t\t\t// 3. 相同重要性时，按字段名称排序\r\n\t\t\treturn a.key.localeCompare(b.key);\r\n\t\t});\r\n\r\n\t\tcomparableFields.value = fieldsWithDifference;\r\n\t\tisSortedByDifference.value = true;\r\n\t};\r\n\r\n\tconst resetSort = () => {\r\n\t\tif (!isSortedByDifference.value) return;\r\n\r\n\t\tcomparableFields.value = [...originalFieldsOrder.value];\r\n\t\tisSortedByDifference.value = false;\r\n\t};\r\n\r\n\tconst showFullChart = (infobox, field) => {\r\n\t\tcurrentChart.value = {\r\n\t\t\ttitle: infobox.title,\r\n\t\t\tfield: field,\r\n\t\t\tdata: getField(infobox, field.key)\r\n\t\t};\r\n\t\tshowFullChartModal.value = true;\r\n\t};\r\n\r\n\tconst closeFullChart = () => {\r\n\t\tshowFullChartModal.value = false;\r\n\t};\r\n\r\n\tconst hoverInfobox = (infobox, fieldKey, side) => {\r\n\t\tbus.emit(`hover-${side}-infobox`, {\r\n\t\t\tfieldKey,\r\n\t\t\tinfoboxTitle: infobox.title\r\n\t\t});\r\n\r\n\t\tconst divId = side === \"left\" ? \"div1\" : \"div3\";\r\n\t\tbus.emit(`highlight-${divId}-paragraphs`, fieldKey);\r\n\t};\r\n\r\n\tconst unhoverInfobox = side => {\r\n\t\tbus.emit(`unhover-${side}-infobox`);\r\n\t\tconst divId = side === \"left\" ? \"div1\" : \"div3\";\r\n\t\tbus.emit(`clear-${divId}-highlights`);\r\n\t};\r\n\r\n\tconst hoverBothInfoboxes = fieldKey => {\r\n\t\thoverInfobox(leftInfobox.value, fieldKey, \"left\");\r\n\t\thoverInfobox(rightInfobox.value, fieldKey, \"right\");\r\n\t};\r\n\r\n\tconst unhoverBothInfoboxes = () => {\r\n\t\tunhoverInfobox(\"left\");\r\n\t\tunhoverInfobox(\"right\");\r\n\t};\r\n\r\n\tconst getField = (infobox, fieldKey) => {\r\n\t\tif (!infobox?.data) return [];\r\n\r\n\t\tfor (const section of Object.values(infobox.data)) {\r\n\t\t\tif (section[fieldKey] !== undefined) {\r\n\t\t\t\treturn Array.isArray(section[fieldKey])\r\n\t\t\t\t\t? section[fieldKey]\r\n\t\t\t\t\t: [section[fieldKey]];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn [];\r\n\t};\r\n\r\n\tconst handleMiddleColumnClick = field => {\r\n\t\temit(\"compareAttribute\", {\r\n\t\t\tfieldKey: field.key,\r\n\t\t\tleftData: getField(leftInfobox.value, field.key),\r\n\t\t\trightData: getField(rightInfobox.value, field.key),\r\n\t\t\tleftTitle: leftInfobox.value.title,\r\n\t\t\trightTitle: rightInfobox.value.title,\r\n\t\t\tfieldType: field.type,\r\n\t\t\tfieldLabel: field.typeLabel\r\n\t\t});\r\n\r\n\t\tbus.emit(\"highlight-div1-paragraphs\", field.key);\r\n\t\tbus.emit(\"highlight-div3-paragraphs\", field.key);\r\n\t};\r\n\r\n\tconst showCombinedChart = field => {\r\n\t\tconst leftData = getField(leftInfobox.value, field.key);\r\n\t\tconst rightData = getField(rightInfobox.value, field.key);\r\n\r\n\t\tcurrentChart.value = {\r\n\t\t\ttitle: `合并图表 - ${field.key}`,\r\n\t\t\tfield: field,\r\n\t\t\tdata: [...leftData, ...rightData]\r\n\t\t};\r\n\t\tshowFullChartModal.value = true;\r\n\t};\r\n\r\n\tconst comparableFields = computed(() => {\r\n\t\tconst fields = COMPARABLE_FIELDS.filter(field => {\r\n\t\t\tconst leftVal = getField(leftInfobox.value, field.key);\r\n\t\t\tconst rightVal = getField(rightInfobox.value, field.key);\r\n\t\t\treturn leftVal.length > 0 || rightVal.length > 0;\r\n\t\t});\r\n\r\n\t\tif (!originalFieldsOrder.value.length) {\r\n\t\t\toriginalFieldsOrder.value = [...fields];\r\n\t\t}\r\n\r\n\t\treturn fields;\r\n\t});\r\n\r\n\tconst processInfoboxData = data => {\r\n\t\tif (!data) return { title: \"\", type: \"\", data: {} };\r\n\t\treturn {\r\n\t\t\ttitle: data.title || \"无标题\",\r\n\t\t\ttype: data.type || \"未知类型\",\r\n\t\t\tdata: data.sections || {}\r\n\t\t};\r\n\t};\r\n\r\n\tonMounted(() => {\r\n\t\tbus.on(\"div1_InfoboxData\", data => {\r\n\t\t\tleftInfobox.value = processInfoboxData(data);\r\n\t\t});\r\n\r\n\t\tbus.on(\"div3_InfoboxData\", data => {\r\n\t\t\trightInfobox.value = processInfoboxData(data);\r\n\t\t});\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.compare-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tpadding: 8px;\r\n\t\tbox-sizing: border-box;\r\n\t}\r\n\r\n\t.sort-controls {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: flex-end;\r\n\t\tgap: 10px;\r\n\t\tmargin-bottom: 10px;\r\n\t\tpadding: 0 8px;\r\n\t}\r\n\r\n\t.sort-btn {\r\n\t\tpadding: 6px 12px;\r\n\t\tbackground-color: #f0f0f0;\r\n\t\tborder: 1px solid #ddd;\r\n\t\tborder-radius: 4px;\r\n\t\tcursor: pointer;\r\n\t\tfont-size: 13px;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tgap: 5px;\r\n\t\ttransition: all 0.2s;\r\n\t}\r\n\r\n\t.sort-btn:hover {\r\n\t\tbackground-color: #e0e0e0;\r\n\t\tborder-color: #ccc;\r\n\t}\r\n\r\n\t.sort-btn i {\r\n\t\tfont-size: 14px;\r\n\t}\r\n\r\n\t.icon-sort::before {\r\n\t\tcontent: \"⇅\";\r\n\t}\r\n\r\n\t.icon-reset::before {\r\n\t\tcontent: \"↺\";\r\n\t}\r\n\r\n\t.comparison-grid {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns:\r\n\t\t\tminmax(120px, 1fr)\r\n\t\t\tminmax(80px, 100px)\r\n\t\t\tminmax(120px, 1fr);\r\n\t\twidth: 100%;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t\tborder-radius: 4px;\r\n\t\toverflow: hidden;\r\n\t\tmax-height: 500px;\r\n\t\toverflow-y: auto;\r\n\t\ttransition: all 0.3s ease;\r\n\t}\r\n\r\n\t.comparison-grid.is-sorted .cell {\r\n\t\topacity: 0.9;\r\n\t\ttransition: opacity 0.3s ease, transform 0.3s ease;\r\n\t}\r\n\r\n\t.comparison-grid.is-sorted .cell:hover {\r\n\t\topacity: 1;\r\n\t\ttransform: translateY(-2px);\r\n\t}\r\n\r\n\t.header {\r\n\t\tpadding: 8px 6px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n\t\tposition: sticky;\r\n\t\ttop: 0;\r\n\t\tz-index: 1;\r\n\t\tborder-right: 1px solid #475569;\r\n\t\tmin-height: 36px;\r\n\t\tfont-size: 13px;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t}\r\n\r\n\t.header.middle-column {\r\n\t\tpadding: 8px 4px;\r\n\t\tbackground: #1e293b;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t}\r\n\r\n\t.cell {\r\n\t\tpadding: 8px;\r\n\t\theight: 110px;\r\n\t\tborder-bottom: 1px solid #e0e0e0;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tjustify-content: center;\r\n\t\tposition: relative;\r\n\t\tcursor: pointer;\r\n\t\ttransition: all 0.3s ease;\r\n\t\tmin-width: 0;\r\n\t\toverflow: hidden;\r\n\t}\r\n\r\n\t.left-column,\r\n\t.right-column {\r\n\t\tmax-width: 100%;\r\n\t}\r\n\r\n\t.cell:hover {\r\n\t\tbackground-color: #f5f5f5;\r\n\t}\r\n\r\n\t.left-column:hover {\r\n\t\tbackground-color: #fff8e1;\r\n\t}\r\n\r\n\t.right-column:hover {\r\n\t\tbackground-color: #fff8e1;\r\n\t}\r\n\r\n\t.middle-column {\r\n\t\tposition: relative;\r\n\t\tcursor: default;\r\n\t\tbackground-color: #f8f9fa;\r\n\t\ttransition: background-color 0.2s;\r\n\t}\r\n\r\n\t.middle-column:hover {\r\n\t\tbackground-color: #e9ecef;\r\n\t}\r\n\r\n\t.field-name {\r\n\t\tfont-weight: bold;\r\n\t\tmargin-bottom: 4px;\r\n\t\tfont-size: 12px;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t\ttext-align: center;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t.field-type {\r\n\t\tcolor: #666;\r\n\t\tfont-size: 11px;\r\n\t\tfont-style: italic;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t\ttext-align: center;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t.difference-score {\r\n\t\tfont-size: 10px;\r\n\t\tcolor: #d32f2f;\r\n\t\tfont-weight: bold;\r\n\t\tmargin-top: 4px;\r\n\t\ttext-align: center;\r\n\t\tbackground-color: #ffebee;\r\n\t\tpadding: 2px;\r\n\t\tborder-radius: 3px;\r\n\t}\r\n\r\n\t.icon-actions {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\tgap: 15px;\r\n\t\tmargin-top: 8px;\r\n\t}\r\n\r\n\t.icon-btn {\r\n\t\tfont-size: 16px;\r\n\t\tcursor: pointer;\r\n\t\topacity: 0.7;\r\n\t\ttransition: all 0.2s;\r\n\t}\r\n\r\n\t.icon-btn:hover {\r\n\t\topacity: 1;\r\n\t\ttransform: scale(1.2);\r\n\t}\r\n\r\n\t.icon-btn.compare:hover {\r\n\t\tcolor: #4caf50;\r\n\t}\r\n\r\n\t.icon-btn.merge:hover {\r\n\t\tcolor: #2196f3;\r\n\t}\r\n\r\n\t.full-chart-modal {\r\n\t\tposition: fixed;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\tbottom: 0;\r\n\t\tbackground-color: rgba(0, 0, 0, 0.8);\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t\tz-index: 1000;\r\n\t}\r\n\r\n\t.modal-content {\r\n\t\tbackground: white;\r\n\t\tpadding: 16px;\r\n\t\tborder-radius: 8px;\r\n\t\twidth: 85%;\r\n\t\tmax-width: 800px;\r\n\t\tmax-height: 85vh;\r\n\t\tposition: relative;\r\n\t\toverflow-y: auto;\r\n\t}\r\n\r\n\t.chart-container {\r\n\t\theight: 60vh;\r\n\t\twidth: 100%;\r\n\t\tmargin: 16px 0;\r\n\t}\r\n\r\n\t.chart-legend {\r\n\t\tfont-size: 13px;\r\n\t\tcolor: #666;\r\n\t\ttext-align: center;\r\n\t\tmargin-top: 12px;\r\n\t\tpadding-top: 12px;\r\n\t\tborder-top: 1px solid #eee;\r\n\t}\r\n\r\n\t.close-btn {\r\n\t\tposition: absolute;\r\n\t\ttop: 8px;\r\n\t\tright: 8px;\r\n\t\tfont-size: 20px;\r\n\t\tbackground: none;\r\n\t\tborder: none;\r\n\t\tcursor: pointer;\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.close-btn:hover {\r\n\t\tcolor: #333;\r\n\t}\r\n</style>\r\n"],"mappings":"AAkGC,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,KAAK;AAC9C,OAAOC,WAAW,MAAM,mBAAmB;AAC3C,OAAOC,SAAS,MAAM,iBAAiB;AACvC,OAAOC,GAAG,MAAM,kBAAkB;;;;;;;;;;;;;;IAElC,MAAMC,KAAK,GAAGC,OAGZ;IAEF,MAAMC,IAAI,GAAGC,MAAiC;IAE9C,MAAMC,WAAW,GAAGV,GAAG,CAAC;MAAEW,KAAK,EAAE,EAAE;MAAEC,IAAI,EAAE,EAAE;MAAEC,IAAI,EAAE,CAAC;IAAE,CAAC,CAAC;IAC1D,MAAMC,YAAY,GAAGd,GAAG,CAAC;MAAEW,KAAK,EAAE,EAAE;MAAEC,IAAI,EAAE,EAAE;MAAEC,IAAI,EAAE,CAAC;IAAE,CAAC,CAAC;IAC3D,MAAME,kBAAkB,GAAGf,GAAG,CAAC,KAAK,CAAC;IACrC,MAAMgB,YAAY,GAAGhB,GAAG,CAAC;MACxBW,KAAK,EAAE,EAAE;MACTM,KAAK,EAAE,CAAC,CAAC;MACTJ,IAAI,EAAE;IACP,CAAC,CAAC;IACF,MAAMK,mBAAmB,GAAGlB,GAAG,CAAC,EAAE,CAAC;IACnC,MAAMmB,oBAAoB,GAAGnB,GAAG,CAAC,KAAK,CAAC;IAEvC,MAAMoB,iBAAiB,GAAG,CACzB;MACCC,GAAG,EAAE,KAAK;MACVT,IAAI,EAAE,QAAQ;MACdU,SAAS,EAAE,UAAU;MACrBC,aAAa,EAAE,WAAW;MAC1BC,MAAM,EAAE,iBAAiB;MACzBC,UAAU,EAAE;IACb,CAAC,EACD;MACCJ,GAAG,EAAE,YAAY;MACjBT,IAAI,EAAE,QAAQ;MACdU,SAAS,EAAE,OAAO;MAClBC,aAAa,EAAE,WAAW;MAC1BC,MAAM,EAAE,aAAa;MACrBC,UAAU,EAAE;IACb,CAAC,EACD;MACCJ,GAAG,EAAE,gBAAgB;MACrBT,IAAI,EAAE,QAAQ;MACdU,SAAS,EAAE,QAAQ;MACnBC,aAAa,EAAE,WAAW;MAC1BC,MAAM,EAAE,cAAc;MACtBC,UAAU,EAAE;IACb,CAAC,EACD;MACCJ,GAAG,EAAE,YAAY;MACjBT,IAAI,EAAE,YAAY;MAClBU,SAAS,EAAE,QAAQ;MACnBC,aAAa,EAAE,YAAY;MAC3BC,MAAM,EAAE,YAAY;MACpBC,UAAU,EAAE;IACb,CAAC,EACD;MACCJ,GAAG,EAAE,iBAAiB;MACtBT,IAAI,EAAE,YAAY;MAClBU,SAAS,EAAE,QAAQ;MACnBC,aAAa,EAAE,WAAW;MAC1BC,MAAM,EAAE,WAAW;MACnBC,UAAU,EAAE;IACb,CAAC,EACD;MACCJ,GAAG,EAAE,2BAA2B;MAChCT,IAAI,EAAE,YAAY;MAClBU,SAAS,EAAE,QAAQ;MACnBC,aAAa,EAAE,WAAW;MAC1BC,MAAM,EAAE,SAAS;MACjBC,UAAU,EAAE;IACb,CAAC,EACD;MACCJ,GAAG,EAAE,UAAU;MACfT,IAAI,EAAE,MAAM;MACZU,SAAS,EAAE,IAAI;MACfC,aAAa,EAAE,WAAW;MAC1BC,MAAM,EAAE,SAAS;MACjBC,UAAU,EAAE;IACb,CAAC,EACD;MACCJ,GAAG,EAAE,iBAAiB;MACtBT,IAAI,EAAE,MAAM;MACZU,SAAS,EAAE,IAAI;MACfC,aAAa,EAAE,WAAW;MAC1BC,MAAM,EAAE,MAAM;MACdC,UAAU,EAAE;IACb,CAAC,CACD;IAED,MAAMC,wBAAwB,GAAGA,CAChCC,QAAQ,EACRC,SAAS,EACTC,SAAS,EACTC,QAAQ,KACJ;MACJ;MACA,IAAI,CAACH,QAAQ,IAAI,CAACC,SAAS,IAAI,CAACD,QAAQ,CAACI,MAAM,IAAI,CAACH,SAAS,CAACG,MAAM,EAAE;QACrE,OAAO,CAAC;MACT;;MAEA;MACA,MAAMC,WAAW,GAAGZ,iBAAiB,CAACa,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACb,GAAG,KAAKS,QAAQ,CAAC,IAAI,CAAC,CAAC;MACzE,MAAMK,gBAAgB,GAAGH,WAAW,CAACP,UAAU,IAAI,GAAG;;MAEtD;MACA,IAAII,SAAS,KAAK,MAAM,EAAE;QACzB,MAAMO,QAAQ,GAAGC,MAAM,CAACV,QAAQ,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAACW,IAAI,CAAC,CAAC;QACjD,MAAMC,SAAS,GAAGF,MAAM,CAACT,SAAS,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAACU,IAAI,CAAC,CAAC;;QAEnD;QACA,IAAIF,QAAQ,KAAKG,SAAS,EAAE,OAAO,CAAC,GAAGJ,gBAAgB;;QAEvD;QACA,MAAMK,UAAU,GAAGC,uBAAuB,CAACL,QAAQ,EAAEG,SAAS,CAAC;QAC/D,OAAO,CAAC,GAAG,GAAGC,UAAU,GAAG,GAAG,IAAIL,gBAAgB;MACnD;;MAEA;MACA,IAAIO,SAAS,EAAEC,UAAU;;MAEzB;MACA,IAAIC,KAAK,CAACC,OAAO,CAAClB,QAAQ,CAAC,IAAIiB,KAAK,CAACC,OAAO,CAACjB,SAAS,CAAC,EAAE;QACxD;QACAc,SAAS,GAAGI,UAAU,CAACnB,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACxCgB,UAAU,GAAGG,UAAU,CAAClB,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;;QAE1C;QACA,IAAID,QAAQ,CAACI,MAAM,GAAG,CAAC,IAAIH,SAAS,CAACG,MAAM,GAAG,CAAC,EAAE;UAChD,MAAMgB,SAAS,GAAGC,cAAc,CAACrB,QAAQ,CAAC;UAC1C,MAAMsB,UAAU,GAAGD,cAAc,CAACpB,SAAS,CAAC;;UAE5C;UACA,IAAImB,SAAS,GAAGE,UAAU,GAAG,CAAC,EAAE;YAC/B,OAAO,GAAG,GAAGd,gBAAgB,CAAC,CAAC;UAChC;;UAEA;UACA,MAAMe,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACL,SAAS,GAAGE,UAAU,CAAC,GAAG,EAAE;UACvD,OAAOE,IAAI,CAACE,GAAG,CAACH,SAAS,GAAGf,gBAAgB,EAAE,GAAG,CAAC;QACnD;MACD;MACA;MAAA,KACK;QACJO,SAAS,GAAGI,UAAU,CAACnB,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACxCgB,UAAU,GAAGG,UAAU,CAAClB,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;MAC3C;;MAEA;MACA;MACA,MAAM0B,QAAQ,GAAGH,IAAI,CAACI,GAAG,CACxBJ,IAAI,CAACC,GAAG,CAACV,SAAS,CAAC,EACnBS,IAAI,CAACC,GAAG,CAACT,UAAU,CAAC,EACpB,MACD,CAAC;MACD,MAAMa,UAAU,GAAGL,IAAI,CAACC,GAAG,CAACV,SAAS,GAAGC,UAAU,CAAC;MAEnD,IAAIc,SAAS,GAAID,UAAU,GAAGF,QAAQ,GAAI,GAAG;;MAE7C;MACA,IAAIA,QAAQ,GAAG,IAAI,EAAE;QACpBG,SAAS,GAAGN,IAAI,CAACE,GAAG,CAACI,SAAS,GAAG,GAAG,EAAE,GAAG,CAAC;MAC3C;;MAEA;MACA,IAAIf,SAAS,GAAGC,UAAU,GAAG,CAAC,EAAE;QAC/Bc,SAAS,GAAG,GAAG,CAAC,CAAC;MAClB;MAEA,OAAON,IAAI,CAACE,GAAG,CAACI,SAAS,GAAGtB,gBAAgB,EAAE,GAAG,CAAC;IACnD,CAAC;;IAED;IACA,MAAMM,uBAAuB,GAAGA,CAACiB,KAAK,EAAEC,KAAK,KAAK;MACjD,IAAI,CAACD,KAAK,IAAI,CAACC,KAAK,EAAE,OAAO,CAAC;MAC9B,IAAID,KAAK,KAAKC,KAAK,EAAE,OAAO,CAAC;;MAE7B;MACA,MAAMC,MAAM,GAAGF,KAAK,CAACG,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,UAAU,CAAC,IAAI,EAAE;MAC1D,MAAMC,MAAM,GAAGJ,KAAK,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,UAAU,CAAC,IAAI,EAAE;MAE1D,IAAIF,MAAM,CAAC7B,MAAM,KAAK,CAAC,IAAIgC,MAAM,CAAChC,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC;MAExD,MAAMiC,WAAW,GAAGJ,MAAM,CAACK,MAAM,CAACC,IAAI,IAAIH,MAAM,CAACI,QAAQ,CAACD,IAAI,CAAC,CAAC;MAChE,MAAME,SAAS,GAAGjB,IAAI,CAACI,GAAG,CAACK,MAAM,CAAC7B,MAAM,EAAEgC,MAAM,CAAChC,MAAM,CAAC;MAExD,OAAOiC,WAAW,CAACjC,MAAM,GAAGqC,SAAS;IACtC,CAAC;;IAED;IACA,MAAMpB,cAAc,GAAGqB,MAAM,IAAI;MAChC,MAAMC,aAAa,GAAGD,MAAM,CAACE,GAAG,CAACC,CAAC,IAAI;QACrC,MAAMC,GAAG,GAAG3B,UAAU,CAAC0B,CAAC,CAAC;QACzB,OAAOE,KAAK,CAACD,GAAG,CAAC,GAAG,CAAC,GAAGA,GAAG;MAC5B,CAAC,CAAC;MAEF,IAAIH,aAAa,CAACvC,MAAM,GAAG,CAAC,EAAE,OAAO,CAAC;MAEtC,MAAM4C,CAAC,GAAGL,aAAa,CAACC,GAAG,CAAC,CAACK,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC;MACxC,MAAMC,CAAC,GAAGR,aAAa;;MAEvB;MACA,MAAMS,CAAC,GAAGJ,CAAC,CAAC5C,MAAM;MAClB,MAAMiD,IAAI,GAAGL,CAAC,CAACM,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC;MACzC,MAAMC,IAAI,GAAGN,CAAC,CAACG,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC;MACzC,MAAME,KAAK,GAAGV,CAAC,CAACM,MAAM,CAAC,CAACC,CAAC,EAAEN,CAAC,EAAEC,CAAC,KAAKK,CAAC,GAAGP,CAAC,CAACE,CAAC,CAAC,GAAGC,CAAC,CAACD,CAAC,CAAC,EAAE,CAAC,CAAC;MACvD,MAAMS,KAAK,GAAGX,CAAC,CAACM,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,GAAGA,CAAC,EAAE,CAAC,CAAC;MAE9C,MAAMI,WAAW,GAAGR,CAAC,GAAGO,KAAK,GAAGN,IAAI,GAAGA,IAAI;MAC3C,IAAIO,WAAW,KAAK,CAAC,EAAE,OAAO,CAAC;MAE/B,OAAO,CAACR,CAAC,GAAGM,KAAK,GAAGL,IAAI,GAAGI,IAAI,IAAIG,WAAW;IAC/C,CAAC;IAED,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;MAC9B,IAAIrE,oBAAoB,CAACsE,KAAK,EAAE;MAEhC,MAAMC,oBAAoB,GAAGC,gBAAgB,CAACF,KAAK,CAAClB,GAAG,CAACtD,KAAK,IAAI;QAChE,MAAMU,QAAQ,GAAGiE,QAAQ,CAAClF,WAAW,CAAC+E,KAAK,EAAExE,KAAK,CAACI,GAAG,CAAC;QACvD,MAAMO,SAAS,GAAGgE,QAAQ,CAAC9E,YAAY,CAAC2E,KAAK,EAAExE,KAAK,CAACI,GAAG,CAAC;QAEzD,OAAO;UACN,GAAGJ,KAAK;UACR4E,eAAe,EAAEnE,wBAAwB,CACxCC,QAAQ,EACRC,SAAS,EACTX,KAAK,CAACL,IAAI,EACVK,KAAK,CAACI,GACP,CAAC;UACDM,QAAQ;UACRC;QACD,CAAC;MACF,CAAC,CAAC;;MAEF;MACA8D,oBAAoB,CAACI,IAAI,CAAC,CAACZ,CAAC,EAAEC,CAAC,KAAK;QACnC;QACA,IAAIhC,IAAI,CAACC,GAAG,CAAC+B,CAAC,CAACU,eAAe,GAAGX,CAAC,CAACW,eAAe,CAAC,GAAG,CAAC,EAAE;UACxD,OAAOV,CAAC,CAACU,eAAe,GAAGX,CAAC,CAACW,eAAe;QAC7C;;QAEA;QACA,IAAIV,CAAC,CAAC1D,UAAU,KAAKyD,CAAC,CAACzD,UAAU,EAAE;UAClC,OAAO0D,CAAC,CAAC1D,UAAU,GAAGyD,CAAC,CAACzD,UAAU;QACnC;;QAEA;QACA,OAAOyD,CAAC,CAAC7D,GAAG,CAAC0E,aAAa,CAACZ,CAAC,CAAC9D,GAAG,CAAC;MAClC,CAAC,CAAC;MAEFsE,gBAAgB,CAACF,KAAK,GAAGC,oBAAoB;MAC7CvE,oBAAoB,CAACsE,KAAK,GAAG,IAAI;IAClC,CAAC;IAED,MAAMO,SAAS,GAAGA,CAAA,KAAM;MACvB,IAAI,CAAC7E,oBAAoB,CAACsE,KAAK,EAAE;MAEjCE,gBAAgB,CAACF,KAAK,GAAG,CAAC,GAAGvE,mBAAmB,CAACuE,KAAK,CAAC;MACvDtE,oBAAoB,CAACsE,KAAK,GAAG,KAAK;IACnC,CAAC;IAED,MAAMQ,aAAa,GAAGA,CAACC,OAAO,EAAEjF,KAAK,KAAK;MACzCD,YAAY,CAACyE,KAAK,GAAG;QACpB9E,KAAK,EAAEuF,OAAO,CAACvF,KAAK;QACpBM,KAAK,EAAEA,KAAK;QACZJ,IAAI,EAAE+E,QAAQ,CAACM,OAAO,EAAEjF,KAAK,CAACI,GAAG;MAClC,CAAC;MACDN,kBAAkB,CAAC0E,KAAK,GAAG,IAAI;IAChC,CAAC;IAED,MAAMU,cAAc,GAAGA,CAAA,KAAM;MAC5BpF,kBAAkB,CAAC0E,KAAK,GAAG,KAAK;IACjC,CAAC;IAED,MAAMW,YAAY,GAAGA,CAACF,OAAO,EAAEpE,QAAQ,EAAEuE,IAAI,KAAK;MACjDhG,GAAG,CAACG,IAAI,CAAC,SAAS6F,IAAI,UAAU,EAAE;QACjCvE,QAAQ;QACRwE,YAAY,EAAEJ,OAAO,CAACvF;MACvB,CAAC,CAAC;MAEF,MAAM4F,KAAK,GAAGF,IAAI,KAAK,MAAM,GAAG,MAAM,GAAG,MAAM;MAC/ChG,GAAG,CAACG,IAAI,CAAC,aAAa+F,KAAK,aAAa,EAAEzE,QAAQ,CAAC;IACpD,CAAC;IAED,MAAM0E,cAAc,GAAGH,IAAI,IAAI;MAC9BhG,GAAG,CAACG,IAAI,CAAC,WAAW6F,IAAI,UAAU,CAAC;MACnC,MAAME,KAAK,GAAGF,IAAI,KAAK,MAAM,GAAG,MAAM,GAAG,MAAM;MAC/ChG,GAAG,CAACG,IAAI,CAAC,SAAS+F,KAAK,aAAa,CAAC;IACtC,CAAC;IAED,MAAME,kBAAkB,GAAG3E,QAAQ,IAAI;MACtCsE,YAAY,CAAC1F,WAAW,CAAC+E,KAAK,EAAE3D,QAAQ,EAAE,MAAM,CAAC;MACjDsE,YAAY,CAACtF,YAAY,CAAC2E,KAAK,EAAE3D,QAAQ,EAAE,OAAO,CAAC;IACpD,CAAC;IAED,MAAM4E,oBAAoB,GAAGA,CAAA,KAAM;MAClCF,cAAc,CAAC,MAAM,CAAC;MACtBA,cAAc,CAAC,OAAO,CAAC;IACxB,CAAC;IAED,MAAMZ,QAAQ,GAAGA,CAACM,OAAO,EAAEpE,QAAQ,KAAK;MACvC,IAAI,CAACoE,OAAO,EAAErF,IAAI,EAAE,OAAO,EAAE;MAE7B,KAAK,MAAM8F,OAAO,IAAIC,MAAM,CAACvC,MAAM,CAAC6B,OAAO,CAACrF,IAAI,CAAC,EAAE;QAClD,IAAI8F,OAAO,CAAC7E,QAAQ,CAAC,KAAK+E,SAAS,EAAE;UACpC,OAAOjE,KAAK,CAACC,OAAO,CAAC8D,OAAO,CAAC7E,QAAQ,CAAC,CAAC,GACpC6E,OAAO,CAAC7E,QAAQ,CAAC,GACjB,CAAC6E,OAAO,CAAC7E,QAAQ,CAAC,CAAC;QACvB;MACD;MAEA,OAAO,EAAE;IACV,CAAC;IAED,MAAMgF,uBAAuB,GAAG7F,KAAK,IAAI;MACxCT,IAAI,CAAC,kBAAkB,EAAE;QACxBsB,QAAQ,EAAEb,KAAK,CAACI,GAAG;QACnBM,QAAQ,EAAEiE,QAAQ,CAAClF,WAAW,CAAC+E,KAAK,EAAExE,KAAK,CAACI,GAAG,CAAC;QAChDO,SAAS,EAAEgE,QAAQ,CAAC9E,YAAY,CAAC2E,KAAK,EAAExE,KAAK,CAACI,GAAG,CAAC;QAClD0F,SAAS,EAAErG,WAAW,CAAC+E,KAAK,CAAC9E,KAAK;QAClCqG,UAAU,EAAElG,YAAY,CAAC2E,KAAK,CAAC9E,KAAK;QACpCkB,SAAS,EAAEZ,KAAK,CAACL,IAAI;QACrBqG,UAAU,EAAEhG,KAAK,CAACK;MACnB,CAAC,CAAC;MAEFjB,GAAG,CAACG,IAAI,CAAC,2BAA2B,EAAES,KAAK,CAACI,GAAG,CAAC;MAChDhB,GAAG,CAACG,IAAI,CAAC,2BAA2B,EAAES,KAAK,CAACI,GAAG,CAAC;IACjD,CAAC;IAED,MAAM6F,iBAAiB,GAAGjG,KAAK,IAAI;MAClC,MAAMU,QAAQ,GAAGiE,QAAQ,CAAClF,WAAW,CAAC+E,KAAK,EAAExE,KAAK,CAACI,GAAG,CAAC;MACvD,MAAMO,SAAS,GAAGgE,QAAQ,CAAC9E,YAAY,CAAC2E,KAAK,EAAExE,KAAK,CAACI,GAAG,CAAC;MAEzDL,YAAY,CAACyE,KAAK,GAAG;QACpB9E,KAAK,EAAE,UAAUM,KAAK,CAACI,GAAG,EAAE;QAC5BJ,KAAK,EAAEA,KAAK;QACZJ,IAAI,EAAE,CAAC,GAAGc,QAAQ,EAAE,GAAGC,SAAS;MACjC,CAAC;MACDb,kBAAkB,CAAC0E,KAAK,GAAG,IAAI;IAChC,CAAC;IAED,MAAME,gBAAgB,GAAG1F,QAAQ,CAAC,MAAM;MACvC,MAAMkH,MAAM,GAAG/F,iBAAiB,CAAC6C,MAAM,CAAChD,KAAK,IAAI;QAChD,MAAMmG,OAAO,GAAGxB,QAAQ,CAAClF,WAAW,CAAC+E,KAAK,EAAExE,KAAK,CAACI,GAAG,CAAC;QACtD,MAAMgG,QAAQ,GAAGzB,QAAQ,CAAC9E,YAAY,CAAC2E,KAAK,EAAExE,KAAK,CAACI,GAAG,CAAC;QACxD,OAAO+F,OAAO,CAACrF,MAAM,GAAG,CAAC,IAAIsF,QAAQ,CAACtF,MAAM,GAAG,CAAC;MACjD,CAAC,CAAC;MAEF,IAAI,CAACb,mBAAmB,CAACuE,KAAK,CAAC1D,MAAM,EAAE;QACtCb,mBAAmB,CAACuE,KAAK,GAAG,CAAC,GAAG0B,MAAM,CAAC;MACxC;MAEA,OAAOA,MAAM;IACd,CAAC,CAAC;IAEF,MAAMG,kBAAkB,GAAGzG,IAAI,IAAI;MAClC,IAAI,CAACA,IAAI,EAAE,OAAO;QAAEF,KAAK,EAAE,EAAE;QAAEC,IAAI,EAAE,EAAE;QAAEC,IAAI,EAAE,CAAC;MAAE,CAAC;MACnD,OAAO;QACNF,KAAK,EAAEE,IAAI,CAACF,KAAK,IAAI,KAAK;QAC1BC,IAAI,EAAEC,IAAI,CAACD,IAAI,IAAI,MAAM;QACzBC,IAAI,EAAEA,IAAI,CAAC0G,QAAQ,IAAI,CAAC;MACzB,CAAC;IACF,CAAC;IAEDrH,SAAS,CAAC,MAAM;MACfG,GAAG,CAACmH,EAAE,CAAC,kBAAkB,EAAE3G,IAAI,IAAI;QAClCH,WAAW,CAAC+E,KAAK,GAAG6B,kBAAkB,CAACzG,IAAI,CAAC;MAC7C,CAAC,CAAC;MAEFR,GAAG,CAACmH,EAAE,CAAC,kBAAkB,EAAE3G,IAAI,IAAI;QAClCC,YAAY,CAAC2E,KAAK,GAAG6B,kBAAkB,CAACzG,IAAI,CAAC;MAC9C,CAAC,CAAC;IACH,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}