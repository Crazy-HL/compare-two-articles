{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"文章内容可视化工具\", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  class: \"upload-section\"\n};\nconst _hoisted_4 = {\n  class: \"visualization-section\"\n};\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"可视化结果\", -1 /* HOISTED */);\nconst _hoisted_6 = {\n  ref: \"chart\",\n  class: \"chart-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", _hoisted_3, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.text = $event),\n    placeholder: \"请输入文章内容\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.text]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = function () {\n      return $options.processText && $options.processText(...arguments);\n    })\n  }, \"提交并可视化\")]), _createElementVNode(\"div\", _hoisted_4, [_hoisted_5, _createElementVNode(\"div\", _hoisted_6, null, 512 /* NEED_PATCH */)])]);\n}","map":{"version":3,"names":["id","_createElementVNode","class","ref","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_cache","$event","$data","text","placeholder","onClick","$options","processText","arguments","_hoisted_4","_hoisted_5","_hoisted_6"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\Vis2.vue"],"sourcesContent":["<template>\r\n\t<div id=\"app\">\r\n\t\t<h1>文章内容可视化工具</h1>\r\n\t\t<div class=\"upload-section\">\r\n\t\t\t<textarea v-model=\"text\" placeholder=\"请输入文章内容\"></textarea>\r\n\t\t\t<button @click=\"processText\">提交并可视化</button>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"visualization-section\">\r\n\t\t\t<h2>可视化结果</h2>\r\n\t\t\t<div ref=\"chart\" class=\"chart-container\"></div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\n\timport * as d3 from \"d3\";\r\n\timport { toRaw } from \"vue\";\r\n\r\n\texport default {\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t\ttext: \"\", // 用户输入的文章内容\r\n\t\t\t\tjsonData: null // 后端返回的 JSON 数据\r\n\t\t\t};\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\t// 提交文章内容并获取处理结果\r\n\t\t\tasync processText() {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst response = await fetch(\"http://localhost:8888/process_text\", {\r\n\t\t\t\t\t\tmethod: \"POST\",\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tbody: JSON.stringify({ text: this.text })\r\n\t\t\t\t\t});\r\n\t\t\t\t\tconst result = await response.json();\r\n\r\n\t\t\t\t\t// 检查是否有错误信息\r\n\t\t\t\t\tif (result.error) {\r\n\t\t\t\t\t\tconsole.error(\"后端返回的错误:\", result.error);\r\n\t\t\t\t\t\talert(`处理文章内容时出错: ${result.message}`);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 赋值时确保 jsonData 是对象\r\n\t\t\t\t\tthis.jsonData = result.json_data;\r\n\t\t\t\t\tconsole.log(\"后端返回的数据:\", result.json_data);\r\n\t\t\t\t\tconsole.log(\"赋值后的 jsonData:\", this.jsonData);\r\n\t\t\t\t\tthis.renderChart();\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tconsole.error(\"处理文章内容时出错:\", error);\r\n\t\t\t\t\talert(\"处理文章内容时出错，请稍后重试\");\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// 渲染图表\r\n\t\t\trenderChart() {\r\n\t\t\t\t// 将响应式对象转换为普通对象\r\n\t\t\t\tconst rawJsonData = toRaw(this.jsonData);\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\t!rawJsonData ||\r\n\t\t\t\t\ttypeof rawJsonData !== \"object\" ||\r\n\t\t\t\t\t!rawJsonData.data\r\n\t\t\t\t) {\r\n\t\t\t\t\tconsole.error(\"JSON 数据无效:\", rawJsonData);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 清空之前的图表\r\n\t\t\t\td3.select(this.$refs.chart).html(\"\");\r\n\r\n\t\t\t\tconst chartType = rawJsonData.type;\r\n\t\t\t\tconst data = rawJsonData.data;\r\n\t\t\t\tconst options = rawJsonData.options || {};\r\n\r\n\t\t\t\tif (chartType === \"line\") {\r\n\t\t\t\t\tthis.renderLineChart(data, options);\r\n\t\t\t\t} else if (chartType === \"bar\") {\r\n\t\t\t\t\tthis.renderBarChart(data, options);\r\n\t\t\t\t} else if (chartType === \"pie\") {\r\n\t\t\t\t\tthis.renderPieChart(data, options);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.error(\"未知的图表类型:\", chartType);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// 渲染折线图（line）\r\n\t\t\trenderLineChart(data, options) {\r\n\t\t\t\tif (!this.$refs.chart) {\r\n\t\t\t\t\tconsole.error(\"图表容器未找到\");\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.log(\"渲染折线图数据:\", data);\r\n\r\n\t\t\t\tconst margin = { top: 20, right: 100, bottom: 50, left: 50 };\r\n\t\t\t\tconst width = 800 - margin.left - margin.right;\r\n\t\t\t\tconst height = 400 - margin.top - margin.bottom;\r\n\r\n\t\t\t\t// 清空之前的图表\r\n\t\t\t\td3.select(this.$refs.chart).html(\"\");\r\n\r\n\t\t\t\t// 创建 SVG 容器\r\n\t\t\t\tconst svg = d3\r\n\t\t\t\t\t.select(this.$refs.chart)\r\n\t\t\t\t\t.append(\"svg\")\r\n\t\t\t\t\t.attr(\"width\", width + margin.left + margin.right)\r\n\t\t\t\t\t.attr(\"height\", height + margin.top + margin.bottom)\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n\t\t\t\tconst labels = data.labels;\r\n\t\t\t\tconst datasets = data.datasets;\r\n\r\n\t\t\t\t// 清理数据\r\n\t\t\t\tconst cleanedLabels = labels.map(label =>\r\n\t\t\t\t\tlabel === undefined || label === null ? \"\" : label\r\n\t\t\t\t);\r\n\t\t\t\tconst cleanedDatasets = datasets.map(dataset => ({\r\n\t\t\t\t\t...dataset,\r\n\t\t\t\t\tdata: dataset.data.map(d => (d === undefined || d === null ? 0 : d))\r\n\t\t\t\t}));\r\n\r\n\t\t\t\tconsole.log(\"清理后的 labels:\", cleanedLabels);\r\n\t\t\t\tconsole.log(\"清理后的 datasets:\", cleanedDatasets);\r\n\r\n\t\t\t\t// 设置 X 轴比例尺\r\n\t\t\t\tconst x = d3\r\n\t\t\t\t\t.scaleBand()\r\n\t\t\t\t\t.domain(cleanedLabels)\r\n\t\t\t\t\t.range([0, width])\r\n\t\t\t\t\t.padding(0.1);\r\n\r\n\t\t\t\t// 设置 Y 轴比例尺\r\n\t\t\t\tconst y = d3\r\n\t\t\t\t\t.scaleLinear()\r\n\t\t\t\t\t.domain([0, d3.max(cleanedDatasets.flatMap(d => d.data))])\r\n\t\t\t\t\t.range([height, 0]);\r\n\r\n\t\t\t\tconsole.log(\"X 比例尺 domain:\", x.domain());\r\n\t\t\t\tconsole.log(\"X 比例尺 range:\", x.range());\r\n\t\t\t\tconsole.log(\"Y 比例尺 domain:\", y.domain());\r\n\t\t\t\tconsole.log(\"Y 比例尺 range:\", y.range());\r\n\r\n\t\t\t\t// 添加 X 轴\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"transform\", `translate(0,${height})`)\r\n\t\t\t\t\t.call(d3.axisBottom(x))\r\n\t\t\t\t\t.selectAll(\"text\")\r\n\t\t\t\t\t.attr(\"transform\", \"rotate(-45)\")\r\n\t\t\t\t\t.style(\"text-anchor\", \"end\");\r\n\r\n\t\t\t\t// 添加 Y 轴\r\n\t\t\t\tsvg.append(\"g\").call(d3.axisLeft(y));\r\n\r\n\t\t\t\t// 添加 X 轴标题\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.append(\"text\")\r\n\t\t\t\t\t.attr(\"x\", width / 2)\r\n\t\t\t\t\t.attr(\"y\", height + margin.bottom - 10)\r\n\t\t\t\t\t.style(\"text-anchor\", \"middle\")\r\n\t\t\t\t\t.text(options.scales.x.title.text);\r\n\r\n\t\t\t\t// 添加 Y 轴标题\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.append(\"text\")\r\n\t\t\t\t\t.attr(\"transform\", \"rotate(-90)\")\r\n\t\t\t\t\t.attr(\"x\", -height / 2)\r\n\t\t\t\t\t.attr(\"y\", -margin.left + 20)\r\n\t\t\t\t\t.style(\"text-anchor\", \"middle\")\r\n\t\t\t\t\t.text(options.scales.y.title.text);\r\n\r\n\t\t\t\t// 绘制折线\r\n\t\t\t\tcleanedDatasets.forEach(dataset => {\r\n\t\t\t\t\tconst line = d3\r\n\t\t\t\t\t\t.line()\r\n\t\t\t\t\t\t.x((d, i) => {\r\n\t\t\t\t\t\t\tconst xValue = x(cleanedLabels[i]) + x.bandwidth() / 2;\r\n\t\t\t\t\t\t\tif (isNaN(xValue)) {\r\n\t\t\t\t\t\t\t\tconsole.error(\r\n\t\t\t\t\t\t\t\t\t\"无效的 x 值:\",\r\n\t\t\t\t\t\t\t\t\txValue,\r\n\t\t\t\t\t\t\t\t\t\"labels[i]:\",\r\n\t\t\t\t\t\t\t\t\tcleanedLabels[i]\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn xValue;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.y(d => {\r\n\t\t\t\t\t\t\tconst yValue = y(d);\r\n\t\t\t\t\t\t\tif (isNaN(yValue)) {\r\n\t\t\t\t\t\t\t\tconsole.error(\"无效的 y 值:\", yValue, \"d:\", d);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn yValue;\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\tsvg\r\n\t\t\t\t\t\t.append(\"path\")\r\n\t\t\t\t\t\t.datum(dataset.data)\r\n\t\t\t\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t\t\t\t.attr(\"stroke\", dataset.borderColor)\r\n\t\t\t\t\t\t.attr(\"stroke-width\", 2)\r\n\t\t\t\t\t\t.attr(\"d\", line);\r\n\r\n\t\t\t\t\t// 添加数据点\r\n\t\t\t\t\tsvg\r\n\t\t\t\t\t\t.selectAll(`.dot-${CSS.escape(dataset.label)}`)\r\n\t\t\t\t\t\t.data(dataset.data)\r\n\t\t\t\t\t\t.enter()\r\n\t\t\t\t\t\t.append(\"circle\")\r\n\t\t\t\t\t\t.attr(\"cx\", (d, i) => {\r\n\t\t\t\t\t\t\tconst cxValue = x(cleanedLabels[i]) + x.bandwidth() / 2;\r\n\t\t\t\t\t\t\tif (isNaN(cxValue)) {\r\n\t\t\t\t\t\t\t\tconsole.error(\r\n\t\t\t\t\t\t\t\t\t\"无效的 cx 值:\",\r\n\t\t\t\t\t\t\t\t\tcxValue,\r\n\t\t\t\t\t\t\t\t\t\"labels[i]:\",\r\n\t\t\t\t\t\t\t\t\tcleanedLabels[i]\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn cxValue;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.attr(\"cy\", d => {\r\n\t\t\t\t\t\t\tconst cyValue = y(d);\r\n\t\t\t\t\t\t\tif (isNaN(cyValue)) {\r\n\t\t\t\t\t\t\t\tconsole.error(\"无效的 cy 值:\", cyValue, \"d:\", d);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn cyValue;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.attr(\"r\", 4)\r\n\t\t\t\t\t\t.attr(\"fill\", dataset.borderColor);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// 添加图例\r\n\t\t\t\tconst legend = svg\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"class\", \"legend\")\r\n\t\t\t\t\t.attr(\"transform\", `translate(${width + margin.right - 100}, 20)`);\r\n\r\n\t\t\t\tcleanedDatasets.forEach((dataset, index) => {\r\n\t\t\t\t\tconst legendItem = legend\r\n\t\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t\t.attr(\"transform\", `translate(0, ${index * 20})`);\r\n\r\n\t\t\t\t\t// 添加颜色方块\r\n\t\t\t\t\tlegendItem\r\n\t\t\t\t\t\t.append(\"rect\")\r\n\t\t\t\t\t\t.attr(\"width\", 18)\r\n\t\t\t\t\t\t.attr(\"height\", 18)\r\n\t\t\t\t\t\t.attr(\"fill\", dataset.borderColor);\r\n\r\n\t\t\t\t\t// 添加标签\r\n\t\t\t\t\tlegendItem\r\n\t\t\t\t\t\t.append(\"text\")\r\n\t\t\t\t\t\t.attr(\"x\", 24)\r\n\t\t\t\t\t\t.attr(\"y\", 9)\r\n\t\t\t\t\t\t.attr(\"dy\", \"0.35em\")\r\n\t\t\t\t\t\t.text(dataset.label);\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\t// 渲染柱状图（bar）\r\n\t\t\trenderBarChart(data, options) {\r\n\t\t\t\tif (!this.$refs.chart) {\r\n\t\t\t\t\tconsole.error(\"图表容器未找到\");\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.log(\"渲染柱状图数据:\", data);\r\n\r\n\t\t\t\tconst margin = { top: 20, right: 100, bottom: 50, left: 50 };\r\n\t\t\t\tconst width = 800 - margin.left - margin.right;\r\n\t\t\t\tconst height = 400 - margin.top - margin.bottom;\r\n\r\n\t\t\t\t// 清空之前的图表\r\n\t\t\t\td3.select(this.$refs.chart).html(\"\");\r\n\r\n\t\t\t\t// 创建 SVG 容器\r\n\t\t\t\tconst svg = d3\r\n\t\t\t\t\t.select(this.$refs.chart)\r\n\t\t\t\t\t.append(\"svg\")\r\n\t\t\t\t\t.attr(\"width\", width + margin.left + margin.right)\r\n\t\t\t\t\t.attr(\"height\", height + margin.top + margin.bottom)\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n\t\t\t\tconst labels = data.labels;\r\n\t\t\t\tconst datasets = data.datasets;\r\n\r\n\t\t\t\t// 清理数据\r\n\t\t\t\tconst cleanedLabels = labels.map(label =>\r\n\t\t\t\t\tlabel === undefined || label === null ? \"\" : label\r\n\t\t\t\t);\r\n\t\t\t\tconst cleanedDatasets = datasets.map(dataset => ({\r\n\t\t\t\t\t...dataset,\r\n\t\t\t\t\tdata: dataset.data.map(d => (d === undefined || d === null ? 0 : d))\r\n\t\t\t\t}));\r\n\r\n\t\t\t\tconsole.log(\"清理后的 labels:\", cleanedLabels);\r\n\t\t\t\tconsole.log(\"清理后的 datasets:\", cleanedDatasets);\r\n\r\n\t\t\t\t// 设置 X 轴比例尺\r\n\t\t\t\tconst x = d3\r\n\t\t\t\t\t.scaleBand()\r\n\t\t\t\t\t.domain(cleanedLabels)\r\n\t\t\t\t\t.range([0, width])\r\n\t\t\t\t\t.padding(0.1);\r\n\r\n\t\t\t\t// 设置 Y 轴比例尺\r\n\t\t\t\tconst y = d3\r\n\t\t\t\t\t.scaleLinear()\r\n\t\t\t\t\t.domain([0, d3.max(cleanedDatasets.flatMap(d => d.data))])\r\n\t\t\t\t\t.range([height, 0]);\r\n\r\n\t\t\t\tconsole.log(\"X 比例尺 domain:\", x.domain());\r\n\t\t\t\tconsole.log(\"X 比例尺 range:\", x.range());\r\n\t\t\t\tconsole.log(\"Y 比例尺 domain:\", y.domain());\r\n\t\t\t\tconsole.log(\"Y 比例尺 range:\", y.range());\r\n\r\n\t\t\t\t// 添加 X 轴\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"transform\", `translate(0,${height})`)\r\n\t\t\t\t\t.call(d3.axisBottom(x))\r\n\t\t\t\t\t.selectAll(\"text\")\r\n\t\t\t\t\t.attr(\"transform\", \"rotate(-45)\")\r\n\t\t\t\t\t.style(\"text-anchor\", \"end\");\r\n\r\n\t\t\t\t// 添加 Y 轴\r\n\t\t\t\tsvg.append(\"g\").call(d3.axisLeft(y));\r\n\r\n\t\t\t\t// 添加 X 轴标题\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.append(\"text\")\r\n\t\t\t\t\t.attr(\"x\", width / 2)\r\n\t\t\t\t\t.attr(\"y\", height + margin.bottom - 10)\r\n\t\t\t\t\t.style(\"text-anchor\", \"middle\")\r\n\t\t\t\t\t.text(options.scales.x.title.text);\r\n\r\n\t\t\t\t// 添加 Y 轴标题\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.append(\"text\")\r\n\t\t\t\t\t.attr(\"transform\", \"rotate(-90)\")\r\n\t\t\t\t\t.attr(\"x\", -height / 2)\r\n\t\t\t\t\t.attr(\"y\", -margin.left + 20)\r\n\t\t\t\t\t.style(\"text-anchor\", \"middle\")\r\n\t\t\t\t\t.text(options.scales.y.title.text);\r\n\r\n\t\t\t\t// 绘制柱状图\r\n\t\t\t\tcleanedDatasets.forEach(dataset => {\r\n\t\t\t\t\tsvg\r\n\t\t\t\t\t\t.selectAll(\".bar\")\r\n\t\t\t\t\t\t.data(dataset.data)\r\n\t\t\t\t\t\t.enter()\r\n\t\t\t\t\t\t.append(\"rect\")\r\n\t\t\t\t\t\t.attr(\"class\", \"bar\")\r\n\t\t\t\t\t\t.attr(\"x\", (d, i) => x(cleanedLabels[i]))\r\n\t\t\t\t\t\t.attr(\"y\", d => y(d))\r\n\t\t\t\t\t\t.attr(\"width\", x.bandwidth())\r\n\t\t\t\t\t\t.attr(\"height\", d => height - y(d))\r\n\t\t\t\t\t\t.attr(\"fill\", dataset.backgroundColor);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// 添加图例\r\n\t\t\t\tconst legend = svg\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"class\", \"legend\")\r\n\t\t\t\t\t.attr(\"transform\", `translate(${width + margin.right - 100}, 20)`);\r\n\r\n\t\t\t\tcleanedDatasets.forEach((dataset, index) => {\r\n\t\t\t\t\tconst legendItem = legend\r\n\t\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t\t.attr(\"transform\", `translate(0, ${index * 20})`);\r\n\r\n\t\t\t\t\t// 添加颜色方块\r\n\t\t\t\t\tlegendItem\r\n\t\t\t\t\t\t.append(\"rect\")\r\n\t\t\t\t\t\t.attr(\"width\", 18)\r\n\t\t\t\t\t\t.attr(\"height\", 18)\r\n\t\t\t\t\t\t.attr(\"fill\", dataset.backgroundColor);\r\n\r\n\t\t\t\t\t// 添加标签\r\n\t\t\t\t\tlegendItem\r\n\t\t\t\t\t\t.append(\"text\")\r\n\t\t\t\t\t\t.attr(\"x\", 24)\r\n\t\t\t\t\t\t.attr(\"y\", 9)\r\n\t\t\t\t\t\t.attr(\"dy\", \"0.35em\")\r\n\t\t\t\t\t\t.text(dataset.label);\r\n\t\t\t\t});\r\n\t\t\t},\r\n\r\n\t\t\t// 渲染饼图（pie）\r\n\t\t\trenderPieChart(data, options) {\r\n\t\t\t\tconsole.log(\"渲染饼图数据:\", data);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n</script>\r\n\r\n<style>\r\n\t#app {\r\n\t\tfont-family: Avenir, Helvetica, Arial, sans-serif;\r\n\t\ttext-align: center;\r\n\t\tmargin-top: 60px;\r\n\t}\r\n\r\n\t.upload-section {\r\n\t\tmargin-bottom: 20px;\r\n\t}\r\n\r\n\ttextarea {\r\n\t\twidth: 80%;\r\n\t\theight: 150px;\r\n\t\tmargin-bottom: 20px;\r\n\t\tpadding: 10px;\r\n\t\tfont-size: 16px;\r\n\t}\r\n\r\n\tbutton {\r\n\t\tpadding: 10px 20px;\r\n\t\tfont-size: 16px;\r\n\t\tcursor: pointer;\r\n\t}\r\n\r\n\t.chart-container {\r\n\t\twidth: 800px;\r\n\t\theight: 400px;\r\n\t\tmargin-top: 20px;\r\n\t\tborder: 1px solid #ccc; /* 添加边框以便查看容器 */\r\n\t}\r\n</style>\r\n"],"mappings":";;EACMA,EAAE,EAAC;AAAK;gCACZC,mBAAA,CAAkB,YAAd,WAAS;;EACRC,KAAK,EAAC;AAAgB;;EAKtBA,KAAK,EAAC;AAAuB;gCACjCD,mBAAA,CAAc,YAAV,OAAK;;EACJE,GAAG,EAAC,OAAO;EAACD,KAAK,EAAC;;;uBATzBE,mBAAA,CAWM,OAXNC,UAWM,GAVLC,UAAkB,EAClBL,mBAAA,CAGM,OAHNM,UAGM,G,gBAFLN,mBAAA,CAA0D;IAJ7D,uBAAAO,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAIsBC,KAAA,CAAAC,IAAI,GAAAF,MAAA;IAAEG,WAAW,EAAC;iDAAlBF,KAAA,CAAAC,IAAI,E,GACvBV,mBAAA,CAA4C;IAAnCY,OAAK,EAAAL,MAAA,QAAAA,MAAA;MAAA,OAAEM,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAC,SAAA,CAAW;IAAA;KAAE,QAAM,E,GAGpCf,mBAAA,CAGM,OAHNgB,UAGM,GAFLC,UAAc,EACdjB,mBAAA,CAA+C,OAA/CkB,UAA+C,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}