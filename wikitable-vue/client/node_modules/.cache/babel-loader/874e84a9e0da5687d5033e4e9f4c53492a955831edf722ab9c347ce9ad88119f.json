{"ast":null,"code":"import axios from \"axios\";\nimport { ref, onMounted } from \"vue\";\n// const frameLeft = ref(null); // 使用 ref 引用 iframe 元素\n\n// 在页面加载完成后执行操作\n// onMounted(() => {\n// \tconst iframe = frameLeft.value;\n\n// \tif (iframe) {\n// \t\tiframe.addEventListener(\"load\", () => {\n// \t\t\tif (iframe.contentWindow) {\n// \t\t\t\tconst selectedText = iframe.contentWindow.getSelection().toString();\n// \t\t\t\tconsole.log(\"从 iframe 获取的选中内容:\", selectedText);\n// \t\t\t}\n// \t\t});\n// \t}\n// });\n\nexport default {\n  __name: 'history',\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    function tang() {\n      axios.get(\"http://localhost:8080/api/item/%E5%94%90%E6%9C%9D/53699\").then(res => {\n        console.log(\"请求成功：\", res.data);\n        const html = res.data;\n        // 将获取的 HTML 内容插入到页面中\n\n        document.getElementById(\"div3\").innerHTML = updateImagePaths(html);\n      }, err => {\n        console.log(\"请求失败：\", err.message);\n      });\n    }\n    function updateImagePaths(html) {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(html, \"text/html\");\n\n      // 获取页面中所有的 img 标签\n      const images = doc.querySelectorAll(\"img\");\n\n      // 遍历所有图片，更新 src 路径\n      images.forEach(img => {\n        const src = img.getAttribute(\"src\");\n\n        // 如果 src 是相对路径，转换为绝对路径\n        if (src && !src.startsWith(\"http\")) {\n          const baseUrl = \"https://zh.wikipedia.org\"; // 维基百科的域名\n          img.setAttribute(\"src\", baseUrl + src);\n        }\n      });\n\n      // 返回修改后的 HTML\n      return doc.documentElement.outerHTML;\n    }\n    const __returned__ = {\n      tang,\n      updateImagePaths,\n      get axios() {\n        return axios;\n      },\n      ref,\n      onMounted\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["axios","ref","onMounted","tang","get","then","res","console","log","data","html","document","getElementById","innerHTML","updateImagePaths","err","message","parser","DOMParser","doc","parseFromString","images","querySelectorAll","forEach","img","src","getAttribute","startsWith","baseUrl","setAttribute","documentElement","outerHTML"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/history.vue"],"sourcesContent":["<template>\r\n\t<div id=\"root\">\r\n\t\t<div class=\"div0\" id=\"div1\">\r\n\t\t\t<iframe\r\n\t\t\t\tref=\"frameLeft\"\r\n\t\t\t\tid=\"frameLeft\"\r\n\t\t\t\tsrc=\"https://zh.wikipedia.org/wiki/%E5%94%90%E6%9C%9D\"\r\n\t\t\t\ttitle=\"页面1\"></iframe>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"div0\" id=\"div2\">\r\n\t\t\t<div class=\"VisContainer\">\r\n\t\t\t\t<div class=\"topContainer\">\r\n\t\t\t\t\t<button class=\"styled-button\" @click=\"tang\">点击我</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"botContainer\"></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"div0\" id=\"div3\">\r\n\t\t\t<iframe\r\n\t\t\t\tid=\"frameRight\"\r\n\t\t\t\tsrc=\"https://baike.baidu.com/item/%E5%94%90%E6%9C%9D/53699\"\r\n\t\t\t\ttitle=\"页面2\"></iframe>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport axios from \"axios\";\r\n\timport { ref, onMounted } from \"vue\";\r\n\t// const frameLeft = ref(null); // 使用 ref 引用 iframe 元素\r\n\r\n\t// 在页面加载完成后执行操作\r\n\t// onMounted(() => {\r\n\t// \tconst iframe = frameLeft.value;\r\n\r\n\t// \tif (iframe) {\r\n\t// \t\tiframe.addEventListener(\"load\", () => {\r\n\t// \t\t\tif (iframe.contentWindow) {\r\n\t// \t\t\t\tconst selectedText = iframe.contentWindow.getSelection().toString();\r\n\t// \t\t\t\tconsole.log(\"从 iframe 获取的选中内容:\", selectedText);\r\n\t// \t\t\t}\r\n\t// \t\t});\r\n\t// \t}\r\n\t// });\r\n\tfunction tang() {\r\n\t\taxios.get(\"http://localhost:8080/api/item/%E5%94%90%E6%9C%9D/53699\").then(\r\n\t\t\tres => {\r\n\t\t\t\tconsole.log(\"请求成功：\", res.data);\r\n\t\t\t\tconst html = res.data;\r\n\t\t\t\t// 将获取的 HTML 内容插入到页面中\r\n\r\n\t\t\t\tdocument.getElementById(\"div3\").innerHTML = updateImagePaths(html);\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\tconsole.log(\"请求失败：\", err.message);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\tfunction updateImagePaths(html) {\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\r\n\t\t// 获取页面中所有的 img 标签\r\n\t\tconst images = doc.querySelectorAll(\"img\");\r\n\r\n\t\t// 遍历所有图片，更新 src 路径\r\n\t\timages.forEach(img => {\r\n\t\t\tconst src = img.getAttribute(\"src\");\r\n\r\n\t\t\t// 如果 src 是相对路径，转换为绝对路径\r\n\t\t\tif (src && !src.startsWith(\"http\")) {\r\n\t\t\t\tconst baseUrl = \"https://zh.wikipedia.org\"; // 维基百科的域名\r\n\t\t\t\timg.setAttribute(\"src\", baseUrl + src);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// 返回修改后的 HTML\r\n\t\treturn doc.documentElement.outerHTML;\r\n\t}\r\n</script>\r\n\r\n<style scoped>\r\n\t#root {\r\n\t\tdisplay: flex;\r\n\t\t/* 使用 Flexbox 布局 */\r\n\t\tjustify-content: space-around;\r\n\t\t/* 在主轴上均匀分配空间 */\r\n\t\talign-items: flex-start;\r\n\t\t/* 在交叉轴上靠上对齐 */\r\n\t\theight: 100vh;\r\n\t\t/* 设定页面高度为视口高度 */\r\n\t\tmargin: 0;\r\n\t\t/* 去掉默认的 margin */\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t}\r\n\r\n\t.div0 {\r\n\t\tposition: absolute;\r\n\t\theight: 100vh;\r\n\t}\r\n\t#div1 {\r\n\t\tleft: 0;\r\n\t\twidth: 30%;\r\n\t}\r\n\t#div2 {\r\n\t\twidth: 40%;\r\n\t}\r\n\t#div3 {\r\n\t\twidth: 30%;\r\n\t\tright: 0;\r\n\t}\r\n\r\n\tiframe {\r\n\t\twidth: 100%;\r\n\t\theight: 100%; /* 确保 iframe 的内容充满容器 */\r\n\t\tborder: 1px solid #ccc;\r\n\t\toverflow: auto; /* 允许滚动 */\r\n\t}\r\n</style>\r\n"],"mappings":"AA6BC,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,EAAEC,SAAS,QAAQ,KAAK;AACpC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;IACA,SAASC,IAAIA,CAAA,EAAG;MACfH,KAAK,CAACI,GAAG,CAAC,yDAAyD,CAAC,CAACC,IAAI,CACxEC,GAAG,IAAI;QACNC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,GAAG,CAACG,IAAI,CAAC;QAC9B,MAAMC,IAAI,GAAGJ,GAAG,CAACG,IAAI;QACrB;;QAEAE,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAACC,SAAS,GAAGC,gBAAgB,CAACJ,IAAI,CAAC;MACnE,CAAC,EACDK,GAAG,IAAI;QACNR,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEO,GAAG,CAACC,OAAO,CAAC;MAClC,CACD,CAAC;IACF;IACA,SAASF,gBAAgBA,CAACJ,IAAI,EAAE;MAC/B,MAAMO,MAAM,GAAG,IAAIC,SAAS,CAAC,CAAC;MAC9B,MAAMC,GAAG,GAAGF,MAAM,CAACG,eAAe,CAACV,IAAI,EAAE,WAAW,CAAC;;MAErD;MACA,MAAMW,MAAM,GAAGF,GAAG,CAACG,gBAAgB,CAAC,KAAK,CAAC;;MAE1C;MACAD,MAAM,CAACE,OAAO,CAACC,GAAG,IAAI;QACrB,MAAMC,GAAG,GAAGD,GAAG,CAACE,YAAY,CAAC,KAAK,CAAC;;QAEnC;QACA,IAAID,GAAG,IAAI,CAACA,GAAG,CAACE,UAAU,CAAC,MAAM,CAAC,EAAE;UACnC,MAAMC,OAAO,GAAG,0BAA0B,CAAC,CAAC;UAC5CJ,GAAG,CAACK,YAAY,CAAC,KAAK,EAAED,OAAO,GAAGH,GAAG,CAAC;QACvC;MACD,CAAC,CAAC;;MAEF;MACA,OAAON,GAAG,CAACW,eAAe,CAACC,SAAS;IACrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}