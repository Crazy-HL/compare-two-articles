{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createVNode as _createVNode, vModelText as _vModelText, withDirectives as _withDirectives, normalizeClass as _normalizeClass, createTextVNode as _createTextVNode, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-62c843dc\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = [\"id\"];\nconst _hoisted_2 = {\n  key: 3,\n  class: \"match-debug-tool\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"debug-panel\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass(['div0', $props.selectContentClass]),\n    id: $props.divId,\n    ref: \"divRef\"\n  }, [_createElementVNode(\"h1\", null, _toDisplayString($setup.props.pageTitle), 1 /* TEXT */), $setup.loading ? (_openBlock(), _createBlock($setup[\"LoadingSpinner\"], {\n    key: 0\n  })) : $setup.error ? (_openBlock(), _createBlock($setup[\"ErrorDisplay\"], {\n    key: 1,\n    message: $setup.error,\n    onRetry: $setup.fetchWikipediaContent\n  }, null, 8 /* PROPS */, [\"message\"])) : (_openBlock(), _createBlock($setup[\"WikipediaContent\"], {\n    key: 2,\n    content: $setup.pageHtml,\n    onSelect: $setup.handleSelection\n  }, null, 8 /* PROPS */, [\"content\"])), _createVNode($setup[\"TextPopup\"], {\n    visible: $setup.showPopup[$props.divId],\n    content: $setup.selectedText[$props.divId],\n    containerClass: $props.divId === 'div1' ? 'chart-container1' : 'chart-container2',\n    containerRef: $setup.divRef,\n    onClose: $setup.closePopup\n  }, null, 8 /* PROPS */, [\"visible\", \"content\", \"containerClass\", \"containerRef\"]), _createVNode($setup[\"ArticleOutline\"], {\n    content: $setup.pageHtml,\n    divId: $props.divId\n  }, null, 8 /* PROPS */, [\"content\", \"divId\"]), _createCommentVNode(\" 新增匹配调试工具 \"), !$setup.loading && !$setup.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"button\", {\n    onClick: $setup.toggleDebugMode\n  }, _toDisplayString($setup.debugMode ? \"关闭调试\" : \"开启匹配调试\"), 1 /* TEXT */), $setup.debugMode ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.debugText = $event),\n    placeholder: \"粘贴需要测试匹配的文本\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.debugText]]), _createElementVNode(\"button\", {\n    onClick: $setup.testTextMatch\n  }, \"测试匹配\"), _createElementVNode(\"div\", null, [_createTextVNode(\" 匹配状态: \"), _createElementVNode(\"span\", {\n    class: _normalizeClass($setup.matchStatusClass)\n  }, _toDisplayString($setup.matchStatusText), 3 /* TEXT, CLASS */)])])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)], 10 /* CLASS, PROPS */, _hoisted_1);\n}","map":{"version":3,"names":["key","class","_createElementBlock","_normalizeClass","$props","selectContentClass","id","divId","ref","_createElementVNode","_toDisplayString","$setup","props","pageTitle","loading","_createBlock","error","message","onRetry","fetchWikipediaContent","content","pageHtml","onSelect","handleSelection","_createVNode","visible","showPopup","selectedText","containerClass","containerRef","divRef","onClose","closePopup","_createCommentVNode","_hoisted_2","onClick","toggleDebugMode","debugMode","_hoisted_3","_cache","$event","debugText","placeholder","testTextMatch","_createTextVNode","matchStatusClass","matchStatusText","_hoisted_1"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\ParentComponent.vue"],"sourcesContent":["<template>\r\n\t<div :class=\"['div0', selectContentClass]\" :id=\"divId\" ref=\"divRef\">\r\n\t\t<h1>{{ props.pageTitle }}</h1>\r\n\r\n\t\t<LoadingSpinner v-if=\"loading\" />\r\n\r\n\t\t<ErrorDisplay\r\n\t\t\tv-else-if=\"error\"\r\n\t\t\t:message=\"error\"\r\n\t\t\t@retry=\"fetchWikipediaContent\" />\r\n\r\n\t\t<WikipediaContent v-else :content=\"pageHtml\" @select=\"handleSelection\" />\r\n\r\n\t\t<TextPopup\r\n\t\t\t:visible=\"showPopup[divId]\"\r\n\t\t\t:content=\"selectedText[divId]\"\r\n\t\t\t:containerClass=\"\r\n\t\t\t\tdivId === 'div1' ? 'chart-container1' : 'chart-container2'\r\n\t\t\t\"\r\n\t\t\t:containerRef=\"divRef\"\r\n\t\t\t@close=\"closePopup\" />\r\n\r\n\t\t<ArticleOutline :content=\"pageHtml\" :divId=\"divId\" />\r\n\r\n\t\t<!-- 新增匹配调试工具 -->\r\n\t\t<div v-if=\"!loading && !error\" class=\"match-debug-tool\">\r\n\t\t\t<button @click=\"toggleDebugMode\">\r\n\t\t\t\t{{ debugMode ? \"关闭调试\" : \"开启匹配调试\" }}\r\n\t\t\t</button>\r\n\t\t\t<div v-if=\"debugMode\" class=\"debug-panel\">\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tv-model=\"debugText\"\r\n\t\t\t\t\tplaceholder=\"粘贴需要测试匹配的文本\"></textarea>\r\n\t\t\t\t<button @click=\"testTextMatch\">测试匹配</button>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t匹配状态: <span :class=\"matchStatusClass\">{{ matchStatusText }}</span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted, nextTick, computed } from \"vue\";\r\n\timport LoadingSpinner from \"./LoadingSpinner.vue\";\r\n\timport ErrorDisplay from \"./ErrorDisplay.vue\";\r\n\timport WikipediaContent from \"./WikipediaContent.vue\";\r\n\timport TextPopup from \"./TextPopup.vue\";\r\n\timport ArticleOutline from \"./ArticleOutline.vue\";\r\n\timport * as d3 from \"d3\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\timport { parseInfoboxForComparison } from \"@/js/wikiInfoboxParser\";\r\n\r\n\tconst props = defineProps({\r\n\t\tpageTitle: String,\r\n\t\tdivId: String,\r\n\t\tselectContentClass: String,\r\n\t\tlinkedOutline: Array\r\n\t});\r\n\r\n\t// 原有状态\r\n\tconst pageHtml = ref(\"\");\r\n\tconst loading = ref(true);\r\n\tconst error = ref(\"\");\r\n\tconst selectedText = ref({});\r\n\tconst showPopup = ref({});\r\n\tconst divRef = ref(null);\r\n\tconst highlightedParagraphs = ref({});\r\n\r\n\t// 新增调试状态\r\n\tconst debugMode = ref(false);\r\n\tconst debugText = ref(\"\");\r\n\tconst matchResult = ref(null);\r\n\r\n\t// 计算属性\r\n\tconst matchStatusText = computed(() => {\r\n\t\tif (!matchResult.value) return \"未测试\";\r\n\t\treturn matchResult.value.success ? \"匹配成功\" : \"匹配失败\";\r\n\t});\r\n\r\n\tconst matchStatusClass = computed(() => {\r\n\t\treturn matchResult.value?.success ? \"match-success\" : \"match-fail\";\r\n\t});\r\n\r\n\t// 原有方法（完全保留）\r\n\tconst fetchWikipediaContent = async () => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst injectWikipediaStyles = () => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst handleHoverInfobox = ({ fieldKey, infoboxTitle }) => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst handleUnhoverInfobox = () => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst clearInfoboxHighlights = () => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst handleSelection = content => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst handleSelectionWithSourceId = (content, sourceId, isTable) => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst closePopup = () => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst updatePopupPosition = () => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst extractLinkedChapterContent = (sourceId, sourceContainerId) => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\r\n\t// 修改后的高亮方法（新增智能匹配）\r\n\tconst highlightParagraphs = fieldKey => {\r\n\t\tclearHighlights();\r\n\r\n\t\tif (!divRef.value) return;\r\n\r\n\t\t// 1. 尝试精准匹配\r\n\t\tconst exactMatches = getExactMatchesForField(fieldKey);\r\n\t\tlet matched = false;\r\n\r\n\t\t// 先尝试原始精准匹配\r\n\t\tfor (const match of exactMatches) {\r\n\t\t\tif (tryExactMatch(match)) {\r\n\t\t\t\tmatched = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 2. 失败后尝试智能段落匹配\r\n\t\tif (!matched) {\r\n\t\t\tfor (const match of exactMatches) {\r\n\t\t\t\tif (trySmartParagraphMatch(match)) {\r\n\t\t\t\t\tmatched = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 3. 最终回退到模糊匹配\r\n\t\tif (!matched) {\r\n\t\t\thighlightFuzzyMatches(fieldKey);\r\n\t\t}\r\n\t};\r\n\r\n\t// 新增方法：智能段落匹配\r\n\tconst trySmartParagraphMatch = textToMatch => {\r\n\t\tconst contentElement = divRef.value.querySelector(\".wikipedia-content\");\r\n\t\tif (!contentElement) return false;\r\n\r\n\t\t// 获取标准化文本\r\n\t\tconst normalizedTarget = normalizeText(textToMatch);\r\n\t\tlet bestMatch = null;\r\n\t\tlet highestScore = 0;\r\n\r\n\t\t// 遍历所有段落\r\n\t\tconst paragraphs = contentElement.querySelectorAll(\r\n\t\t\t\"p, li, td, th, div.section\"\r\n\t\t);\r\n\t\tparagraphs.forEach(para => {\r\n\t\t\tconst paraText = normalizeText(para.textContent);\r\n\t\t\tconst score = calculateSimilarity(normalizedTarget, paraText);\r\n\r\n\t\t\tif (score > highestScore && score > 0.7) {\r\n\t\t\t\thighestScore = score;\r\n\t\t\t\tbestMatch = para;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (bestMatch) {\r\n\t\t\thighlightBestMatch(bestMatch, textToMatch);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t// 新增辅助方法\r\n\tconst normalizeText = text => {\r\n\t\treturn text\r\n\t\t\t.toLowerCase()\r\n\t\t\t.replace(/\\s+/g, \" \")\r\n\t\t\t.replace(/[^\\w\\u4e00-\\u9fa5]/g, \"\") // 保留字母数字和汉字\r\n\t\t\t.trim();\r\n\t};\r\n\r\n\tconst calculateSimilarity = (a, b) => {\r\n\t\t// 简单相似度计算 - 可根据需求替换更复杂算法\r\n\t\tif (a === b) return 1.0;\r\n\t\tif (a.length < 2 || b.length < 2) return 0.0;\r\n\r\n\t\tconst aBigrams = new Set();\r\n\t\tfor (let i = 0; i < a.length - 1; i++) {\r\n\t\t\taBigrams.add(a.substring(i, i + 2));\r\n\t\t}\r\n\r\n\t\tlet intersectionSize = 0;\r\n\t\tfor (let i = 0; i < b.length - 1; i++) {\r\n\t\t\tconst bigram = b.substring(i, i + 2);\r\n\t\t\tif (aBigrams.has(bigram)) {\r\n\t\t\t\tintersectionSize++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (2.0 * intersectionSize) / (a.length + b.length - 2);\r\n\t};\r\n\r\n\tconst highlightBestMatch = (element, originalText) => {\r\n\t\t// 创建临时容器处理HTML\r\n\t\tconst tempDiv = document.createElement(\"div\");\r\n\t\ttempDiv.innerHTML = element.innerHTML;\r\n\r\n\t\t// 标记所有文本节点\r\n\t\tconst textNodes = [];\r\n\t\tconst walker = document.createTreeWalker(\r\n\t\t\ttempDiv,\r\n\t\t\tNodeFilter.SHOW_TEXT,\r\n\t\t\tnull,\r\n\t\t\tfalse\r\n\t\t);\r\n\r\n\t\tlet node;\r\n\t\twhile ((node = walker.nextNode())) {\r\n\t\t\ttextNodes.push(node);\r\n\t\t}\r\n\r\n\t\t// 尝试找到最相似的文本片段\r\n\t\tlet bestNode = null;\r\n\t\tlet bestScore = 0;\r\n\t\tconst normalizedOriginal = normalizeText(originalText);\r\n\r\n\t\ttextNodes.forEach(node => {\r\n\t\t\tconst nodeText = normalizeText(node.nodeValue);\r\n\t\t\tconst score = calculateSimilarity(normalizedOriginal, nodeText);\r\n\t\t\tif (score > bestScore) {\r\n\t\t\t\tbestScore = score;\r\n\t\t\t\tbestNode = node;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (bestNode) {\r\n\t\t\t// 高亮最佳匹配节点\r\n\t\t\tconst span = document.createElement(\"span\");\r\n\t\t\tspan.className = \"highlight-smart\";\r\n\t\t\tspan.textContent = bestNode.nodeValue;\r\n\t\t\tbestNode.parentNode.replaceChild(span, bestNode);\r\n\r\n\t\t\telement.innerHTML = tempDiv.innerHTML;\r\n\r\n\t\t\t// 保存引用\r\n\t\t\tif (!highlightedParagraphs.value[props.divId]) {\r\n\t\t\t\thighlightedParagraphs.value[props.divId] = [];\r\n\t\t\t}\r\n\t\t\thighlightedParagraphs.value[props.divId].push(span);\r\n\r\n\t\t\t// 滚动到视图\r\n\t\t\tspan.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t};\r\n\r\n\t// 原有高亮方法（保持不变）\r\n\tconst tryExactMatch = textToHighlight => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst highlightFuzzyMatches = fieldKey => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst getExactMatchesForField = fieldKey => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst getKeywordsForField = fieldKey => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\tconst clearHighlights = () => {\r\n\t\t/* 原有实现 */\r\n\t};\r\n\r\n\t// 新增调试方法\r\n\tconst toggleDebugMode = () => {\r\n\t\tdebugMode.value = !debugMode.value;\r\n\t\tif (!debugMode.value) {\r\n\t\t\tmatchResult.value = null;\r\n\t\t\tclearHighlights();\r\n\t\t}\r\n\t};\r\n\r\n\tconst testTextMatch = () => {\r\n\t\tif (!debugText.value.trim()) return;\r\n\r\n\t\tclearHighlights();\r\n\t\tmatchResult.value = { success: false };\r\n\r\n\t\t// 尝试精确匹配\r\n\t\tif (tryExactMatch(debugText.value)) {\r\n\t\t\tmatchResult.value.success = true;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 尝试智能匹配\r\n\t\tif (trySmartParagraphMatch(debugText.value)) {\r\n\t\t\tmatchResult.value.success = true;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 尝试模糊匹配\r\n\t\thighlightFuzzyMatches(debugText.value);\r\n\t\tmatchResult.value.success = true;\r\n\t};\r\n\r\n\t// 原有生命周期（保持不变）\r\n\tonMounted(() => {\r\n\t\tfetchWikipediaContent();\r\n\r\n\t\tif (divRef.value) {\r\n\t\t\tdivRef.value.addEventListener(\"scroll\", updatePopupPosition);\r\n\t\t}\r\n\r\n\t\tconst hoverEvent = `hover-${\r\n\t\t\tprops.divId === \"div1\" ? \"left\" : \"right\"\r\n\t\t}-infobox`;\r\n\t\tconst unhoverEvent = `unhover-${\r\n\t\t\tprops.divId === \"div1\" ? \"left\" : \"right\"\r\n\t\t}-infobox`;\r\n\r\n\t\tbus.on(hoverEvent, handleHoverInfobox);\r\n\t\tbus.on(unhoverEvent, handleUnhoverInfobox);\r\n\t\tbus.on(`${props.divId}Event`, ({ content, sourceId }) => {\r\n\t\t\tselectedText.value[props.divId] = content;\r\n\t\t\tshowPopup.value[props.divId] = true;\r\n\t\t\tnextTick(() => {\r\n\t\t\t\tupdatePopupPosition();\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t// 新增事件监听\r\n\t\tbus.on(`highlight-${props.divId}-paragraphs`, highlightParagraphs);\r\n\t\tbus.on(`clear-${props.divId}-highlights`, clearHighlights);\r\n\t});\r\n\r\n\tonUnmounted(() => {\r\n\t\tif (divRef.value) {\r\n\t\t\tdivRef.value.removeEventListener(\"scroll\", updatePopupPosition);\r\n\t\t}\r\n\r\n\t\tconst hoverEvent = `hover-${\r\n\t\t\tprops.divId === \"div1\" ? \"left\" : \"right\"\r\n\t\t}-infobox`;\r\n\t\tconst unhoverEvent = `unhover-${\r\n\t\t\tprops.divId === \"div1\" ? \"left\" : \"right\"\r\n\t\t}-infobox`;\r\n\r\n\t\tbus.off(hoverEvent, handleHoverInfobox);\r\n\t\tbus.off(unhoverEvent, handleUnhoverInfobox);\r\n\t\tbus.off(`${props.divId}Event`);\r\n\r\n\t\t// 移除新增事件监听\r\n\t\tbus.off(`highlight-${props.divId}-paragraphs`, highlightParagraphs);\r\n\t\tbus.off(`clear-${props.divId}-highlights`, clearHighlights);\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t/* 原有样式保持不变 */\r\n\th1 {\r\n\t\ttext-align: center;\r\n\t\tmargin-bottom: 20px;\r\n\t\tcolor: #2c3e50;\r\n\t}\r\n\r\n\t.div0 {\r\n\t\tposition: relative;\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t\tmargin: 10px;\r\n\t}\r\n\r\n\t#div1,\r\n\t#div3 {\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t\tmargin: 10px;\r\n\t}\r\n\r\n\t.showHtml {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\toverflow: auto;\r\n\t}\r\n\r\n\t::selection {\r\n\t\tbackground-color: rgba(255, 255, 0, 0.3);\r\n\t\tcolor: inherit;\r\n\t}\r\n\r\n\t/* 新增调试工具样式 */\r\n\t.match-debug-tool {\r\n\t\tposition: fixed;\r\n\t\tbottom: 20px;\r\n\t\tright: 20px;\r\n\t\tz-index: 1000;\r\n\t}\r\n\r\n\t.match-debug-tool button {\r\n\t\tpadding: 8px 12px;\r\n\t\tbackground: #2196f3;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tborder-radius: 4px;\r\n\t\tcursor: pointer;\r\n\t}\r\n\r\n\t.debug-panel {\r\n\t\tmargin-top: 10px;\r\n\t\tpadding: 15px;\r\n\t\tbackground: white;\r\n\t\tborder-radius: 8px;\r\n\t\tbox-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\r\n\t}\r\n\r\n\t.debug-panel textarea {\r\n\t\twidth: 100%;\r\n\t\theight: 100px;\r\n\t\tmargin: 10px 0;\r\n\t}\r\n\r\n\t.match-success {\r\n\t\tcolor: #4caf50;\r\n\t\tfont-weight: bold;\r\n\t}\r\n\r\n\t.match-fail {\r\n\t\tcolor: #f44336;\r\n\t\tfont-weight: bold;\r\n\t}\r\n</style>\r\n\r\n<style>\r\n\t/* 原有全局样式保持不变 */\r\n\t.infobox tr.infobox-highlight th,\r\n\t.infobox tr.infobox-highlight td,\r\n\t.sidebar tr.infobox-highlight th,\r\n\t.sidebar tr.infobox-highlight td,\r\n\t.toccolours tr.infobox-highlight th,\r\n\t.toccolours tr.infobox-highlight td {\r\n\t\tbackground-color: #fffacd !important;\r\n\t\tbox-shadow: 0 0 8px rgba(255, 235, 59, 0.8) !important;\r\n\t\ttransition: all 0.15s ease !important;\r\n\t}\r\n\r\n\t.highlight-exact {\r\n\t\tbackground-color: rgba(255, 235, 59, 0.6);\r\n\t\tpadding: 2px 0;\r\n\t\tborder-radius: 3px;\r\n\t\tbox-shadow: 0 0 0 2px rgba(255, 235, 59, 0.3);\r\n\t\ttransition: all 0.3s ease;\r\n\t}\r\n\r\n\t.highlight-smart {\r\n\t\tbackground-color: rgba(100, 221, 23, 0.4);\r\n\t\tpadding: 2px 0;\r\n\t\tborder-radius: 3px;\r\n\t\tbox-shadow: 0 0 0 2px rgba(76, 175, 80, 0.3);\r\n\t\ttransition: all 0.3s ease;\r\n\t}\r\n\r\n\t.highlight-fuzzy {\r\n\t\tbackground-color: rgba(255, 152, 0, 0.4);\r\n\t\tpadding: 2px 0;\r\n\t\tborder-radius: 3px;\r\n\t\ttransition: all 0.3s ease;\r\n\t}\r\n</style>\r\n"],"mappings":";;mBAAA;;EAAAA,GAAA;EAyBiCC,KAAK,EAAC;;;EAzBvCD,GAAA;EA6ByBC,KAAK,EAAC;;;uBA5B9BC,mBAAA,CAsCM;IAtCAD,KAAK,EADZE,eAAA,UACuBC,MAAA,CAAAC,kBAAkB;IAAIC,EAAE,EAAEF,MAAA,CAAAG,KAAK;IAAEC,GAAG,EAAC;MAC1DC,mBAAA,CAA8B,YAAAC,gBAAA,CAAvBC,MAAA,CAAAC,KAAK,CAACC,SAAS,kBAEAF,MAAA,CAAAG,OAAO,I,cAA7BC,YAAA,CAAiCJ,MAAA;IAJnCX,GAAA;EAAA,MAOcW,MAAA,CAAAK,KAAK,I,cADjBD,YAAA,CAGkCJ,MAAA;IATpCX,GAAA;IAQIiB,OAAO,EAAEN,MAAA,CAAAK,KAAK;IACdE,OAAK,EAAEP,MAAA,CAAAQ;yDAETJ,YAAA,CAAyEJ,MAAA;IAX3EX,GAAA;IAW4BoB,OAAO,EAAET,MAAA,CAAAU,QAAQ;IAAGC,QAAM,EAAEX,MAAA,CAAAY;yCAEtDC,YAAA,CAOuBb,MAAA;IANrBc,OAAO,EAAEd,MAAA,CAAAe,SAAS,CAACtB,MAAA,CAAAG,KAAK;IACxBa,OAAO,EAAET,MAAA,CAAAgB,YAAY,CAACvB,MAAA,CAAAG,KAAK;IAC3BqB,cAAc,EAAQxB,MAAA,CAAAG,KAAK;IAG3BsB,YAAY,EAAElB,MAAA,CAAAmB,MAAM;IACpBC,OAAK,EAAEpB,MAAA,CAAAqB;qFAETR,YAAA,CAAqDb,MAAA;IAApCS,OAAO,EAAET,MAAA,CAAAU,QAAQ;IAAGd,KAAK,EAAEH,MAAA,CAAAG;iDAE5C0B,mBAAA,cAAiB,E,CACLtB,MAAA,CAAAG,OAAO,KAAKH,MAAA,CAAAK,KAAK,I,cAA7Bd,mBAAA,CAaM,OAbNgC,UAaM,GAZLzB,mBAAA,CAES;IAFA0B,OAAK,EAAExB,MAAA,CAAAyB;EAAe,GAAA1B,gBAAA,CAC3BC,MAAA,CAAA0B,SAAS,sCAEF1B,MAAA,CAAA0B,SAAS,I,cAApBnC,mBAAA,CAQM,OARNoC,UAQM,G,gBAPL7B,mBAAA,CAEsC;IAhC1C,uBAAA8B,MAAA,QAAAA,MAAA,MAAAC,MAAA,IA+Bc7B,MAAA,CAAA8B,SAAS,GAAAD,MAAA;IAClBE,WAAW,EAAC;iDADH/B,MAAA,CAAA8B,SAAS,E,GAEnBhC,mBAAA,CAA4C;IAAnC0B,OAAK,EAAExB,MAAA,CAAAgC;EAAa,GAAE,MAAI,GACnClC,mBAAA,CAEM,cApCVmC,gBAAA,CAkCS,SACE,GAAAnC,mBAAA,CAA4D;IAArDR,KAAK,EAnCvBE,eAAA,CAmCyBQ,MAAA,CAAAkC,gBAAgB;sBAAKlC,MAAA,CAAAmC,eAAe,wB,OAnC7Db,mBAAA,e,KAAAA,mBAAA,e,yBAAAc,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}