{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-d2b9e37a\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"data-visualization\",\n  ref: \"chartContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\DataVisualization.vue"],"sourcesContent":["<template>\r\n\t<div class=\"data-visualization\" ref=\"chartContainer\"></div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, watch } from \"vue\";\r\n\timport * as d3 from \"d3\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdata: Array,\r\n\t\ttype: String,\r\n\t\tconfig: Object\r\n\t});\r\n\r\n\tconst chartContainer = ref(null);\r\n\r\n\tconst drawChart = () => {\r\n\t\tconst container = chartContainer.value;\r\n\t\tif (!container) return;\r\n\r\n\t\t// 清空容器\r\n\t\tcontainer.innerHTML = \"\";\r\n\r\n\t\tconst width = props.config.maxWidth || 250;\r\n\t\tconst height = props.config.maxHeight || 80;\r\n\r\n\t\tconst svg = d3\r\n\t\t\t.select(container)\r\n\t\t\t.append(\"svg\")\r\n\t\t\t.attr(\"width\", width)\r\n\t\t\t.attr(\"height\", height);\r\n\r\n\t\tif (props.type === \"bar\") {\r\n\t\t\tdrawBarChart(svg, width, height);\r\n\t\t} else if (props.type === \"pie\") {\r\n\t\t\tdrawPieChart(svg, width, height);\r\n\t\t}\r\n\t};\r\n\r\n\tconst drawBarChart = (svg, width, height) => {\r\n\t\tconst x = d3\r\n\t\t\t.scaleBand()\r\n\t\t\t.domain(props.data.map((d, i) => i))\r\n\t\t\t.range([0, width])\r\n\t\t\t.padding(0.1);\r\n\r\n\t\tconst y = d3\r\n\t\t\t.scaleLinear()\r\n\t\t\t.domain([0, d3.max(props.data, d => d.value)])\r\n\t\t\t.range([height, 0]);\r\n\r\n\t\tsvg\r\n\t\t\t.selectAll(\"rect\")\r\n\t\t\t.data(props.data)\r\n\t\t\t.enter()\r\n\t\t\t.append(\"rect\")\r\n\t\t\t.attr(\"x\", (_, i) => x(i))\r\n\t\t\t.attr(\"y\", d => y(d.value))\r\n\t\t\t.attr(\"width\", x.bandwidth())\r\n\t\t\t.attr(\"height\", d => height - y(d.value))\r\n\t\t\t.attr(\"fill\", props.config.color || \"#4a90e2\");\r\n\t};\r\n\r\n\tconst drawPieChart = (svg, width, height) => {\r\n\t\tconst radius = Math.min(width, height) / 2;\r\n\t\tconst arc = d3.arc().innerRadius(0).outerRadius(radius);\r\n\t\tconst pie = d3.pie().value(d => d.value);\r\n\r\n\t\tconst g = svg\r\n\t\t\t.append(\"g\")\r\n\t\t\t.attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\r\n\r\n\t\tg.selectAll(\"path\")\r\n\t\t\t.data(pie(props.data))\r\n\t\t\t.enter()\r\n\t\t\t.append(\"path\")\r\n\t\t\t.attr(\"d\", arc)\r\n\t\t\t.attr(\"fill\", (d, i) => d3.schemeCategory10[i % 10]);\r\n\t};\r\n\r\n\tonMounted(drawChart);\r\n\twatch(() => [props.data, props.type, props.config], drawChart, {\r\n\t\tdeep: true\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.data-visualization {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,KAAK,EAAC,oBAAoB;EAACC,GAAG,EAAC;;;uBAApCC,mBAAA,CAA2D,OAA3DC,UAA2D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}