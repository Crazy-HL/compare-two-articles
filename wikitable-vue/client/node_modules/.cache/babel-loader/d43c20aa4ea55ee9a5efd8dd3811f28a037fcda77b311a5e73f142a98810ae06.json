{"ast":null,"code":"import { ref } from \"vue\";\n\n// 用于存储选中的文本\n\nexport default {\n  __name: 'test',\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const selectedText = ref(\"\");\n    let wikiIframe;\n\n    // 获取 iframe 内容并绑定事件\n    const onIframeLoad = () => {\n      wikiIframe = document.getElementById(\"wikiFrame\");\n\n      // 在 iframe 内部添加事件监听器（跨域问题需要注意）\n      wikiIframe.contentWindow.document.addEventListener(\"mouseup\", () => {\n        const selection = wikiIframe.contentWindow.getSelection();\n        if (selection.toString()) {\n          selectedText.value = selection.toString();\n        }\n      });\n    };\n\n    // 高亮选中的文字\n    const highlightSelectedText = () => {\n      const iframeDoc = wikiIframe.contentWindow.document;\n      const selection = iframeDoc.getSelection();\n      if (selection.toString()) {\n        const range = selection.getRangeAt(0);\n        const span = iframeDoc.createElement(\"span\");\n        span.style.backgroundColor = \"yellow\"; // 设置高亮颜色\n        range.surroundContents(span);\n      }\n    };\n\n    // 提取选中的文字\n    const extractSelectedText = () => {\n      if (selectedText.value) {\n        alert(`提取的文本: ${selectedText.value}`);\n      } else {\n        alert(\"没有选中任何文本！\");\n      }\n    };\n    const __returned__ = {\n      selectedText,\n      get wikiIframe() {\n        return wikiIframe;\n      },\n      set wikiIframe(v) {\n        wikiIframe = v;\n      },\n      onIframeLoad,\n      highlightSelectedText,\n      extractSelectedText,\n      ref\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","selectedText","wikiIframe","onIframeLoad","document","getElementById","contentWindow","addEventListener","selection","getSelection","toString","value","highlightSelectedText","iframeDoc","range","getRangeAt","span","createElement","style","backgroundColor","surroundContents","extractSelectedText","alert"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/test.vue"],"sourcesContent":["<template>\r\n\t<div id=\"div2\" class=\"container\">\r\n\t\t<!-- 嵌入维基百科 -->\r\n\t\t<iframe\r\n\t\t\tid=\"wikiFrame\"\r\n\t\t\tsrc=\"https://en.wikipedia.org/wiki/France\"\r\n\t\t\twidth=\"100%\"\r\n\t\t\theight=\"500px\"\r\n\t\t\tstyle=\"border: none\"\r\n\t\t\t@load=\"onIframeLoad\"></iframe>\r\n\r\n\t\t<!-- 高亮提取文本 -->\r\n\t\t<div class=\"text-container\">\r\n\t\t\t<button @click=\"highlightSelectedText\">高亮选中的文字</button>\r\n\t\t\t<button @click=\"extractSelectedText\">提取选中的文字</button>\r\n\t\t\t<div v-if=\"selectedText\" class=\"extracted-text\">\r\n\t\t\t\t<strong>选中的文本:</strong>\r\n\t\t\t\t<p>{{ selectedText }}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref } from \"vue\";\r\n\r\n\t// 用于存储选中的文本\r\n\tconst selectedText = ref(\"\");\r\n\r\n\tlet wikiIframe;\r\n\r\n\t// 获取 iframe 内容并绑定事件\r\n\tconst onIframeLoad = () => {\r\n\t\twikiIframe = document.getElementById(\"wikiFrame\");\r\n\r\n\t\t// 在 iframe 内部添加事件监听器（跨域问题需要注意）\r\n\t\twikiIframe.contentWindow.document.addEventListener(\"mouseup\", () => {\r\n\t\t\tconst selection = wikiIframe.contentWindow.getSelection();\r\n\t\t\tif (selection.toString()) {\r\n\t\t\t\tselectedText.value = selection.toString();\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t// 高亮选中的文字\r\n\tconst highlightSelectedText = () => {\r\n\t\tconst iframeDoc = wikiIframe.contentWindow.document;\r\n\t\tconst selection = iframeDoc.getSelection();\r\n\r\n\t\tif (selection.toString()) {\r\n\t\t\tconst range = selection.getRangeAt(0);\r\n\t\t\tconst span = iframeDoc.createElement(\"span\");\r\n\t\t\tspan.style.backgroundColor = \"yellow\"; // 设置高亮颜色\r\n\t\t\trange.surroundContents(span);\r\n\t\t}\r\n\t};\r\n\r\n\t// 提取选中的文字\r\n\tconst extractSelectedText = () => {\r\n\t\tif (selectedText.value) {\r\n\t\t\talert(`提取的文本: ${selectedText.value}`);\r\n\t\t} else {\r\n\t\t\talert(\"没有选中任何文本！\");\r\n\t\t}\r\n\t};\r\n</script>\r\n\r\n<style scoped>\r\n\t.container {\r\n\t\twidth: 100%;\r\n\t\tmax-width: 800px;\r\n\t\tmargin: 0 auto;\r\n\t\tpadding: 20px;\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t.text-container {\r\n\t\tmargin-top: 20px;\r\n\t}\r\n\r\n\tbutton {\r\n\t\tpadding: 10px 20px;\r\n\t\tmargin: 10px;\r\n\t\tbackground-color: #4caf50;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tborder-radius: 4px;\r\n\t\tcursor: pointer;\r\n\t\tfont-size: 16px;\r\n\t}\r\n\r\n\tbutton:hover {\r\n\t\tbackground-color: #45a049;\r\n\t}\r\n\r\n\t.extracted-text {\r\n\t\tmargin-top: 20px;\r\n\t\tpadding: 10px;\r\n\t\tbackground-color: #f1f1f1;\r\n\t\tborder-radius: 4px;\r\n\t\tborder: 1px solid #ccc;\r\n\t}\r\n</style>\r\n"],"mappings":"AAwBC,SAASA,GAAG,QAAQ,KAAK;;AAEzB;;;;;;;;;IACA,MAAMC,YAAY,GAAGD,GAAG,CAAC,EAAE,CAAC;IAE5B,IAAIE,UAAU;;IAEd;IACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;MAC1BD,UAAU,GAAGE,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC;;MAEjD;MACAH,UAAU,CAACI,aAAa,CAACF,QAAQ,CAACG,gBAAgB,CAAC,SAAS,EAAE,MAAM;QACnE,MAAMC,SAAS,GAAGN,UAAU,CAACI,aAAa,CAACG,YAAY,CAAC,CAAC;QACzD,IAAID,SAAS,CAACE,QAAQ,CAAC,CAAC,EAAE;UACzBT,YAAY,CAACU,KAAK,GAAGH,SAAS,CAACE,QAAQ,CAAC,CAAC;QAC1C;MACD,CAAC,CAAC;IACH,CAAC;;IAED;IACA,MAAME,qBAAqB,GAAGA,CAAA,KAAM;MACnC,MAAMC,SAAS,GAAGX,UAAU,CAACI,aAAa,CAACF,QAAQ;MACnD,MAAMI,SAAS,GAAGK,SAAS,CAACJ,YAAY,CAAC,CAAC;MAE1C,IAAID,SAAS,CAACE,QAAQ,CAAC,CAAC,EAAE;QACzB,MAAMI,KAAK,GAAGN,SAAS,CAACO,UAAU,CAAC,CAAC,CAAC;QACrC,MAAMC,IAAI,GAAGH,SAAS,CAACI,aAAa,CAAC,MAAM,CAAC;QAC5CD,IAAI,CAACE,KAAK,CAACC,eAAe,GAAG,QAAQ,CAAC,CAAC;QACvCL,KAAK,CAACM,gBAAgB,CAACJ,IAAI,CAAC;MAC7B;IACD,CAAC;;IAED;IACA,MAAMK,mBAAmB,GAAGA,CAAA,KAAM;MACjC,IAAIpB,YAAY,CAACU,KAAK,EAAE;QACvBW,KAAK,CAAC,UAAUrB,YAAY,CAACU,KAAK,EAAE,CAAC;MACtC,CAAC,MAAM;QACNW,KAAK,CAAC,WAAW,CAAC;MACnB;IACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}