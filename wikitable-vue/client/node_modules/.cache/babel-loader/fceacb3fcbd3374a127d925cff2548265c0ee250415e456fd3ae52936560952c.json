{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-5423a9e6\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = [\"id\"];\nconst _hoisted_2 = [\"innerHTML\"];\nconst _hoisted_3 = [\"innerHTML\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass(['div0', $props.selectContentClass]),\n    id: $props.divId\n  }, [_createElementVNode(\"h1\", null, _toDisplayString($props.pageTitle), 1 /* TEXT */), _createCommentVNode(\" 文章内容 \"), _createElementVNode(\"div\", {\n    class: \"showHtml wikipedia-content\",\n    innerHTML: $setup.pageHtml,\n    onMouseup: $setup.handleSelection\n  }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_2), _createCommentVNode(\" 选中内容弹出框 \"), $setup.showPopup ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: \"text-popup\",\n    onClick: $setup.closePopup\n  }, [_createElementVNode(\"div\", {\n    innerHTML: $setup.selectedHtml\n  }, null, 8 /* PROPS */, _hoisted_3)])) : _createCommentVNode(\"v-if\", true)], 10 /* CLASS, PROPS */, _hoisted_1);\n}","map":{"version":3,"names":["_createElementBlock","class","_normalizeClass","$props","selectContentClass","id","divId","_createElementVNode","_toDisplayString","pageTitle","_createCommentVNode","innerHTML","$setup","pageHtml","onMouseup","handleSelection","_hoisted_2","showPopup","key","onClick","closePopup","selectedHtml","_hoisted_3","_hoisted_1"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\BaseWikipedia.vue"],"sourcesContent":["<template>\r\n\t<div :class=\"['div0', selectContentClass]\" :id=\"divId\">\r\n\t\t<h1>{{ pageTitle }}</h1>\r\n\r\n\t\t<!-- 文章内容 -->\r\n\t\t<div\r\n\t\t\tclass=\"showHtml wikipedia-content\"\r\n\t\t\tv-html=\"pageHtml\"\r\n\t\t\t@mouseup=\"handleSelection\"></div>\r\n\r\n\t\t<!-- 选中内容弹出框 -->\r\n\t\t<div v-if=\"showPopup\" class=\"text-popup\" @click=\"closePopup\">\r\n\t\t\t<div v-html=\"selectedHtml\"></div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted } from \"vue\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\timport HighlightText from \"@/js/highlight\"; // 高亮工具\r\n\r\n\tconst props = defineProps({\r\n\t\tpageTitle: String,\r\n\t\tdivId: String,\r\n\t\tselectContentClass: String\r\n\t});\r\n\r\n\tconst pageHtml = ref(\"\"); // 文章 HTML 内容\r\n\tconst selectedHtml = ref(\"\"); // 选中的 HTML 代码\r\n\tconst showPopup = ref(false); // 是否显示弹出框\r\n\r\n\t// **处理选中内容**\r\n\tconst handleSelection = () => {\r\n\t\tconst selection = window.getSelection();\r\n\t\tif (!selection.rangeCount) return;\r\n\r\n\t\tconst range = selection.getRangeAt(0);\r\n\t\tconst clonedRange = range.cloneContents();\r\n\r\n\t\t// **判断是否包含表格**\r\n\t\tconst containsTable = clonedRange.querySelector(\"table\") !== null;\r\n\r\n\t\t// **保留完整表格结构**\r\n\t\tconst div = document.createElement(\"div\");\r\n\t\tdiv.appendChild(clonedRange);\r\n\r\n\t\t// **如果选中的是表格，保留原始 HTML 结构**\r\n\t\tconst selectedContent = containsTable\r\n\t\t\t? div.innerHTML\r\n\t\t\t: selection.toString().trim();\r\n\r\n\t\t// 只有当选中内容不为空时才显示弹出框\r\n\t\tif (selectedContent) {\r\n\t\t\tselectedHtml.value = selectedContent;\r\n\t\t\tshowPopup.value = true;\r\n\r\n\t\t\t// 触发事件总线\r\n\t\t\tbus.emit(`${props.divId}Event`, { content: selectedHtml.value });\r\n\r\n\t\t\t// 触发高亮\r\n\t\t\tHighlightText.highlightSelection();\r\n\t\t}\r\n\t};\r\n\r\n\t// **关闭弹出框**\r\n\tconst closePopup = () => {\r\n\t\tshowPopup.value = false;\r\n\t\tselectedHtml.value = \"\";\r\n\t};\r\n\r\n\t// **组件挂载**\r\n\tonMounted(() => {\r\n\t\tdocument\r\n\t\t\t.querySelector(`#${props.divId}`)\r\n\t\t\t.addEventListener(\"mouseup\", handleSelection);\r\n\t});\r\n\r\n\t// **组件卸载**\r\n\tonUnmounted(() => {\r\n\t\tdocument\r\n\t\t\t.querySelector(`#${props.divId}`)\r\n\t\t\t.removeEventListener(\"mouseup\", handleSelection);\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t/* 弹出框 */\r\n\t.text-popup {\r\n\t\tposition: fixed;\r\n\t\ttop: 50%;\r\n\t\tleft: 50%;\r\n\t\ttransform: translate(-50%, -50%);\r\n\t\tbackground: white;\r\n\t\tpadding: 20px;\r\n\t\tbox-shadow: 0 10px 30px rgba(0, 0, 0, 0.4);\r\n\t\tborder-radius: 8px;\r\n\t\tz-index: 100;\r\n\t\tmax-width: 80%;\r\n\t\tmax-height: 80%;\r\n\t\toverflow: auto;\r\n\t}\r\n\r\n\t/* **选中的表格** */\r\n\t.text-popup table {\r\n\t\tborder-collapse: collapse;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t.text-popup th,\r\n\t.text-popup td {\r\n\t\tborder: 1px solid #ddd;\r\n\t\tpadding: 8px;\r\n\t\ttext-align: left;\r\n\t}\r\n</style>\r\n"],"mappings":";;mBAAA;mBAAA;mBAAA;;uBACCA,mBAAA,CAaM;IAbAC,KAAK,EADZC,eAAA,UACuBC,MAAA,CAAAC,kBAAkB;IAAIC,EAAE,EAAEF,MAAA,CAAAG;MAC/CC,mBAAA,CAAwB,YAAAC,gBAAA,CAAjBL,MAAA,CAAAM,SAAS,kBAEhBC,mBAAA,UAAa,EACbH,mBAAA,CAGkC;IAFjCN,KAAK,EAAC,4BAA4B;IAClCU,SAAiB,EAATC,MAAA,CAAAC,QAAQ;IACfC,SAAO,EAAEF,MAAA,CAAAG;2CARbC,UAAA,GAUEN,mBAAA,aAAgB,EACLE,MAAA,CAAAK,SAAS,I,cAApBjB,mBAAA,CAEM;IAbRkB,GAAA;IAWwBjB,KAAK,EAAC,YAAY;IAAEkB,OAAK,EAAEP,MAAA,CAAAQ;MAChDb,mBAAA,CAAiC;IAA5BI,SAAqB,EAAbC,MAAA,CAAAS;EAAY,wBAZ5BC,UAAA,E,KAAAZ,mBAAA,e,yBAAAa,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}