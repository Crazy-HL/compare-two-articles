{"ast":null,"code":"import { ref, onMounted, nextTick } from \"vue\";\nexport default {\n  __name: 'WikipediaViewer',\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const pageTitle = ref(\"LeBron James\");\n    const loading = ref(true);\n    const error = ref(\"\");\n    const content = ref(null);\n\n    // 获取维基百科内容\n    const fetchWikipediaContent = async () => {\n      try {\n        const apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(pageTitle.value)}`;\n        const response = await fetch(apiUrl);\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch data\");\n        }\n        const html = await response.text();\n\n        // **等待 Vue 确保 content 绑定完成**\n        await nextTick();\n        console.log(\"Content Element:\", content.value); // 检查是否获取到 DOM\n\n        if (!content.value) {\n          throw new Error(\"Content container is still null.\");\n        }\n\n        // **插入 HTML 内容**\n        setTimeout(() => {\n          if (content.value) {\n            content.value.innerHTML = html;\n          } else {\n            console.error(\"content.value 仍然为空\");\n          }\n        }, 100);\n      } catch (err) {\n        error.value = \"Error fetching Wikipedia content: \" + err.message;\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // **确保 DOM 挂载完成后再调用 API**\n    onMounted(async () => {\n      await nextTick(); // 让 Vue 先完成渲染\n      fetchWikipediaContent();\n    });\n    const __returned__ = {\n      pageTitle,\n      loading,\n      error,\n      content,\n      fetchWikipediaContent,\n      ref,\n      onMounted,\n      nextTick\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","nextTick","pageTitle","loading","error","content","fetchWikipediaContent","apiUrl","encodeURIComponent","value","response","fetch","ok","Error","html","text","console","log","setTimeout","innerHTML","err","message"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/WikipediaViewer.vue"],"sourcesContent":["<template>\r\n\t<div>\r\n\t\t<h1>{{ pageTitle }}</h1>\r\n\t\t<div v-if=\"loading\">Loading...</div>\r\n\t\t<div v-else-if=\"error\" class=\"error\">{{ error }}</div>\r\n\t\t<div v-else ref=\"content\" class=\"wikipedia-content\"></div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, nextTick } from \"vue\";\r\n\r\n\tconst pageTitle = ref(\"LeBron James\");\r\n\tconst loading = ref(true);\r\n\tconst error = ref(\"\");\r\n\tconst content = ref(null);\r\n\r\n\t// 获取维基百科内容\r\n\tconst fetchWikipediaContent = async () => {\r\n\t\ttry {\r\n\t\t\tconst apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(\r\n\t\t\t\tpageTitle.value\r\n\t\t\t)}`;\r\n\t\t\tconst response = await fetch(apiUrl);\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error(\"Failed to fetch data\");\r\n\t\t\t}\r\n\t\t\tconst html = await response.text();\r\n\r\n\t\t\t// **等待 Vue 确保 content 绑定完成**\r\n\t\t\tawait nextTick();\r\n\r\n\t\t\tconsole.log(\"Content Element:\", content.value); // 检查是否获取到 DOM\r\n\r\n\t\t\tif (!content.value) {\r\n\t\t\t\tthrow new Error(\"Content container is still null.\");\r\n\t\t\t}\r\n\r\n\t\t\t// **插入 HTML 内容**\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tif (content.value) {\r\n\t\t\t\t\tcontent.value.innerHTML = html;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.error(\"content.value 仍然为空\");\r\n\t\t\t\t}\r\n\t\t\t}, 100);\r\n\t\t} catch (err) {\r\n\t\t\terror.value = \"Error fetching Wikipedia content: \" + err.message;\r\n\t\t} finally {\r\n\t\t\tloading.value = false;\r\n\t\t}\r\n\t};\r\n\r\n\t// **确保 DOM 挂载完成后再调用 API**\r\n\tonMounted(async () => {\r\n\t\tawait nextTick(); // 让 Vue 先完成渲染\r\n\t\tfetchWikipediaContent();\r\n\t});\r\n</script>\r\n\r\n<style>\r\n\t.wikipedia-content {\r\n\t\tmax-width: 800px;\r\n\t\tmargin: 0 auto;\r\n\t\tpadding: 20px;\r\n\t\tfont-family: sans-serif;\r\n\t}\r\n\t.error {\r\n\t\tcolor: red;\r\n\t}\r\n</style>\r\n"],"mappings":"AAUC,SAASA,GAAG,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,KAAK;;;;;;;;IAE9C,MAAMC,SAAS,GAAGH,GAAG,CAAC,cAAc,CAAC;IACrC,MAAMI,OAAO,GAAGJ,GAAG,CAAC,IAAI,CAAC;IACzB,MAAMK,KAAK,GAAGL,GAAG,CAAC,EAAE,CAAC;IACrB,MAAMM,OAAO,GAAGN,GAAG,CAAC,IAAI,CAAC;;IAEzB;IACA,MAAMO,qBAAqB,GAAG,MAAAA,CAAA,KAAY;MACzC,IAAI;QACH,MAAMC,MAAM,GAAG,kDAAkDC,kBAAkB,CAClFN,SAAS,CAACO,KACX,CAAC,EAAE;QACH,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,MAAM,CAAC;QACpC,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;UACjB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;QACxC;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;;QAElC;QACA,MAAMd,QAAQ,CAAC,CAAC;QAEhBe,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEZ,OAAO,CAACI,KAAK,CAAC,CAAC,CAAC;;QAEhD,IAAI,CAACJ,OAAO,CAACI,KAAK,EAAE;UACnB,MAAM,IAAII,KAAK,CAAC,kCAAkC,CAAC;QACpD;;QAEA;QACAK,UAAU,CAAC,MAAM;UAChB,IAAIb,OAAO,CAACI,KAAK,EAAE;YAClBJ,OAAO,CAACI,KAAK,CAACU,SAAS,GAAGL,IAAI;UAC/B,CAAC,MAAM;YACNE,OAAO,CAACZ,KAAK,CAAC,oBAAoB,CAAC;UACpC;QACD,CAAC,EAAE,GAAG,CAAC;MACR,CAAC,CAAC,OAAOgB,GAAG,EAAE;QACbhB,KAAK,CAACK,KAAK,GAAG,oCAAoC,GAAGW,GAAG,CAACC,OAAO;MACjE,CAAC,SAAS;QACTlB,OAAO,CAACM,KAAK,GAAG,KAAK;MACtB;IACD,CAAC;;IAED;IACAT,SAAS,CAAC,YAAY;MACrB,MAAMC,QAAQ,CAAC,CAAC,CAAC,CAAC;MAClBK,qBAAqB,CAAC,CAAC;IACxB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}