{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 1,\n  class: \"error\"\n};\nconst _hoisted_3 = {\n  key: 2,\n  ref: \"content\",\n  class: \"wikipedia-content\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"h1\", null, _toDisplayString($setup.pageTitle), 1 /* TEXT */), $setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, \"Loading...\")) : $setup.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _toDisplayString($setup.error), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, null, 512 /* NEED_PATCH */))]);\n}","map":{"version":3,"names":["key","class","ref","_createElementBlock","_createElementVNode","_toDisplayString","$setup","pageTitle","loading","_hoisted_1","error","_hoisted_2","_hoisted_3"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\WikipediaViewer.vue"],"sourcesContent":["<template>\r\n\t<div>\r\n\t\t<h1>{{ pageTitle }}</h1>\r\n\t\t<div v-if=\"loading\">Loading...</div>\r\n\t\t<div v-else-if=\"error\" class=\"error\">{{ error }}</div>\r\n\t\t<div v-else ref=\"content\" class=\"wikipedia-content\"></div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted } from \"vue\";\r\n\timport { PageHTML } from \"wikimedia-page-library\"; // 导入 PageHTML\r\n\r\n\tconst pageTitle = ref(\"LeBron James\"); // 页面标题\r\n\tconst loading = ref(true); // 加载状态\r\n\tconst error = ref(\"\"); // 错误信息\r\n\r\n\t// 获取维基百科内容\r\n\tconst fetchWikipediaContent = async () => {\r\n\t\ttry {\r\n\t\t\tconst apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(\r\n\t\t\t\tpageTitle.value\r\n\t\t\t)}`;\r\n\t\t\tconst response = await fetch(apiUrl);\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error(\"Failed to fetch data\");\r\n\t\t\t}\r\n\t\t\tconst html = await response.text();\r\n\r\n\t\t\t// 使用 PageHTML 渲染内容\r\n\t\t\tconst contentElement = document.querySelector(\".wikipedia-content\");\r\n\t\t\tPageHTML.render(html, contentElement); // 假设 PageHTML 是一个对象，包含 render 方法\r\n\t\t} catch (err) {\r\n\t\t\terror.value = \"Error fetching Wikipedia content: \" + err.message;\r\n\t\t} finally {\r\n\t\t\tloading.value = false; // 结束加载状态\r\n\t\t}\r\n\t};\r\n\r\n\t// 在组件挂载时调用 API\r\n\tonMounted(() => {\r\n\t\tfetchWikipediaContent();\r\n\t});\r\n</script>\r\n\r\n<style>\r\n\t.wikipedia-content {\r\n\t\tmax-width: 800px;\r\n\t\tmargin: 0 auto;\r\n\t\tpadding: 20px;\r\n\t\tfont-family: sans-serif;\r\n\t}\r\n\t.error {\r\n\t\tcolor: red;\r\n\t}\r\n</style>\r\n"],"mappings":";;EAAAA,GAAA;AAAA;;EAAAA,GAAA;EAIyBC,KAAK,EAAC;;;EAJ/BD,GAAA;EAKcE,GAAG,EAAC,SAAS;EAACD,KAAK,EAAC;;;uBAJjCE,mBAAA,CAKM,cAJLC,mBAAA,CAAwB,YAAAC,gBAAA,CAAjBC,MAAA,CAAAC,SAAS,kBACLD,MAAA,CAAAE,OAAO,I,cAAlBL,mBAAA,CAAoC,OAHtCM,UAAA,EAGsB,YAAU,KACdH,MAAA,CAAAI,KAAK,I,cAArBP,mBAAA,CAAsD,OAAtDQ,UAAsD,EAAAN,gBAAA,CAAdC,MAAA,CAAAI,KAAK,qB,cAC7CP,mBAAA,CAA0D,OAA1DS,UAA0D,+B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}