{"ast":null,"code":"import axios from \"axios\";\nimport * as d3 from \"d3\";\nexport default {\n  data() {\n    return {\n      text: \"\",\n      jsonData: null\n    };\n  },\n  methods: {\n    async processText(text) {\n      const response = await fetch(\"http://localhost:8888/process_text\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          text\n        })\n      });\n      const result = await response.json();\n      console.log(result);\n    }\n    // \tasync processText() {\n    // \t\ttry {\n    // \t\t\tconst response = await axios.post(\"http://localhost:8888/recommend_visualization\", {\n    // \t\t\t\ttext: this.text\n    // \t\t\t});\n    // \t\t\tthis.jsonData = JSON.parse(response.data.json_data);\n    // \t\t\tthis.renderChart();\n    // \t\t} catch (error) {\n    // \t\t\tconsole.error(\"Error processing text:\", error);\n    // \t\t}\n    // \t},\n    // \trenderChart() {\n    // \t\tconst chartType = this.jsonData.type;\n    // \t\tconst data = this.jsonData.data;\n\n    // \t\td3.select(this.$refs.chart).html(\"\"); // 清空图表\n\n    // \t\tif (chartType === \"trend\") {\n    // \t\t\tthis.renderLineChart(data);\n    // \t\t} else if (chartType === \"proportion\") {\n    // \t\t\tthis.renderPieChart(data);\n    // \t\t} else {\n    // \t\t\tthis.renderBarChart(data);\n    // \t\t}\n    // \t},\n    // \trenderLineChart(data) {\n    // \t\tconst margin = { top: 20, right: 30, bottom: 30, left: 40 };\n    // \t\tconst width = 600 - margin.left - margin.right;\n    // \t\tconst height = 400 - margin.top - margin.bottom;\n\n    // \t\tconst svg = d3\n    // \t\t\t.select(this.$refs.chart)\n    // \t\t\t.append(\"svg\")\n    // \t\t\t.attr(\"width\", width + margin.left + margin.right)\n    // \t\t\t.attr(\"height\", height + margin.top + margin.bottom)\n    // \t\t\t.append(\"g\")\n    // \t\t\t.attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // \t\tconst x = d3\n    // \t\t\t.scaleLinear()\n    // \t\t\t.domain([0, data.length - 1])\n    // \t\t\t.range([0, width]);\n    // \t\tconst y = d3\n    // \t\t\t.scaleLinear()\n    // \t\t\t.domain([0, d3.max(data)])\n    // \t\t\t.range([height, 0]);\n\n    // \t\tsvg\n    // \t\t\t.append(\"path\")\n    // \t\t\t.datum(data)\n    // \t\t\t.attr(\"fill\", \"none\")\n    // \t\t\t.attr(\"stroke\", \"steelblue\")\n    // \t\t\t.attr(\"stroke-width\", 1.5)\n    // \t\t\t.attr(\n    // \t\t\t\t\"d\",\n    // \t\t\t\td3\n    // \t\t\t\t\t.line()\n    // \t\t\t\t\t.x((d, i) => x(i))\n    // \t\t\t\t\t.y(d => y(d))\n    // \t\t\t);\n    // \t},\n    // \trenderPieChart(data) {\n    // \t\tconst width = 400;\n    // \t\tconst height = 400;\n    // \t\tconst radius = Math.min(width, height) / 2;\n\n    // \t\tconst svg = d3\n    // \t\t\t.select(this.$refs.chart)\n    // \t\t\t.append(\"svg\")\n    // \t\t\t.attr(\"width\", width)\n    // \t\t\t.attr(\"height\", height)\n    // \t\t\t.append(\"g\")\n    // \t\t\t.attr(\"transform\", `translate(${width / 2},${height / 2})`);\n\n    // \t\tconst color = d3.scaleOrdinal(d3.schemeCategory10);\n\n    // \t\tconst pie = d3.pie().value(d => d.value);\n    // \t\tconst arc = d3.arc().innerRadius(0).outerRadius(radius);\n\n    // \t\tconst arcs = svg\n    // \t\t\t.selectAll(\"arc\")\n    // \t\t\t.data(pie(data))\n    // \t\t\t.enter()\n    // \t\t\t.append(\"g\")\n    // \t\t\t.attr(\"class\", \"arc\");\n\n    // \t\tarcs\n    // \t\t\t.append(\"path\")\n    // \t\t\t.attr(\"d\", arc)\n    // \t\t\t.attr(\"fill\", (d, i) => color(i));\n\n    // \t\tarcs\n    // \t\t\t.append(\"text\")\n    // \t\t\t.attr(\"transform\", d => `translate(${arc.centroid(d)})`)\n    // \t\t\t.attr(\"text-anchor\", \"middle\")\n    // \t\t\t.text(d => d.data.category);\n    // \t},\n    // \trenderBarChart(data) {\n    // \t\tconst margin = { top: 20, right: 30, bottom: 30, left: 40 };\n    // \t\tconst width = 600 - margin.left - margin.right;\n    // \t\tconst height = 400 - margin.top - margin.bottom;\n\n    // \t\tconst svg = d3\n    // \t\t\t.select(this.$refs.chart)\n    // \t\t\t.append(\"svg\")\n    // \t\t\t.attr(\"width\", width + margin.left + margin.right)\n    // \t\t\t.attr(\"height\", height + margin.top + margin.bottom)\n    // \t\t\t.append(\"g\")\n    // \t\t\t.attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // \t\tconst x = d3\n    // \t\t\t.scaleBand()\n    // \t\t\t.domain(data.map(d => d.category))\n    // \t\t\t.range([0, width])\n    // \t\t\t.padding(0.1);\n    // \t\tconst y = d3\n    // \t\t\t.scaleLinear()\n    // \t\t\t.domain([0, d3.max(data, d => d.value)])\n    // \t\t\t.range([height, 0]);\n\n    // \t\tsvg\n    // \t\t\t.selectAll(\"rect\")\n    // \t\t\t.data(data)\n    // \t\t\t.enter()\n    // \t\t\t.append(\"rect\")\n    // \t\t\t.attr(\"x\", d => x(d.category))\n    // \t\t\t.attr(\"y\", d => y(d.value))\n    // \t\t\t.attr(\"width\", x.bandwidth())\n    // \t\t\t.attr(\"height\", d => height - y(d.value))\n    // \t\t\t.attr(\"fill\", \"steelblue\");\n    // \t}\n  }\n};","map":{"version":3,"names":["axios","d3","data","text","jsonData","methods","processText","response","fetch","method","headers","body","JSON","stringify","result","json","console","log"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\Vis2.vue"],"sourcesContent":["<template>\r\n\t<div id=\"app\">\r\n\t\t<h1>数据可视化工具</h1>\r\n\t\t<textarea v-model=\"text\" placeholder=\"请输入文章内容\"></textarea>\r\n\t\t<button @click=\"processText\">提交并可视化</button>\r\n\r\n\t\t<div v-if=\"jsonData\">\r\n\t\t\t<h2>可视化结果</h2>\r\n\t\t\t<div ref=\"chart\"></div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\n\timport axios from \"axios\";\r\n\timport * as d3 from \"d3\";\r\n\r\n\texport default {\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t\ttext: \"\",\r\n\t\t\t\tjsonData: null\r\n\t\t\t};\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\tasync processText(text) {\r\n\t\t\t\tconst response = await fetch(\"http://localhost:8888/process_text\", {\r\n\t\t\t\t\tmethod: \"POST\",\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbody: JSON.stringify({ text })\r\n\t\t\t\t});\r\n\t\t\t\tconst result = await response.json();\r\n\t\t\t\tconsole.log(result);\r\n\t\t\t}\r\n\t\t\t// \tasync processText() {\r\n\t\t\t// \t\ttry {\r\n\t\t\t// \t\t\tconst response = await axios.post(\"http://localhost:8888/recommend_visualization\", {\r\n\t\t\t// \t\t\t\ttext: this.text\r\n\t\t\t// \t\t\t});\r\n\t\t\t// \t\t\tthis.jsonData = JSON.parse(response.data.json_data);\r\n\t\t\t// \t\t\tthis.renderChart();\r\n\t\t\t// \t\t} catch (error) {\r\n\t\t\t// \t\t\tconsole.error(\"Error processing text:\", error);\r\n\t\t\t// \t\t}\r\n\t\t\t// \t},\r\n\t\t\t// \trenderChart() {\r\n\t\t\t// \t\tconst chartType = this.jsonData.type;\r\n\t\t\t// \t\tconst data = this.jsonData.data;\r\n\r\n\t\t\t// \t\td3.select(this.$refs.chart).html(\"\"); // 清空图表\r\n\r\n\t\t\t// \t\tif (chartType === \"trend\") {\r\n\t\t\t// \t\t\tthis.renderLineChart(data);\r\n\t\t\t// \t\t} else if (chartType === \"proportion\") {\r\n\t\t\t// \t\t\tthis.renderPieChart(data);\r\n\t\t\t// \t\t} else {\r\n\t\t\t// \t\t\tthis.renderBarChart(data);\r\n\t\t\t// \t\t}\r\n\t\t\t// \t},\r\n\t\t\t// \trenderLineChart(data) {\r\n\t\t\t// \t\tconst margin = { top: 20, right: 30, bottom: 30, left: 40 };\r\n\t\t\t// \t\tconst width = 600 - margin.left - margin.right;\r\n\t\t\t// \t\tconst height = 400 - margin.top - margin.bottom;\r\n\r\n\t\t\t// \t\tconst svg = d3\r\n\t\t\t// \t\t\t.select(this.$refs.chart)\r\n\t\t\t// \t\t\t.append(\"svg\")\r\n\t\t\t// \t\t\t.attr(\"width\", width + margin.left + margin.right)\r\n\t\t\t// \t\t\t.attr(\"height\", height + margin.top + margin.bottom)\r\n\t\t\t// \t\t\t.append(\"g\")\r\n\t\t\t// \t\t\t.attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n\t\t\t// \t\tconst x = d3\r\n\t\t\t// \t\t\t.scaleLinear()\r\n\t\t\t// \t\t\t.domain([0, data.length - 1])\r\n\t\t\t// \t\t\t.range([0, width]);\r\n\t\t\t// \t\tconst y = d3\r\n\t\t\t// \t\t\t.scaleLinear()\r\n\t\t\t// \t\t\t.domain([0, d3.max(data)])\r\n\t\t\t// \t\t\t.range([height, 0]);\r\n\r\n\t\t\t// \t\tsvg\r\n\t\t\t// \t\t\t.append(\"path\")\r\n\t\t\t// \t\t\t.datum(data)\r\n\t\t\t// \t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t// \t\t\t.attr(\"stroke\", \"steelblue\")\r\n\t\t\t// \t\t\t.attr(\"stroke-width\", 1.5)\r\n\t\t\t// \t\t\t.attr(\r\n\t\t\t// \t\t\t\t\"d\",\r\n\t\t\t// \t\t\t\td3\r\n\t\t\t// \t\t\t\t\t.line()\r\n\t\t\t// \t\t\t\t\t.x((d, i) => x(i))\r\n\t\t\t// \t\t\t\t\t.y(d => y(d))\r\n\t\t\t// \t\t\t);\r\n\t\t\t// \t},\r\n\t\t\t// \trenderPieChart(data) {\r\n\t\t\t// \t\tconst width = 400;\r\n\t\t\t// \t\tconst height = 400;\r\n\t\t\t// \t\tconst radius = Math.min(width, height) / 2;\r\n\r\n\t\t\t// \t\tconst svg = d3\r\n\t\t\t// \t\t\t.select(this.$refs.chart)\r\n\t\t\t// \t\t\t.append(\"svg\")\r\n\t\t\t// \t\t\t.attr(\"width\", width)\r\n\t\t\t// \t\t\t.attr(\"height\", height)\r\n\t\t\t// \t\t\t.append(\"g\")\r\n\t\t\t// \t\t\t.attr(\"transform\", `translate(${width / 2},${height / 2})`);\r\n\r\n\t\t\t// \t\tconst color = d3.scaleOrdinal(d3.schemeCategory10);\r\n\r\n\t\t\t// \t\tconst pie = d3.pie().value(d => d.value);\r\n\t\t\t// \t\tconst arc = d3.arc().innerRadius(0).outerRadius(radius);\r\n\r\n\t\t\t// \t\tconst arcs = svg\r\n\t\t\t// \t\t\t.selectAll(\"arc\")\r\n\t\t\t// \t\t\t.data(pie(data))\r\n\t\t\t// \t\t\t.enter()\r\n\t\t\t// \t\t\t.append(\"g\")\r\n\t\t\t// \t\t\t.attr(\"class\", \"arc\");\r\n\r\n\t\t\t// \t\tarcs\r\n\t\t\t// \t\t\t.append(\"path\")\r\n\t\t\t// \t\t\t.attr(\"d\", arc)\r\n\t\t\t// \t\t\t.attr(\"fill\", (d, i) => color(i));\r\n\r\n\t\t\t// \t\tarcs\r\n\t\t\t// \t\t\t.append(\"text\")\r\n\t\t\t// \t\t\t.attr(\"transform\", d => `translate(${arc.centroid(d)})`)\r\n\t\t\t// \t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t// \t\t\t.text(d => d.data.category);\r\n\t\t\t// \t},\r\n\t\t\t// \trenderBarChart(data) {\r\n\t\t\t// \t\tconst margin = { top: 20, right: 30, bottom: 30, left: 40 };\r\n\t\t\t// \t\tconst width = 600 - margin.left - margin.right;\r\n\t\t\t// \t\tconst height = 400 - margin.top - margin.bottom;\r\n\r\n\t\t\t// \t\tconst svg = d3\r\n\t\t\t// \t\t\t.select(this.$refs.chart)\r\n\t\t\t// \t\t\t.append(\"svg\")\r\n\t\t\t// \t\t\t.attr(\"width\", width + margin.left + margin.right)\r\n\t\t\t// \t\t\t.attr(\"height\", height + margin.top + margin.bottom)\r\n\t\t\t// \t\t\t.append(\"g\")\r\n\t\t\t// \t\t\t.attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n\t\t\t// \t\tconst x = d3\r\n\t\t\t// \t\t\t.scaleBand()\r\n\t\t\t// \t\t\t.domain(data.map(d => d.category))\r\n\t\t\t// \t\t\t.range([0, width])\r\n\t\t\t// \t\t\t.padding(0.1);\r\n\t\t\t// \t\tconst y = d3\r\n\t\t\t// \t\t\t.scaleLinear()\r\n\t\t\t// \t\t\t.domain([0, d3.max(data, d => d.value)])\r\n\t\t\t// \t\t\t.range([height, 0]);\r\n\r\n\t\t\t// \t\tsvg\r\n\t\t\t// \t\t\t.selectAll(\"rect\")\r\n\t\t\t// \t\t\t.data(data)\r\n\t\t\t// \t\t\t.enter()\r\n\t\t\t// \t\t\t.append(\"rect\")\r\n\t\t\t// \t\t\t.attr(\"x\", d => x(d.category))\r\n\t\t\t// \t\t\t.attr(\"y\", d => y(d.value))\r\n\t\t\t// \t\t\t.attr(\"width\", x.bandwidth())\r\n\t\t\t// \t\t\t.attr(\"height\", d => height - y(d.value))\r\n\t\t\t// \t\t\t.attr(\"fill\", \"steelblue\");\r\n\t\t\t// \t}\r\n\t\t}\r\n\t};\r\n</script>\r\n\r\n<style>\r\n\t#app {\r\n\t\tfont-family: Avenir, Helvetica, Arial, sans-serif;\r\n\t\ttext-align: center;\r\n\t\tmargin-top: 60px;\r\n\t}\r\n\r\n\ttextarea {\r\n\t\twidth: 80%;\r\n\t\theight: 150px;\r\n\t\tmargin-bottom: 20px;\r\n\t}\r\n\r\n\tbutton {\r\n\t\tpadding: 10px 20px;\r\n\t\tfont-size: 16px;\r\n\t}\r\n</style>\r\n"],"mappings":"AAcC,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAO,KAAKC,EAAC,MAAO,IAAI;AAExB,eAAe;EACdC,IAAIA,CAAA,EAAG;IACN,OAAO;MACNC,IAAI,EAAE,EAAE;MACRC,QAAQ,EAAE;IACX,CAAC;EACF,CAAC;EACDC,OAAO,EAAE;IACR,MAAMC,WAAWA,CAACH,IAAI,EAAE;MACvB,MAAMI,QAAO,GAAI,MAAMC,KAAK,CAAC,oCAAoC,EAAE;QAClEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACR,cAAc,EAAE;QACjB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEV;QAAK,CAAC;MAC9B,CAAC,CAAC;MACF,MAAMW,MAAK,GAAI,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACpCC,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;IACpB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;;IAEA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACD;AACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}