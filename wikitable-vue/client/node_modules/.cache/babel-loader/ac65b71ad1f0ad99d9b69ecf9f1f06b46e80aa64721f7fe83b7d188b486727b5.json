{"ast":null,"code":"/**\r\n * 维基百科Infobox解析器 - 精简版\r\n * 专注于提取结构化数据和数值转换\r\n */\nexport function parseInfoboxForComparison(infoboxElement) {\n  if (!infoboxElement) return null;\n  const result = {\n    title: extractTitle(infoboxElement),\n    type: detectInfoboxType(infoboxElement),\n    data: {\n      sections: {}\n    } // 确保有data.sections结构\n  };\n  let currentSection = \"基本信息\";\n  const rows = infoboxElement.querySelectorAll('tr');\n  rows.forEach(row => {\n    // 处理section标题行\n    if (row.querySelector('th[colspan=\"2\"]')) {\n      currentSection = cleanText(row.textContent) || currentSection;\n      result.data.sections[currentSection] = {};\n      return;\n    }\n\n    // 处理普通数据行\n    const th = row.querySelector('th');\n    const td = row.querySelector('td');\n    if (!th || !td) return;\n    const key = cleanFieldName(th.textContent);\n    const value = extractValueFromText(cleanText(td.textContent));\n    if (key && value !== null) {\n      result.data.sections[currentSection][key] = value;\n    }\n  });\n  return result;\n}\n\n/**\r\n * 从文本中提取规范化值\r\n */\nfunction extractValueFromText(text) {\n  // 1. 处理百分比 (6.8%)\n  const percentMatch = text.match(/(\\d+\\.?\\d*)%/);\n  if (percentMatch) return parseFloat(percentMatch[1]);\n\n  // 2. 处理货币值 ($4.19 trillion, ¥429,501)\n  const currencyMatch = text.match(/(\\$|¥|€|£)?\\s*([\\d,\\.]+)\\s*(万|亿|万亿|trillion|billion|million)?/i);\n  if (currencyMatch) {\n    let value = parseFloat(currencyMatch[2].replace(/,/g, ''));\n\n    // 处理中文单位\n    if (currencyMatch[3] === '万') value *= 1e4;\n    if (currencyMatch[3] === '亿') value *= 1e8;\n    if (currencyMatch[3] === '万亿') value *= 1e12;\n\n    // 处理英文单位\n    const unit = currencyMatch[3]?.toLowerCase();\n    if (unit === 'million') value *= 1e6;\n    if (unit === 'billion') value *= 1e9;\n    if (unit === 'trillion') value *= 1e12;\n    return value;\n  }\n\n  // 3. 处理纯数字 (123,456.78)\n  const numberMatch = text.match(/^[\\d,\\.]+$/);\n  if (numberMatch) return parseFloat(text.replace(/,/g, ''));\n\n  // 4. 默认返回文本\n  return text;\n}\n\n/**\r\n * 提取标题\r\n */\nfunction extractTitle(element) {\n  const sources = [() => element.querySelector('caption')?.textContent, () => element.querySelector('.infobox-title')?.textContent, () => element.querySelector('th[colspan=\"2\"]')?.textContent];\n  for (const source of sources) {\n    const title = cleanText(source());\n    if (title) return title;\n  }\n  return \"无标题\";\n}\n\n/**\r\n * 检测Infobox类型\r\n */\nfunction detectInfoboxType(element) {\n  const classText = `${element.className} ${element.textContent}`.toLowerCase();\n  if (/country|nation|state|国家/.test(classText)) return \"国家\";\n  if (/economy|经济/.test(classText)) return \"经济\";\n  return \"其他\";\n}\n\n/**\r\n * 清理字段名\r\n */\nfunction cleanFieldName(text) {\n  return cleanText(text).replace(/[:：]$/, '').replace(/\\s+/g, ' ').trim();\n}\n\n/**\r\n * 清理文本\r\n */\nfunction cleanText(text) {\n  return (text || \"\").replace(/\\[\\d+\\]/g, '') // 去除引用标记[1]\n  .replace(/\\s+/g, ' ') // 合并空格\n  .replace(/[[\\]]/g, '') // 去除方括号\n  .trim();\n}","map":{"version":3,"names":["parseInfoboxForComparison","infoboxElement","result","title","extractTitle","type","detectInfoboxType","data","sections","currentSection","rows","querySelectorAll","forEach","row","querySelector","cleanText","textContent","th","td","key","cleanFieldName","value","extractValueFromText","text","percentMatch","match","parseFloat","currencyMatch","replace","unit","toLowerCase","numberMatch","element","sources","source","classText","className","test","trim"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/js/wikiInfoboxParser.js"],"sourcesContent":["/**\r\n * 维基百科Infobox解析器 - 精简版\r\n * 专注于提取结构化数据和数值转换\r\n */\r\nexport function parseInfoboxForComparison(infoboxElement) {\r\n    if (!infoboxElement) return null;\r\n\r\n    const result = {\r\n        title: extractTitle(infoboxElement),\r\n        type: detectInfoboxType(infoboxElement),\r\n        data: { sections: {} } // 确保有data.sections结构\r\n    };\r\n\r\n    let currentSection = \"基本信息\";\r\n    const rows = infoboxElement.querySelectorAll('tr');\r\n\r\n    rows.forEach(row => {\r\n        // 处理section标题行\r\n        if (row.querySelector('th[colspan=\"2\"]')) {\r\n            currentSection = cleanText(row.textContent) || currentSection;\r\n            result.data.sections[currentSection] = {};\r\n            return;\r\n        }\r\n\r\n        // 处理普通数据行\r\n        const th = row.querySelector('th');\r\n        const td = row.querySelector('td');\r\n        if (!th || !td) return;\r\n\r\n        const key = cleanFieldName(th.textContent);\r\n        const value = extractValueFromText(cleanText(td.textContent));\r\n\r\n        if (key && value !== null) {\r\n            result.data.sections[currentSection][key] = value;\r\n        }\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * 从文本中提取规范化值\r\n */\r\nfunction extractValueFromText(text) {\r\n    // 1. 处理百分比 (6.8%)\r\n    const percentMatch = text.match(/(\\d+\\.?\\d*)%/);\r\n    if (percentMatch) return parseFloat(percentMatch[1]);\r\n\r\n    // 2. 处理货币值 ($4.19 trillion, ¥429,501)\r\n    const currencyMatch = text.match(/(\\$|¥|€|£)?\\s*([\\d,\\.]+)\\s*(万|亿|万亿|trillion|billion|million)?/i);\r\n    if (currencyMatch) {\r\n        let value = parseFloat(currencyMatch[2].replace(/,/g, ''));\r\n        \r\n        // 处理中文单位\r\n        if (currencyMatch[3] === '万') value *= 1e4;\r\n        if (currencyMatch[3] === '亿') value *= 1e8;\r\n        if (currencyMatch[3] === '万亿') value *= 1e12;\r\n        \r\n        // 处理英文单位\r\n        const unit = currencyMatch[3]?.toLowerCase();\r\n        if (unit === 'million') value *= 1e6;\r\n        if (unit === 'billion') value *= 1e9;\r\n        if (unit === 'trillion') value *= 1e12;\r\n        \r\n        return value;\r\n    }\r\n\r\n    // 3. 处理纯数字 (123,456.78)\r\n    const numberMatch = text.match(/^[\\d,\\.]+$/);\r\n    if (numberMatch) return parseFloat(text.replace(/,/g, ''));\r\n\r\n    // 4. 默认返回文本\r\n    return text;\r\n}\r\n\r\n/**\r\n * 提取标题\r\n */\r\nfunction extractTitle(element) {\r\n    const sources = [\r\n        () => element.querySelector('caption')?.textContent,\r\n        () => element.querySelector('.infobox-title')?.textContent,\r\n        () => element.querySelector('th[colspan=\"2\"]')?.textContent\r\n    ];\r\n    \r\n    for (const source of sources) {\r\n        const title = cleanText(source());\r\n        if (title) return title;\r\n    }\r\n    return \"无标题\";\r\n}\r\n\r\n/**\r\n * 检测Infobox类型\r\n */\r\nfunction detectInfoboxType(element) {\r\n    const classText = `${element.className} ${element.textContent}`.toLowerCase();\r\n    if (/country|nation|state|国家/.test(classText)) return \"国家\";\r\n    if (/economy|经济/.test(classText)) return \"经济\";\r\n    return \"其他\";\r\n}\r\n\r\n/**\r\n * 清理字段名\r\n */\r\nfunction cleanFieldName(text) {\r\n    return cleanText(text)\r\n        .replace(/[:：]$/, '')\r\n        .replace(/\\s+/g, ' ')\r\n        .trim();\r\n}\r\n\r\n/**\r\n * 清理文本\r\n */\r\nfunction cleanText(text) {\r\n    return (text || \"\")\r\n        .replace(/\\[\\d+\\]/g, '')      // 去除引用标记[1]\r\n        .replace(/\\s+/g, ' ')         // 合并空格\r\n        .replace(/[[\\]]/g, '')        // 去除方括号\r\n        .trim();\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}