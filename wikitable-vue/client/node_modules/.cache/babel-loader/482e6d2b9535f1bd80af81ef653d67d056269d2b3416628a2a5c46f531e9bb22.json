{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed, watch } from \"vue\";\nimport SparklineChart from \"./SparklineChart.vue\";\nimport FullChart from \"./FullChart.vue\";\nimport { debounce } from \"lodash-es\";\nexport default {\n  __name: 'CompareTable',\n  props: {\n    div1RawData: String,\n    div3RawData: String\n  },\n  emits: [\"tables-ready\", \"processing-error\"],\n  setup(__props, _ref) {\n    let {\n      expose: __expose,\n      emit: __emit\n    } = _ref;\n    const props = __props;\n    const emit = __emit;\n\n    // 状态管理\n    const processingState = ref({\n      isProcessing: false,\n      error: null,\n      lastProcessed: null\n    });\n\n    // 原有ref定义保持不变\n    const containerRef = ref(null);\n    const chartMaxWidth = ref(250);\n    const chartMaxHeight = ref(80);\n    const leftChartColor = ref(\"#4a90e2\");\n    const rightChartColor = ref(\"#ef4444\");\n    const chartRefs1 = ref({});\n    const chartRefs2 = ref({});\n    const showFullChartModal = ref(false);\n    const currentAttribute = ref(\"\");\n    const currentChartData = ref({\n      type: \"line\",\n      data: []\n    });\n    const currentSide = ref(\"left\");\n\n    // 处理后的表格数据\n    const processedTable1 = ref({\n      title: \"表格1\",\n      rows: [],\n      columns: [],\n      timeSeriesData: {}\n    });\n    const processedTable2 = ref({\n      title: \"表格2\",\n      rows: [],\n      columns: [],\n      timeSeriesData: {}\n    });\n\n    // 公共属性计算\n    const commonAttributes = computed(() => {\n      const attrs1 = Object.keys(processedTable1.value.timeSeriesData || {});\n      const attrs2 = Object.keys(processedTable2.value.timeSeriesData || {});\n      return attrs1.filter(attr => attrs2.includes(attr));\n    });\n\n    // 增强版的表格解析方法\n    const parseTableToStandardJSON = async function (html) {\n      let defaultTitle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"未命名表格\";\n      const result = {\n        title: defaultTitle,\n        rows: [],\n        columns: [],\n        timeSeriesData: {}\n      };\n      try {\n        if (!html) return result;\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(html, \"text/html\");\n        const table = doc.querySelector(\"table\");\n        if (!table) return result;\n\n        // 提取表头\n        const headerCells = table.querySelector(\"tr\")?.children || [];\n        result.rows = Array.from(headerCells).map(cell => {\n          return cell.textContent.replace(/[\\n†*]/g, \"\").trim().replace(/\\s+/g, \" \");\n        });\n\n        // 检查是否有Year列\n        const yearColumnIndex = result.rows.findIndex(header => header.toLowerCase().includes(\"year\"));\n        const hasYearColumn = yearColumnIndex !== -1;\n\n        // 辅助函数：清理年份格式\n        const cleanYear = yearStr => {\n          if (!yearStr) return null;\n          let cleaned = yearStr.toString().replace(/[†*]/g, \"\").trim();\n          if (/^\\d{4}[\\u2013\\u2014-]\\d{2}$/.test(cleaned)) {\n            const startYear = cleaned.substring(0, 4);\n            return parseInt(startYear);\n          }\n          const yearMatch = cleaned.match(/\\d{4}/);\n          return yearMatch ? parseInt(yearMatch[0]) : null;\n        };\n\n        // 提取数据行\n        const dataRows = Array.from(table.querySelectorAll(\"tr:not(:first-child)\"));\n        dataRows.forEach(row => {\n          const cells = Array.from(row.children);\n          if (cells.length === 0) return;\n          const recordName = cells[0].textContent.trim();\n          const recordData = {};\n          result.rows.forEach((header, index) => {\n            if (index < cells.length) {\n              let value = cells[index].textContent.trim();\n              if (index === yearColumnIndex) {\n                value = cleanYear(value);\n              } else {\n                value = smartValueConversion(value);\n              }\n              recordData[header] = value;\n            }\n          });\n          if (!hasYearColumn || hasYearColumn && recordData.Year) {\n            result.columns.push({\n              name: recordName,\n              data: recordData\n            });\n            if (hasYearColumn && recordData.Year) {\n              const year = recordData.Year;\n              result.rows.forEach(header => {\n                if (header === \"Year\" || typeof recordData[header] !== \"number\") return;\n                if (!result.timeSeriesData[header]) {\n                  result.timeSeriesData[header] = [];\n                }\n                result.timeSeriesData[header].push({\n                  year: year,\n                  value: recordData[header],\n                  recordName: recordName\n                });\n              });\n            }\n          }\n        });\n\n        // 对每个属性的时间序列数据按年份排序\n        if (hasYearColumn) {\n          Object.keys(result.timeSeriesData).forEach(attr => {\n            result.timeSeriesData[attr].sort((a, b) => a.year - b.year);\n          });\n        }\n        return result;\n      } catch (error) {\n        console.error(\"表格解析错误:\", error);\n        processingState.value.error = `表格解析错误: ${error.message}`;\n        emit(\"processing-error\", processingState.value.error);\n        return result;\n      }\n    };\n\n    // 处理并验证表格数据\n    const processTables = async () => {\n      processingState.value = {\n        isProcessing: true,\n        error: null,\n        lastProcessed: null\n      };\n      try {\n        // 并行处理两个表格\n        const [table1, table2] = await Promise.all([parseTableToStandardJSON(props.div1RawData, \"表格1\"), parseTableToStandardJSON(props.div3RawData, \"表格2\")]);\n        processedTable1.value = table1;\n        processedTable2.value = table2;\n\n        // 验证数据\n        if (!table1.timeSeriesData || !table2.timeSeriesData) {\n          throw new Error(\"表格数据结构不完整\");\n        }\n        if (Object.keys(table1.timeSeriesData).length === 0 || Object.keys(table2.timeSeriesData).length === 0) {\n          throw new Error(\"表格数据内容为空\");\n        }\n\n        // 准备公共属性\n        const commonAttrs = commonAttributes.value;\n\n        // 发射事件通知父组件\n        emit(\"tables-ready\", {\n          table1: {\n            ...table1\n          },\n          table2: {\n            ...table2\n          },\n          commonAttributes: commonAttrs\n        });\n        processingState.value = {\n          isProcessing: false,\n          error: null,\n          lastProcessed: new Date()\n        };\n      } catch (error) {\n        processingState.value = {\n          isProcessing: false,\n          error: error.message,\n          lastProcessed: null\n        };\n        emit(\"processing-error\", error.message);\n        console.error(\"表格处理错误:\", error);\n      }\n    };\n\n    // 暴露给父组件的方法\n    __expose({\n      getTableData: () => ({\n        table1: {\n          ...processedTable1.value\n        },\n        table2: {\n          ...processedTable2.value\n        },\n        commonAttributes: commonAttributes.value,\n        processingState: {\n          ...processingState.value\n        }\n      }),\n      reprocessTables: processTables\n    });\n\n    // 监听数据变化\n    watch([() => props.div1RawData, () => props.div3RawData], _ref2 => {\n      let [newDiv1, newDiv3] = _ref2;\n      if (newDiv1 && newDiv3) {\n        processTables();\n      }\n    }, {\n      immediate: true\n    });\n\n    // 原有方法保持不变\n    function smartValueConversion(rawValue) {\n      if (!rawValue || [\"-\", \"—\", \"N/A\"].includes(rawValue)) return null;\n      if (/^\\.\\d+$/.test(rawValue)) return parseFloat(rawValue);\n      const numericValue = parseFloat(rawValue.replace(/[^\\d.-]/g, \"\"));\n      if (!isNaN(numericValue)) return numericValue;\n      if (/(\\d{4}-\\d{2}-\\d{2})|(\\d{2}\\/\\d{2}\\/\\d{4})/.test(rawValue)) return rawValue;\n      if ([\"true\", \"false\"].includes(rawValue.toLowerCase())) {\n        return rawValue.toLowerCase() === \"true\";\n      }\n      return rawValue;\n    }\n    function extractTitleFromHTML(html) {\n      if (!html) return null;\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(html, \"text/html\");\n      return doc.querySelector(\"h1, h2, h3, h4, caption\")?.textContent.trim() || null;\n    }\n    function hasDataForAttribute(table, attr) {\n      return table.timeSeriesData?.[attr]?.length > 0;\n    }\n    function getAverage(table, attr) {\n      const values = table.timeSeriesData[attr]?.map(item => item.value) || [];\n      return values.length ? (values.reduce((a, b) => a + b, 0) / values.length).toFixed(2) : \"N/A\";\n    }\n    function getMax(table, attr) {\n      const values = table.timeSeriesData[attr]?.map(item => item.value) || [];\n      return values.length ? Math.max(...values).toFixed(2) : \"N/A\";\n    }\n\n    // 原有其他方法保持不变\n    // ...\n\n    const __returned__ = {\n      props,\n      emit,\n      processingState,\n      containerRef,\n      chartMaxWidth,\n      chartMaxHeight,\n      leftChartColor,\n      rightChartColor,\n      chartRefs1,\n      chartRefs2,\n      showFullChartModal,\n      currentAttribute,\n      currentChartData,\n      currentSide,\n      processedTable1,\n      processedTable2,\n      commonAttributes,\n      parseTableToStandardJSON,\n      processTables,\n      smartValueConversion,\n      extractTitleFromHTML,\n      hasDataForAttribute,\n      getAverage,\n      getMax,\n      ref,\n      computed,\n      watch,\n      SparklineChart,\n      FullChart,\n      get debounce() {\n        return debounce;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","watch","SparklineChart","FullChart","debounce","props","__props","emit","__emit","processingState","isProcessing","error","lastProcessed","containerRef","chartMaxWidth","chartMaxHeight","leftChartColor","rightChartColor","chartRefs1","chartRefs2","showFullChartModal","currentAttribute","currentChartData","type","data","currentSide","processedTable1","title","rows","columns","timeSeriesData","processedTable2","commonAttributes","attrs1","Object","keys","value","attrs2","filter","attr","includes","parseTableToStandardJSON","html","defaultTitle","arguments","length","undefined","result","parser","DOMParser","doc","parseFromString","table","querySelector","headerCells","children","Array","from","map","cell","textContent","replace","trim","yearColumnIndex","findIndex","header","toLowerCase","hasYearColumn","cleanYear","yearStr","cleaned","toString","test","startYear","substring","parseInt","yearMatch","match","dataRows","querySelectorAll","forEach","row","cells","recordName","recordData","index","smartValueConversion","Year","push","name","year","sort","a","b","console","message","processTables","table1","table2","Promise","all","div1RawData","div3RawData","Error","commonAttrs","Date","__expose","getTableData","reprocessTables","_ref2","newDiv1","newDiv3","immediate","rawValue","parseFloat","numericValue","isNaN","extractTitleFromHTML","hasDataForAttribute","getAverage","values","item","reduce","toFixed","getMax","Math","max"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/CompareTable.vue"],"sourcesContent":["<template>\r\n\t<div class=\"compare-container\" ref=\"containerRef\">\r\n\t\t<div class=\"table-grid\">\r\n\t\t\t<!-- 表头 -->\r\n\t\t\t<div class=\"header left-column\">\r\n\t\t\t\t{{ processedTable1.title || \"表格1\" }}\r\n\t\t\t</div>\r\n\t\t\t<div class=\"header middle-column\">对比属性</div>\r\n\t\t\t<div class=\"header right-column\">\r\n\t\t\t\t{{ processedTable2.title || \"表格2\" }}\r\n\t\t\t</div>\r\n\r\n\t\t\t<!-- 数据行 -->\r\n\t\t\t<template v-if=\"hasData\">\r\n\t\t\t\t<template v-for=\"attr in commonAttributes\" :key=\"attr\">\r\n\t\t\t\t\t<div class=\"cell left-column\" @click=\"showFullChart(attr, 'left')\">\r\n\t\t\t\t\t\t<template v-if=\"hasDataForAttribute(processedTable1, attr)\">\r\n\t\t\t\t\t\t\t<div class=\"chart-wrapper\">\r\n\t\t\t\t\t\t\t\t<SparklineChart\r\n\t\t\t\t\t\t\t\t\tref=\"leftCharts\"\r\n\t\t\t\t\t\t\t\t\t:data=\"processedTable1.timeSeriesData[attr]\"\r\n\t\t\t\t\t\t\t\t\t:compare-data=\"processedTable2.timeSeriesData[attr]\"\r\n\t\t\t\t\t\t\t\t\t:max-width=\"chartMaxWidth\"\r\n\t\t\t\t\t\t\t\t\t:max-height=\"chartMaxHeight\"\r\n\t\t\t\t\t\t\t\t\t:show-year-markers=\"true\"\r\n\t\t\t\t\t\t\t\t\t:line-color=\"leftChartColor\"\r\n\t\t\t\t\t\t\t\t\t@chart-mounted=\"chart => (chartRefs1[attr] = chart)\" />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<!-- <div class=\"stats-summary\">\r\n\t\t\t\t\t\t\t\t平均: {{ getAverage(processedTable1, attr) }} | 最大:\r\n\t\t\t\t\t\t\t\t{{ getMax(processedTable1, attr) }}\r\n\t\t\t\t\t\t\t</div> -->\r\n\t\t\t\t\t\t</template>\r\n\t\t\t\t\t\t<div v-else class=\"no-data\">无数据</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div class=\"cell middle-column\">\r\n\t\t\t\t\t\t<div class=\"attribute-name\">{{ attr }}</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div class=\"cell right-column\" @click=\"showFullChart(attr, 'right')\">\r\n\t\t\t\t\t\t<template v-if=\"hasDataForAttribute(processedTable2, attr)\">\r\n\t\t\t\t\t\t\t<div class=\"chart-wrapper\">\r\n\t\t\t\t\t\t\t\t<SparklineChart\r\n\t\t\t\t\t\t\t\t\tref=\"rightCharts\"\r\n\t\t\t\t\t\t\t\t\t:data=\"processedTable2.timeSeriesData[attr]\"\r\n\t\t\t\t\t\t\t\t\t:compare-data=\"processedTable1.timeSeriesData[attr]\"\r\n\t\t\t\t\t\t\t\t\t:max-width=\"chartMaxWidth\"\r\n\t\t\t\t\t\t\t\t\t:max-height=\"chartMaxHeight\"\r\n\t\t\t\t\t\t\t\t\t:show-year-markers=\"true\"\r\n\t\t\t\t\t\t\t\t\t:line-color=\"rightChartColor\"\r\n\t\t\t\t\t\t\t\t\t@chart-mounted=\"chart => (chartRefs2[attr] = chart)\" />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<!-- <div class=\"stats-summary\">\r\n\t\t\t\t\t\t\t\t平均: {{ getAverage(processedTable2, attr) }} | 最大:\r\n\t\t\t\t\t\t\t\t{{ getMax(processedTable2, attr) }}\r\n\t\t\t\t\t\t\t</div> -->\r\n\t\t\t\t\t\t</template>\r\n\t\t\t\t\t\t<div v-else class=\"no-data\">无数据</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</template>\r\n\t\t\t</template>\r\n\t\t\t<template v-else>\r\n\t\t\t\t<!-- 空状态下的行 -->\r\n\t\t\t\t<div class=\"cell left-column empty-cell\"></div>\r\n\t\t\t\t<div class=\"cell middle-column empty-cell\"></div>\r\n\t\t\t\t<div class=\"cell right-column empty-cell\"></div>\r\n\t\t\t\t<div class=\"cell left-column empty-cell\"></div>\r\n\t\t\t\t<div class=\"cell middle-column empty-cell\"></div>\r\n\t\t\t\t<div class=\"cell right-column empty-cell\"></div>\r\n\t\t\t\t<div class=\"cell left-column empty-cell\"></div>\r\n\t\t\t\t<div class=\"cell middle-column empty-cell\"></div>\r\n\t\t\t\t<div class=\"cell right-column empty-cell\"></div>\r\n\t\t\t</template>\r\n\t\t</div>\r\n\r\n\t\t<!-- 完整图表弹窗 -->\r\n\t\t<div\r\n\t\t\tv-if=\"showFullChartModal\"\r\n\t\t\tclass=\"full-chart-modal\"\r\n\t\t\t@click.self=\"hideFullChart\">\r\n\t\t\t<div class=\"modal-content\">\r\n\t\t\t\t<div class=\"modal-header\">\r\n\t\t\t\t\t<h3>{{ currentAttribute }}</h3>\r\n\t\t\t\t\t<button @click=\"hideFullChart\" class=\"close-button\">×</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<FullChart\r\n\t\t\t\t\t:data=\"currentChartData\"\r\n\t\t\t\t\t:title=\"currentAttribute\"\r\n\t\t\t\t\t:side=\"currentSide\" />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, watch, defineEmits, defineExpose } from \"vue\";\r\n\timport SparklineChart from \"./SparklineChart.vue\";\r\n\timport FullChart from \"./FullChart.vue\";\r\n\timport { debounce } from \"lodash-es\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdiv1RawData: String,\r\n\t\tdiv3RawData: String\r\n\t});\r\n\r\n\tconst emit = defineEmits([\"tables-ready\", \"processing-error\"]);\r\n\r\n\t// 状态管理\r\n\tconst processingState = ref({\r\n\t\tisProcessing: false,\r\n\t\terror: null,\r\n\t\tlastProcessed: null\r\n\t});\r\n\r\n\t// 原有ref定义保持不变\r\n\tconst containerRef = ref(null);\r\n\tconst chartMaxWidth = ref(250);\r\n\tconst chartMaxHeight = ref(80);\r\n\tconst leftChartColor = ref(\"#4a90e2\");\r\n\tconst rightChartColor = ref(\"#ef4444\");\r\n\tconst chartRefs1 = ref({});\r\n\tconst chartRefs2 = ref({});\r\n\tconst showFullChartModal = ref(false);\r\n\tconst currentAttribute = ref(\"\");\r\n\tconst currentChartData = ref({ type: \"line\", data: [] });\r\n\tconst currentSide = ref(\"left\");\r\n\r\n\t// 处理后的表格数据\r\n\tconst processedTable1 = ref({\r\n\t\ttitle: \"表格1\",\r\n\t\trows: [],\r\n\t\tcolumns: [],\r\n\t\ttimeSeriesData: {}\r\n\t});\r\n\tconst processedTable2 = ref({\r\n\t\ttitle: \"表格2\",\r\n\t\trows: [],\r\n\t\tcolumns: [],\r\n\t\ttimeSeriesData: {}\r\n\t});\r\n\r\n\t// 公共属性计算\r\n\tconst commonAttributes = computed(() => {\r\n\t\tconst attrs1 = Object.keys(processedTable1.value.timeSeriesData || {});\r\n\t\tconst attrs2 = Object.keys(processedTable2.value.timeSeriesData || {});\r\n\t\treturn attrs1.filter(attr => attrs2.includes(attr));\r\n\t});\r\n\r\n\t// 增强版的表格解析方法\r\n\tconst parseTableToStandardJSON = async (\r\n\t\thtml,\r\n\t\tdefaultTitle = \"未命名表格\"\r\n\t) => {\r\n\t\tconst result = {\r\n\t\t\ttitle: defaultTitle,\r\n\t\t\trows: [],\r\n\t\t\tcolumns: [],\r\n\t\t\ttimeSeriesData: {}\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\tif (!html) return result;\r\n\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\t\tconst table = doc.querySelector(\"table\");\r\n\t\t\tif (!table) return result;\r\n\r\n\t\t\t// 提取表头\r\n\t\t\tconst headerCells = table.querySelector(\"tr\")?.children || [];\r\n\t\t\tresult.rows = Array.from(headerCells).map(cell => {\r\n\t\t\t\treturn cell.textContent\r\n\t\t\t\t\t.replace(/[\\n†*]/g, \"\")\r\n\t\t\t\t\t.trim()\r\n\t\t\t\t\t.replace(/\\s+/g, \" \");\r\n\t\t\t});\r\n\r\n\t\t\t// 检查是否有Year列\r\n\t\t\tconst yearColumnIndex = result.rows.findIndex(header =>\r\n\t\t\t\theader.toLowerCase().includes(\"year\")\r\n\t\t\t);\r\n\t\t\tconst hasYearColumn = yearColumnIndex !== -1;\r\n\r\n\t\t\t// 辅助函数：清理年份格式\r\n\t\t\tconst cleanYear = yearStr => {\r\n\t\t\t\tif (!yearStr) return null;\r\n\t\t\t\tlet cleaned = yearStr.toString().replace(/[†*]/g, \"\").trim();\r\n\t\t\t\tif (/^\\d{4}[\\u2013\\u2014-]\\d{2}$/.test(cleaned)) {\r\n\t\t\t\t\tconst startYear = cleaned.substring(0, 4);\r\n\t\t\t\t\treturn parseInt(startYear);\r\n\t\t\t\t}\r\n\t\t\t\tconst yearMatch = cleaned.match(/\\d{4}/);\r\n\t\t\t\treturn yearMatch ? parseInt(yearMatch[0]) : null;\r\n\t\t\t};\r\n\r\n\t\t\t// 提取数据行\r\n\t\t\tconst dataRows = Array.from(\r\n\t\t\t\ttable.querySelectorAll(\"tr:not(:first-child)\")\r\n\t\t\t);\r\n\r\n\t\t\tdataRows.forEach(row => {\r\n\t\t\t\tconst cells = Array.from(row.children);\r\n\t\t\t\tif (cells.length === 0) return;\r\n\r\n\t\t\t\tconst recordName = cells[0].textContent.trim();\r\n\t\t\t\tconst recordData = {};\r\n\r\n\t\t\t\tresult.rows.forEach((header, index) => {\r\n\t\t\t\t\tif (index < cells.length) {\r\n\t\t\t\t\t\tlet value = cells[index].textContent.trim();\r\n\t\t\t\t\t\tif (index === yearColumnIndex) {\r\n\t\t\t\t\t\t\tvalue = cleanYear(value);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvalue = smartValueConversion(value);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\trecordData[header] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!hasYearColumn || (hasYearColumn && recordData.Year)) {\r\n\t\t\t\t\tresult.columns.push({\r\n\t\t\t\t\t\tname: recordName,\r\n\t\t\t\t\t\tdata: recordData\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tif (hasYearColumn && recordData.Year) {\r\n\t\t\t\t\t\tconst year = recordData.Year;\r\n\t\t\t\t\t\tresult.rows.forEach(header => {\r\n\t\t\t\t\t\t\tif (header === \"Year\" || typeof recordData[header] !== \"number\")\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\tif (!result.timeSeriesData[header]) {\r\n\t\t\t\t\t\t\t\tresult.timeSeriesData[header] = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tresult.timeSeriesData[header].push({\r\n\t\t\t\t\t\t\t\tyear: year,\r\n\t\t\t\t\t\t\t\tvalue: recordData[header],\r\n\t\t\t\t\t\t\t\trecordName: recordName\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// 对每个属性的时间序列数据按年份排序\r\n\t\t\tif (hasYearColumn) {\r\n\t\t\t\tObject.keys(result.timeSeriesData).forEach(attr => {\r\n\t\t\t\t\tresult.timeSeriesData[attr].sort((a, b) => a.year - b.year);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"表格解析错误:\", error);\r\n\t\t\tprocessingState.value.error = `表格解析错误: ${error.message}`;\r\n\t\t\temit(\"processing-error\", processingState.value.error);\r\n\t\t\treturn result;\r\n\t\t}\r\n\t};\r\n\r\n\t// 处理并验证表格数据\r\n\tconst processTables = async () => {\r\n\t\tprocessingState.value = {\r\n\t\t\tisProcessing: true,\r\n\t\t\terror: null,\r\n\t\t\tlastProcessed: null\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\t// 并行处理两个表格\r\n\t\t\tconst [table1, table2] = await Promise.all([\r\n\t\t\t\tparseTableToStandardJSON(props.div1RawData, \"表格1\"),\r\n\t\t\t\tparseTableToStandardJSON(props.div3RawData, \"表格2\")\r\n\t\t\t]);\r\n\r\n\t\t\tprocessedTable1.value = table1;\r\n\t\t\tprocessedTable2.value = table2;\r\n\r\n\t\t\t// 验证数据\r\n\t\t\tif (!table1.timeSeriesData || !table2.timeSeriesData) {\r\n\t\t\t\tthrow new Error(\"表格数据结构不完整\");\r\n\t\t\t}\r\n\r\n\t\t\tif (\r\n\t\t\t\tObject.keys(table1.timeSeriesData).length === 0 ||\r\n\t\t\t\tObject.keys(table2.timeSeriesData).length === 0\r\n\t\t\t) {\r\n\t\t\t\tthrow new Error(\"表格数据内容为空\");\r\n\t\t\t}\r\n\r\n\t\t\t// 准备公共属性\r\n\t\t\tconst commonAttrs = commonAttributes.value;\r\n\r\n\t\t\t// 发射事件通知父组件\r\n\t\t\temit(\"tables-ready\", {\r\n\t\t\t\ttable1: { ...table1 },\r\n\t\t\t\ttable2: { ...table2 },\r\n\t\t\t\tcommonAttributes: commonAttrs\r\n\t\t\t});\r\n\r\n\t\t\tprocessingState.value = {\r\n\t\t\t\tisProcessing: false,\r\n\t\t\t\terror: null,\r\n\t\t\t\tlastProcessed: new Date()\r\n\t\t\t};\r\n\t\t} catch (error) {\r\n\t\t\tprocessingState.value = {\r\n\t\t\t\tisProcessing: false,\r\n\t\t\t\terror: error.message,\r\n\t\t\t\tlastProcessed: null\r\n\t\t\t};\r\n\t\t\temit(\"processing-error\", error.message);\r\n\t\t\tconsole.error(\"表格处理错误:\", error);\r\n\t\t}\r\n\t};\r\n\r\n\t// 暴露给父组件的方法\r\n\tdefineExpose({\r\n\t\tgetTableData: () => ({\r\n\t\t\ttable1: { ...processedTable1.value },\r\n\t\t\ttable2: { ...processedTable2.value },\r\n\t\t\tcommonAttributes: commonAttributes.value,\r\n\t\t\tprocessingState: { ...processingState.value }\r\n\t\t}),\r\n\t\treprocessTables: processTables\r\n\t});\r\n\r\n\t// 监听数据变化\r\n\twatch(\r\n\t\t[() => props.div1RawData, () => props.div3RawData],\r\n\t\t([newDiv1, newDiv3]) => {\r\n\t\t\tif (newDiv1 && newDiv3) {\r\n\t\t\t\tprocessTables();\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\t// 原有方法保持不变\r\n\tfunction smartValueConversion(rawValue) {\r\n\t\tif (!rawValue || [\"-\", \"—\", \"N/A\"].includes(rawValue)) return null;\r\n\t\tif (/^\\.\\d+$/.test(rawValue)) return parseFloat(rawValue);\r\n\t\tconst numericValue = parseFloat(rawValue.replace(/[^\\d.-]/g, \"\"));\r\n\t\tif (!isNaN(numericValue)) return numericValue;\r\n\t\tif (/(\\d{4}-\\d{2}-\\d{2})|(\\d{2}\\/\\d{2}\\/\\d{4})/.test(rawValue))\r\n\t\t\treturn rawValue;\r\n\t\tif ([\"true\", \"false\"].includes(rawValue.toLowerCase())) {\r\n\t\t\treturn rawValue.toLowerCase() === \"true\";\r\n\t\t}\r\n\t\treturn rawValue;\r\n\t}\r\n\r\n\tfunction extractTitleFromHTML(html) {\r\n\t\tif (!html) return null;\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\treturn (\r\n\t\t\tdoc.querySelector(\"h1, h2, h3, h4, caption\")?.textContent.trim() || null\r\n\t\t);\r\n\t}\r\n\r\n\tfunction hasDataForAttribute(table, attr) {\r\n\t\treturn table.timeSeriesData?.[attr]?.length > 0;\r\n\t}\r\n\r\n\tfunction getAverage(table, attr) {\r\n\t\tconst values = table.timeSeriesData[attr]?.map(item => item.value) || [];\r\n\t\treturn values.length\r\n\t\t\t? (values.reduce((a, b) => a + b, 0) / values.length).toFixed(2)\r\n\t\t\t: \"N/A\";\r\n\t}\r\n\r\n\tfunction getMax(table, attr) {\r\n\t\tconst values = table.timeSeriesData[attr]?.map(item => item.value) || [];\r\n\t\treturn values.length ? Math.max(...values).toFixed(2) : \"N/A\";\r\n\t}\r\n\r\n\t// 原有其他方法保持不变\r\n\t// ...\r\n</script>\r\n\r\n<style scoped>\r\n\t.compare-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tpadding: 10px;\r\n\t\tbox-sizing: border-box;\r\n\t\toverflow: hidden;\r\n\t}\r\n\r\n\t.table-grid {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: minmax(200px, 1fr) minmax(100px, 0.5fr) minmax(\r\n\t\t\t\t200px,\r\n\t\t\t\t1fr\r\n\t\t\t);\r\n\t\twidth: 98%;\r\n\t\tmax-width: 1200px;\r\n\t\tmin-width: 320px;\r\n\t\tmargin: 0 auto;\r\n\t\tbackground: white;\r\n\t\tflex: 1;\r\n\t\toverflow-x: auto;\r\n\t\toverflow-y: auto;\r\n\t\tborder-collapse: separate;\r\n\t\tborder-spacing: 0;\r\n\t\tbox-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n\t\tborder: 1px solid #e2e8f0;\r\n\t\tborder-radius: 4px;\r\n\t}\r\n\r\n\t.header {\r\n\t\tpadding: 12px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n\t\tposition: sticky;\r\n\t\ttop: 0;\r\n\t\tz-index: 1;\r\n\t\tborder-right: 1px solid #475569;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tmin-height: 50px;\r\n\t\twhite-space: nowrap;\r\n\t}\r\n\r\n\t.header.middle-column {\r\n\t\tpadding: 12px 10px;\r\n\t\tbackground: #1e293b;\r\n\t}\r\n\r\n\t.cell {\r\n\t\tpadding: 10px 5px;\r\n\t\tbackground: white;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tmin-height: 120px;\r\n\t\tborder-bottom: 1px solid #f0f0f0;\r\n\t\tborder-right: 1px solid #f0f0f0;\r\n\t\tcursor: pointer;\r\n\t\ttext-align: center;\r\n\t\tword-break: break-word;\r\n\t\toverflow: hidden;\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t.chart-wrapper {\r\n\t\twidth: 100%;\r\n\t\theight: 80px;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t\toverflow: hidden;\r\n\t}\r\n\r\n\t.middle-column {\r\n\t\tbackground-color: #f8fafc;\r\n\t\tborder-right: 1px solid #f0f0f0;\r\n\t\tfont-weight: 600;\r\n\t\tmin-width: 100px;\r\n\t}\r\n\r\n\t.attribute-name {\r\n\t\tfont-weight: 600;\r\n\t\tmargin-bottom: 4px;\r\n\t\tcolor: #2c3e50;\r\n\t\tfont-size: clamp(0.9em, 2vw, 1.1em);\r\n\t\ttext-align: center;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t.stats-summary {\r\n\t\tmargin-top: 5px;\r\n\t\tfont-size: clamp(0.7rem, 1.5vw, 0.85rem);\r\n\t\tcolor: #34495e;\r\n\t\ttext-align: center;\r\n\t\tline-height: 1.3;\r\n\t\twidth: 100%;\r\n\t\tpadding: 0 5px;\r\n\t\tbox-sizing: border-box;\r\n\t\toverflow: hidden;\r\n\t\twhite-space: normal;\r\n\t}\r\n\r\n\t.no-data {\r\n\t\tcolor: #95a5a6;\r\n\t\tfont-style: italic;\r\n\t\tfont-size: 0.9em;\r\n\t\ttext-align: center;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t.full-chart-modal {\r\n\t\tposition: fixed;\r\n\t\ttop: 50%;\r\n\t\tleft: 50%;\r\n\t\ttransform: translate(-50%, -50%);\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tbackground: rgba(255, 255, 255, 0.58);\r\n\t\tz-index: 1000;\r\n\t\tbackdrop-filter: blur(5px);\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbox-sizing: border-box;\r\n\t}\r\n\r\n\t.modal-content {\r\n\t\tbackground-color: white;\r\n\t\tborder-radius: 8px;\r\n\t\twidth: 95%;\r\n\t\tmax-width: 900px;\r\n\t\tmax-height: 85vh;\r\n\t\toverflow: auto;\r\n\t\tbox-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\r\n\t\tpadding: 20px;\r\n\t}\r\n\r\n\t.modal-header {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t\talign-items: center;\r\n\t\tmargin-bottom: 20px;\r\n\t\tpadding-bottom: 10px;\r\n\t\tborder-bottom: 1px solid #eee;\r\n\t}\r\n\r\n\t.close-button {\r\n\t\tbackground: none;\r\n\t\tborder: none;\r\n\t\tfont-size: 24px;\r\n\t\tcursor: pointer;\r\n\t\tcolor: #64748b;\r\n\t\ttransition: color 0.2s;\r\n\t}\r\n\r\n\t.close-button:hover {\r\n\t\tcolor: #334155;\r\n\t}\r\n\r\n\t@media (max-width: 992px) {\r\n\t\t.table-grid {\r\n\t\t\tgrid-template-columns: minmax(150px, 1fr) minmax(80px, 0.5fr) minmax(\r\n\t\t\t\t\t150px,\r\n\t\t\t\t\t1fr\r\n\t\t\t\t);\r\n\t\t}\r\n\r\n\t\t.header {\r\n\t\t\tpadding: 10px 8px;\r\n\t\t\tfont-size: 0.95em;\r\n\t\t}\r\n\t}\r\n\r\n\t@media (max-width: 768px) {\r\n\t\t.table-grid {\r\n\t\t\tgrid-template-columns: 1fr;\r\n\t\t\twidth: 100%;\r\n\t\t\tmin-width: auto;\r\n\t\t}\r\n\r\n\t\t.header {\r\n\t\t\tdisplay: flex;\r\n\t\t\tmin-height: 40px;\r\n\t\t\tfont-size: 0.9em;\r\n\t\t}\r\n\r\n\t\t.header.middle-column {\r\n\t\t\tpadding: 10px;\r\n\t\t}\r\n\r\n\t\t.cell {\r\n\t\t\tmin-height: auto;\r\n\t\t\tpadding: 8px;\r\n\t\t\tborder-right: 1px solid #f0f0f0 !important;\r\n\t\t}\r\n\r\n\t\t.left-column,\r\n\t\t.middle-column,\r\n\t\t.right-column {\r\n\t\t\tborder-left: 1px solid #f0f0f0;\r\n\t\t}\r\n\r\n\t\t.chart-wrapper {\r\n\t\t\theight: 70px;\r\n\t\t}\r\n\r\n\t\t.stats-summary {\r\n\t\t\tfont-size: 0.7rem;\r\n\t\t}\r\n\t}\r\n\r\n\t@media (max-width: 480px) {\r\n\t\t.compare-container {\r\n\t\t\tpadding: 5px 0;\r\n\t\t}\r\n\r\n\t\t.table-grid {\r\n\t\t\twidth: 100%;\r\n\t\t\tborder-radius: 0;\r\n\t\t}\r\n\r\n\t\t.attribute-name {\r\n\t\t\tfont-size: 0.95em;\r\n\t\t}\r\n\r\n\t\t.chart-wrapper {\r\n\t\t\theight: 60px;\r\n\t\t}\r\n\r\n\t\t.stats-summary {\r\n\t\t\tfont-size: 0.65rem;\r\n\t\t}\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}