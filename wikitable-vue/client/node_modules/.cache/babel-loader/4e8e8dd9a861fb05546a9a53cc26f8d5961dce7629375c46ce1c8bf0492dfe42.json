{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted, onUnmounted } from \"vue\";\nimport bus from \"@/js/eventBus.js\";\nimport * as d3 from \"d3\";\nimport { renderLineChart, renderBarChart, renderPieChart, renderNonVisualChart, renderRadarChart, renderStackedBarChart, renderScatterChart } from \"@/js/chartUtils\";\nexport default {\n  __name: 'Div2',\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const userQuestion = ref(\"\"); // 用户输入的问题\n    const chatHistory = ref([]); // 历史对话记录\n    const selectText2 = ref(\"\"); // 左侧选中文本\n    const selectText3 = ref(\"\"); // 右侧选中文本\n    const chartData = ref(null); // 存储图表数据\n\n    let offDiv1, offDiv3, offTableCellClick;\n    onMounted(() => {\n      offDiv1 = bus.on(\"div1Event\", data => handleSelection(data, \"div1\"));\n      offDiv3 = bus.on(\"div3Event\", data => handleSelection(data, \"div3\"));\n      offTableCellClick = bus.on(\"tableCellClick\", handleTableCellClick); // 监听表格点击事件\n    });\n    onUnmounted(() => {\n      offDiv1();\n      offDiv3();\n      offTableCellClick();\n    });\n\n    // 处理选中文本\n    function handleSelection(data, source) {\n      console.log(\"Received data:\", data); // 调试输出接收到的数据\n      const plainText = getPlainTextFromSelection(data.content);\n      if (source === \"div1\") {\n        selectText2.value = plainText;\n      } else if (source === \"div3\") {\n        selectText3.value = plainText;\n      }\n    }\n\n    // 从 HTML 内容中提取纯文本\n    function getPlainTextFromSelection(htmlContent) {\n      const container = document.createElement(\"div\");\n      container.innerHTML = htmlContent;\n      console.log(\"Extracted text:\", container.innerText); // 输出提取的纯文本\n      return container.innerText || container.textContent || \"\";\n    }\n\n    // 向 GPT 提问\n    async function askQuestion() {\n      if (!userQuestion.value) {\n        alert(\"请输入问题！\");\n        return;\n      }\n\n      // 将用户的问题添加到历史记录\n      chatHistory.value.push({\n        role: \"user\",\n        content: userQuestion.value\n      });\n      try {\n        const response = await api.post(\"gpt_ask\", {\n          question: userQuestion.value\n        }, data => {\n          if (data) {\n            // 将 GPT 的回答添加到历史记录\n            chatHistory.value.push({\n              role: \"assistant\",\n              content: data.answer\n            });\n          } else {\n            console.error(\"提问失败:\", data.error);\n          }\n        });\n      } catch (error) {\n        console.error(\"请求失败:\", error);\n      }\n\n      // 清空输入框\n      userQuestion.value = \"\";\n    }\n\n    // 对比文章\n    async function compareTexts() {\n      if (!selectText2.value || !selectText3.value) {\n        alert(\"请先选择两段文本！\");\n        return;\n      }\n      try {\n        api.post(\"gpt_compare\", {\n          text1: selectText2.value,\n          text2: selectText3.value\n        }, data => {\n          if (data) {\n            // 将对比结果添加到历史记录\n            chatHistory.value.push({\n              role: \"assistant\",\n              content: data.result\n            });\n          } else {\n            console.error(\"对比失败:\", data.error);\n          }\n        });\n      } catch (error) {\n        console.error(\"请求失败:\", error);\n      }\n    }\n\n    // 合并数据\n    async function mergedJson() {\n      if (!selectText2.value || !selectText3.value) {\n        alert(\"请先选择两段文本！\");\n        return;\n      }\n      try {\n        api.post(\"merged_json\", {\n          text1: selectText2.value,\n          text2: selectText3.value\n        }, data => {\n          if (data.error) {\n            console.error(\"后端返回的错误:\", data.error);\n            alert(`处理文章内容时出错: ${data.message}`);\n            return;\n          }\n          const jsonData = data.json_data;\n          console.log(\"后端返回的数据:\", jsonData);\n          if (data.yes_no === \"no\" || !jsonData) {\n            renderNonVisualChart(\".chart-container\", data, {\n              message: \"当前数据无法合并\"\n            });\n            return;\n          }\n          chartData.value = {\n            jsonData,\n            chartType: data.chart_classification\n          }; // 存储图表数据\n          renderChart(jsonData, data.chart_classification);\n        });\n      } catch (error) {\n        console.error(\"处理JSON时出错:\", error);\n        alert(\"处理JSON时出错，请稍后重试\");\n      }\n    }\n\n    // 处理表格点击事件\n    function handleTableCellClick(data) {\n      const {\n        rowIndex,\n        cellIndex,\n        rowData\n      } = data;\n      console.log(\"Table cell clicked:\", rowIndex, cellIndex, rowData);\n\n      // 根据点击的表格数据高亮图表中的对应数据\n      if (chartData.value) {\n        highlightChartData(rowData);\n      }\n    }\n\n    // 高亮图表中的对应数据\n    function highlightChartData(rowData) {\n      const chartContainer = document.querySelector(\".chart-container\");\n      if (!chartContainer) return;\n\n      // 根据图表类型高亮数据\n      switch (chartData.value.chartType) {\n        case \"Bar Chart\":\n          highlightBarChart(chartContainer, rowData);\n          break;\n        case \"Line Chart\":\n          highlightLineChart(chartContainer, rowData);\n          break;\n        case \"Pie Chart\":\n          highlightPieChart(chartContainer, rowData);\n          break;\n        default:\n          console.log(\"Unsupported chart type for highlighting\");\n      }\n    }\n\n    // 高亮柱状图中的数据\n    function highlightBarChart(chartContainer, rowData) {\n      const bars = chartContainer.querySelectorAll(\".bar\");\n      bars.forEach(bar => {\n        if (bar.__data__.label === rowData[0]) {\n          bar.style.fill = \"orange\"; // 高亮颜色\n        } else {\n          bar.style.fill = \"steelblue\"; // 恢复默认颜色\n        }\n      });\n    }\n\n    // 高亮折线图中的数据\n    function highlightLineChart(chartContainer, rowData) {\n      const lines = chartContainer.querySelectorAll(\".line\");\n      lines.forEach(line => {\n        if (line.__data__.label === rowData[0]) {\n          line.style.stroke = \"orange\"; // 高亮颜色\n        } else {\n          line.style.stroke = \"steelblue\"; // 恢复默认颜色\n        }\n      });\n    }\n\n    // 高亮饼图中的数据\n    function highlightPieChart(chartContainer, rowData) {\n      const paths = chartContainer.querySelectorAll(\".arc\");\n      paths.forEach(path => {\n        if (path.__data__.data.label === rowData[0]) {\n          path.style.fill = \"orange\"; // 高亮颜色\n        } else {\n          path.style.fill = \"steelblue\"; // 恢复默认颜色\n        }\n      });\n    }\n\n    // 渲染图表\n    function renderChart(rawJsonData, chartType) {\n      if (!rawJsonData || typeof rawJsonData !== \"object\") {\n        console.log(\"rawJsonData:\", rawJsonData);\n        console.log(\"type_rawJsonData:\", typeof rawJsonData);\n        renderNonVisualChart(\".chart-container\", rawJsonData, {\n          message: \"JSON 数据无效\"\n        });\n        console.error(\"JSON 数据无效:\", rawJsonData);\n        return;\n      }\n      const data = rawJsonData.data;\n      const options = rawJsonData.options || {};\n      // 获取 chart-container 的 DOM 元素\n      const chartContainer = document.querySelector(\".chart-container\");\n\n      // 根据图表类型渲染\n      if (chartType === \"Line Chart\") {\n        renderLineChart(chartContainer, data, options);\n      } else if (chartType === \"Bar Chart\") {\n        renderBarChart(chartContainer, rawJsonData);\n      } else if (chartType === \"Pie Chart\") {\n        renderPieChart(chartContainer, data, options);\n      } else if (chartType === \"Stacked Bar Chart\") {\n        renderStackedBarChart(chartContainer, data, options);\n      } else if (chartType === \"Radar Chart\") {\n        renderRadarChart(chartContainer, rawJsonData);\n      } else if (chartType === \"Scatter Chart\") {\n        renderScatterChart(chartContainer, rawJsonData);\n      } else {\n        console.error(\"未知的图表类型:\", chartType);\n      }\n    }\n    const __returned__ = {\n      userQuestion,\n      chatHistory,\n      selectText2,\n      selectText3,\n      chartData,\n      get offDiv1() {\n        return offDiv1;\n      },\n      set offDiv1(v) {\n        offDiv1 = v;\n      },\n      get offDiv3() {\n        return offDiv3;\n      },\n      set offDiv3(v) {\n        offDiv3 = v;\n      },\n      get offTableCellClick() {\n        return offTableCellClick;\n      },\n      set offTableCellClick(v) {\n        offTableCellClick = v;\n      },\n      handleSelection,\n      getPlainTextFromSelection,\n      askQuestion,\n      compareTexts,\n      mergedJson,\n      handleTableCellClick,\n      highlightChartData,\n      highlightBarChart,\n      highlightLineChart,\n      highlightPieChart,\n      renderChart,\n      ref,\n      onMounted,\n      onUnmounted,\n      get bus() {\n        return bus;\n      },\n      get d3() {\n        return d3;\n      },\n      get renderLineChart() {\n        return renderLineChart;\n      },\n      get renderBarChart() {\n        return renderBarChart;\n      },\n      get renderPieChart() {\n        return renderPieChart;\n      },\n      get renderNonVisualChart() {\n        return renderNonVisualChart;\n      },\n      get renderRadarChart() {\n        return renderRadarChart;\n      },\n      get renderStackedBarChart() {\n        return renderStackedBarChart;\n      },\n      get renderScatterChart() {\n        return renderScatterChart;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","bus","d3","renderLineChart","renderBarChart","renderPieChart","renderNonVisualChart","renderRadarChart","renderStackedBarChart","renderScatterChart","userQuestion","chatHistory","selectText2","selectText3","chartData","offDiv1","offDiv3","offTableCellClick","on","data","handleSelection","handleTableCellClick","source","console","log","plainText","getPlainTextFromSelection","content","value","htmlContent","container","document","createElement","innerHTML","innerText","textContent","askQuestion","alert","push","role","response","api","post","question","answer","error","compareTexts","text1","text2","result","mergedJson","message","jsonData","json_data","yes_no","chartType","chart_classification","renderChart","rowIndex","cellIndex","rowData","highlightChartData","chartContainer","querySelector","highlightBarChart","highlightLineChart","highlightPieChart","bars","querySelectorAll","forEach","bar","__data__","label","style","fill","lines","line","stroke","paths","path","rawJsonData","options"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/Div2.vue"],"sourcesContent":["<template>\r\n\t<div class=\"main-container\">\r\n\t\t<!-- 聊天容器 -->\r\n\t\t<div class=\"chat-container\">\r\n\t\t\t<!-- 历史对话记录 -->\r\n\t\t\t<div class=\"chat-history\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tv-for=\"(message, index) in chatHistory\"\r\n\t\t\t\t\t:key=\"index\"\r\n\t\t\t\t\t:class=\"['message', message.role]\">\r\n\t\t\t\t\t<div class=\"message-content\">\r\n\t\t\t\t\t\t<strong>{{ message.role === \"user\" ? \"用户\" : \"GPT\" }}:</strong>\r\n\t\t\t\t\t\t<p>{{ message.content }}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- 视觉内容容器 -->\r\n\t\t<div class=\"vis-container\">\r\n\t\t\t<!-- 可用于显示图形或其他内容 -->\r\n\t\t\t<div ref=\"chart\" class=\"chart-container\"></div>\r\n\r\n\t\t\t<!-- 输入框和操作按钮 -->\r\n\t\t\t<div class=\"input-container\">\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tv-model=\"userQuestion\"\r\n\t\t\t\t\trows=\"2\"\r\n\t\t\t\t\tplaceholder=\"请输入你想问的问题...\"></textarea>\r\n\t\t\t\t<div class=\"button-container\">\r\n\t\t\t\t\t<button @click=\"askQuestion\">发送</button>\r\n\t\t\t\t\t<button @click=\"compareTexts\">对比文章</button>\r\n\t\t\t\t\t<button @click=\"mergedJson\" class=\"submit-btn\">合并数据可视化</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted } from \"vue\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\timport * as d3 from \"d3\";\r\n\timport {\r\n\t\trenderLineChart,\r\n\t\trenderBarChart,\r\n\t\trenderPieChart,\r\n\t\trenderNonVisualChart,\r\n\t\trenderRadarChart,\r\n\t\trenderStackedBarChart,\r\n\t\trenderScatterChart\r\n\t} from \"@/js/chartUtils\";\r\n\r\n\tconst userQuestion = ref(\"\"); // 用户输入的问题\r\n\tconst chatHistory = ref([]); // 历史对话记录\r\n\tconst selectText2 = ref(\"\"); // 左侧选中文本\r\n\tconst selectText3 = ref(\"\"); // 右侧选中文本\r\n\tconst chartData = ref(null); // 存储图表数据\r\n\r\n\tlet offDiv1, offDiv3, offTableCellClick;\r\n\r\n\tonMounted(() => {\r\n\t\toffDiv1 = bus.on(\"div1Event\", data => handleSelection(data, \"div1\"));\r\n\t\toffDiv3 = bus.on(\"div3Event\", data => handleSelection(data, \"div3\"));\r\n\t\toffTableCellClick = bus.on(\"tableCellClick\", handleTableCellClick); // 监听表格点击事件\r\n\t});\r\n\r\n\tonUnmounted(() => {\r\n\t\toffDiv1();\r\n\t\toffDiv3();\r\n\t\toffTableCellClick();\r\n\t});\r\n\r\n\t// 处理选中文本\r\n\tfunction handleSelection(data, source) {\r\n\t\tconsole.log(\"Received data:\", data); // 调试输出接收到的数据\r\n\t\tconst plainText = getPlainTextFromSelection(data.content);\r\n\t\tif (source === \"div1\") {\r\n\t\t\tselectText2.value = plainText;\r\n\t\t} else if (source === \"div3\") {\r\n\t\t\tselectText3.value = plainText;\r\n\t\t}\r\n\t}\r\n\r\n\t// 从 HTML 内容中提取纯文本\r\n\tfunction getPlainTextFromSelection(htmlContent) {\r\n\t\tconst container = document.createElement(\"div\");\r\n\t\tcontainer.innerHTML = htmlContent;\r\n\t\tconsole.log(\"Extracted text:\", container.innerText); // 输出提取的纯文本\r\n\t\treturn container.innerText || container.textContent || \"\";\r\n\t}\r\n\r\n\t// 向 GPT 提问\r\n\tasync function askQuestion() {\r\n\t\tif (!userQuestion.value) {\r\n\t\t\talert(\"请输入问题！\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 将用户的问题添加到历史记录\r\n\t\tchatHistory.value.push({ role: \"user\", content: userQuestion.value });\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await api.post(\r\n\t\t\t\t\"gpt_ask\",\r\n\t\t\t\t{ question: userQuestion.value },\r\n\t\t\t\tdata => {\r\n\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\t// 将 GPT 的回答添加到历史记录\r\n\t\t\t\t\t\tchatHistory.value.push({ role: \"assistant\", content: data.answer });\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.error(\"提问失败:\", data.error);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"请求失败:\", error);\r\n\t\t}\r\n\r\n\t\t// 清空输入框\r\n\t\tuserQuestion.value = \"\";\r\n\t}\r\n\r\n\t// 对比文章\r\n\tasync function compareTexts() {\r\n\t\tif (!selectText2.value || !selectText3.value) {\r\n\t\t\talert(\"请先选择两段文本！\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tapi.post(\r\n\t\t\t\t\"gpt_compare\",\r\n\t\t\t\t{ text1: selectText2.value, text2: selectText3.value },\r\n\t\t\t\tdata => {\r\n\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\t// 将对比结果添加到历史记录\r\n\t\t\t\t\t\tchatHistory.value.push({ role: \"assistant\", content: data.result });\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.error(\"对比失败:\", data.error);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"请求失败:\", error);\r\n\t\t}\r\n\t}\r\n\r\n\t// 合并数据\r\n\tasync function mergedJson() {\r\n\t\tif (!selectText2.value || !selectText3.value) {\r\n\t\t\talert(\"请先选择两段文本！\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tapi.post(\r\n\t\t\t\t\"merged_json\",\r\n\t\t\t\t{ text1: selectText2.value, text2: selectText3.value },\r\n\t\t\t\tdata => {\r\n\t\t\t\t\tif (data.error) {\r\n\t\t\t\t\t\tconsole.error(\"后端返回的错误:\", data.error);\r\n\t\t\t\t\t\talert(`处理文章内容时出错: ${data.message}`);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst jsonData = data.json_data;\r\n\t\t\t\t\tconsole.log(\"后端返回的数据:\", jsonData);\r\n\t\t\t\t\tif (data.yes_no === \"no\" || !jsonData) {\r\n\t\t\t\t\t\trenderNonVisualChart(\".chart-container\", data, {\r\n\t\t\t\t\t\t\tmessage: \"当前数据无法合并\"\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchartData.value = { jsonData, chartType: data.chart_classification }; // 存储图表数据\r\n\t\t\t\t\trenderChart(jsonData, data.chart_classification);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"处理JSON时出错:\", error);\r\n\t\t\talert(\"处理JSON时出错，请稍后重试\");\r\n\t\t}\r\n\t}\r\n\r\n\t// 处理表格点击事件\r\n\tfunction handleTableCellClick(data) {\r\n\t\tconst { rowIndex, cellIndex, rowData } = data;\r\n\t\tconsole.log(\"Table cell clicked:\", rowIndex, cellIndex, rowData);\r\n\r\n\t\t// 根据点击的表格数据高亮图表中的对应数据\r\n\t\tif (chartData.value) {\r\n\t\t\thighlightChartData(rowData);\r\n\t\t}\r\n\t}\r\n\r\n\t// 高亮图表中的对应数据\r\n\tfunction highlightChartData(rowData) {\r\n\t\tconst chartContainer = document.querySelector(\".chart-container\");\r\n\t\tif (!chartContainer) return;\r\n\r\n\t\t// 根据图表类型高亮数据\r\n\t\tswitch (chartData.value.chartType) {\r\n\t\t\tcase \"Bar Chart\":\r\n\t\t\t\thighlightBarChart(chartContainer, rowData);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Line Chart\":\r\n\t\t\t\thighlightLineChart(chartContainer, rowData);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Pie Chart\":\r\n\t\t\t\thighlightPieChart(chartContainer, rowData);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(\"Unsupported chart type for highlighting\");\r\n\t\t}\r\n\t}\r\n\r\n\t// 高亮柱状图中的数据\r\n\tfunction highlightBarChart(chartContainer, rowData) {\r\n\t\tconst bars = chartContainer.querySelectorAll(\".bar\");\r\n\t\tbars.forEach(bar => {\r\n\t\t\tif (bar.__data__.label === rowData[0]) {\r\n\t\t\t\tbar.style.fill = \"orange\"; // 高亮颜色\r\n\t\t\t} else {\r\n\t\t\t\tbar.style.fill = \"steelblue\"; // 恢复默认颜色\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// 高亮折线图中的数据\r\n\tfunction highlightLineChart(chartContainer, rowData) {\r\n\t\tconst lines = chartContainer.querySelectorAll(\".line\");\r\n\t\tlines.forEach(line => {\r\n\t\t\tif (line.__data__.label === rowData[0]) {\r\n\t\t\t\tline.style.stroke = \"orange\"; // 高亮颜色\r\n\t\t\t} else {\r\n\t\t\t\tline.style.stroke = \"steelblue\"; // 恢复默认颜色\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// 高亮饼图中的数据\r\n\tfunction highlightPieChart(chartContainer, rowData) {\r\n\t\tconst paths = chartContainer.querySelectorAll(\".arc\");\r\n\t\tpaths.forEach(path => {\r\n\t\t\tif (path.__data__.data.label === rowData[0]) {\r\n\t\t\t\tpath.style.fill = \"orange\"; // 高亮颜色\r\n\t\t\t} else {\r\n\t\t\t\tpath.style.fill = \"steelblue\"; // 恢复默认颜色\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// 渲染图表\r\n\tfunction renderChart(rawJsonData, chartType) {\r\n\t\tif (!rawJsonData || typeof rawJsonData !== \"object\") {\r\n\t\t\tconsole.log(\"rawJsonData:\", rawJsonData);\r\n\t\t\tconsole.log(\"type_rawJsonData:\", typeof rawJsonData);\r\n\t\t\trenderNonVisualChart(\".chart-container\", rawJsonData, {\r\n\t\t\t\tmessage: \"JSON 数据无效\"\r\n\t\t\t});\r\n\t\t\tconsole.error(\"JSON 数据无效:\", rawJsonData);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst data = rawJsonData.data;\r\n\t\tconst options = rawJsonData.options || {};\r\n\t\t// 获取 chart-container 的 DOM 元素\r\n\t\tconst chartContainer = document.querySelector(\".chart-container\");\r\n\r\n\t\t// 根据图表类型渲染\r\n\t\tif (chartType === \"Line Chart\") {\r\n\t\t\trenderLineChart(chartContainer, data, options);\r\n\t\t} else if (chartType === \"Bar Chart\") {\r\n\t\t\trenderBarChart(chartContainer, rawJsonData);\r\n\t\t} else if (chartType === \"Pie Chart\") {\r\n\t\t\trenderPieChart(chartContainer, data, options);\r\n\t\t} else if (chartType === \"Stacked Bar Chart\") {\r\n\t\t\trenderStackedBarChart(chartContainer, data, options);\r\n\t\t} else if (chartType === \"Radar Chart\") {\r\n\t\t\trenderRadarChart(chartContainer, rawJsonData);\r\n\t\t} else if (chartType === \"Scatter Chart\") {\r\n\t\t\trenderScatterChart(chartContainer, rawJsonData);\r\n\t\t} else {\r\n\t\t\tconsole.error(\"未知的图表类型:\", chartType);\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style scoped>\r\n\t/* 主容器 */\r\n\t.main-container {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\twidth: 100%; /* 固定宽度 */\r\n\t\theight: 100vh;\r\n\t\tmargin: 0 auto;\r\n\t\tpadding: 5px;\r\n\t\tbackground-color: #f5f5f5;\r\n\t}\r\n\r\n\t/* 聊天容器 */\r\n\t.chat-container {\r\n\t\tflex: 0.5;\r\n\t\tbackground-color: #ffffff;\r\n\t\tpadding: 20px;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t\tmargin-bottom: 10px;\r\n\t}\r\n\r\n\t/* 历史对话记录 */\r\n\t.chat-history {\r\n\t\tflex: 0.5;\r\n\t\toverflow-y: auto;\r\n\t\theight: 95%;\r\n\t\t/* max-height: 200px; */\r\n\t\tpadding: 10px;\r\n\t\tbackground-color: #fafafa;\r\n\t\tborder-radius: 8px;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t\tmargin-bottom: 20px;\r\n\t}\r\n\r\n\t/* 消息样式 */\r\n\t.message {\r\n\t\tmargin-bottom: 15px;\r\n\t}\r\n\r\n\t.message-content {\r\n\t\tpadding: 12px;\r\n\t\tborder-radius: 8px;\r\n\t\tbackground-color: #f0f0f0;\r\n\t\tline-height: 1.5;\r\n\t}\r\n\r\n\t.message.user .message-content {\r\n\t\tbackground-color: #e3f2fd;\r\n\t\ttext-align: right;\r\n\t}\r\n\r\n\t.message.assistant .message-content {\r\n\t\tbackground-color: #f5f5f5;\r\n\t\ttext-align: left;\r\n\t}\r\n\r\n\t/* 视觉内容容器 */\r\n\t.vis-container {\r\n\t\tflex: 1;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t\tpadding: 20px;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tgap: 20px;\r\n\t}\r\n\r\n\t.chart-container {\r\n\t\tflex: 1;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t}\r\n\r\n\t/* 输入框和按钮容器 */\r\n\t.input-container {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tgap: 10px;\r\n\t}\r\n\r\n\ttextarea {\r\n\t\twidth: 100%;\r\n\t\theight: 80px;\r\n\t\tresize: none;\r\n\t\tpadding: 12px;\r\n\t\tfont-size: 14px;\r\n\t\tborder: 1px solid #ddd;\r\n\t\tborder-radius: 8px;\r\n\t\tbackground-color: #fafafa;\r\n\t\ttransition: border-color 0.3s ease;\r\n\t}\r\n\r\n\ttextarea:focus {\r\n\t\toutline: none;\r\n\t\tborder-color: #4caf50;\r\n\t}\r\n\r\n\t.button-container {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t\tgap: 10px;\r\n\t}\r\n\r\n\tbutton {\r\n\t\tflex: 1; /* 按钮宽度占满容器 */\r\n\t\tpadding: 10px 20px;\r\n\t\tbackground-color: #4caf50;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tborder-radius: 8px;\r\n\t\tcursor: pointer;\r\n\t\tfont-size: 14px;\r\n\t\ttransition: background-color 0.3s ease;\r\n\t}\r\n\r\n\tbutton:hover {\r\n\t\tbackground-color: #45a049;\r\n\t}\r\n\r\n\tbutton:active {\r\n\t\tbackground-color: #3d8b40;\r\n\t}\r\n\r\n\t/* 新增提交按钮样式 */\r\n\t.submit-btn {\r\n\t\tbackground-color: #ff9800;\r\n\t}\r\n\r\n\t.submit-btn:hover {\r\n\t\tbackground-color: #fb8c00;\r\n\t}\r\n\r\n\t.submit-btn:active {\r\n\t\tbackground-color: #f57c00;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}