{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted, onUnmounted } from \"vue\";\nimport bus from \"@/js/eventBus.js\";\nimport CompareTable from \"@/components/compoents_base/CompareTable.vue\";\nimport * as d3 from \"d3\";\nimport { renderLineChart, renderBarChart, renderPieChart, renderNonVisualChart, renderRadarChart, renderStackedBarChart, renderScatterChart } from \"@/js/chartUtils\";\nexport default {\n  __name: 'Div2',\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const userQuestion = ref(\"\"); // 用户输入的问题\n    const chatHistory = ref([]); // 历史对话记录\n    const selectText2 = ref(\"\"); // 左侧选中文本\n    const selectText3 = ref(\"\"); // 右侧选中文本\n    const currentChartData = ref(null); // 当前图表数据\n    const currentChartType = ref(null); // 当前图表类型\n    const div1RawData = ref(null);\n    const div3RawData = ref(null);\n\n    // 定义回调函数\n    const handleDiv1Event = data => handleSelection(data, \"div1\");\n    const handleDiv3Event = data => handleSelection(data, \"div3\");\n    onMounted(() => {\n      bus.on(\"div1_Event\", handleDiv1Event);\n      bus.on(\"div3_Event\", handleDiv3Event);\n    });\n    onUnmounted(() => {\n      // 解绑事件\n      bus.off(\"div1_Event\", handleDiv1Event);\n      bus.off(\"div3_Event\", handleDiv3Event);\n    });\n\n    // 处理选中文本\n    function handleSelection(data, source) {\n      console.log(\"Received data:\", data); // 调试输出接收到的数据\n      const plainText = getPlainTextFromSelection(data.content);\n      if (source === \"div1\") {\n        selectText2.value = plainText;\n        div1RawData.value = data.content; // 直接传递原始HTML\n      } else if (source === \"div3\") {\n        selectText3.value = plainText;\n        div3RawData.value = data.content; // 直接传递原始HTML\n      }\n    }\n\n    // 从 HTML 内容中提取纯文本\n    function getPlainTextFromSelection(htmlContent) {\n      const container = document.createElement(\"div\");\n      container.innerHTML = htmlContent;\n      console.log(\"Extracted text:\", container.innerText); // 输出提取的纯文本\n      return container.innerText || container.textContent || \"\";\n    }\n\n    // 处理拖拽开始事件\n    const handleDragStart = event => {\n      // 将图表数据传递给拖拽事件\n      event.dataTransfer.setData(\"application/json\", JSON.stringify({\n        chartData: currentChartData.value,\n        chartType: currentChartType.value\n      }));\n      console.log(\"拖拽数据已设置:\", currentChartData.value); // 调试日志\n    };\n\n    // 处理拖拽释放事件\n    const handleDrop = event => {\n      event.preventDefault();\n      const data = event.dataTransfer.getData(\"application/json\");\n      console.log(\"接收到的拖拽数据:\", data); // 调试日志\n\n      if (data) {\n        try {\n          const {\n            chartData,\n            chartType\n          } = JSON.parse(data);\n          console.log(\"解析后的图表数据:\", chartData); // 调试日志\n          console.log(\"解析后的图表类型:\", chartType); // 调试日志\n\n          currentChartData.value = chartData;\n          currentChartType.value = chartType;\n          analyzeChart(chartData, chartType); // 调用大模型分析图表\n        } catch (error) {\n          console.error(\"解析拖拽数据失败:\", error);\n        }\n      } else {\n        console.error(\"未接收到拖拽数据\");\n      }\n    };\n\n    // 分析图表\n    const analyzeChart = (chartData, chartType) => {\n      console.log(\"正在调用后端接口...\"); // 调试日志\n\n      // 调用大模型分析图表\n      api.post(\"analyze_chart\", {\n        chartData,\n        chartType\n      }, response => {\n        console.log(\"后端接口返回的数据:\", response); // 调试日志\n\n        // 检查 response 是否存在且包含 analysis 字段\n        if (response && response.analysis) {\n          // 格式化分析结果\n          const formattedAnalysis = formatAnalysisResult(response.analysis);\n\n          // 将分析结果添加到聊天记录\n          chatHistory.value.push({\n            role: \"assistant\",\n            content: formattedAnalysis // 使用格式化后的 HTML 内容\n          });\n        } else {\n          console.error(\"后端返回的数据格式不正确:\", response);\n          chatHistory.value.push({\n            role: \"assistant\",\n            content: \"图表分析失败，后端返回的数据格式不正确。\"\n          });\n        }\n      }, error => {\n        // 处理错误\n        console.error(\"图表分析失败:\", error);\n        chatHistory.value.push({\n          role: \"assistant\",\n          content: \"图表分析失败，请稍后重试。\"\n        });\n      });\n    };\n    const formatAnalysisResult = text => {\n      // 转换 Markdown 标题\n      text = text.replace(/### (.*)/g, \"<h3>$1</h3>\");\n\n      // 转换加粗文本\n      text = text.replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\");\n\n      // 处理换行符\n      text = text.replace(/\\n/g, \"<br>\");\n\n      // 处理列表项（数字编号和短横线）\n      text = text.replace(/(?:^|\\n)(\\d+\\.\\s+.*)/g, \"<li>$1</li>\");\n      text = text.replace(/(?:^|\\n)-\\s+(.*)/g, \"<li>$1</li>\");\n\n      // 统一包裹列表项\n      text = text.replace(/(<li>.*<\\/li>)/gs, \"<ul>$1</ul>\");\n      return text;\n    };\n\n    // 向 GPT 提问\n    const askQuestion = () => {\n      if (!userQuestion.value) {\n        alert(\"请输入问题！\");\n        return;\n      }\n\n      // 将用户的问题添加到历史记录\n      chatHistory.value.push({\n        role: \"user\",\n        content: userQuestion.value\n      });\n\n      // 调用 GPT 提问接口\n      api.post(\"gpt_ask_chart\", {\n        question: userQuestion.value,\n        chartData: currentChartData.value,\n        chartType: currentChartType.value\n      }, response => {\n        // 成功回调\n        console.log(\"后端接口返回的数据:\", response); // 调试日志\n\n        // 格式化 GPT 的回答\n        const formattedAnswer = formatAnalysisResult(response.answer);\n\n        // 将 GPT 的回答添加到历史记录\n        chatHistory.value.push({\n          role: \"assistant\",\n          content: formattedAnswer\n        });\n      }, error => {\n        // 错误回调\n        console.error(\"请求失败:\", error);\n        chatHistory.value.push({\n          role: \"assistant\",\n          content: \"请求失败，请稍后重试。\"\n        });\n      });\n\n      // 清空输入框\n      userQuestion.value = \"\";\n    };\n\n    // 对比文章\n    async function compareTexts() {\n      if (!selectText2.value || !selectText3.value) {\n        alert(\"请先选择两段文本！\");\n        return;\n      }\n      try {\n        api.post(\"gpt_compare\", {\n          text1: selectText2.value,\n          text2: selectText3.value\n        }, data => {\n          if (data) {\n            // 将对比结果添加到历史记录\n            chatHistory.value.push({\n              role: \"assistant\",\n              content: data.result\n            });\n          } else {\n            console.error(\"对比失败:\", data.error);\n          }\n        });\n      } catch (error) {\n        console.error(\"请求失败:\", error);\n      }\n    }\n\n    // 合并数据\n    async function mergedJson() {\n      if (!selectText2.value || !selectText3.value) {\n        alert(\"请先选择两段文本！\");\n        return;\n      }\n      try {\n        api.post(\"merged_json\", {\n          text1: selectText2.value,\n          text2: selectText3.value\n        }, data => {\n          if (data.error) {\n            console.error(\"后端返回的错误:\", data.error);\n            alert(`处理文章内容时出错: ${data.message}`);\n            return;\n          }\n          const jsonData = data.json_data;\n          currentChartData.value = jsonData;\n          currentChartType.value = data.chart_classification;\n          console.log(\"后端返回的数据:\", jsonData);\n          if (data.yes_no === \"no\" || !jsonData) {\n            renderNonVisualChart(\".chart-container\", data, {\n              message: \"当前数据无法合并\"\n            });\n            return;\n          }\n          renderChart(jsonData, data.chart_classification);\n          // 通过事件总线将 Div1 和 Div3 的 JSON 数据传递给 TextPopup.vue\n          console.log(\"触发 updateChart1 事件\");\n          bus.emit(\"updateChart1\", {\n            divId: \"div1\",\n            jsonData: data.div1_json,\n            chartType: data.chart_classification\n          });\n          console.log(\"触发 updateChart3 事件\");\n          bus.emit(\"updateChart3\", {\n            divId: \"div3\",\n            jsonData: data.div3_json,\n            chartType: data.chart_classification\n          });\n        });\n      } catch (error) {\n        console.error(\"处理JSON时出错:\", error);\n        alert(\"处理JSON时出错，请稍后重试\");\n      }\n    }\n\n    // 渲染图表\n    function renderChart(rawJsonData, chartType) {\n      if (!rawJsonData || typeof rawJsonData !== \"object\") {\n        console.log(\"rawJsonData:\", rawJsonData);\n        console.log(\"type_rawJsonData:\", typeof rawJsonData);\n        renderNonVisualChart(`.${props.containerClass}`, rawJsonData, {\n          message: \"JSON 数据无效\"\n        });\n        console.error(\"JSON 数据无效:\", rawJsonData);\n        return;\n      }\n      const data = rawJsonData.data;\n      const options = rawJsonData.options || {};\n      // 获取 chart-container 的 DOM 元素\n      const chartContainer = document.querySelector(\".chart-container\");\n\n      // 根据图表类型渲染\n      if (chartType === \"Line Chart\") {\n        renderLineChart(chartContainer, data, options);\n      } else if (chartType === \"Bar Chart\") {\n        renderBarChart(chartContainer, rawJsonData);\n      } else if (chartType === \"Pie Chart\") {\n        renderPieChart(chartContainer, data, options);\n      } else if (chartType === \"Stacked Bar Chart\") {\n        renderStackedBarChart(chartContainer, data, options);\n      } else if (chartType === \"Radar Chart\") {\n        renderRadarChart(chartContainer, rawJsonData);\n      } else if (chartType === \"Scatter Chart\") {\n        renderScatterChart(chartContainer, rawJsonData);\n      } else {\n        console.error(\"未知的图表类型:\", chartType);\n      }\n    }\n    const __returned__ = {\n      userQuestion,\n      chatHistory,\n      selectText2,\n      selectText3,\n      currentChartData,\n      currentChartType,\n      div1RawData,\n      div3RawData,\n      handleDiv1Event,\n      handleDiv3Event,\n      handleSelection,\n      getPlainTextFromSelection,\n      handleDragStart,\n      handleDrop,\n      analyzeChart,\n      formatAnalysisResult,\n      askQuestion,\n      compareTexts,\n      mergedJson,\n      renderChart,\n      ref,\n      onMounted,\n      onUnmounted,\n      get bus() {\n        return bus;\n      },\n      CompareTable,\n      get d3() {\n        return d3;\n      },\n      get renderLineChart() {\n        return renderLineChart;\n      },\n      get renderBarChart() {\n        return renderBarChart;\n      },\n      get renderPieChart() {\n        return renderPieChart;\n      },\n      get renderNonVisualChart() {\n        return renderNonVisualChart;\n      },\n      get renderRadarChart() {\n        return renderRadarChart;\n      },\n      get renderStackedBarChart() {\n        return renderStackedBarChart;\n      },\n      get renderScatterChart() {\n        return renderScatterChart;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","bus","CompareTable","d3","renderLineChart","renderBarChart","renderPieChart","renderNonVisualChart","renderRadarChart","renderStackedBarChart","renderScatterChart","userQuestion","chatHistory","selectText2","selectText3","currentChartData","currentChartType","div1RawData","div3RawData","handleDiv1Event","data","handleSelection","handleDiv3Event","on","off","source","console","log","plainText","getPlainTextFromSelection","content","value","htmlContent","container","document","createElement","innerHTML","innerText","textContent","handleDragStart","event","dataTransfer","setData","JSON","stringify","chartData","chartType","handleDrop","preventDefault","getData","parse","analyzeChart","error","api","post","response","analysis","formattedAnalysis","formatAnalysisResult","push","role","text","replace","askQuestion","alert","question","formattedAnswer","answer","compareTexts","text1","text2","result","mergedJson","message","jsonData","json_data","chart_classification","yes_no","renderChart","emit","divId","div1_json","div3_json","rawJsonData","props","containerClass","options","chartContainer","querySelector"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/Div2.vue"],"sourcesContent":["<template>\r\n\t<div class=\"main-container\">\r\n\t\t<!-- 聊天容器 -->\r\n\t\t<div class=\"chat-container\" @dragover.prevent @drop=\"handleDrop\">\r\n\t\t\t<!-- 历史对话记录 -->\r\n\t\t\t<div class=\"chat-history\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tv-for=\"(message, index) in chatHistory\"\r\n\t\t\t\t\t:key=\"index\"\r\n\t\t\t\t\t:class=\"['message', message.role]\">\r\n\t\t\t\t\t<div class=\"message-content\">\r\n\t\t\t\t\t\t<strong>{{ message.role === \"user\" ? \"用户\" : \"GPT\" }}:</strong>\r\n\t\t\t\t\t\t<p v-html=\"message.content\"></p>\r\n\t\t\t\t\t\t<!-- 使用 v-html 渲染 HTML 内容 -->\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- 视觉内容容器 -->\r\n\t\t<div class=\"vis-container\">\r\n\t\t\t<CompareTable\r\n\t\t\t\tclass=\"compare_table\"\r\n\t\t\t\t:div1-raw-data=\"div1RawData\"\r\n\t\t\t\t:div3-raw-data=\"div3RawData\" />\r\n\t\t</div>\r\n\t\t<div class=\"input\">\r\n\t\t\t<!-- 输入框和操作按钮 -->\r\n\t\t\t<div class=\"input-container\">\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tv-model=\"userQuestion\"\r\n\t\t\t\t\trows=\"2\"\r\n\t\t\t\t\tplaceholder=\"请输入你想问的问题...\"></textarea>\r\n\t\t\t\t<div class=\"button-container\">\r\n\t\t\t\t\t<button @click=\"askQuestion\">发送</button>\r\n\t\t\t\t\t<!-- <button @click=\"compareTexts\">对比文章</button> -->\r\n\t\t\t\t\t<!-- <button @click=\"compareTexts\" class=\"submit-btn\">\r\n\t\t\t\t\t\t合并数据可视化\r\n\t\t\t\t\t</button> -->\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted } from \"vue\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\timport CompareTable from \"@/components/compoents_base/CompareTable.vue\";\r\n\timport * as d3 from \"d3\";\r\n\timport {\r\n\t\trenderLineChart,\r\n\t\trenderBarChart,\r\n\t\trenderPieChart,\r\n\t\trenderNonVisualChart,\r\n\t\trenderRadarChart,\r\n\t\trenderStackedBarChart,\r\n\t\trenderScatterChart\r\n\t} from \"@/js/chartUtils\";\r\n\r\n\tconst userQuestion = ref(\"\"); // 用户输入的问题\r\n\tconst chatHistory = ref([]); // 历史对话记录\r\n\tconst selectText2 = ref(\"\"); // 左侧选中文本\r\n\tconst selectText3 = ref(\"\"); // 右侧选中文本\r\n\tconst currentChartData = ref(null); // 当前图表数据\r\n\tconst currentChartType = ref(null); // 当前图表类型\r\n\tconst div1RawData = ref(null);\r\n\tconst div3RawData = ref(null);\r\n\r\n\t// 定义回调函数\r\n\tconst handleDiv1Event = data => handleSelection(data, \"div1\");\r\n\tconst handleDiv3Event = data => handleSelection(data, \"div3\");\r\n\r\n\tonMounted(() => {\r\n\t\tbus.on(\"div1_Event\", handleDiv1Event);\r\n\t\tbus.on(\"div3_Event\", handleDiv3Event);\r\n\t});\r\n\r\n\tonUnmounted(() => {\r\n\t\t// 解绑事件\r\n\t\tbus.off(\"div1_Event\", handleDiv1Event);\r\n\t\tbus.off(\"div3_Event\", handleDiv3Event);\r\n\t});\r\n\r\n\t// 处理选中文本\r\n\tfunction handleSelection(data, source) {\r\n\t\tconsole.log(\"Received data:\", data); // 调试输出接收到的数据\r\n\t\tconst plainText = getPlainTextFromSelection(data.content);\r\n\t\tif (source === \"div1\") {\r\n\t\t\tselectText2.value = plainText;\r\n\t\t\tdiv1RawData.value = data.content; // 直接传递原始HTML\r\n\t\t} else if (source === \"div3\") {\r\n\t\t\tselectText3.value = plainText;\r\n\t\t\tdiv3RawData.value = data.content; // 直接传递原始HTML\r\n\t\t}\r\n\t}\r\n\r\n\t// 从 HTML 内容中提取纯文本\r\n\tfunction getPlainTextFromSelection(htmlContent) {\r\n\t\tconst container = document.createElement(\"div\");\r\n\t\tcontainer.innerHTML = htmlContent;\r\n\t\tconsole.log(\"Extracted text:\", container.innerText); // 输出提取的纯文本\r\n\t\treturn container.innerText || container.textContent || \"\";\r\n\t}\r\n\r\n\t// 处理拖拽开始事件\r\n\tconst handleDragStart = event => {\r\n\t\t// 将图表数据传递给拖拽事件\r\n\t\tevent.dataTransfer.setData(\r\n\t\t\t\"application/json\",\r\n\t\t\tJSON.stringify({\r\n\t\t\t\tchartData: currentChartData.value,\r\n\t\t\t\tchartType: currentChartType.value\r\n\t\t\t})\r\n\t\t);\r\n\t\tconsole.log(\"拖拽数据已设置:\", currentChartData.value); // 调试日志\r\n\t};\r\n\r\n\t// 处理拖拽释放事件\r\n\tconst handleDrop = event => {\r\n\t\tevent.preventDefault();\r\n\t\tconst data = event.dataTransfer.getData(\"application/json\");\r\n\t\tconsole.log(\"接收到的拖拽数据:\", data); // 调试日志\r\n\r\n\t\tif (data) {\r\n\t\t\ttry {\r\n\t\t\t\tconst { chartData, chartType } = JSON.parse(data);\r\n\t\t\t\tconsole.log(\"解析后的图表数据:\", chartData); // 调试日志\r\n\t\t\t\tconsole.log(\"解析后的图表类型:\", chartType); // 调试日志\r\n\r\n\t\t\t\tcurrentChartData.value = chartData;\r\n\t\t\t\tcurrentChartType.value = chartType;\r\n\t\t\t\tanalyzeChart(chartData, chartType); // 调用大模型分析图表\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(\"解析拖拽数据失败:\", error);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconsole.error(\"未接收到拖拽数据\");\r\n\t\t}\r\n\t};\r\n\r\n\t// 分析图表\r\n\tconst analyzeChart = (chartData, chartType) => {\r\n\t\tconsole.log(\"正在调用后端接口...\"); // 调试日志\r\n\r\n\t\t// 调用大模型分析图表\r\n\t\tapi.post(\r\n\t\t\t\"analyze_chart\",\r\n\t\t\t{ chartData, chartType },\r\n\t\t\tresponse => {\r\n\t\t\t\tconsole.log(\"后端接口返回的数据:\", response); // 调试日志\r\n\r\n\t\t\t\t// 检查 response 是否存在且包含 analysis 字段\r\n\t\t\t\tif (response && response.analysis) {\r\n\t\t\t\t\t// 格式化分析结果\r\n\t\t\t\t\tconst formattedAnalysis = formatAnalysisResult(response.analysis);\r\n\r\n\t\t\t\t\t// 将分析结果添加到聊天记录\r\n\t\t\t\t\tchatHistory.value.push({\r\n\t\t\t\t\t\trole: \"assistant\",\r\n\t\t\t\t\t\tcontent: formattedAnalysis // 使用格式化后的 HTML 内容\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.error(\"后端返回的数据格式不正确:\", response);\r\n\t\t\t\t\tchatHistory.value.push({\r\n\t\t\t\t\t\trole: \"assistant\",\r\n\t\t\t\t\t\tcontent: \"图表分析失败，后端返回的数据格式不正确。\"\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\terror => {\r\n\t\t\t\t// 处理错误\r\n\t\t\t\tconsole.error(\"图表分析失败:\", error);\r\n\t\t\t\tchatHistory.value.push({\r\n\t\t\t\t\trole: \"assistant\",\r\n\t\t\t\t\tcontent: \"图表分析失败，请稍后重试。\"\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t};\r\n\r\n\tconst formatAnalysisResult = text => {\r\n\t\t// 转换 Markdown 标题\r\n\t\ttext = text.replace(/### (.*)/g, \"<h3>$1</h3>\");\r\n\r\n\t\t// 转换加粗文本\r\n\t\ttext = text.replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\");\r\n\r\n\t\t// 处理换行符\r\n\t\ttext = text.replace(/\\n/g, \"<br>\");\r\n\r\n\t\t// 处理列表项（数字编号和短横线）\r\n\t\ttext = text.replace(/(?:^|\\n)(\\d+\\.\\s+.*)/g, \"<li>$1</li>\");\r\n\t\ttext = text.replace(/(?:^|\\n)-\\s+(.*)/g, \"<li>$1</li>\");\r\n\r\n\t\t// 统一包裹列表项\r\n\t\ttext = text.replace(/(<li>.*<\\/li>)/gs, \"<ul>$1</ul>\");\r\n\r\n\t\treturn text;\r\n\t};\r\n\r\n\t// 向 GPT 提问\r\n\tconst askQuestion = () => {\r\n\t\tif (!userQuestion.value) {\r\n\t\t\talert(\"请输入问题！\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 将用户的问题添加到历史记录\r\n\t\tchatHistory.value.push({ role: \"user\", content: userQuestion.value });\r\n\r\n\t\t// 调用 GPT 提问接口\r\n\t\tapi.post(\r\n\t\t\t\"gpt_ask_chart\",\r\n\t\t\t{\r\n\t\t\t\tquestion: userQuestion.value,\r\n\t\t\t\tchartData: currentChartData.value,\r\n\t\t\t\tchartType: currentChartType.value\r\n\t\t\t},\r\n\t\t\tresponse => {\r\n\t\t\t\t// 成功回调\r\n\t\t\t\tconsole.log(\"后端接口返回的数据:\", response); // 调试日志\r\n\r\n\t\t\t\t// 格式化 GPT 的回答\r\n\t\t\t\tconst formattedAnswer = formatAnalysisResult(response.answer);\r\n\r\n\t\t\t\t// 将 GPT 的回答添加到历史记录\r\n\t\t\t\tchatHistory.value.push({ role: \"assistant\", content: formattedAnswer });\r\n\t\t\t},\r\n\t\t\terror => {\r\n\t\t\t\t// 错误回调\r\n\t\t\t\tconsole.error(\"请求失败:\", error);\r\n\t\t\t\tchatHistory.value.push({\r\n\t\t\t\t\trole: \"assistant\",\r\n\t\t\t\t\tcontent: \"请求失败，请稍后重试。\"\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\t// 清空输入框\r\n\t\tuserQuestion.value = \"\";\r\n\t};\r\n\r\n\t// 对比文章\r\n\tasync function compareTexts() {\r\n\t\tif (!selectText2.value || !selectText3.value) {\r\n\t\t\talert(\"请先选择两段文本！\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tapi.post(\r\n\t\t\t\t\"gpt_compare\",\r\n\t\t\t\t{ text1: selectText2.value, text2: selectText3.value },\r\n\t\t\t\tdata => {\r\n\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\t// 将对比结果添加到历史记录\r\n\t\t\t\t\t\tchatHistory.value.push({ role: \"assistant\", content: data.result });\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.error(\"对比失败:\", data.error);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"请求失败:\", error);\r\n\t\t}\r\n\t}\r\n\r\n\t// 合并数据\r\n\tasync function mergedJson() {\r\n\t\tif (!selectText2.value || !selectText3.value) {\r\n\t\t\talert(\"请先选择两段文本！\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tapi.post(\r\n\t\t\t\t\"merged_json\",\r\n\t\t\t\t{ text1: selectText2.value, text2: selectText3.value },\r\n\t\t\t\tdata => {\r\n\t\t\t\t\tif (data.error) {\r\n\t\t\t\t\t\tconsole.error(\"后端返回的错误:\", data.error);\r\n\t\t\t\t\t\talert(`处理文章内容时出错: ${data.message}`);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst jsonData = data.json_data;\r\n\t\t\t\t\tcurrentChartData.value = jsonData;\r\n\t\t\t\t\tcurrentChartType.value = data.chart_classification;\r\n\t\t\t\t\tconsole.log(\"后端返回的数据:\", jsonData);\r\n\t\t\t\t\tif (data.yes_no === \"no\" || !jsonData) {\r\n\t\t\t\t\t\trenderNonVisualChart(\".chart-container\", data, {\r\n\t\t\t\t\t\t\tmessage: \"当前数据无法合并\"\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\trenderChart(jsonData, data.chart_classification);\r\n\t\t\t\t\t// 通过事件总线将 Div1 和 Div3 的 JSON 数据传递给 TextPopup.vue\r\n\t\t\t\t\tconsole.log(\"触发 updateChart1 事件\");\r\n\t\t\t\t\tbus.emit(\"updateChart1\", {\r\n\t\t\t\t\t\tdivId: \"div1\",\r\n\t\t\t\t\t\tjsonData: data.div1_json,\r\n\t\t\t\t\t\tchartType: data.chart_classification\r\n\t\t\t\t\t});\r\n\t\t\t\t\tconsole.log(\"触发 updateChart3 事件\");\r\n\t\t\t\t\tbus.emit(\"updateChart3\", {\r\n\t\t\t\t\t\tdivId: \"div3\",\r\n\t\t\t\t\t\tjsonData: data.div3_json,\r\n\t\t\t\t\t\tchartType: data.chart_classification\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"处理JSON时出错:\", error);\r\n\t\t\talert(\"处理JSON时出错，请稍后重试\");\r\n\t\t}\r\n\t}\r\n\r\n\t// 渲染图表\r\n\tfunction renderChart(rawJsonData, chartType) {\r\n\t\tif (!rawJsonData || typeof rawJsonData !== \"object\") {\r\n\t\t\tconsole.log(\"rawJsonData:\", rawJsonData);\r\n\t\t\tconsole.log(\"type_rawJsonData:\", typeof rawJsonData);\r\n\t\t\trenderNonVisualChart(`.${props.containerClass}`, rawJsonData, {\r\n\t\t\t\tmessage: \"JSON 数据无效\"\r\n\t\t\t});\r\n\t\t\tconsole.error(\"JSON 数据无效:\", rawJsonData);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst data = rawJsonData.data;\r\n\t\tconst options = rawJsonData.options || {};\r\n\t\t// 获取 chart-container 的 DOM 元素\r\n\t\tconst chartContainer = document.querySelector(\".chart-container\");\r\n\r\n\t\t// 根据图表类型渲染\r\n\t\tif (chartType === \"Line Chart\") {\r\n\t\t\trenderLineChart(chartContainer, data, options);\r\n\t\t} else if (chartType === \"Bar Chart\") {\r\n\t\t\trenderBarChart(chartContainer, rawJsonData);\r\n\t\t} else if (chartType === \"Pie Chart\") {\r\n\t\t\trenderPieChart(chartContainer, data, options);\r\n\t\t} else if (chartType === \"Stacked Bar Chart\") {\r\n\t\t\trenderStackedBarChart(chartContainer, data, options);\r\n\t\t} else if (chartType === \"Radar Chart\") {\r\n\t\t\trenderRadarChart(chartContainer, rawJsonData);\r\n\t\t} else if (chartType === \"Scatter Chart\") {\r\n\t\t\trenderScatterChart(chartContainer, rawJsonData);\r\n\t\t} else {\r\n\t\t\tconsole.error(\"未知的图表类型:\", chartType);\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style scoped>\r\n\t/* 主容器 */\r\n\t.main-container {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\twidth: 100%; /* 固定宽度 */\r\n\t\theight: 100vh;\r\n\t\tmargin: 0 auto;\r\n\t\tpadding: 5px;\r\n\t\tbackground-color: #f5f5f5;\r\n\t}\r\n\r\n\t/* 聊天容器 */\r\n\t.chat-container {\r\n\t\tflex: 0.5;\r\n\t\tbackground-color: #ffffff;\r\n\t\tpadding: 20px;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t\tmargin-bottom: 10px;\r\n\t}\r\n\r\n\t.input {\r\n\t\tflex: 0.3;\r\n\t}\r\n\r\n\t/* 历史对话记录 */\r\n\t.chat-history {\r\n\t\tflex: 0.5;\r\n\t\toverflow-y: auto;\r\n\t\theight: 95%;\r\n\t\t/* max-height: 200px; */\r\n\t\tpadding: 10px;\r\n\t\tbackground-color: #fafafa;\r\n\t\tborder-radius: 8px;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t\tmargin-bottom: 20px;\r\n\t}\r\n\r\n\t/* 消息样式 */\r\n\t.message {\r\n\t\tmargin-bottom: 15px;\r\n\t}\r\n\r\n\t.message-content {\r\n\t\tpadding: 12px;\r\n\t\tborder-radius: 8px;\r\n\t\tbackground-color: #f0f0f0;\r\n\t\tline-height: 1.5;\r\n\t}\r\n\r\n\t.message.user .message-content {\r\n\t\tbackground-color: #e3f2fd;\r\n\t\ttext-align: right;\r\n\t}\r\n\r\n\t.message.assistant .message-content {\r\n\t\tbackground-color: #f5f5f5;\r\n\t\ttext-align: left;\r\n\t}\r\n\r\n\t/* 分析结果的样式 */\r\n\t.message-content p {\r\n\t\tfont-family: Arial, sans-serif;\r\n\t\tline-height: 1.6;\r\n\t\tcolor: #333;\r\n\t}\r\n\r\n\t.message-content h3 {\r\n\t\tfont-size: 1.2em;\r\n\t\tfont-weight: bold;\r\n\t\tmargin: 10px 0;\r\n\t\tcolor: #0077b6;\r\n\t}\r\n\r\n\t.message-content strong {\r\n\t\tfont-weight: bold;\r\n\t\tcolor: #d90429;\r\n\t}\r\n\r\n\t.message-content ul {\r\n\t\tmargin: 10px 0;\r\n\t\tpadding-left: 20px;\r\n\t}\r\n\r\n\t.message-content li {\r\n\t\tmargin-bottom: 5px;\r\n\t}\r\n\r\n\t.message-content br {\r\n\t\tdisplay: block;\r\n\t\tmargin: 10px 0;\r\n\t}\r\n\t/* 视觉内容容器 */\r\n\t.vis-container {\r\n\t\tflex: 1.2;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t\tpadding: 20px;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tgap: 20px;\r\n\t}\r\n\r\n\t.chart-container {\r\n\t\tflex: 1;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t}\r\n\r\n\t/* 输入框和按钮容器 */\r\n\t.input-container {\r\n\t\tdisplay: flex;\r\n\t\tflex: 2;\r\n\t\tflex-direction: column;\r\n\t\tgap: 10px;\r\n\t}\r\n\r\n\ttextarea {\r\n\t\twidth: 100%;\r\n\t\t/* height: 80px; */\r\n\t\tresize: none;\r\n\t\tpadding: 12px;\r\n\t\tfont-size: 14px;\r\n\t\tborder: 1px solid #ddd;\r\n\t\tborder-radius: 8px;\r\n\t\tbackground-color: #fafafa;\r\n\t\ttransition: border-color 0.3s ease;\r\n\t}\r\n\r\n\ttextarea:focus {\r\n\t\toutline: none;\r\n\t\tborder-color: #4caf50;\r\n\t}\r\n\r\n\t.button-container {\r\n\t\tdisplay: flex;\r\n\t\tflex: 0.2;\r\n\t\tjustify-content: space-between;\r\n\t\tgap: 10px;\r\n\t}\r\n\r\n\tbutton {\r\n\t\tflex: 1; /* 按钮宽度占满容器 */\r\n\t\tpadding: 10px 20px;\r\n\t\tbackground-color: #4caf50;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tborder-radius: 8px;\r\n\t\tcursor: pointer;\r\n\t\tfont-size: 14px;\r\n\t\ttransition: background-color 0.3s ease;\r\n\t}\r\n\r\n\tbutton:hover {\r\n\t\tbackground-color: #45a049;\r\n\t}\r\n\r\n\tbutton:active {\r\n\t\tbackground-color: #3d8b40;\r\n\t}\r\n\r\n\t/* 新增提交按钮样式 */\r\n\t.submit-btn {\r\n\t\tbackground-color: #ff9800;\r\n\t}\r\n\r\n\t.submit-btn:hover {\r\n\t\tbackground-color: #fb8c00;\r\n\t}\r\n\r\n\t.submit-btn:active {\r\n\t\tbackground-color: #f57c00;\r\n\t}\r\n\r\n\t.compare_table {\r\n\t\tmax-height: 500px;\r\n\t\toverflow: auto;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}