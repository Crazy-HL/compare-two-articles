{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createVNode as _createVNode, Fragment as _Fragment, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-3bf47914\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = [\"id\"];\nconst _hoisted_2 = [\"innerHTML\"];\nexport function render(_ctx, _cache) {\n  const _component_LoadingSpinner = _resolveComponent(\"LoadingSpinner\");\n  const _component_ErrorDisplay = _resolveComponent(\"ErrorDisplay\");\n  const _component_PopupOverlay = _resolveComponent(\"PopupOverlay\");\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass(['div0', _ctx.selectContentClass]),\n    id: _ctx.divId,\n    ref: \"divRef\"\n  }, [_createElementVNode(\"h1\", null, _toDisplayString(_ctx.pageTitle), 1 /* TEXT */), _createCommentVNode(\" 加载动画 \"), _ctx.loading ? (_openBlock(), _createBlock(_component_LoadingSpinner, {\n    key: 0\n  })) : _ctx.error ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" 错误信息 \"), _createVNode(_component_ErrorDisplay, {\n    error: _ctx.error,\n    onRetry: _ctx.fetchWikipediaContent\n  }, null, 8 /* PROPS */, [\"error\", \"onRetry\"])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 2\n  }, [_createCommentVNode(\" 文章内容 \"), _createElementVNode(\"div\", {\n    class: \"showHtml wikipedia-content\",\n    innerHTML: _ctx.pageHtml,\n    onMouseup: _cache[0] || (_cache[0] = function () {\n      return _ctx.handleSelection && _ctx.handleSelection(...arguments);\n    })\n  }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_2)], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)), _createCommentVNode(\" 弹出框和遮罩层 \"), _ctx.showPopup[_ctx.divId] ? (_openBlock(), _createBlock(_component_PopupOverlay, {\n    key: 3,\n    show: _ctx.showPopup[_ctx.divId],\n    selectedText: _ctx.selectedText[_ctx.divId],\n    divId: _ctx.divId,\n    visualizationLoading: _ctx.visualizationLoading,\n    onClosePopup: _ctx.closePopup,\n    onSwitchView: _ctx.switchView\n  }, null, 8 /* PROPS */, [\"show\", \"selectedText\", \"divId\", \"visualizationLoading\", \"onClosePopup\", \"onSwitchView\"])) : _createCommentVNode(\"v-if\", true)], 10 /* CLASS, PROPS */, _hoisted_1);\n}","map":{"version":3,"names":["_createElementBlock","class","_normalizeClass","_ctx","selectContentClass","id","divId","ref","_createElementVNode","_toDisplayString","pageTitle","_createCommentVNode","loading","_createBlock","_component_LoadingSpinner","key","error","_Fragment","_createVNode","_component_ErrorDisplay","onRetry","fetchWikipediaContent","innerHTML","pageHtml","onMouseup","_cache","handleSelection","arguments","_hoisted_2","showPopup","_component_PopupOverlay","show","selectedText","visualizationLoading","onClosePopup","closePopup","onSwitchView","switchView","_hoisted_1"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\base\\MainComponent.vue"],"sourcesContent":["<template>\r\n\t<div :class=\"['div0', selectContentClass]\" :id=\"divId\" ref=\"divRef\">\r\n\t\t<h1>{{ pageTitle }}</h1>\r\n\r\n\t\t<!-- 加载动画 -->\r\n\t\t<LoadingSpinner v-if=\"loading\" />\r\n\r\n\t\t<!-- 错误信息 -->\r\n\t\t<ErrorDisplay\r\n\t\t\tv-else-if=\"error\"\r\n\t\t\t:error=\"error\"\r\n\t\t\t@retry=\"fetchWikipediaContent\" />\r\n\r\n\t\t<!-- 文章内容 -->\r\n\t\t<div\r\n\t\t\tv-else\r\n\t\t\tclass=\"showHtml wikipedia-content\"\r\n\t\t\tv-html=\"pageHtml\"\r\n\t\t\t@mouseup=\"handleSelection\"></div>\r\n\r\n\t\t<!-- 弹出框和遮罩层 -->\r\n\t\t<PopupOverlay\r\n\t\t\tv-if=\"showPopup[divId]\"\r\n\t\t\t:show=\"showPopup[divId]\"\r\n\t\t\t:selectedText=\"selectedText[divId]\"\r\n\t\t\t:divId=\"divId\"\r\n\t\t\t:visualizationLoading=\"visualizationLoading\"\r\n\t\t\t@closePopup=\"closePopup\"\r\n\t\t\t@switchView=\"switchView\" />\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted, nextTick } from \"vue\";\r\n\timport LoadingSpinner from \"./LoadingSpinner.vue\";\r\n\timport ErrorDisplay from \"./ErrorDisplay.vue\";\r\n\timport PopupOverlay from \"./PopupOverlay.vue\";\r\n\timport { fetchWikipediaContent, injectWikipediaStyles } from \"@/js/apiUtils\";\r\n\timport * as d3 from \"d3\";\r\n\timport { renderChart } from \"@/js/chartUtils\";\r\n\r\n\tconst props = defineProps({\r\n\t\tpageTitle: String,\r\n\t\tdivId: String,\r\n\t\tselectContentClass: String\r\n\t});\r\n\r\n\tconst pageHtml = ref(\"\");\r\n\tconst loading = ref(true);\r\n\tconst error = ref(\"\");\r\n\tconst selectedText = ref({});\r\n\tconst showPopup = ref({});\r\n\tconst divRef = ref(null);\r\n\tconst visualizationLoading = ref(false);\r\n\r\n\t// 获取 Wikipedia 内容\r\n\tconst fetchWikipediaContent = async () => {\r\n\t\ttry {\r\n\t\t\tconst apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(\r\n\t\t\t\tprops.pageTitle\r\n\t\t\t)}`;\r\n\t\t\tconst response = await fetch(apiUrl);\r\n\t\t\tif (!response.ok) throw new Error(\"Failed to fetch data\");\r\n\r\n\t\t\tconst html = await response.text();\r\n\t\t\tpageHtml.value = html;\r\n\t\t\tinjectWikipediaStyles();\r\n\t\t} catch (err) {\r\n\t\t\terror.value = \"Error fetching Wikipedia content: \" + err.message;\r\n\t\t} finally {\r\n\t\t\tloading.value = false;\r\n\t\t}\r\n\t};\r\n\r\n\t// 处理选中文本\r\n\tconst handleSelection = () => {\r\n\t\tconst selection = window.getSelection();\r\n\r\n\t\t// 检查 selection 是否存在以及是否有选中的内容\r\n\t\tif (!selection || !selection.rangeCount) {\r\n\t\t\tconsole.log(\"没有选中内容或 selection 为 null\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst range = selection.getRangeAt(0);\r\n\t\tconst selectedHtml = range.cloneContents();\r\n\r\n\t\t// 创建临时容器\r\n\t\tconst tempDiv = document.createElement(\"div\");\r\n\t\ttempDiv.appendChild(selectedHtml);\r\n\r\n\t\t// 判断选中的内容是否包含表格\r\n\t\tconst table = tempDiv.querySelector(\"table\");\r\n\t\tif (table) {\r\n\t\t\tconsole.log(`${props.divId} 选中了表格内容`);\r\n\t\t\ttable.classList.add(\"custom-table\");\r\n\t\t\tselectedText.value[props.divId] = tempDiv.innerHTML;\r\n\t\t} else {\r\n\t\t\tconst text = selection.toString().trim();\r\n\t\t\tif (!text) {\r\n\t\t\t\tconsole.log(\"选中的文字为空\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tconsole.log(`${props.divId} 选中的文字:`, text);\r\n\t\t\tselectedText.value[props.divId] = text;\r\n\t\t}\r\n\r\n\t\tshowPopup.value[props.divId] = true;\r\n\r\n\t\t// 确保弹窗位置更新\r\n\t\tnextTick(() => {\r\n\t\t\tupdatePopupPosition();\r\n\t\t});\r\n\t};\r\n\r\n\t// 关闭弹出框\r\n\tconst closePopup = () => {\r\n\t\tshowPopup.value[props.divId] = false;\r\n\t\tselectedText.value[props.divId] = \"\";\r\n\r\n\t\tconst container =\r\n\t\t\tprops.divId === \"div1\" ? \".chart-container1\" : \".chart-container2\";\r\n\t\td3.select(container).html(\"\");\r\n\t};\r\n\r\n\t// 切换视图\r\n\tconst switchView = async view => {\r\n\t\tif (view === \"visual\") {\r\n\t\t\tvisualizationLoading.value = true;\r\n\t\t\tawait processText();\r\n\t\t\tvisualizationLoading.value = false;\r\n\t\t}\r\n\t};\r\n\r\n\t// 处理文本并渲染图表\r\n\tconst processText = async () => {\r\n\t\ttry {\r\n\t\t\tconst text = selectedText.value[props.divId]?.toString().trim();\r\n\t\t\tif (!text) {\r\n\t\t\t\tconsole.error(\"选中的文本为空\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// 调用后端 API 处理文本\r\n\t\t\tconst response = await api.post(\"process_text\", { text });\r\n\t\t\tif (response.error) {\r\n\t\t\t\tconsole.error(\"后端返回的错误:\", response.error);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst jsonData = response.json_data;\r\n\t\t\tconsole.log(\"后端返回的数据:\", jsonData);\r\n\r\n\t\t\t// 根据 divId 选择容器\r\n\t\t\tconst container =\r\n\t\t\t\tprops.divId === \"div1\" ? \".chart-container1\" : \".chart-container2\";\r\n\r\n\t\t\tif (response.data_type === \"Non-Visual\") {\r\n\t\t\t\trenderNonVisualChart(container, response, {\r\n\t\t\t\t\tmessage: \"当前数据无法可视化\"\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\trenderChart(jsonData, response.chart_classification);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"处理文章内容时出错:\", error);\r\n\t\t}\r\n\t};\r\n\tconst renderChart = (rawJsonData, chartType) => {\r\n\t\tif (!rawJsonData || typeof rawJsonData !== \"object\" || !rawJsonData.data) {\r\n\t\t\tconsole.error(\"JSON 数据无效:\", rawJsonData);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 根据 divId 选择容器\r\n\t\tconst container =\r\n\t\t\tprops.divId === \"div1\" ? \".chart-container1\" : \".chart-container2\";\r\n\t\tconst containerElement = document.querySelector(container);\r\n\r\n\t\tif (!containerElement) {\r\n\t\t\tconsole.error(`未找到容器: ${container}`);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 清空之前的图表\r\n\t\td3.select(container).html(\"\");\r\n\r\n\t\tconst data = rawJsonData.data;\r\n\t\tconst options = rawJsonData.options || {};\r\n\r\n\t\t// 根据图表类型渲染\r\n\t\tif (chartType === \"Line Chart\") {\r\n\t\t\trenderLineChart(container, data, options);\r\n\t\t} else if (chartType === \"Bar Chart\") {\r\n\t\t\trenderBarChart(container, data, options);\r\n\t\t} else if (chartType === \"Pie Chart\") {\r\n\t\t\trenderPieChart(container, data, options);\r\n\t\t} else if (chartType === \"Stacked Bar Chart\") {\r\n\t\t\trenderStackedBarChart(container, data, options);\r\n\t\t} else {\r\n\t\t\tconsole.error(\"未知的图表类型:\", chartType);\r\n\t\t}\r\n\t};\r\n\t// 更新弹窗位置\r\n\tconst updatePopupPosition = () => {\r\n\t\tif (!divRef.value) {\r\n\t\t\tconsole.error(\"divRef 为 null\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst popup = divRef.value.querySelector(\".text-popup\");\r\n\t\tconst overlay = divRef.value.querySelector(\".overlay\");\r\n\r\n\t\t// 检查 popup 和 overlay 是否存在\r\n\t\tif (!popup || !overlay) {\r\n\t\t\tconsole.error(\"未找到弹窗或遮罩层元素\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst rect = divRef.value.getBoundingClientRect();\r\n\t\tconst scrollTop = divRef.value.scrollTop;\r\n\t\tconst scrollLeft = divRef.value.scrollLeft;\r\n\r\n\t\t// 动态调整遮罩层和弹出框的位置\r\n\t\toverlay.style.top = `${scrollTop}px`;\r\n\t\toverlay.style.left = `${scrollLeft}px`;\r\n\t\toverlay.style.width = `${divRef.value.clientWidth}px`;\r\n\t\toverlay.style.height = `${divRef.value.clientHeight}px`;\r\n\r\n\t\tpopup.style.top = `${rect.height / 2 + scrollTop}px`;\r\n\t\tpopup.style.left = `${rect.width / 2 + scrollLeft}px`;\r\n\t};\r\n\r\n\tonMounted(() => {\r\n\t\tfetchWikipediaContent();\r\n\r\n\t\tif (!divRef.value) {\r\n\t\t\tconsole.error(\"divRef 为 null\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tdivRef.value.addEventListener(\"mouseup\", handleSelection);\r\n\t\tdivRef.value.addEventListener(\"scroll\", updatePopupPosition);\r\n\t});\r\n\r\n\tonUnmounted(() => {\r\n\t\tif (!divRef.value) {\r\n\t\t\tconsole.error(\"divRef 为 null\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tdivRef.value.removeEventListener(\"mouseup\", handleSelection);\r\n\t\tdivRef.value.removeEventListener(\"scroll\", updatePopupPosition);\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.div0 {\r\n\t\tposition: relative;\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\th1 {\r\n\t\ttext-align: center;\r\n\t}\r\n</style>\r\n"],"mappings":";;mBAAA;mBAAA;;;;;uBACCA,mBAAA,CA4BM;IA5BAC,KAAK,EADZC,eAAA,UACuBC,IAAA,CAAAC,kBAAkB;IAAIC,EAAE,EAAEF,IAAA,CAAAG,KAAK;IAAEC,GAAG,EAAC;MAC1DC,mBAAA,CAAwB,YAAAC,gBAAA,CAAjBN,IAAA,CAAAO,SAAS,kBAEhBC,mBAAA,UAAa,EACSR,IAAA,CAAAS,OAAO,I,cAA7BC,YAAA,CAAiCC,yBAAA;IALnCC,GAAA;EAAA,MAScZ,IAAA,CAAAa,KAAK,I,cADjBhB,mBAAA,CAGkCiB,SAAA;IAXpCF,GAAA;EAAA,IAOEJ,mBAAA,UAAa,EACbO,YAAA,CAGkCC,uBAAA;IADhCH,KAAK,EAAEb,IAAA,CAAAa,KAAK;IACZI,OAAK,EAAEjB,IAAA,CAAAkB;mHAGTrB,mBAAA,CAIkCiB,SAAA;IAlBpCF,GAAA;EAAA,IAaEJ,mBAAA,UAAa,EACbH,mBAAA,CAIkC;IAFjCP,KAAK,EAAC,4BAA4B;IAClCqB,SAAiB,EAATnB,IAAA,CAAAoB,QAAQ;IACfC,SAAO,EAAAC,MAAA,QAAAA,MAAA;MAAA,OAAEtB,IAAA,CAAAuB,eAAA,IAAAvB,IAAA,CAAAuB,eAAA,IAAAC,SAAA,CAAe;IAAA;2CAlB5BC,UAAA,E,mDAoBEjB,mBAAA,aAAgB,EAETR,IAAA,CAAA0B,SAAS,CAAC1B,IAAA,CAAAG,KAAK,K,cADtBO,YAAA,CAO4BiB,uBAAA;IA5B9Bf,GAAA;IAuBIgB,IAAI,EAAE5B,IAAA,CAAA0B,SAAS,CAAC1B,IAAA,CAAAG,KAAK;IACrB0B,YAAY,EAAE7B,IAAA,CAAA6B,YAAY,CAAC7B,IAAA,CAAAG,KAAK;IAChCA,KAAK,EAAEH,IAAA,CAAAG,KAAK;IACZ2B,oBAAoB,EAAE9B,IAAA,CAAA8B,oBAAoB;IAC1CC,YAAU,EAAE/B,IAAA,CAAAgC,UAAU;IACtBC,YAAU,EAAEjC,IAAA,CAAAkC;wHA5BhB1B,mBAAA,e,yBAAA2B,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}