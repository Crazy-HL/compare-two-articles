{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-2e65ee1c\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.url = $event),\n    placeholder: \"输入网址\",\n    onChange: $setup.loadIframe\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $setup.url]]), _createElementVNode(\"iframe\", {\n    ref: \"iframe\",\n    src: $setup.iframeSrc,\n    width: \"100%\",\n    height: \"500px\",\n    onLoad: $setup.onIframeLoad,\n    style: {\n      \"border\": \"none\"\n    }\n  }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_1)]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_cache","$event","$setup","url","placeholder","onChange","loadIframe","ref","src","iframeSrc","width","height","onLoad","onIframeLoad","style","_hoisted_1"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\Div3.vue"],"sourcesContent":["<template>\r\n\t<div>\r\n\t\t<input v-model=\"url\" placeholder=\"输入网址\" @change=\"loadIframe\" />\r\n\t\t<iframe\r\n\t\t\tref=\"iframe\"\r\n\t\t\tv-bind:src=\"iframeSrc\"\r\n\t\t\twidth=\"100%\"\r\n\t\t\theight=\"500px\"\r\n\t\t\t@load=\"onIframeLoad\"\r\n\t\t\tstyle=\"border: none\"></iframe>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, watch } from \"vue\";\r\n\r\n\tconst url = ref(\"\"); // 用户输入的网址\r\n\tconst iframeSrc = ref(\"\"); // iframe 的 src 属性\r\n\tconst iframeRef = ref(null); // 用于引用 iframe 元素\r\n\r\n\t// 当用户输入网址后，动态加载 iframe\r\n\tconst loadIframe = () => {\r\n\t\tiframeSrc.value = url.value;\r\n\t};\r\n\r\n\t// 确保 iframe 已经完全加载\r\n\tconst onIframeLoad = () => {\r\n\t\tif (iframeRef.value && iframeRef.value.contentWindow) {\r\n\t\t\tconst iframeDocument = iframeRef.value.contentWindow.document;\r\n\r\n\t\t\t// 监听 iframe 内部的文本选择\r\n\t\t\tiframeDocument.addEventListener(\"mouseup\", handleSelection, false);\r\n\t\t}\r\n\t};\r\n\r\n\t// 处理选中的文本并进行高亮\r\n\tconst handleSelection = () => {\r\n\t\tconst iframeDocument = iframeRef.value.contentWindow.document;\r\n\t\tconst selection = iframeDocument.defaultView.getSelection();\r\n\r\n\t\tif (selection.toString()) {\r\n\t\t\t// 获取选中的文本\r\n\t\t\tconst selectedText = selection.toString();\r\n\t\t\tconsole.log(\"选中的内容：\", selectedText);\r\n\r\n\t\t\t// 高亮选中的文本\r\n\t\t\tconst range = selection.getRangeAt(0);\r\n\t\t\tconst span = document.createElement(\"span\");\r\n\t\t\tspan.style.backgroundColor = \"yellow\"; // 设置高亮颜色\r\n\t\t\trange.surroundContents(span);\r\n\r\n\t\t\t// 提取选中的文本\r\n\t\t\textractSelectedText(selectedText);\r\n\t\t}\r\n\t};\r\n\r\n\t// 提取选中的文本并执行进一步操作\r\n\tconst extractSelectedText = text => {\r\n\t\t// 可以将选中的文本显示在页面上或者进行其他操作\r\n\t\tconsole.log(\"提取的选中文本：\", text);\r\n\t};\r\n\r\n\t// 监听输入框的 URL 变化\r\n\twatch(url, newUrl => {\r\n\t\tiframeSrc.value = newUrl;\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\tinput {\r\n\t\twidth: 100%;\r\n\t\tpadding: 10px;\r\n\t\tmargin-bottom: 10px;\r\n\t\tborder: 1px solid #ccc;\r\n\t\tborder-radius: 4px;\r\n\t}\r\n\r\n\tiframe {\r\n\t\twidth: 100%;\r\n\t\theight: 500px;\r\n\t}\r\n</style>\r\n"],"mappings":";;mBAAA;;uBACCA,mBAAA,CASM,c,gBARLC,mBAAA,CAA+D;IAFjE,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAEkBC,MAAA,CAAAC,GAAG,GAAAF,MAAA;IAAEG,WAAW,EAAC,MAAM;IAAEC,QAAM,EAAEH,MAAA,CAAAI;iEAAjCJ,MAAA,CAAAC,GAAG,E,GACnBJ,mBAAA,CAM+B;IAL9BQ,GAAG,EAAC,QAAQ;IACLC,GAAG,EAAEN,MAAA,CAAAO,SAAS;IACrBC,KAAK,EAAC,MAAM;IACZC,MAAM,EAAC,OAAO;IACbC,MAAI,EAAEV,MAAA,CAAAW,YAAY;IACnBC,KAAoB,EAApB;MAAA;IAAA;2CATHC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}