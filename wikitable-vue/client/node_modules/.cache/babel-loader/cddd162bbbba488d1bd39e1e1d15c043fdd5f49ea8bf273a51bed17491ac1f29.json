{"ast":null,"code":"import { ref, onMounted, nextTick } from \"vue\";\nimport bus from \"@/js/eventBus.js\"; // 事件总线（用于高亮传递）\n\nexport default {\n  __name: 'WikipediaViewer',\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const pageTitle = ref(\"LeBron James\"); // 页面标题\n    const pageHtml = ref(\"\"); // 文章 HTML 内容\n    const loading = ref(true); // 加载状态\n    const error = ref(\"\"); // 错误信息\n\n    // **获取 Wikipedia 页面**\n    const fetchWikipediaContent = async () => {\n      try {\n        const apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(pageTitle.value)}`;\n        const response = await fetch(apiUrl);\n        if (!response.ok) throw new Error(\"Failed to fetch data\");\n        const html = await response.text();\n\n        // 解析 HTML，提取 <link rel=\"stylesheet\">\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(html, \"text/html\");\n\n        // **动态注入 Wikipedia 样式**\n        const styles = Array.from(doc.querySelectorAll('link[rel=\"stylesheet\"]'));\n        styles.forEach(link => {\n          if (!document.querySelector(`link[href=\"${link.href}\"]`)) {\n            const styleTag = document.createElement(\"link\");\n            styleTag.rel = \"stylesheet\";\n            styleTag.href = link.href;\n            document.head.appendChild(styleTag);\n          }\n        });\n\n        // 仅获取正文部分（去掉不必要的导航等）\n        const contentElement = doc.querySelector(\"body\");\n        if (!contentElement) throw new Error(\"Content not found\");\n        pageHtml.value = contentElement.innerHTML;\n      } catch (err) {\n        error.value = \"Error fetching Wikipedia content: \" + err.message;\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // **高亮用户选中的文字**\n    const handleTextSelection = () => {\n      const selection = window.getSelection().toString().trim();\n      if (selection) {\n        console.log(\"选中的内容:\", selection);\n        bus.emit(\"highlightEvent\", selection);\n      }\n    };\n\n    // **组件挂载后加载 Wikipedia 内容**\n    onMounted(() => {\n      fetchWikipediaContent();\n    });\n    const __returned__ = {\n      pageTitle,\n      pageHtml,\n      loading,\n      error,\n      fetchWikipediaContent,\n      handleTextSelection,\n      ref,\n      onMounted,\n      nextTick,\n      get bus() {\n        return bus;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","nextTick","bus","pageTitle","pageHtml","loading","error","fetchWikipediaContent","apiUrl","encodeURIComponent","value","response","fetch","ok","Error","html","text","parser","DOMParser","doc","parseFromString","styles","Array","from","querySelectorAll","forEach","link","document","querySelector","href","styleTag","createElement","rel","head","appendChild","contentElement","innerHTML","err","message","handleTextSelection","selection","window","getSelection","toString","trim","console","log","emit"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/WikipediaViewer.vue"],"sourcesContent":["<template>\r\n\t<div>\r\n\t\t<h1>{{ pageTitle }}</h1>\r\n\t\t<div v-if=\"loading\">Loading...</div>\r\n\t\t<div v-else-if=\"error\" class=\"error\">{{ error }}</div>\r\n\t\t<div\r\n\t\t\tv-else\r\n\t\t\tref=\"content\"\r\n\t\t\tclass=\"wikipedia-content\"\r\n\t\t\tv-html=\"pageHtml\"\r\n\t\t\t@mouseup=\"handleTextSelection\"></div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, nextTick } from \"vue\";\r\n\timport bus from \"@/js/eventBus.js\"; // 事件总线（用于高亮传递）\r\n\r\n\tconst pageTitle = ref(\"LeBron James\"); // 页面标题\r\n\tconst pageHtml = ref(\"\"); // 文章 HTML 内容\r\n\tconst loading = ref(true); // 加载状态\r\n\tconst error = ref(\"\"); // 错误信息\r\n\r\n\t// **获取 Wikipedia 页面**\r\n\tconst fetchWikipediaContent = async () => {\r\n\t\ttry {\r\n\t\t\tconst apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(\r\n\t\t\t\tpageTitle.value\r\n\t\t\t)}`;\r\n\t\t\tconst response = await fetch(apiUrl);\r\n\t\t\tif (!response.ok) throw new Error(\"Failed to fetch data\");\r\n\r\n\t\t\tconst html = await response.text();\r\n\r\n\t\t\t// 解析 HTML，提取 <link rel=\"stylesheet\">\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\r\n\t\t\t// **动态注入 Wikipedia 样式**\r\n\t\t\tconst styles = Array.from(doc.querySelectorAll('link[rel=\"stylesheet\"]'));\r\n\t\t\tstyles.forEach(link => {\r\n\t\t\t\tif (!document.querySelector(`link[href=\"${link.href}\"]`)) {\r\n\t\t\t\t\tconst styleTag = document.createElement(\"link\");\r\n\t\t\t\t\tstyleTag.rel = \"stylesheet\";\r\n\t\t\t\t\tstyleTag.href = link.href;\r\n\t\t\t\t\tdocument.head.appendChild(styleTag);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// 仅获取正文部分（去掉不必要的导航等）\r\n\t\t\tconst contentElement = doc.querySelector(\"body\");\r\n\t\t\tif (!contentElement) throw new Error(\"Content not found\");\r\n\r\n\t\t\tpageHtml.value = contentElement.innerHTML;\r\n\t\t} catch (err) {\r\n\t\t\terror.value = \"Error fetching Wikipedia content: \" + err.message;\r\n\t\t} finally {\r\n\t\t\tloading.value = false;\r\n\t\t}\r\n\t};\r\n\r\n\t// **高亮用户选中的文字**\r\n\tconst handleTextSelection = () => {\r\n\t\tconst selection = window.getSelection().toString().trim();\r\n\t\tif (selection) {\r\n\t\t\tconsole.log(\"选中的内容:\", selection);\r\n\t\t\tbus.emit(\"highlightEvent\", selection);\r\n\t\t}\r\n\t};\r\n\r\n\t// **组件挂载后加载 Wikipedia 内容**\r\n\tonMounted(() => {\r\n\t\tfetchWikipediaContent();\r\n\t});\r\n</script>\r\n\r\n<style>\r\n\t/* 让 Wikipedia 内容更适配 */\r\n\t.wikipedia-content {\r\n\t\tmax-width: 800px;\r\n\t\tmargin: 0 auto;\r\n\t\tpadding: 20px;\r\n\t\tfont-family: sans-serif;\r\n\t\tborder: 1px solid #ccc;\r\n\t\toverflow: auto;\r\n\t}\r\n\r\n\t/* 选中文本的高亮样式 */\r\n\t::selection {\r\n\t\tbackground-color: yellow;\r\n\t\tcolor: black;\r\n\t}\r\n\r\n\t/* 错误信息 */\r\n\t.error {\r\n\t\tcolor: red;\r\n\t}\r\n</style>\r\n"],"mappings":"AAeC,SAASA,GAAG,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,KAAK;AAC9C,OAAOC,GAAG,MAAM,kBAAkB,CAAC,CAAC;;;;;;;;;IAEpC,MAAMC,SAAS,GAAGJ,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;IACvC,MAAMK,QAAQ,GAAGL,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1B,MAAMM,OAAO,GAAGN,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3B,MAAMO,KAAK,GAAGP,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEvB;IACA,MAAMQ,qBAAqB,GAAG,MAAAA,CAAA,KAAY;MACzC,IAAI;QACH,MAAMC,MAAM,GAAG,kDAAkDC,kBAAkB,CAClFN,SAAS,CAACO,KACX,CAAC,EAAE;QACH,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,MAAM,CAAC;QACpC,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;QAEzD,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;;QAElC;QACA,MAAMC,MAAM,GAAG,IAAIC,SAAS,CAAC,CAAC;QAC9B,MAAMC,GAAG,GAAGF,MAAM,CAACG,eAAe,CAACL,IAAI,EAAE,WAAW,CAAC;;QAErD;QACA,MAAMM,MAAM,GAAGC,KAAK,CAACC,IAAI,CAACJ,GAAG,CAACK,gBAAgB,CAAC,wBAAwB,CAAC,CAAC;QACzEH,MAAM,CAACI,OAAO,CAACC,IAAI,IAAI;UACtB,IAAI,CAACC,QAAQ,CAACC,aAAa,CAAC,cAAcF,IAAI,CAACG,IAAI,IAAI,CAAC,EAAE;YACzD,MAAMC,QAAQ,GAAGH,QAAQ,CAACI,aAAa,CAAC,MAAM,CAAC;YAC/CD,QAAQ,CAACE,GAAG,GAAG,YAAY;YAC3BF,QAAQ,CAACD,IAAI,GAAGH,IAAI,CAACG,IAAI;YACzBF,QAAQ,CAACM,IAAI,CAACC,WAAW,CAACJ,QAAQ,CAAC;UACpC;QACD,CAAC,CAAC;;QAEF;QACA,MAAMK,cAAc,GAAGhB,GAAG,CAACS,aAAa,CAAC,MAAM,CAAC;QAChD,IAAI,CAACO,cAAc,EAAE,MAAM,IAAIrB,KAAK,CAAC,mBAAmB,CAAC;QAEzDV,QAAQ,CAACM,KAAK,GAAGyB,cAAc,CAACC,SAAS;MAC1C,CAAC,CAAC,OAAOC,GAAG,EAAE;QACb/B,KAAK,CAACI,KAAK,GAAG,oCAAoC,GAAG2B,GAAG,CAACC,OAAO;MACjE,CAAC,SAAS;QACTjC,OAAO,CAACK,KAAK,GAAG,KAAK;MACtB;IACD,CAAC;;IAED;IACA,MAAM6B,mBAAmB,GAAGA,CAAA,KAAM;MACjC,MAAMC,SAAS,GAAGC,MAAM,CAACC,YAAY,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;MACzD,IAAIJ,SAAS,EAAE;QACdK,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEN,SAAS,CAAC;QAChCtC,GAAG,CAAC6C,IAAI,CAAC,gBAAgB,EAAEP,SAAS,CAAC;MACtC;IACD,CAAC;;IAED;IACAxC,SAAS,CAAC,MAAM;MACfO,qBAAqB,CAAC,CAAC;IACxB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}