{"ast":null,"code":"import { ref, computed, onMounted } from \"vue\";\nimport bus from \"@/js/eventBus.js\";\nexport default {\n  __name: 'CompareTable',\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const leftInfobox = ref({\n      title: \"\",\n      type: \"\",\n      data: {\n        sections: {}\n      }\n    });\n    const rightInfobox = ref({\n      title: \"\",\n      type: \"\",\n      data: {\n        sections: {}\n      }\n    });\n    const showSortingHeatmap = ref(true);\n\n    // 可比较字段配置\n    const COMPARABLE_FIELDS = [{\n      key: \"GDP\",\n      type: \"number\"\n    }, {\n      key: \"Population\",\n      type: \"number\"\n    }, {\n      key: \"GDP growth\",\n      type: \"percentage\"\n    }, {\n      key: \"Inflation (CPI)\",\n      type: \"percentage\"\n    }, {\n      key: \"Labor force by occupation\",\n      type: \"percentage\"\n    }, {\n      key: \"GDP rank\",\n      type: \"text\"\n    }];\n\n    // 计算带分数的排序字段\n    const sortedFieldsWithScores = computed(() => {\n      return COMPARABLE_FIELDS.filter(field => {\n        const leftVal = getField(leftInfobox.value, field.key);\n        const rightVal = getField(rightInfobox.value, field.key);\n        return leftVal.length > 0 || rightVal.length > 0;\n      }).map(field => ({\n        ...field,\n        score: calculateDifferenceScore(field),\n        typeLabel: getTypeLabel(field.type)\n      })).sort((a, b) => b.score - a.score);\n    });\n\n    // 获取类型标签\n    const getTypeLabel = type => {\n      const labels = {\n        number: \"数值\",\n        percentage: \"百分比(%)\",\n        text: \"文本\"\n      };\n      return labels[type] || type;\n    };\n\n    // 计算差异分数\n    const calculateDifferenceScore = field => {\n      const leftData = getField(leftInfobox.value, field.key);\n      const rightData = getField(rightInfobox.value, field.key);\n      if (!leftData.length || !rightData.length) return 0;\n\n      // 文本类型比较\n      if (field.type === \"text\") {\n        return leftData[0] === rightData[0] ? 1 : 5;\n      }\n\n      // 数值类型比较\n      const leftVal = parseFloat(leftData[0]);\n      const rightVal = parseFloat(rightData[0]);\n      if (isNaN(leftVal) || isNaN(rightVal)) return 0;\n      const absDiff = Math.abs(leftVal - rightVal);\n      let score = absDiff * getFieldWeight(field.key);\n\n      // 趋势相反（大幅加分）\n      if (leftVal > 0 && rightVal < 0 || leftVal < 0 && rightVal > 0) {\n        score += 50;\n      }\n      return score;\n    };\n\n    // 字段权重\n    const getFieldWeight = fieldKey => {\n      const weights = {\n        GDP: 2.0,\n        Population: 1.5,\n        \"GDP growth\": 1.8,\n        Inflation: 1.3,\n        Labor: 1.2\n      };\n      for (const [key, weight] of Object.entries(weights)) {\n        if (fieldKey.toLowerCase().includes(key.toLowerCase())) {\n          return weight;\n        }\n      }\n      return 1;\n    };\n\n    // 获取字段值\n    const getField = (infobox, fieldKey) => {\n      if (!infobox?.data?.sections) return [];\n\n      // 创建不区分大小写的正则表达式\n      const fieldRegex = new RegExp(fieldKey.replace(/[-\\s]/g, \"[\\\\s-]*\"), \"i\");\n      for (const section of Object.values(infobox.data.sections)) {\n        for (const [key, value] of Object.entries(section)) {\n          if (fieldRegex.test(key)) {\n            return Array.isArray(value) ? value : [value];\n          }\n        }\n      }\n      return [];\n    };\n\n    // 获取字段显示值\n    const getFieldDisplay = (infobox, fieldKey) => {\n      const value = getField(infobox, fieldKey);\n      return value.length > 0 ? value[0] : \"无数据\";\n    };\n\n    // 热力图颜色\n    const getHeatmapColor = score => {\n      const maxScore = 100;\n      const ratio = Math.min(score / maxScore, 1);\n      const hue = (1 - ratio) * 120; // 绿色(120)到红色(0)\n      return `hsl(${hue}, 80%, ${85 - ratio * 25}%)`;\n    };\n\n    // 处理Infobox数据\n    const processInfoboxData = data => {\n      if (!data) return {\n        title: \"\",\n        type: \"\",\n        data: {\n          sections: {}\n        }\n      };\n      return {\n        title: data.title || \"无标题\",\n        type: data.type || \"未知类型\",\n        data: data.data || {\n          sections: {}\n        }\n      };\n    };\n    onMounted(() => {\n      bus.on(\"div1_InfoboxData\", data => {\n        leftInfobox.value = processInfoboxData(data);\n        console.log(\"Left Infobox Data:\", leftInfobox.value);\n      });\n      bus.on(\"div3_InfoboxData\", data => {\n        rightInfobox.value = processInfoboxData(data);\n        console.log(\"Right Infobox Data:\", rightInfobox.value);\n      });\n    });\n    const __returned__ = {\n      leftInfobox,\n      rightInfobox,\n      showSortingHeatmap,\n      COMPARABLE_FIELDS,\n      sortedFieldsWithScores,\n      getTypeLabel,\n      calculateDifferenceScore,\n      getFieldWeight,\n      getField,\n      getFieldDisplay,\n      getHeatmapColor,\n      processInfoboxData,\n      ref,\n      computed,\n      onMounted,\n      get bus() {\n        return bus;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","bus","leftInfobox","title","type","data","sections","rightInfobox","showSortingHeatmap","COMPARABLE_FIELDS","key","sortedFieldsWithScores","filter","field","leftVal","getField","value","rightVal","length","map","score","calculateDifferenceScore","typeLabel","getTypeLabel","sort","a","b","labels","number","percentage","text","leftData","rightData","parseFloat","isNaN","absDiff","Math","abs","getFieldWeight","fieldKey","weights","GDP","Population","Inflation","Labor","weight","Object","entries","toLowerCase","includes","infobox","fieldRegex","RegExp","replace","section","values","test","Array","isArray","getFieldDisplay","getHeatmapColor","maxScore","ratio","min","hue","processInfoboxData","on","console","log"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/CompareTable.vue"],"sourcesContent":["<template>\r\n\t<div class=\"compare-container\">\r\n\t\t<!-- 排序热力图开关 -->\r\n\t\t<div class=\"heatmap-control\">\r\n\t\t\t<button @click=\"showSortingHeatmap = !showSortingHeatmap\">\r\n\t\t\t\t{{ showSortingHeatmap ? \"隐藏\" : \"显示\" }}排序热力图\r\n\t\t\t</button>\r\n\t\t</div>\r\n\r\n\t\t<!-- 排序热力图可视化 -->\r\n\t\t<div class=\"sorting-heatmap\" v-if=\"showSortingHeatmap\">\r\n\t\t\t<div class=\"heatmap-header\">\r\n\t\t\t\t<span>排序</span>\r\n\t\t\t\t<span>属性</span>\r\n\t\t\t\t<span>类型</span>\r\n\t\t\t\t<span>差异分数</span>\r\n\t\t\t</div>\r\n\t\t\t<div\r\n\t\t\t\tclass=\"heatmap-row\"\r\n\t\t\t\tv-for=\"(field, index) in sortedFieldsWithScores\"\r\n\t\t\t\t:key=\"field.key\"\r\n\t\t\t\t:style=\"{\r\n\t\t\t\t\tbackgroundColor: getHeatmapColor(field.score),\r\n\t\t\t\t\tborderLeft: `4px solid ${getHeatmapColor(field.score)}`\r\n\t\t\t\t}\">\r\n\t\t\t\t<span class=\"field-rank\">{{ index + 1 }}</span>\r\n\t\t\t\t<span class=\"field-name\">{{ field.key }}</span>\r\n\t\t\t\t<span class=\"field-type\">{{ field.typeLabel }}</span>\r\n\t\t\t\t<span class=\"field-score\">{{ field.score.toFixed(1) }}</span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- 主对比表格 -->\r\n\t\t<div class=\"comparison-grid\">\r\n\t\t\t<div class=\"header left-column\">\r\n\t\t\t\t{{ leftInfobox.title }}\r\n\t\t\t</div>\r\n\t\t\t<div class=\"header middle-column\">对比属性</div>\r\n\t\t\t<div class=\"header right-column\">\r\n\t\t\t\t{{ rightInfobox.title }}\r\n\t\t\t</div>\r\n\r\n\t\t\t<template v-for=\"field in sortedFieldsWithScores\" :key=\"field.key\">\r\n\t\t\t\t<div class=\"cell left-column\">\r\n\t\t\t\t\t{{ getFieldDisplay(leftInfobox, field.key) }}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"cell middle-column\">\r\n\t\t\t\t\t<div class=\"field-name\">{{ field.key }}</div>\r\n\t\t\t\t\t<div class=\"field-type\">{{ field.typeLabel }}</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"cell right-column\">\r\n\t\t\t\t\t{{ getFieldDisplay(rightInfobox, field.key) }}\r\n\t\t\t\t</div>\r\n\t\t\t</template>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, onMounted } from \"vue\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\r\n\tconst leftInfobox = ref({ title: \"\", type: \"\", data: { sections: {} } });\r\n\tconst rightInfobox = ref({ title: \"\", type: \"\", data: { sections: {} } });\r\n\tconst showSortingHeatmap = ref(true);\r\n\r\n\t// 可比较字段配置\r\n\tconst COMPARABLE_FIELDS = [\r\n\t\t{ key: \"GDP\", type: \"number\" },\r\n\t\t{ key: \"Population\", type: \"number\" },\r\n\t\t{ key: \"GDP growth\", type: \"percentage\" },\r\n\t\t{ key: \"Inflation (CPI)\", type: \"percentage\" },\r\n\t\t{ key: \"Labor force by occupation\", type: \"percentage\" },\r\n\t\t{ key: \"GDP rank\", type: \"text\" }\r\n\t];\r\n\r\n\t// 计算带分数的排序字段\r\n\tconst sortedFieldsWithScores = computed(() => {\r\n\t\treturn COMPARABLE_FIELDS.filter(field => {\r\n\t\t\tconst leftVal = getField(leftInfobox.value, field.key);\r\n\t\t\tconst rightVal = getField(rightInfobox.value, field.key);\r\n\t\t\treturn leftVal.length > 0 || rightVal.length > 0;\r\n\t\t})\r\n\t\t\t.map(field => ({\r\n\t\t\t\t...field,\r\n\t\t\t\tscore: calculateDifferenceScore(field),\r\n\t\t\t\ttypeLabel: getTypeLabel(field.type)\r\n\t\t\t}))\r\n\t\t\t.sort((a, b) => b.score - a.score);\r\n\t});\r\n\r\n\t// 获取类型标签\r\n\tconst getTypeLabel = type => {\r\n\t\tconst labels = {\r\n\t\t\tnumber: \"数值\",\r\n\t\t\tpercentage: \"百分比(%)\",\r\n\t\t\ttext: \"文本\"\r\n\t\t};\r\n\t\treturn labels[type] || type;\r\n\t};\r\n\r\n\t// 计算差异分数\r\n\tconst calculateDifferenceScore = field => {\r\n\t\tconst leftData = getField(leftInfobox.value, field.key);\r\n\t\tconst rightData = getField(rightInfobox.value, field.key);\r\n\r\n\t\tif (!leftData.length || !rightData.length) return 0;\r\n\r\n\t\t// 文本类型比较\r\n\t\tif (field.type === \"text\") {\r\n\t\t\treturn leftData[0] === rightData[0] ? 1 : 5;\r\n\t\t}\r\n\r\n\t\t// 数值类型比较\r\n\t\tconst leftVal = parseFloat(leftData[0]);\r\n\t\tconst rightVal = parseFloat(rightData[0]);\r\n\r\n\t\tif (isNaN(leftVal) || isNaN(rightVal)) return 0;\r\n\r\n\t\tconst absDiff = Math.abs(leftVal - rightVal);\r\n\t\tlet score = absDiff * getFieldWeight(field.key);\r\n\r\n\t\t// 趋势相反（大幅加分）\r\n\t\tif ((leftVal > 0 && rightVal < 0) || (leftVal < 0 && rightVal > 0)) {\r\n\t\t\tscore += 50;\r\n\t\t}\r\n\r\n\t\treturn score;\r\n\t};\r\n\r\n\t// 字段权重\r\n\tconst getFieldWeight = fieldKey => {\r\n\t\tconst weights = {\r\n\t\t\tGDP: 2.0,\r\n\t\t\tPopulation: 1.5,\r\n\t\t\t\"GDP growth\": 1.8,\r\n\t\t\tInflation: 1.3,\r\n\t\t\tLabor: 1.2\r\n\t\t};\r\n\r\n\t\tfor (const [key, weight] of Object.entries(weights)) {\r\n\t\t\tif (fieldKey.toLowerCase().includes(key.toLowerCase())) {\r\n\t\t\t\treturn weight;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn 1;\r\n\t};\r\n\r\n\t// 获取字段值\r\n\tconst getField = (infobox, fieldKey) => {\r\n\t\tif (!infobox?.data?.sections) return [];\r\n\r\n\t\t// 创建不区分大小写的正则表达式\r\n\t\tconst fieldRegex = new RegExp(fieldKey.replace(/[-\\s]/g, \"[\\\\s-]*\"), \"i\");\r\n\r\n\t\tfor (const section of Object.values(infobox.data.sections)) {\r\n\t\t\tfor (const [key, value] of Object.entries(section)) {\r\n\t\t\t\tif (fieldRegex.test(key)) {\r\n\t\t\t\t\treturn Array.isArray(value) ? value : [value];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn [];\r\n\t};\r\n\r\n\t// 获取字段显示值\r\n\tconst getFieldDisplay = (infobox, fieldKey) => {\r\n\t\tconst value = getField(infobox, fieldKey);\r\n\t\treturn value.length > 0 ? value[0] : \"无数据\";\r\n\t};\r\n\r\n\t// 热力图颜色\r\n\tconst getHeatmapColor = score => {\r\n\t\tconst maxScore = 100;\r\n\t\tconst ratio = Math.min(score / maxScore, 1);\r\n\t\tconst hue = (1 - ratio) * 120; // 绿色(120)到红色(0)\r\n\t\treturn `hsl(${hue}, 80%, ${85 - ratio * 25}%)`;\r\n\t};\r\n\r\n\t// 处理Infobox数据\r\n\tconst processInfoboxData = data => {\r\n\t\tif (!data) return { title: \"\", type: \"\", data: { sections: {} } };\r\n\t\treturn {\r\n\t\t\ttitle: data.title || \"无标题\",\r\n\t\t\ttype: data.type || \"未知类型\",\r\n\t\t\tdata: data.data || { sections: {} }\r\n\t\t};\r\n\t};\r\n\r\n\tonMounted(() => {\r\n\t\tbus.on(\"div1_InfoboxData\", data => {\r\n\t\t\tleftInfobox.value = processInfoboxData(data);\r\n\t\t\tconsole.log(\"Left Infobox Data:\", leftInfobox.value);\r\n\t\t});\r\n\r\n\t\tbus.on(\"div3_InfoboxData\", data => {\r\n\t\t\trightInfobox.value = processInfoboxData(data);\r\n\t\t\tconsole.log(\"Right Infobox Data:\", rightInfobox.value);\r\n\t\t});\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.compare-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tpadding: 8px;\r\n\t\tbox-sizing: border-box;\r\n\t}\r\n\r\n\t.heatmap-control {\r\n\t\tmargin-bottom: 10px;\r\n\t\ttext-align: right;\r\n\t}\r\n\r\n\t.heatmap-control button {\r\n\t\tpadding: 6px 12px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tborder-radius: 4px;\r\n\t\tcursor: pointer;\r\n\t}\r\n\r\n\t.sorting-heatmap {\r\n\t\tmargin-bottom: 20px;\r\n\t\tborder: 1px solid #eee;\r\n\t\tborder-radius: 8px;\r\n\t\toverflow: hidden;\r\n\t\tbox-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t.heatmap-header {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: 50px 2fr 1fr 1fr;\r\n\t\tpadding: 8px 12px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tfont-weight: bold;\r\n\t}\r\n\r\n\t.heatmap-row {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: 50px 2fr 1fr 1fr;\r\n\t\tpadding: 8px 12px;\r\n\t\tborder-bottom: 1px solid #eee;\r\n\t\ttransition: all 0.3s;\r\n\t}\r\n\r\n\t.heatmap-row:hover {\r\n\t\ttransform: scale(1.01);\r\n\t\tbox-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t.field-rank {\r\n\t\tfont-weight: bold;\r\n\t\tcolor: #2c3e50;\r\n\t}\r\n\r\n\t.field-name {\r\n\t\tfont-weight: bold;\r\n\t}\r\n\r\n\t.field-type {\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.field-score {\r\n\t\ttext-align: right;\r\n\t\tfont-family: monospace;\r\n\t}\r\n\r\n\t.comparison-grid {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns:\r\n\t\t\tminmax(120px, 1fr)\r\n\t\t\tminmax(80px, 100px)\r\n\t\t\tminmax(120px, 1fr);\r\n\t\twidth: 100%;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t\tborder-radius: 4px;\r\n\t\toverflow: hidden;\r\n\t}\r\n\r\n\t.header {\r\n\t\tpadding: 8px 6px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n\t\tposition: sticky;\r\n\t\ttop: 0;\r\n\t\tz-index: 1;\r\n\t\tborder-right: 1px solid #475569;\r\n\t}\r\n\r\n\t.header.middle-column {\r\n\t\tpadding: 8px 4px;\r\n\t\tbackground: #1e293b;\r\n\t}\r\n\r\n\t.cell {\r\n\t\tpadding: 8px;\r\n\t\theight: 60px;\r\n\t\tborder-bottom: 1px solid #e0e0e0;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tjustify-content: center;\r\n\t\tposition: relative;\r\n\t\tmin-width: 0;\r\n\t\toverflow: hidden;\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t.left-column,\r\n\t.right-column {\r\n\t\tmax-width: 100%;\r\n\t}\r\n\r\n\t.middle-column {\r\n\t\tbackground-color: #f8f9fa;\r\n\t}\r\n\r\n\t.field-name {\r\n\t\tfont-weight: bold;\r\n\t\tmargin-bottom: 4px;\r\n\t\tfont-size: 12px;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t}\r\n\r\n\t.field-type {\r\n\t\tcolor: #666;\r\n\t\tfont-size: 11px;\r\n\t\tfont-style: italic;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}