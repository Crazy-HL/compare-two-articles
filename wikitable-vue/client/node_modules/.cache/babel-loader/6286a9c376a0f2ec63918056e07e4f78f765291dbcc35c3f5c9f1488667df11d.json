{"ast":null,"code":"import { ref, onMounted, onUnmounted, nextTick } from \"vue\";\nimport LoadingSpinner from \"./LoadingSpinner.vue\";\nimport ErrorDisplay from \"./ErrorDisplay.vue\";\nimport WikipediaContent from \"./WikipediaContent.vue\";\nimport TextPopup from \"./TextPopup.vue\";\nimport ArticleOutline from \"./ArticleOutline.vue\"; // 引入大纲组件\nimport * as d3 from \"d3\";\nimport bus from \"@/js/eventBus.js\";\nexport default {\n  __name: 'ParentComponent',\n  props: {\n    pageTitle: String,\n    divId: String,\n    selectContentClass: String,\n    linkedOutline: Array\n  },\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const props = __props;\n    const pageHtml = ref(\"\"); // 文章 HTML 内容\n    const loading = ref(true); // 加载状态\n    const error = ref(\"\"); // 错误信息\n    const selectedText = ref({}); // 存储每个 div 的选中内容\n    const showPopup = ref({}); // 存储每个 div 的弹窗显示状态\n    const divRef = ref(null); // `Div1` 或 `Div3` 的 DOM 参考\n\n    const infoboxData = ref({\n      title: \"\",\n      type: \"none\",\n      data: {}\n    });\n    const fetchWikipediaContent = async () => {\n      try {\n        loading.value = true;\n        error.value = \"\";\n        const apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(props.pageTitle)}`;\n        const response = await fetch(apiUrl);\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        const html = await response.text();\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(html, \"text/html\");\n\n        // 增强Infobox检测\n        const infobox = doc.querySelector(`\n      .infobox, .infobox_v2, .infobox_v3, \n      .toccolours, .sidebar, table.infobox,\n      .infobox.biography, .infobox.geography,\n      [class*=\"infobox\"], table[class*=\"infobox\"]\n    `);\n        console.log(\"Infobox检测结果:\", {\n          found: !!infobox,\n          class: infobox?.className,\n          html: infobox?.outerHTML?.substring(0, 200)\n        });\n        infoboxData.value = infobox ? parseGenericInfobox(infobox) : {\n          title: props.pageTitle,\n          type: \"none\",\n          data: {}\n        };\n        if (infobox) infobox.remove();\n\n        // 处理内容\n        const contentElement = doc.querySelector(\"body\");\n        if (!contentElement) throw new Error(\"内容未找到\");\n\n        // 增强DOM处理\n        processDomElements(doc);\n        pageHtml.value = contentElement.innerHTML;\n        injectWikipediaStyles();\n\n        // 调试输出\n        console.log(`Infobox数据 (${props.divId}):`, JSON.stringify(infoboxData.value, null, 2));\n      } catch (err) {\n        error.value = `获取内容失败: ${err.message}`;\n        console.error(\"获取Wikipedia内容错误:\", err);\n        infoboxData.value = {\n          title: props.pageTitle,\n          type: \"error\",\n          data: {\n            error: err.message\n          }\n        };\n      } finally {\n        loading.value = false;\n        // 确保数据发送\n        nextTick(() => {\n          bus.emit(`${props.divId}_InfoboxData`, infoboxData.value);\n          bus.emit(`${props.divId}_Event`, {\n            content: pageHtml.value,\n            infoboxData: infoboxData.value\n          });\n        });\n      }\n    };\n\n    // 新增DOM处理函数\n    function processDomElements(doc) {\n      // 处理标题ID\n      const headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\n      headings.forEach((heading, index) => {\n        if (!heading.id) {\n          heading.id = `heading-${index}-${props.divId}`;\n        }\n      });\n\n      // 处理表格\n      const tables = doc.querySelectorAll(\"table\");\n      tables.forEach((table, i) => {\n        table.classList.add(\"custom-table\");\n        if (!table.id) table.id = `table-${i}-${props.divId}`;\n      });\n\n      // 处理图像\n      doc.querySelectorAll(\"img\").forEach(img => {\n        if (!img.src.startsWith(\"http\")) {\n          img.src = img.src.startsWith(\"//\") ? `https:${img.src}` : `https://en.wikipedia.org${img.src}`;\n        }\n      });\n    }\n\n    // 增强样式注入\n    const injectWikipediaStyles = () => {\n      const styles = [\"https://en.wikipedia.org/w/load.php?modules=site.styles\", \"https://en.wikipedia.org/w/load.php?modules=ext.cite.styles\", \"https://en.wikipedia.org/w/load.php?modules=ext.scribunto.styles\", \"https://en.wikipedia.org/w/load.php?modules=skins.vector.styles\"];\n      styles.forEach(url => {\n        if (!document.querySelector(`link[href=\"${url}\"]`)) {\n          const link = document.createElement(\"link\");\n          link.rel = \"stylesheet\";\n          link.href = url;\n          document.head.appendChild(link);\n        }\n      });\n    };\n\n    // **处理选中内容**\n    const extractLinkedChapterContent = (sourceId, sourceContainerId) => {\n      // console.log(\"Extracting linked chapter content for:\", sourceId); // 调试日志\n\n      // 检查 linkedOutline 是否存在\n      if (!props.linkedOutline) {\n        console.error(\"LinkedOutline is undefined!\");\n        return {\n          linkedItem: null,\n          chapterContent: \"\"\n        };\n      }\n\n      // 找到关联章节的 ID\n      const linkedItem = props.linkedOutline.find(linked => linked.leftId === sourceId || linked.rightId === sourceId);\n      if (!linkedItem) {\n        // console.log(\"No linked chapter found for sourceId:\", sourceId); // 调试日志\n        return {\n          linkedItem: null,\n          chapterContent: \"\"\n        };\n      }\n\n      // 确定目标容器和目标章节 ID\n      const targetContainerId = sourceContainerId === \"div1\" ? \"div3\" : \"div1\";\n      const targetId = sourceContainerId === \"div1\" ? linkedItem.rightId : linkedItem.leftId;\n\n      // 提取目标章节的整个内容\n      const targetContainer = document.getElementById(targetContainerId);\n      if (!targetContainer) return {\n        linkedItem: null,\n        chapterContent: \"\"\n      };\n      const targetElement = targetContainer.querySelector(`#${targetId}`);\n      if (!targetElement) return {\n        linkedItem: null,\n        chapterContent: \"\"\n      };\n\n      // 提取从当前标题到下一个同级标题之前的所有内容\n      let chapterContent = \"\";\n      let currentNode = targetElement;\n      while (currentNode) {\n        // 如果遇到下一个同级标题，停止提取\n        if (currentNode !== targetElement && currentNode.nodeType === Node.ELEMENT_NODE && /^h[1-6]$/i.test(currentNode.tagName)) {\n          break;\n        }\n\n        // 将内容添加到章节内容中\n        if (currentNode.nodeType === Node.ELEMENT_NODE || currentNode.nodeType === Node.TEXT_NODE) {\n          chapterContent += currentNode.outerHTML || currentNode.textContent;\n        }\n        currentNode = currentNode.nextSibling;\n      }\n\n      // console.log(\"Extracted content:\", chapterContent); // 调试日志\n      return {\n        linkedItem,\n        chapterContent\n      };\n    };\n    // **处理选中内容**\n    const handleSelection = content => {\n      // 检查选择的内容是否为表格\n      const isTable = /<table.*?>.*?<\\/table>/s.test(content);\n      // console.log(\"Is table:\", isTable); // 调试日志\n\n      // 获取选中的元素\n      const selection = window.getSelection();\n      if (!selection || selection.rangeCount === 0) {\n        console.error(\"No selection found!\"); // 调试日志\n        return;\n      }\n\n      // 获取选中的范围\n      const range = selection.getRangeAt(0);\n\n      // 获取选择范围内的所有元素\n      const selectedNodes = range.cloneContents().childNodes;\n      // console.log(\"Selected nodes:\", selectedNodes); // 调试日志\n\n      // 遍历选择范围内的所有元素，找到第一个标题元素\n      let sourceId = undefined;\n      for (const node of selectedNodes) {\n        if (node.nodeType === Node.ELEMENT_NODE && /^h[1-6]$/i.test(node.tagName)) {\n          sourceId = node.id;\n          break;\n        }\n      }\n\n      // 如果未找到标题元素，尝试从选中范围的起始位置向上查找\n      if (!sourceId) {\n        let startElement = range.startContainer;\n        while (startElement && !/^h[1-6]$/i.test(startElement.tagName)) {\n          startElement = startElement.parentElement;\n        }\n        sourceId = startElement ? startElement.id : undefined;\n      }\n\n      // console.log(\"Extracted source ID:\", sourceId); // 调试日志\n\n      // 如果没有找到标题元素，直接弹出所选内容\n      if (!sourceId) {\n        // console.log(\"No heading element found, showing selected content only.\"); // 调试日志\n        selectedText.value[props.divId] = content;\n        console.log(`${props.divId}选中的文字###:`, content);\n        // 传递选中内容\n        bus.emit(`${props.divId}_Event`, {\n          content\n        });\n        showPopup.value[props.divId] = true;\n\n        // 确保弹窗位置更新\n        nextTick(() => {\n          updatePopupPosition();\n        });\n        return;\n      }\n\n      // 调用 handleSelectionWithSourceId 方法\n      handleSelectionWithSourceId(content, sourceId, isTable);\n    };\n    const handleSelectionWithSourceId = (content, sourceId, isTable) => {\n      // console.log(\"Selected content:\", content); // 调试日志\n      // console.log(\"Source ID:\", sourceId); // 调试日志\n      // console.log(\"Is table:\", isTable); // 调试日志\n\n      // 存储选中内容\n      selectedText.value[props.divId] = content;\n      console.log(`${props.divId}选中的文字###:`, content);\n      // 传递选中内容\n      bus.emit(`${props.divId}_Event`, {\n        content\n      });\n      showPopup.value[props.divId] = true;\n\n      // 如果是表格，检查是否有关联章节\n      if (isTable) {\n        // 提取关联章节的整个内容和 linkedItem\n        const {\n          linkedItem,\n          chapterContent\n        } = extractLinkedChapterContent(sourceId, props.divId);\n        // console.log(\"Linked chapter content:\", chapterContent); // 调试日志\n\n        // 如果有关联章节内容\n        if (linkedItem && chapterContent) {\n          // 通知另一个容器弹出关联章节内容\n          const otherContainerId = props.divId === \"div1\" ? \"div3\" : \"div1\";\n          const targetId = props.divId === \"div1\" ? linkedItem.rightId : linkedItem.leftId;\n\n          // 先滚动到关联章节\n          const targetElement = document.getElementById(targetId);\n          if (targetElement) {\n            targetElement.scrollIntoView({\n              behavior: \"smooth\"\n            });\n          }\n          console.log(`${otherContainerId}选中的文字???:`, chapterContent);\n          // 传递选中内容\n          bus.emit(`${otherContainerId}_Event`, {\n            content: chapterContent\n          });\n          // 再弹出关联章节内容\n          bus.emit(`${otherContainerId}Event`, {\n            content: chapterContent,\n            // 传递关联章节内容\n            sourceId: sourceId\n          });\n        } else {\n          // console.log(\"No linked chapter found, skipping auto-popup.\"); // 调试日志\n        }\n      }\n\n      // 确保弹窗位置更新\n      nextTick(() => {\n        updatePopupPosition();\n      });\n    };\n\n    // **关闭弹出框**\n    const closePopup = () => {\n      showPopup.value[props.divId] = false; // 根据 divId 关闭弹窗\n      selectedText.value[props.divId] = \"\"; // 根据 divId 清除选中内容\n\n      // 根据 divId 清空对应的容器\n      const container = props.divId === \"div1\" ? \".chart-container1\" : \".chart-container2\";\n      d3.select(container).html(\"\");\n    };\n\n    // **更新遮罩层和弹出框的位置**\n    const updatePopupPosition = () => {\n      if (showPopup.value[props.divId] && divRef.value) {\n        const popup = divRef.value.querySelector(\".text-popup\");\n        const overlay = divRef.value.querySelector(\".overlay\");\n        if (popup && overlay) {\n          const rect = divRef.value.getBoundingClientRect();\n          const scrollTop = divRef.value.scrollTop;\n          const scrollLeft = divRef.value.scrollLeft;\n\n          // 动态调整遮罩层和弹出框的位置\n          overlay.style.top = `${scrollTop}px`;\n          overlay.style.left = `${scrollLeft}px`;\n          overlay.style.width = `${divRef.value.clientWidth}px`;\n          overlay.style.height = `${divRef.value.clientHeight}px`;\n          popup.style.top = `${rect.height / 2 + scrollTop}px`;\n          popup.style.left = `${rect.width / 2 + scrollLeft}px`;\n        }\n      }\n    };\n\n    // **组件挂载后加载 Wikipedia 内容**\n    onMounted(() => {\n      // 确保 divRef 已初始化\n      if (divRef.value) {\n        // console.log(\"divRef 已绑定到 DOM 元素:\", divRef.value);\n      } else {\n        // console.error(\"divRef 未绑定到 DOM 元素\");\n      }\n      fetchWikipediaContent();\n\n      // 监听父容器滚动事件\n      if (divRef.value) {\n        divRef.value.addEventListener(\"scroll\", updatePopupPosition);\n      }\n      // 监听另一个容器的事件\n      bus.on(`${props.divId}Event`, _ref2 => {\n        let {\n          content,\n          sourceId\n        } = _ref2;\n        // console.log(\"Received event:\", content, sourceId); // 调试日志\n\n        // 存储关联章节内容\n        selectedText.value[props.divId] = content;\n        showPopup.value[props.divId] = true;\n\n        // 确保弹窗位置更新\n        nextTick(() => {\n          updatePopupPosition();\n        });\n      });\n\n      // 监听自身的信息框数据事件（调试用）\n      bus.on(`${props.divId}_InfoboxData`, data => {\n        console.log(`Debug: ${props.divId} emitted infobox data:`, data);\n      });\n    });\n\n    // **组件卸载时解绑事件**\n    onUnmounted(() => {\n      // 解绑父容器滚动事件\n      if (divRef.value) {\n        divRef.value.removeEventListener(\"scroll\", updatePopupPosition);\n      }\n      bus.off(`${props.divId}Event`);\n      bus.off(`${props.divId}_InfoboxData`);\n    });\n    const __returned__ = {\n      props,\n      pageHtml,\n      loading,\n      error,\n      selectedText,\n      showPopup,\n      divRef,\n      infoboxData,\n      fetchWikipediaContent,\n      processDomElements,\n      injectWikipediaStyles,\n      extractLinkedChapterContent,\n      handleSelection,\n      handleSelectionWithSourceId,\n      closePopup,\n      updatePopupPosition,\n      ref,\n      onMounted,\n      onUnmounted,\n      nextTick,\n      LoadingSpinner,\n      ErrorDisplay,\n      WikipediaContent,\n      TextPopup,\n      ArticleOutline,\n      get d3() {\n        return d3;\n      },\n      get bus() {\n        return bus;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","nextTick","LoadingSpinner","ErrorDisplay","WikipediaContent","TextPopup","ArticleOutline","d3","bus","props","__props","pageHtml","loading","error","selectedText","showPopup","divRef","infoboxData","title","type","data","fetchWikipediaContent","value","apiUrl","encodeURIComponent","pageTitle","response","fetch","ok","Error","status","html","text","parser","DOMParser","doc","parseFromString","infobox","querySelector","console","log","found","class","className","outerHTML","substring","parseGenericInfobox","remove","contentElement","processDomElements","innerHTML","injectWikipediaStyles","divId","JSON","stringify","err","message","emit","content","headings","querySelectorAll","forEach","heading","index","id","tables","table","i","classList","add","img","src","startsWith","styles","url","document","link","createElement","rel","href","head","appendChild","extractLinkedChapterContent","sourceId","sourceContainerId","linkedOutline","linkedItem","chapterContent","find","linked","leftId","rightId","targetContainerId","targetId","targetContainer","getElementById","targetElement","currentNode","nodeType","Node","ELEMENT_NODE","test","tagName","TEXT_NODE","textContent","nextSibling","handleSelection","isTable","selection","window","getSelection","rangeCount","range","getRangeAt","selectedNodes","cloneContents","childNodes","undefined","node","startElement","startContainer","parentElement","updatePopupPosition","handleSelectionWithSourceId","otherContainerId","scrollIntoView","behavior","closePopup","container","select","popup","overlay","rect","getBoundingClientRect","scrollTop","scrollLeft","style","top","left","width","clientWidth","height","clientHeight","addEventListener","on","_ref2","removeEventListener","off"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/ParentComponent.vue"],"sourcesContent":["<template>\r\n\t<div :class=\"['div0', selectContentClass]\" :id=\"divId\" ref=\"divRef\">\r\n\t\t<h1>{{ pageTitle }}</h1>\r\n\r\n\t\t<!-- 加载动画 -->\r\n\t\t<LoadingSpinner v-if=\"loading\" />\r\n\r\n\t\t<!-- 错误信息 -->\r\n\t\t<ErrorDisplay\r\n\t\t\tv-else-if=\"error\"\r\n\t\t\t:message=\"error\"\r\n\t\t\t@retry=\"fetchWikipediaContent\" />\r\n\r\n\t\t<!-- 文章内容 -->\r\n\t\t<WikipediaContent v-else :content=\"pageHtml\" @select=\"handleSelection\" />\r\n\r\n\t\t<!-- 弹出框 -->\r\n\t\t<TextPopup\r\n\t\t\t:visible=\"showPopup[divId]\"\r\n\t\t\t:content=\"selectedText[divId]\"\r\n\t\t\t:containerClass=\"\r\n\t\t\t\tdivId === 'div1' ? 'chart-container1' : 'chart-container2'\r\n\t\t\t\"\r\n\t\t\t:containerRef=\"divRef\"\r\n\t\t\t@close=\"closePopup\" />\r\n\r\n\t\t<!-- 悬浮大纲组件 -->\r\n\t\t<ArticleOutline :content=\"pageHtml\" :divId=\"divId\" />\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted, nextTick } from \"vue\";\r\n\timport LoadingSpinner from \"./LoadingSpinner.vue\";\r\n\timport ErrorDisplay from \"./ErrorDisplay.vue\";\r\n\timport WikipediaContent from \"./WikipediaContent.vue\";\r\n\timport TextPopup from \"./TextPopup.vue\";\r\n\timport ArticleOutline from \"./ArticleOutline.vue\"; // 引入大纲组件\r\n\timport * as d3 from \"d3\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\r\n\tconst props = defineProps({\r\n\t\tpageTitle: String,\r\n\t\tdivId: String,\r\n\t\tselectContentClass: String,\r\n\t\tlinkedOutline: Array\r\n\t});\r\n\r\n\tconst pageHtml = ref(\"\"); // 文章 HTML 内容\r\n\tconst loading = ref(true); // 加载状态\r\n\tconst error = ref(\"\"); // 错误信息\r\n\tconst selectedText = ref({}); // 存储每个 div 的选中内容\r\n\tconst showPopup = ref({}); // 存储每个 div 的弹窗显示状态\r\n\tconst divRef = ref(null); // `Div1` 或 `Div3` 的 DOM 参考\r\n\r\n\tconst infoboxData = ref({\r\n\t\ttitle: \"\",\r\n\t\ttype: \"none\",\r\n\t\tdata: {}\r\n\t});\r\n\r\n\tconst fetchWikipediaContent = async () => {\r\n\t\ttry {\r\n\t\t\tloading.value = true;\r\n\t\t\terror.value = \"\";\r\n\r\n\t\t\tconst apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(\r\n\t\t\t\tprops.pageTitle\r\n\t\t\t)}`;\r\n\t\t\tconst response = await fetch(apiUrl);\r\n\t\t\tif (!response.ok)\r\n\t\t\t\tthrow new Error(`HTTP error! status: ${response.status}`);\r\n\r\n\t\t\tconst html = await response.text();\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\r\n\t\t\t// 增强Infobox检测\r\n\t\t\tconst infobox = doc.querySelector(`\r\n      .infobox, .infobox_v2, .infobox_v3, \r\n      .toccolours, .sidebar, table.infobox,\r\n      .infobox.biography, .infobox.geography,\r\n      [class*=\"infobox\"], table[class*=\"infobox\"]\r\n    `);\r\n\r\n\t\t\tconsole.log(\"Infobox检测结果:\", {\r\n\t\t\t\tfound: !!infobox,\r\n\t\t\t\tclass: infobox?.className,\r\n\t\t\t\thtml: infobox?.outerHTML?.substring(0, 200)\r\n\t\t\t});\r\n\r\n\t\t\tinfoboxData.value = infobox\r\n\t\t\t\t? parseGenericInfobox(infobox)\r\n\t\t\t\t: { title: props.pageTitle, type: \"none\", data: {} };\r\n\r\n\t\t\tif (infobox) infobox.remove();\r\n\r\n\t\t\t// 处理内容\r\n\t\t\tconst contentElement = doc.querySelector(\"body\");\r\n\t\t\tif (!contentElement) throw new Error(\"内容未找到\");\r\n\r\n\t\t\t// 增强DOM处理\r\n\t\t\tprocessDomElements(doc);\r\n\r\n\t\t\tpageHtml.value = contentElement.innerHTML;\r\n\t\t\tinjectWikipediaStyles();\r\n\r\n\t\t\t// 调试输出\r\n\t\t\tconsole.log(\r\n\t\t\t\t`Infobox数据 (${props.divId}):`,\r\n\t\t\t\tJSON.stringify(infoboxData.value, null, 2)\r\n\t\t\t);\r\n\t\t} catch (err) {\r\n\t\t\terror.value = `获取内容失败: ${err.message}`;\r\n\t\t\tconsole.error(\"获取Wikipedia内容错误:\", err);\r\n\t\t\tinfoboxData.value = {\r\n\t\t\t\ttitle: props.pageTitle,\r\n\t\t\t\ttype: \"error\",\r\n\t\t\t\tdata: { error: err.message }\r\n\t\t\t};\r\n\t\t} finally {\r\n\t\t\tloading.value = false;\r\n\t\t\t// 确保数据发送\r\n\t\t\tnextTick(() => {\r\n\t\t\t\tbus.emit(`${props.divId}_InfoboxData`, infoboxData.value);\r\n\t\t\t\tbus.emit(`${props.divId}_Event`, {\r\n\t\t\t\t\tcontent: pageHtml.value,\r\n\t\t\t\t\tinfoboxData: infoboxData.value\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t// 新增DOM处理函数\r\n\tfunction processDomElements(doc) {\r\n\t\t// 处理标题ID\r\n\t\tconst headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\r\n\t\theadings.forEach((heading, index) => {\r\n\t\t\tif (!heading.id) {\r\n\t\t\t\theading.id = `heading-${index}-${props.divId}`;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// 处理表格\r\n\t\tconst tables = doc.querySelectorAll(\"table\");\r\n\t\ttables.forEach((table, i) => {\r\n\t\t\ttable.classList.add(\"custom-table\");\r\n\t\t\tif (!table.id) table.id = `table-${i}-${props.divId}`;\r\n\t\t});\r\n\r\n\t\t// 处理图像\r\n\t\tdoc.querySelectorAll(\"img\").forEach(img => {\r\n\t\t\tif (!img.src.startsWith(\"http\")) {\r\n\t\t\t\timg.src = img.src.startsWith(\"//\")\r\n\t\t\t\t\t? `https:${img.src}`\r\n\t\t\t\t\t: `https://en.wikipedia.org${img.src}`;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// 增强样式注入\r\n\tconst injectWikipediaStyles = () => {\r\n\t\tconst styles = [\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=site.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=ext.cite.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=ext.scribunto.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=skins.vector.styles\"\r\n\t\t];\r\n\r\n\t\tstyles.forEach(url => {\r\n\t\t\tif (!document.querySelector(`link[href=\"${url}\"]`)) {\r\n\t\t\t\tconst link = document.createElement(\"link\");\r\n\t\t\t\tlink.rel = \"stylesheet\";\r\n\t\t\t\tlink.href = url;\r\n\t\t\t\tdocument.head.appendChild(link);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t// **处理选中内容**\r\n\tconst extractLinkedChapterContent = (sourceId, sourceContainerId) => {\r\n\t\t// console.log(\"Extracting linked chapter content for:\", sourceId); // 调试日志\r\n\r\n\t\t// 检查 linkedOutline 是否存在\r\n\t\tif (!props.linkedOutline) {\r\n\t\t\tconsole.error(\"LinkedOutline is undefined!\");\r\n\t\t\treturn { linkedItem: null, chapterContent: \"\" };\r\n\t\t}\r\n\r\n\t\t// 找到关联章节的 ID\r\n\t\tconst linkedItem = props.linkedOutline.find(\r\n\t\t\tlinked => linked.leftId === sourceId || linked.rightId === sourceId\r\n\t\t);\r\n\t\tif (!linkedItem) {\r\n\t\t\t// console.log(\"No linked chapter found for sourceId:\", sourceId); // 调试日志\r\n\t\t\treturn { linkedItem: null, chapterContent: \"\" };\r\n\t\t}\r\n\r\n\t\t// 确定目标容器和目标章节 ID\r\n\t\tconst targetContainerId = sourceContainerId === \"div1\" ? \"div3\" : \"div1\";\r\n\t\tconst targetId =\r\n\t\t\tsourceContainerId === \"div1\" ? linkedItem.rightId : linkedItem.leftId;\r\n\r\n\t\t// 提取目标章节的整个内容\r\n\t\tconst targetContainer = document.getElementById(targetContainerId);\r\n\t\tif (!targetContainer) return { linkedItem: null, chapterContent: \"\" };\r\n\r\n\t\tconst targetElement = targetContainer.querySelector(`#${targetId}`);\r\n\t\tif (!targetElement) return { linkedItem: null, chapterContent: \"\" };\r\n\r\n\t\t// 提取从当前标题到下一个同级标题之前的所有内容\r\n\t\tlet chapterContent = \"\";\r\n\t\tlet currentNode = targetElement;\r\n\r\n\t\twhile (currentNode) {\r\n\t\t\t// 如果遇到下一个同级标题，停止提取\r\n\t\t\tif (\r\n\t\t\t\tcurrentNode !== targetElement &&\r\n\t\t\t\tcurrentNode.nodeType === Node.ELEMENT_NODE &&\r\n\t\t\t\t/^h[1-6]$/i.test(currentNode.tagName)\r\n\t\t\t) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// 将内容添加到章节内容中\r\n\t\t\tif (\r\n\t\t\t\tcurrentNode.nodeType === Node.ELEMENT_NODE ||\r\n\t\t\t\tcurrentNode.nodeType === Node.TEXT_NODE\r\n\t\t\t) {\r\n\t\t\t\tchapterContent += currentNode.outerHTML || currentNode.textContent;\r\n\t\t\t}\r\n\r\n\t\t\tcurrentNode = currentNode.nextSibling;\r\n\t\t}\r\n\r\n\t\t// console.log(\"Extracted content:\", chapterContent); // 调试日志\r\n\t\treturn { linkedItem, chapterContent };\r\n\t};\r\n\t// **处理选中内容**\r\n\tconst handleSelection = content => {\r\n\t\t// 检查选择的内容是否为表格\r\n\t\tconst isTable = /<table.*?>.*?<\\/table>/s.test(content);\r\n\t\t// console.log(\"Is table:\", isTable); // 调试日志\r\n\r\n\t\t// 获取选中的元素\r\n\t\tconst selection = window.getSelection();\r\n\t\tif (!selection || selection.rangeCount === 0) {\r\n\t\t\tconsole.error(\"No selection found!\"); // 调试日志\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 获取选中的范围\r\n\t\tconst range = selection.getRangeAt(0);\r\n\r\n\t\t// 获取选择范围内的所有元素\r\n\t\tconst selectedNodes = range.cloneContents().childNodes;\r\n\t\t// console.log(\"Selected nodes:\", selectedNodes); // 调试日志\r\n\r\n\t\t// 遍历选择范围内的所有元素，找到第一个标题元素\r\n\t\tlet sourceId = undefined;\r\n\t\tfor (const node of selectedNodes) {\r\n\t\t\tif (\r\n\t\t\t\tnode.nodeType === Node.ELEMENT_NODE &&\r\n\t\t\t\t/^h[1-6]$/i.test(node.tagName)\r\n\t\t\t) {\r\n\t\t\t\tsourceId = node.id;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 如果未找到标题元素，尝试从选中范围的起始位置向上查找\r\n\t\tif (!sourceId) {\r\n\t\t\tlet startElement = range.startContainer;\r\n\t\t\twhile (startElement && !/^h[1-6]$/i.test(startElement.tagName)) {\r\n\t\t\t\tstartElement = startElement.parentElement;\r\n\t\t\t}\r\n\t\t\tsourceId = startElement ? startElement.id : undefined;\r\n\t\t}\r\n\r\n\t\t// console.log(\"Extracted source ID:\", sourceId); // 调试日志\r\n\r\n\t\t// 如果没有找到标题元素，直接弹出所选内容\r\n\t\tif (!sourceId) {\r\n\t\t\t// console.log(\"No heading element found, showing selected content only.\"); // 调试日志\r\n\t\t\tselectedText.value[props.divId] = content;\r\n\t\t\tconsole.log(`${props.divId}选中的文字###:`, content);\r\n\t\t\t// 传递选中内容\r\n\t\t\tbus.emit(`${props.divId}_Event`, { content });\r\n\t\t\tshowPopup.value[props.divId] = true;\r\n\r\n\t\t\t// 确保弹窗位置更新\r\n\t\t\tnextTick(() => {\r\n\t\t\t\tupdatePopupPosition();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 调用 handleSelectionWithSourceId 方法\r\n\t\thandleSelectionWithSourceId(content, sourceId, isTable);\r\n\t};\r\n\r\n\tconst handleSelectionWithSourceId = (content, sourceId, isTable) => {\r\n\t\t// console.log(\"Selected content:\", content); // 调试日志\r\n\t\t// console.log(\"Source ID:\", sourceId); // 调试日志\r\n\t\t// console.log(\"Is table:\", isTable); // 调试日志\r\n\r\n\t\t// 存储选中内容\r\n\t\tselectedText.value[props.divId] = content;\r\n\t\tconsole.log(`${props.divId}选中的文字###:`, content);\r\n\t\t// 传递选中内容\r\n\t\tbus.emit(`${props.divId}_Event`, { content });\r\n\t\tshowPopup.value[props.divId] = true;\r\n\r\n\t\t// 如果是表格，检查是否有关联章节\r\n\t\tif (isTable) {\r\n\t\t\t// 提取关联章节的整个内容和 linkedItem\r\n\t\t\tconst { linkedItem, chapterContent } = extractLinkedChapterContent(\r\n\t\t\t\tsourceId,\r\n\t\t\t\tprops.divId\r\n\t\t\t);\r\n\t\t\t// console.log(\"Linked chapter content:\", chapterContent); // 调试日志\r\n\r\n\t\t\t// 如果有关联章节内容\r\n\t\t\tif (linkedItem && chapterContent) {\r\n\t\t\t\t// 通知另一个容器弹出关联章节内容\r\n\t\t\t\tconst otherContainerId = props.divId === \"div1\" ? \"div3\" : \"div1\";\r\n\t\t\t\tconst targetId =\r\n\t\t\t\t\tprops.divId === \"div1\" ? linkedItem.rightId : linkedItem.leftId;\r\n\r\n\t\t\t\t// 先滚动到关联章节\r\n\t\t\t\tconst targetElement = document.getElementById(targetId);\r\n\t\t\t\tif (targetElement) {\r\n\t\t\t\t\ttargetElement.scrollIntoView({ behavior: \"smooth\" });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.log(`${otherContainerId}选中的文字???:`, chapterContent);\r\n\t\t\t\t// 传递选中内容\r\n\t\t\t\tbus.emit(`${otherContainerId}_Event`, { content: chapterContent });\r\n\t\t\t\t// 再弹出关联章节内容\r\n\t\t\t\tbus.emit(`${otherContainerId}Event`, {\r\n\t\t\t\t\tcontent: chapterContent, // 传递关联章节内容\r\n\t\t\t\t\tsourceId: sourceId\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// console.log(\"No linked chapter found, skipping auto-popup.\"); // 调试日志\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 确保弹窗位置更新\r\n\t\tnextTick(() => {\r\n\t\t\tupdatePopupPosition();\r\n\t\t});\r\n\t};\r\n\r\n\t// **关闭弹出框**\r\n\tconst closePopup = () => {\r\n\t\tshowPopup.value[props.divId] = false; // 根据 divId 关闭弹窗\r\n\t\tselectedText.value[props.divId] = \"\"; // 根据 divId 清除选中内容\r\n\r\n\t\t// 根据 divId 清空对应的容器\r\n\t\tconst container =\r\n\t\t\tprops.divId === \"div1\" ? \".chart-container1\" : \".chart-container2\";\r\n\t\td3.select(container).html(\"\");\r\n\t};\r\n\r\n\t// **更新遮罩层和弹出框的位置**\r\n\tconst updatePopupPosition = () => {\r\n\t\tif (showPopup.value[props.divId] && divRef.value) {\r\n\t\t\tconst popup = divRef.value.querySelector(\".text-popup\");\r\n\t\t\tconst overlay = divRef.value.querySelector(\".overlay\");\r\n\t\t\tif (popup && overlay) {\r\n\t\t\t\tconst rect = divRef.value.getBoundingClientRect();\r\n\t\t\t\tconst scrollTop = divRef.value.scrollTop;\r\n\t\t\t\tconst scrollLeft = divRef.value.scrollLeft;\r\n\r\n\t\t\t\t// 动态调整遮罩层和弹出框的位置\r\n\t\t\t\toverlay.style.top = `${scrollTop}px`;\r\n\t\t\t\toverlay.style.left = `${scrollLeft}px`;\r\n\t\t\t\toverlay.style.width = `${divRef.value.clientWidth}px`;\r\n\t\t\t\toverlay.style.height = `${divRef.value.clientHeight}px`;\r\n\r\n\t\t\t\tpopup.style.top = `${rect.height / 2 + scrollTop}px`;\r\n\t\t\t\tpopup.style.left = `${rect.width / 2 + scrollLeft}px`;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// **组件挂载后加载 Wikipedia 内容**\r\n\tonMounted(() => {\r\n\t\t// 确保 divRef 已初始化\r\n\t\tif (divRef.value) {\r\n\t\t\t// console.log(\"divRef 已绑定到 DOM 元素:\", divRef.value);\r\n\t\t} else {\r\n\t\t\t// console.error(\"divRef 未绑定到 DOM 元素\");\r\n\t\t}\r\n\t\tfetchWikipediaContent();\r\n\r\n\t\t// 监听父容器滚动事件\r\n\t\tif (divRef.value) {\r\n\t\t\tdivRef.value.addEventListener(\"scroll\", updatePopupPosition);\r\n\t\t}\r\n\t\t// 监听另一个容器的事件\r\n\t\tbus.on(`${props.divId}Event`, ({ content, sourceId }) => {\r\n\t\t\t// console.log(\"Received event:\", content, sourceId); // 调试日志\r\n\r\n\t\t\t// 存储关联章节内容\r\n\t\t\tselectedText.value[props.divId] = content;\r\n\t\t\tshowPopup.value[props.divId] = true;\r\n\r\n\t\t\t// 确保弹窗位置更新\r\n\t\t\tnextTick(() => {\r\n\t\t\t\tupdatePopupPosition();\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t// 监听自身的信息框数据事件（调试用）\r\n\t\tbus.on(`${props.divId}_InfoboxData`, data => {\r\n\t\t\tconsole.log(`Debug: ${props.divId} emitted infobox data:`, data);\r\n\t\t});\r\n\t});\r\n\r\n\t// **组件卸载时解绑事件**\r\n\tonUnmounted(() => {\r\n\t\t// 解绑父容器滚动事件\r\n\t\tif (divRef.value) {\r\n\t\t\tdivRef.value.removeEventListener(\"scroll\", updatePopupPosition);\r\n\t\t}\r\n\t\tbus.off(`${props.divId}Event`);\r\n\t\tbus.off(`${props.divId}_InfoboxData`);\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\th1 {\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t/* 文章容器 */\r\n\t.div0 {\r\n\t\tposition: relative;\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t#div1,\r\n\t#div3 {\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t.showHtml {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\toverflow: auto;\r\n\t}\r\n\r\n\t/* 选中文本的高亮样式 */\r\n\t::selection {\r\n\t\tbackground-color: yellow;\r\n\t\tcolor: black;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}