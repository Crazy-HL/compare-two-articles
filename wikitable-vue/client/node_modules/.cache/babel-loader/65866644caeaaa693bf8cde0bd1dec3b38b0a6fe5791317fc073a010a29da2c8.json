{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, withModifiers as _withModifiers, normalizeStyle as _normalizeStyle, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-1f9d3193\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  key: 0,\n  class: \"icon\",\n  viewBox: \"0 0 24 24\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"path\", {\n  fill: \"currentColor\",\n  d: \"M3 6h18v2H3V6zm0 5h18v2H3v-2zm0 5h18v2H3v-2z\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_3 = [_hoisted_2];\nconst _hoisted_4 = {\n  key: 1,\n  class: \"icon close\",\n  viewBox: \"0 0 24 24\"\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"path\", {\n  fill: \"currentColor\",\n  d: \"M6 18L18 6M6 6l12 12\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_6 = [_hoisted_5];\nconst _hoisted_7 = {\n  class: \"outline\"\n};\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"文章大纲\", -1 /* HOISTED */));\nconst _hoisted_9 = [\"href\", \"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" 大纲切换按钮 \"), _createElementVNode(\"button\", {\n    onClick: $setup.toggleOutline,\n    class: _normalizeClass(['toggle-btn', $props.divId === 'div1' ? 'right' : 'left'])\n  }, [!$setup.isVisible ? (_openBlock(), _createElementBlock(\"svg\", _hoisted_1, [..._hoisted_3])) : (_openBlock(), _createElementBlock(\"svg\", _hoisted_4, [..._hoisted_6]))], 2 /* CLASS */), _createCommentVNode(\" 大纲内容 \"), $setup.isVisible ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: _normalizeClass(['outline-container', $props.divId === 'div1' ? 'right' : 'left'])\n  }, [_createElementVNode(\"div\", _hoisted_7, [_hoisted_8, _createElementVNode(\"ul\", null, [_createCommentVNode(\" 生成章节列表，并添加相应的高亮或标识 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.outline, (item, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: item.id,\n      class: _normalizeClass({\n        highlight: $setup.isLinked(item, index),\n        linked: $setup.isLinked(item, index)\n      }),\n      style: _normalizeStyle({\n        paddingLeft: `${(item.level - 1) * 15}px`\n      })\n    }, [_createElementVNode(\"a\", {\n      href: '#' + item.id,\n      onClick: _withModifiers($event => $setup.scrollToChapter(item.id), [\"prevent\"])\n    }, _toDisplayString(item.text), 9 /* TEXT, PROPS */, _hoisted_9)], 6 /* CLASS, STYLE */);\n  }), 128 /* KEYED_FRAGMENT */))])])], 2 /* CLASS */)) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["key","class","viewBox","_createElementVNode","fill","d","_hoisted_2","_hoisted_5","_createElementBlock","_Fragment","_createCommentVNode","onClick","$setup","toggleOutline","_normalizeClass","$props","divId","isVisible","_hoisted_1","_hoisted_3","_hoisted_4","_hoisted_6","_hoisted_7","_hoisted_8","_renderList","outline","item","index","id","isLinked","style","_normalizeStyle","paddingLeft","level","href","_withModifiers","$event","scrollToChapter","text","_hoisted_9"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\ArticleOutline.vue"],"sourcesContent":["<template>\r\n\t<!-- 大纲切换按钮 -->\r\n\t<button\r\n\t\t@click=\"toggleOutline\"\r\n\t\t:class=\"['toggle-btn', divId === 'div1' ? 'right' : 'left']\">\r\n\t\t<svg v-if=\"!isVisible\" class=\"icon\" viewBox=\"0 0 24 24\">\r\n\t\t\t<path\r\n\t\t\t\tfill=\"currentColor\"\r\n\t\t\t\td=\"M3 6h18v2H3V6zm0 5h18v2H3v-2zm0 5h18v2H3v-2z\"></path>\r\n\t\t</svg>\r\n\t\t<svg v-else class=\"icon close\" viewBox=\"0 0 24 24\">\r\n\t\t\t<path fill=\"currentColor\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n\t\t</svg>\r\n\t</button>\r\n\r\n\t<!-- 大纲内容 -->\r\n\t<div\r\n\t\tv-if=\"isVisible\"\r\n\t\t:class=\"['outline-container', divId === 'div1' ? 'right' : 'left']\">\r\n\t\t<div class=\"outline\">\r\n\t\t\t<h2>文章大纲</h2>\r\n\t\t\t<ul>\r\n\t\t\t\t<!-- 生成章节列表，并添加相应的高亮或标识 -->\r\n\t\t\t\t<li\r\n\t\t\t\t\tv-for=\"(item, index) in outline\"\r\n\t\t\t\t\t:key=\"item.id\"\r\n\t\t\t\t\t:class=\"{\r\n\t\t\t\t\t\thighlight: isLinked(item, index),\r\n\t\t\t\t\t\tlinked: isLinked(item, index)\r\n\t\t\t\t\t}\"\r\n\t\t\t\t\t:style=\"{ paddingLeft: `${(item.level - 1) * 15}px` }\">\r\n\t\t\t\t\t<a :href=\"'#' + item.id\" @click.prevent=\"scrollToChapter(item.id)\">{{\r\n\t\t\t\t\t\titem.text\r\n\t\t\t\t\t}}</a>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, watch, onMounted } from \"vue\";\r\n\r\n\tconst props = defineProps({\r\n\t\tcontent: String, // 文章 HTML\r\n\t\tdivId: String, // div1 或 div3\r\n\t\tlinkedOutline: Array // 关联大纲数据\r\n\t});\r\n\r\n\tconst isVisible = ref(false);\r\n\tconst outline = ref([]);\r\n\r\n\t// **切换大纲的显示**\r\n\tconst toggleOutline = () => {\r\n\t\tisVisible.value = !isVisible.value;\r\n\t};\r\n\r\n\t// **解析文章，提取 h1-h6 标题，并计算缩进级别**\r\n\tconst extractOutline = content => {\r\n\t\tif (!content) return [];\r\n\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst doc = parser.parseFromString(content, \"text/html\");\r\n\t\tconst headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\r\n\r\n\t\treturn Array.from(headings).map((heading, index) => {\r\n\t\t\tconst level = parseInt(heading.tagName.substring(1)); // 提取 h1-h6 的级别\r\n\t\t\tconst id = `heading-${index}-${props.divId}`;\r\n\t\t\theading.id = id; // 确保 HTML 里有 ID\r\n\t\t\treturn { id, text: heading.textContent, level };\r\n\t\t});\r\n\t};\r\n\r\n\t// **监听 content 变化，更新大纲**\r\n\twatch(\r\n\t\t() => props.content,\r\n\t\tnewContent => {\r\n\t\t\toutline.value = extractOutline(newContent);\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\t// **检查是否存在关联章节**\r\n\tconst isLinked = (item, index) => {\r\n\t\tif (!props.linkedOutline) return false;\r\n\t\t// 检查左边的大纲和右边大纲是否存在匹配章节\r\n\t\tconst linkedItem = props.linkedOutline.find(\r\n\t\t\tlinked => linked.leftId === item.id\r\n\t\t);\r\n\t\tif (linkedItem) {\r\n\t\t\t// 如果有匹配，则返回 true，表示这两个章节关联\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t// **滚动到章节**\r\n\tconst scrollToChapter = id => {\r\n\t\tconst element = document.getElementById(id);\r\n\t\tif (element) {\r\n\t\t\telement.scrollIntoView({ behavior: \"smooth\" });\r\n\t\t}\r\n\t};\r\n\r\n\t// **初始化大纲**\r\n\tonMounted(() => {\r\n\t\toutline.value = extractOutline(props.content);\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t/* **按钮样式** */\r\n\t.toggle-btn {\r\n\t\tposition: absolute;\r\n\t\ttop: 10px;\r\n\t\tpadding: 10px;\r\n\t\tborder-radius: 50%;\r\n\t\tcursor: pointer;\r\n\t\tz-index: 2000;\r\n\t\tbackground-color: #0077b6;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\twidth: 36px;\r\n\t\theight: 36px;\r\n\t\tbox-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n\t\ttransition: all 0.3s ease-in-out;\r\n\t}\r\n\r\n\t.toggle-btn.right {\r\n\t\tright: 10px;\r\n\t}\r\n\r\n\t.toggle-btn.left {\r\n\t\tleft: 10px;\r\n\t}\r\n\r\n\t/* **悬浮效果** */\r\n\t.toggle-btn:hover {\r\n\t\tbackground-color: #005f8a;\r\n\t\ttransform: scale(1.1);\r\n\t}\r\n\r\n\t/* **大纲样式** */\r\n\t.outline-container {\r\n\t\tposition: absolute;\r\n\t\ttop: 50px;\r\n\t\tbackground: white;\r\n\t\tborder-radius: 8px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n\t\tpadding: 15px;\r\n\t\tmax-height: 80vh;\r\n\t\toverflow-y: auto;\r\n\t\twidth: 260px;\r\n\t\ttransition: all 0.3s ease-in-out;\r\n\t}\r\n\r\n\t.outline-container.right {\r\n\t\tright: 10px;\r\n\t}\r\n\r\n\t.outline-container.left {\r\n\t\tleft: 10px;\r\n\t}\r\n\r\n\t.outline h2 {\r\n\t\tfont-size: 1.2em;\r\n\t\tmargin-bottom: 10px;\r\n\t\tcolor: #0077b6;\r\n\t}\r\n\r\n\t.outline ul {\r\n\t\tlist-style-type: none;\r\n\t\tpadding-left: 0;\r\n\t}\r\n\r\n\t.outline li {\r\n\t\tmargin-bottom: 8px;\r\n\t\tfont-size: 14px;\r\n\t\ttransition: padding-left 0.2s ease-in-out;\r\n\t}\r\n\r\n\t/* **章节高亮和标识** */\r\n\t.outline li.highlight a {\r\n\t\tbackground-color: #ffff00; /* 高亮背景 */\r\n\t\tborder-radius: 5px;\r\n\t}\r\n\r\n\t.outline li.linked a {\r\n\t\tfont-weight: bold;\r\n\t\tcolor: #0077b6;\r\n\t}\r\n\r\n\t.outline li a {\r\n\t\ttext-decoration: none;\r\n\t\tcolor: #0077b6;\r\n\t}\r\n\r\n\t.outline li a:hover {\r\n\t\ttext-decoration: underline;\r\n\t\tcolor: #005f8a;\r\n\t}\r\n</style>\r\n"],"mappings":";;;EAAAA,GAAA;EAKyBC,KAAK,EAAC,MAAM;EAACC,OAAO,EAAC;;gEAC3CC,mBAAA,CAEyD;EADxDC,IAAI,EAAC,cAAc;EACnBC,CAAC,EAAC;;oBAFHC,UAEyD,C;;EAR5DN,GAAA;EAUcC,KAAK,EAAC,YAAY;EAACC,OAAO,EAAC;;gEACtCC,mBAAA,CAA0D;EAApDC,IAAI,EAAC,cAAc;EAACC,CAAC,EAAC;;oBAA5BE,UAA0D,C;;EAQtDN,KAAK,EAAC;AAAS;gEACnBE,mBAAA,CAAa,YAAT,MAAI;mBApBX;;uBAAAK,mBAAA,CAAAC,SAAA,SACCC,mBAAA,YAAe,EACfP,mBAAA,CAWS;IAVPQ,OAAK,EAAEC,MAAA,CAAAC,aAAa;IACpBZ,KAAK,EAJRa,eAAA,gBAIyBC,MAAA,CAAAC,KAAK;OAChBJ,MAAA,CAAAK,SAAS,I,cAArBT,mBAAA,CAIM,OAJNU,UAIM,EATR,IAAAC,UAAA,O,cAUEX,mBAAA,CAEM,OAFNY,UAEM,EAZR,IAAAC,UAAA,I,kBAeCX,mBAAA,UAAa,EAENE,MAAA,CAAAK,SAAS,I,cADhBT,mBAAA,CAqBM;IArCPR,GAAA;IAkBGC,KAAK,EAlBRa,eAAA,uBAkBgCC,MAAA,CAAAC,KAAK;MACnCb,mBAAA,CAiBM,OAjBNmB,UAiBM,GAhBLC,UAAa,EACbpB,mBAAA,CAcK,aAbJO,mBAAA,wBAA2B,G,kBAC3BF,mBAAA,CAWKC,SAAA,QAlCTe,WAAA,CAwB6BZ,MAAA,CAAAa,OAAO,EAxBpC,CAwBaC,IAAI,EAAEC,KAAK;yBADpBnB,mBAAA,CAWK;MATHR,GAAG,EAAE0B,IAAI,CAACE,EAAE;MACZ3B,KAAK,EA1BXa,eAAA;mBA0BiCF,MAAA,CAAAiB,QAAQ,CAACH,IAAI,EAAEC,KAAK;gBAAkBf,MAAA,CAAAiB,QAAQ,CAACH,IAAI,EAAEC,KAAK;;MAIrFG,KAAK,EA9BXC,eAAA;QAAAC,WAAA,MA8BgCN,IAAI,CAACO,KAAK;MAAA;QACrC9B,mBAAA,CAEM;MAFF+B,IAAI,QAAQR,IAAI,CAACE,EAAE;MAAGjB,OAAK,EA/BpCwB,cAAA,CAAAC,MAAA,IA+B8CxB,MAAA,CAAAyB,eAAe,CAACX,IAAI,CAACE,EAAE;wBAC/DF,IAAI,CAACY,IAAI,wBAhCfC,UAAA,E;yDAAA7B,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}