{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, Fragment as _Fragment, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-a89cbc96\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"simple-chart\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"text-tooltip\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"d3-chart-container\",\n  ref: \"pieContainer\"\n};\nconst _hoisted_4 = {\n  key: 1,\n  class: \"no-data\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"d3-chart-container\",\n  ref: \"barContainer\"\n};\nconst _hoisted_6 = {\n  key: 1,\n  class: \"no-data\"\n};\nconst _hoisted_7 = {\n  key: 0,\n  class: \"d3-chart-container\",\n  ref: \"lineContainer\"\n};\nconst _hoisted_8 = {\n  key: 1,\n  class: \"no-data\"\n};\nconst _hoisted_9 = {\n  key: 0,\n  class: \"d3-chart-container\",\n  ref: \"stackedContainer\"\n};\nconst _hoisted_10 = {\n  key: 1,\n  class: \"no-data\"\n};\nconst _hoisted_11 = {\n  key: 0,\n  class: \"text-tooltip\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 文本显示 \"), $props.visualization === 'text-only' ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 0\n  }, [_createElementVNode(\"div\", {\n    class: \"simple-text\",\n    onClick: _cache[0] || (_cache[0] = function () {\n      return $setup.handleTextClick && $setup.handleTextClick(...arguments);\n    }),\n    onMouseenter: _cache[1] || (_cache[1] = function () {\n      return $setup.handleTextHover && $setup.handleTextHover(...arguments);\n    }),\n    onMouseleave: _cache[2] || (_cache[2] = function () {\n      return $setup.resetHover && $setup.resetHover(...arguments);\n    })\n  }, _toDisplayString($setup.formatSimpleText($setup.processedField)), 33 /* TEXT, NEED_HYDRATION */), $setup.isTextHovered ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, \"点击查看详情\")) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */)) : $props.visualization === 'pie-chart' ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" 饼图 (D3实现) \"), $setup.hasData && $setup.isValidPieData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, null, 512 /* NEED_PATCH */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, \"-\"))], 64 /* STABLE_FRAGMENT */)) : $props.visualization === 'bar-chart' ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 2\n  }, [_createCommentVNode(\" 柱状图 (D3实现) \"), $setup.hasData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, null, 512 /* NEED_PATCH */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_6, \"-\"))], 64 /* STABLE_FRAGMENT */)) : $props.visualization === 'line-chart' ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 3\n  }, [_createCommentVNode(\" 折线图 (D3实现) \"), $setup.hasData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, null, 512 /* NEED_PATCH */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_8, \"-\"))], 64 /* STABLE_FRAGMENT */)) : $props.visualization === 'stacked-chart' ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 4\n  }, [_createCommentVNode(\" 堆叠图 \"), $setup.hasData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, null, 512 /* NEED_PATCH */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_10, \"-\"))], 64 /* STABLE_FRAGMENT */)) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 5\n  }, [_createCommentVNode(\" 默认显示 \"), _createElementVNode(\"div\", {\n    class: \"simple-text\",\n    onClick: _cache[3] || (_cache[3] = function () {\n      return $setup.handleTextClick && $setup.handleTextClick(...arguments);\n    }),\n    onMouseenter: _cache[4] || (_cache[4] = function () {\n      return $setup.handleTextHover && $setup.handleTextHover(...arguments);\n    }),\n    onMouseleave: _cache[5] || (_cache[5] = function () {\n      return $setup.resetHover && $setup.resetHover(...arguments);\n    })\n  }, _toDisplayString($setup.formatSimpleText($setup.processedField)), 33 /* TEXT, NEED_HYDRATION */), $setup.isTextHovered ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, \"点击查看详情\")) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","key","ref","_createElementBlock","_hoisted_1","_createCommentVNode","$props","visualization","_Fragment","_createElementVNode","onClick","_cache","$setup","handleTextClick","arguments","onMouseenter","handleTextHover","onMouseleave","resetHover","formatSimpleText","processedField","isTextHovered","_hoisted_2","hasData","isValidPieData","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\SimpleChart.vue"],"sourcesContent":["<template>\r\n\t<div class=\"simple-chart\">\r\n\t\t<!-- 文本显示 -->\r\n\t\t<template v-if=\"visualization === 'text-only'\">\r\n\t\t\t<div\r\n\t\t\t\tclass=\"simple-text\"\r\n\t\t\t\t@click=\"handleTextClick\"\r\n\t\t\t\t@mouseenter=\"handleTextHover\"\r\n\t\t\t\t@mouseleave=\"resetHover\">\r\n\t\t\t\t{{ formatSimpleText(processedField) }}\r\n\t\t\t</div>\r\n\t\t\t<div v-if=\"isTextHovered\" class=\"text-tooltip\">点击查看详情</div>\r\n\t\t</template>\r\n\r\n\t\t<!-- 饼图 (D3实现) -->\r\n\t\t<template v-else-if=\"visualization === 'pie-chart'\">\r\n\t\t\t<div\r\n\t\t\t\tv-if=\"hasData && isValidPieData\"\r\n\t\t\t\tclass=\"d3-chart-container\"\r\n\t\t\t\tref=\"pieContainer\"></div>\r\n\t\t\t<div v-else class=\"no-data\">-</div>\r\n\t\t</template>\r\n\r\n\t\t<!-- 柱状图 (D3实现) -->\r\n\t\t<template v-else-if=\"visualization === 'bar-chart'\">\r\n\t\t\t<div v-if=\"hasData\" class=\"d3-chart-container\" ref=\"barContainer\"></div>\r\n\t\t\t<div v-else class=\"no-data\">-</div>\r\n\t\t</template>\r\n\r\n\t\t<!-- 折线图 (D3实现) -->\r\n\t\t<template v-else-if=\"visualization === 'line-chart'\">\r\n\t\t\t<div v-if=\"hasData\" class=\"d3-chart-container\" ref=\"lineContainer\"></div>\r\n\t\t\t<div v-else class=\"no-data\">-</div>\r\n\t\t</template>\r\n\r\n\t\t<!-- 堆叠图 -->\r\n\t\t<template v-else-if=\"visualization === 'stacked-chart'\">\r\n\t\t\t<div\r\n\t\t\t\tv-if=\"hasData\"\r\n\t\t\t\tclass=\"d3-chart-container\"\r\n\t\t\t\tref=\"stackedContainer\"></div>\r\n\t\t\t<div v-else class=\"no-data\">-</div>\r\n\t\t</template>\r\n\r\n\t\t<!-- 默认显示 -->\r\n\t\t<template v-else>\r\n\t\t\t<div\r\n\t\t\t\tclass=\"simple-text\"\r\n\t\t\t\t@click=\"handleTextClick\"\r\n\t\t\t\t@mouseenter=\"handleTextHover\"\r\n\t\t\t\t@mouseleave=\"resetHover\">\r\n\t\t\t\t{{ formatSimpleText(processedField) }}\r\n\t\t\t</div>\r\n\t\t\t<div v-if=\"isTextHovered\" class=\"text-tooltip\">点击查看详情</div>\r\n\t\t</template>\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\n\timport { computed, ref, onMounted, watch, nextTick } from \"vue\";\r\n\timport * as d3 from \"d3\";\r\n\r\n\texport default {\r\n\t\tprops: {\r\n\t\t\tfield: {\r\n\t\t\t\ttype: [Object, Array, String, Number],\r\n\t\t\t\tdefault: null\r\n\t\t\t},\r\n\t\t\ttype: {\r\n\t\t\t\ttype: String,\r\n\t\t\t\tdefault: \"\"\r\n\t\t\t},\r\n\t\t\tvisualization: {\r\n\t\t\t\ttype: String,\r\n\t\t\t\tdefault: \"\"\r\n\t\t\t},\r\n\t\t\tfieldKey: {\r\n\t\t\t\ttype: String,\r\n\t\t\t\tdefault: \"\"\r\n\t\t\t},\r\n\t\t\tunifiedMax: {\r\n\t\t\t\ttype: Number,\r\n\t\t\t\tdefault: null\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\temits: [\"chartClick\"],\r\n\r\n\t\tsetup(props, { emit }) {\r\n\t\t\tconst hoveredIndex = ref(null);\r\n\t\t\tconst activeIndex = ref(null);\r\n\t\t\tconst isTextHovered = ref(false);\r\n\r\n\t\t\t// 容器引用\r\n\t\t\tconst pieContainer = ref(null);\r\n\t\t\tconst barContainer = ref(null);\r\n\t\t\tconst lineContainer = ref(null);\r\n\t\t\tconst stackedContainer = ref(null);\r\n\r\n\t\t\t// 颜色定义\r\n\t\t\tconst colors = [\"#3498db\", \"#e74c3c\", \"#2ecc71\", \"#f39c12\", \"#9b59b6\"];\r\n\t\t\tconst remainderColor = \"#f0f0f0\";\r\n\r\n\t\t\t// 处理后的字段数据\r\n\t\t\tconst processedField = computed(() => {\r\n\t\t\t\tif (!props.field) return null;\r\n\r\n\t\t\t\t// 如果是数组，处理每个元素\r\n\t\t\t\tif (Array.isArray(props.field)) {\r\n\t\t\t\t\treturn props.field.map(item => {\r\n\t\t\t\t\t\tif (typeof item === \"object\" && item !== null) {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tvalue: item.value ?? item.raw,\r\n\t\t\t\t\t\t\t\traw: item.raw,\r\n\t\t\t\t\t\t\t\t...(item.label && { label: item.label }),\r\n\t\t\t\t\t\t\t\t...(item.name && { name: item.name }),\r\n\t\t\t\t\t\t\t\t...(item.unit && { unit: item.unit }),\r\n\t\t\t\t\t\t\t\t...(item.currency && { currency: item.currency }),\r\n\t\t\t\t\t\t\t\t...(item.year && { year: item.year })\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn { value: item, raw: item };\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 如果是对象\r\n\t\t\t\tif (typeof props.field === \"object\" && props.field !== null) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tvalue: props.field.value ?? props.field.raw,\r\n\t\t\t\t\t\traw: props.field.raw,\r\n\t\t\t\t\t\t...(props.field.label && { label: props.field.label }),\r\n\t\t\t\t\t\t...(props.field.name && { name: props.field.name }),\r\n\t\t\t\t\t\t...(props.field.unit && { unit: props.field.unit }),\r\n\t\t\t\t\t\t...(props.field.currency && { currency: props.field.currency }),\r\n\t\t\t\t\t\t...(props.field.year && { year: props.field.year })\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 原始值\r\n\t\t\t\treturn { value: props.field, raw: props.field };\r\n\t\t\t});\r\n\r\n\t\t\t// 初始化图表\r\n\t\t\tonMounted(() => {\r\n\t\t\t\twatch(\r\n\t\t\t\t\t() => [processedField.value, props.visualization, props.unifiedMax],\r\n\t\t\t\t\t() => {\r\n\t\t\t\t\t\tnextTick(() => {\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tprops.visualization === \"pie-chart\" &&\r\n\t\t\t\t\t\t\t\thasData.value &&\r\n\t\t\t\t\t\t\t\tisValidPieData.value\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\trenderPieChart();\r\n\t\t\t\t\t\t\t} else if (props.visualization === \"bar-chart\" && hasData.value) {\r\n\t\t\t\t\t\t\t\trenderBarChart();\r\n\t\t\t\t\t\t\t} else if (\r\n\t\t\t\t\t\t\t\tprops.visualization === \"line-chart\" &&\r\n\t\t\t\t\t\t\t\thasData.value\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\trenderLineChart();\r\n\t\t\t\t\t\t\t} else if (\r\n\t\t\t\t\t\t\t\tprops.visualization === \"stacked-chart\" &&\r\n\t\t\t\t\t\t\t\thasData.value\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\trenderStackedChart();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{ immediate: true, deep: true }\r\n\t\t\t\t);\r\n\t\t\t});\r\n\r\n\t\t\t// 渲染饼图（添加剩余比例）\r\n\t\t\tconst renderPieChart = () => {\r\n\t\t\t\tif (!pieContainer.value) return;\r\n\r\n\t\t\t\t// 清除旧图表\r\n\t\t\t\td3.select(pieContainer.value).selectAll(\"*\").remove();\r\n\r\n\t\t\t\tconst container = d3.select(pieContainer.value);\r\n\t\t\t\tconst containerWidth = pieContainer.value.clientWidth;\r\n\t\t\t\tconst containerHeight = pieContainer.value.clientHeight;\r\n\r\n\t\t\t\t// 使用高度作为基准尺寸，确保饼图大小不变\r\n\t\t\t\tconst size = containerHeight * 0.9;\r\n\t\t\t\tconst radius = size / 2;\r\n\r\n\t\t\t\t// 创建SVG，宽度100%，高度固定\r\n\t\t\t\tconst svg = container\r\n\t\t\t\t\t.append(\"svg\")\r\n\t\t\t\t\t.attr(\"width\", \"100%\")\r\n\t\t\t\t\t.attr(\"height\", \"100%\")\r\n\t\t\t\t\t.attr(\"viewBox\", `0 0 ${containerWidth} ${containerHeight}`)\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\r\n\t\t\t\t\t\t\"transform\",\r\n\t\t\t\t\t\t`translate(${containerWidth / 2}, ${containerHeight / 2})`\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t// 判断是否是单值饼图\r\n\t\t\t\tconst isSingleValue = props.fieldKey === \"Inflation (CPI)\";\r\n\r\n\t\t\t\t// 处理数据 - 如果是单值，添加剩余部分\r\n\t\t\t\tconst processedData = isSingleValue\r\n\t\t\t\t\t? [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t...pieData.value[0],\r\n\t\t\t\t\t\t\t\tcolor: colors[0],\r\n\t\t\t\t\t\t\t\tisMainValue: true\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvalue: Math.max(0, 100 - pieData.value[0].value),\r\n\t\t\t\t\t\t\t\tname: \"剩余\",\r\n\t\t\t\t\t\t\t\tcolor: remainderColor,\r\n\t\t\t\t\t\t\t\tisRemainder: true,\r\n\t\t\t\t\t\t\t\tindex: 1\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t  ]\r\n\t\t\t\t\t: pieData.value.map((d, i) => ({\r\n\t\t\t\t\t\t\t...d,\r\n\t\t\t\t\t\t\tcolor: colors[i % colors.length],\r\n\t\t\t\t\t\t\tisMainValue: true\r\n\t\t\t\t\t  }));\r\n\r\n\t\t\t\tconst pie = d3\r\n\t\t\t\t\t.pie()\r\n\t\t\t\t\t.value(d => d.value)\r\n\t\t\t\t\t.sort(null);\r\n\r\n\t\t\t\tconst arc = d3\r\n\t\t\t\t\t.arc()\r\n\t\t\t\t\t.innerRadius(0)\r\n\t\t\t\t\t.outerRadius(radius * 0.9)\r\n\t\t\t\t\t.cornerRadius(2);\r\n\r\n\t\t\t\tconst arcs = svg\r\n\t\t\t\t\t.selectAll(\".arc\")\r\n\t\t\t\t\t.data(pie(processedData))\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"class\", \"arc\");\r\n\r\n\t\t\t\t// 创建tooltip\r\n\t\t\t\tconst tooltip = container\r\n\t\t\t\t\t.append(\"div\")\r\n\t\t\t\t\t.attr(\"class\", \"d3-tooltip\")\r\n\t\t\t\t\t.style(\"position\", \"absolute\")\r\n\t\t\t\t\t.style(\"visibility\", \"hidden\")\r\n\t\t\t\t\t.style(\"background\", \"rgba(0,0,0,0.8)\")\r\n\t\t\t\t\t.style(\"color\", \"white\")\r\n\t\t\t\t\t.style(\"padding\", \"6px 12px\")\r\n\t\t\t\t\t.style(\"border-radius\", \"4px\")\r\n\t\t\t\t\t.style(\"font-size\", \"12px\");\r\n\r\n\t\t\t\t// 绘制扇形\r\n\t\t\t\tarcs\r\n\t\t\t\t\t.append(\"path\")\r\n\t\t\t\t\t.attr(\"d\", arc)\r\n\t\t\t\t\t.attr(\"fill\", d => d.data.color)\r\n\t\t\t\t\t.style(\"opacity\", d => (d.data.isRemainder ? 0.6 : 0.8))\r\n\t\t\t\t\t.style(\"stroke\", \"#fff\")\r\n\t\t\t\t\t.style(\"stroke-width\", 1)\r\n\t\t\t\t\t.on(\"mouseover\", function (event, d) {\r\n\t\t\t\t\t\tif (d.data.isRemainder) return;\r\n\r\n\t\t\t\t\t\thoveredIndex.value = d.data.index;\r\n\t\t\t\t\t\td3.select(this)\r\n\t\t\t\t\t\t\t.transition()\r\n\t\t\t\t\t\t\t.duration(200)\r\n\t\t\t\t\t\t\t.style(\"opacity\", 1)\r\n\t\t\t\t\t\t\t.attr(\"transform\", \"scale(1.05)\");\r\n\r\n\t\t\t\t\t\ttooltip\r\n\t\t\t\t\t\t\t.style(\"visibility\", \"visible\")\r\n\t\t\t\t\t\t\t.html(\r\n\t\t\t\t\t\t\t\t`${d.data.name}: ${d.data.value.toFixed(1)}${\r\n\t\t\t\t\t\t\t\t\tprops.type === \"percentage\" ? \"%\" : \"\"\r\n\t\t\t\t\t\t\t\t}`\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.on(\"mousemove\", function (event) {\r\n\t\t\t\t\t\ttooltip\r\n\t\t\t\t\t\t\t.style(\"top\", event.offsetY + 10 + \"px\")\r\n\t\t\t\t\t\t\t.style(\"left\", event.offsetX + 10 + \"px\");\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.on(\"mouseout\", function (event, d) {\r\n\t\t\t\t\t\tif (d.data.isRemainder) return;\r\n\r\n\t\t\t\t\t\thoveredIndex.value = null;\r\n\t\t\t\t\t\td3.select(this)\r\n\t\t\t\t\t\t\t.transition()\r\n\t\t\t\t\t\t\t.duration(200)\r\n\t\t\t\t\t\t\t.style(\"opacity\", d.data.isRemainder ? 0.6 : 0.8)\r\n\t\t\t\t\t\t\t.attr(\"transform\", \"scale(1)\");\r\n\r\n\t\t\t\t\t\ttooltip.style(\"visibility\", \"hidden\");\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.on(\"click\", function (event, d) {\r\n\t\t\t\t\t\tif (d.data.isRemainder) return;\r\n\r\n\t\t\t\t\t\tactiveIndex.value = d.data.index;\r\n\t\t\t\t\t\temit(\"chartClick\", {\r\n\t\t\t\t\t\t\ttype: \"pie\",\r\n\t\t\t\t\t\t\tindex: d.data.index,\r\n\t\t\t\t\t\t\tdata: d.data,\r\n\t\t\t\t\t\t\tvalue: d.data.value\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t// 单值饼图的中心文字\r\n\t\t\t\tif (isSingleValue) {\r\n\t\t\t\t\tsvg\r\n\t\t\t\t\t\t.append(\"text\")\r\n\t\t\t\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t\t\t\t.attr(\"dy\", \".3em\")\r\n\t\t\t\t\t\t.text(\r\n\t\t\t\t\t\t\t`${pieData.value[0].value.toFixed(1)}${\r\n\t\t\t\t\t\t\t\tprops.type === \"percentage\" ? \"%\" : \"\"\r\n\t\t\t\t\t\t\t}`\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t.style(\"font-size\", \"14px\")\r\n\t\t\t\t\t\t.style(\"fill\", \"#333\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 多值饼图的图例 - 修改为右上角放置\r\n\t\t\t\tif (!isSingleValue && pieData.value.length > 1) {\r\n\t\t\t\t\tconst legend = svg.append(\"g\").attr(\"class\", \"legend\");\r\n\t\t\t\t\tconst legendItemSize = 12;\r\n\t\t\t\t\tconst legendSpacing = 4;\r\n\t\t\t\t\tconst legendStartX = containerWidth / 2 - 100;\r\n\t\t\t\t\tconst legendStartY = -containerHeight / 2 + 20;\r\n\r\n\t\t\t\t\tpieData.value.forEach((d, i) => {\r\n\t\t\t\t\t\tconst legendItem = legend\r\n\t\t\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t\t\t.attr(\r\n\t\t\t\t\t\t\t\t\"transform\",\r\n\t\t\t\t\t\t\t\t`translate(${legendStartX}, ${\r\n\t\t\t\t\t\t\t\t\tlegendStartY + i * (legendItemSize + legendSpacing)\r\n\t\t\t\t\t\t\t\t})`\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tlegendItem\r\n\t\t\t\t\t\t\t.append(\"rect\")\r\n\t\t\t\t\t\t\t.attr(\"width\", legendItemSize)\r\n\t\t\t\t\t\t\t.attr(\"height\", legendItemSize)\r\n\t\t\t\t\t\t\t.attr(\"fill\", colors[i % colors.length]);\r\n\r\n\t\t\t\t\t\tlegendItem\r\n\t\t\t\t\t\t\t.append(\"text\")\r\n\t\t\t\t\t\t\t.attr(\"x\", legendItemSize + 4)\r\n\t\t\t\t\t\t\t.attr(\"y\", legendItemSize - 2)\r\n\t\t\t\t\t\t\t.text(`${d.name}: ${d.value.toFixed(1)}%`)\r\n\t\t\t\t\t\t\t.style(\"font-size\", \"10px\")\r\n\t\t\t\t\t\t\t.style(\"fill\", \"#333\");\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tconst renderBarChart = () => {\r\n\t\t\t\tif (!barContainer.value) return;\r\n\r\n\t\t\t\td3.select(barContainer.value).selectAll(\"*\").remove();\r\n\r\n\t\t\t\tconst container = d3.select(barContainer.value);\r\n\t\t\t\tconst width = barContainer.value.clientWidth;\r\n\t\t\t\tconst height = barContainer.value.clientHeight;\r\n\t\t\t\tconst margin = { top: 10, right: 10, bottom: 30, left: 10 };\r\n\r\n\t\t\t\tconst svg = container\r\n\t\t\t\t\t.append(\"svg\")\r\n\t\t\t\t\t.attr(\"width\", \"100%\")\r\n\t\t\t\t\t.attr(\"height\", \"100%\")\r\n\t\t\t\t\t.attr(\"viewBox\", `0 0 ${width} ${height}`);\r\n\r\n\t\t\t\t// 使用统一的最大值或计算最大值\r\n\t\t\t\tconst maxYValue =\r\n\t\t\t\t\tprops.unifiedMax !== null\r\n\t\t\t\t\t\t? props.unifiedMax\r\n\t\t\t\t\t\t: d3.max(simpleBarData.value, d => d.value) * 1.1 || 1;\r\n\r\n\t\t\t\t// 确保最小值至少为0\r\n\t\t\t\tconst minYValue = Math.min(\r\n\t\t\t\t\t0,\r\n\t\t\t\t\td3.min(simpleBarData.value, d => d.value) || 0\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// 创建Y轴比例尺（但不绘制Y轴）\r\n\t\t\t\tconst y = d3\r\n\t\t\t\t\t.scaleLinear()\r\n\t\t\t\t\t.domain([minYValue, maxYValue])\r\n\t\t\t\t\t.range([height - margin.bottom, margin.top]);\r\n\r\n\t\t\t\t// 设定柱子最大宽度和最小间距\r\n\t\t\t\tconst maxBarWidth = 60;\r\n\t\t\t\tconst minSpacing = 10;\r\n\t\t\t\tconst availableWidth = width - margin.left - margin.right;\r\n\t\t\t\tconst barCount = simpleBarData.value.length;\r\n\t\t\t\tconst barWidth = Math.min(\r\n\t\t\t\t\tmaxBarWidth,\r\n\t\t\t\t\tMath.max(20, availableWidth / barCount - minSpacing)\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// 计算起始位置使柱子居中\r\n\t\t\t\tconst totalBarsWidth =\r\n\t\t\t\t\tbarWidth * barCount + minSpacing * (barCount - 1);\r\n\t\t\t\tconst startX = margin.left + (availableWidth - totalBarsWidth) / 2;\r\n\r\n\t\t\t\t// 绘制柱子\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.selectAll(\".bar\")\r\n\t\t\t\t\t.data(simpleBarData.value)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"rect\")\r\n\t\t\t\t\t.attr(\"class\", \"bar\")\r\n\t\t\t\t\t.attr(\"x\", (d, i) => startX + i * (barWidth + minSpacing))\r\n\t\t\t\t\t.attr(\"y\", d => y(Math.max(0, d.value)))\r\n\t\t\t\t\t.attr(\"width\", barWidth)\r\n\t\t\t\t\t.attr(\"height\", d => Math.abs(y(d.value) - y(0)))\r\n\t\t\t\t\t.attr(\"fill\", (d, i) => colors[i % colors.length])\r\n\t\t\t\t\t.style(\"opacity\", 0.8);\r\n\r\n\t\t\t\t// 在每个柱子下方添加数值标签\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.selectAll(\".bar-label\")\r\n\t\t\t\t\t.data(simpleBarData.value)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"text\")\r\n\t\t\t\t\t.attr(\"class\", \"bar-label\")\r\n\t\t\t\t\t.attr(\r\n\t\t\t\t\t\t\"x\",\r\n\t\t\t\t\t\t(d, i) => startX + i * (barWidth + minSpacing) + barWidth / 2\r\n\t\t\t\t\t)\r\n\t\t\t\t\t.attr(\"y\", height - 5)\r\n\t\t\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t\t\t.attr(\"font-size\", \"10px\")\r\n\t\t\t\t\t.attr(\"fill\", \"#666\")\r\n\t\t\t\t\t.text(d => formatNumber(d.value, props.fieldKey));\r\n\t\t\t};\r\n\r\n\t\t\tconst renderLineChart = () => {\r\n\t\t\t\tif (!lineContainer.value) return;\r\n\r\n\t\t\t\td3.select(lineContainer.value).selectAll(\"*\").remove();\r\n\r\n\t\t\t\tconst container = d3.select(lineContainer.value);\r\n\t\t\t\tconst width = lineContainer.value.clientWidth;\r\n\t\t\t\tconst height = lineContainer.value.clientHeight;\r\n\t\t\t\tconst margin = { top: 10, right: 10, bottom: 30, left: 10 };\r\n\r\n\t\t\t\tconst svg = container\r\n\t\t\t\t\t.append(\"svg\")\r\n\t\t\t\t\t.attr(\"width\", \"100%\")\r\n\t\t\t\t\t.attr(\"height\", \"100%\")\r\n\t\t\t\t\t.attr(\"viewBox\", `0 0 ${width} ${height}`);\r\n\r\n\t\t\t\tconst x = d3\r\n\t\t\t\t\t.scaleLinear()\r\n\t\t\t\t\t.domain([0, lineData.value.length - 1])\r\n\t\t\t\t\t.range([margin.left, width - margin.right]);\r\n\r\n\t\t\t\tconst y = d3\r\n\t\t\t\t\t.scaleLinear()\r\n\t\t\t\t\t.domain([\r\n\t\t\t\t\t\td3.min(lineData.value, d => d.y),\r\n\t\t\t\t\t\td3.max(lineData.value, d => d.y)\r\n\t\t\t\t\t])\r\n\t\t\t\t\t.range([height - margin.bottom, margin.top]);\r\n\r\n\t\t\t\t// 绘制折线\r\n\t\t\t\tconst line = d3\r\n\t\t\t\t\t.line()\r\n\t\t\t\t\t.x((d, i) => x(i))\r\n\t\t\t\t\t.y(d => y(d.y))\r\n\t\t\t\t\t.curve(d3.curveMonotoneX);\r\n\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.append(\"path\")\r\n\t\t\t\t\t.datum(lineData.value)\r\n\t\t\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t\t\t.attr(\"stroke\", \"#3498db\")\r\n\t\t\t\t\t.attr(\"stroke-width\", 2)\r\n\t\t\t\t\t.attr(\"d\", line);\r\n\r\n\t\t\t\t// 绘制数据点\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.selectAll(\".dot\")\r\n\t\t\t\t\t.data(lineData.value)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"circle\")\r\n\t\t\t\t\t.attr(\"class\", \"dot\")\r\n\t\t\t\t\t.attr(\"cx\", (d, i) => x(i))\r\n\t\t\t\t\t.attr(\"cy\", d => y(d.y))\r\n\t\t\t\t\t.attr(\"r\", 3)\r\n\t\t\t\t\t.attr(\"fill\", \"#3498db\");\r\n\r\n\t\t\t\t// 在每个数据点下方添加数值标签\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.selectAll(\".line-label\")\r\n\t\t\t\t\t.data(lineData.value)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"text\")\r\n\t\t\t\t\t.attr(\"class\", \"line-label\")\r\n\t\t\t\t\t.attr(\"x\", (d, i) => x(i))\r\n\t\t\t\t\t.attr(\"y\", height - 5)\r\n\t\t\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t\t\t.attr(\"font-size\", \"10px\")\r\n\t\t\t\t\t.attr(\"fill\", \"#666\")\r\n\t\t\t\t\t.text(d => formatNumber(d.y, props.fieldKey));\r\n\t\t\t};\r\n\r\n\t\t\tconst CATEGORY_COLORS = {\r\n\t\t\t\t// 共有的类别\r\n\t\t\t\tMachinery: \"#8dd3c7\", // 青绿色\r\n\t\t\t\t\"Mineral Fuels\": \"#ffffb3\", // 淡黄色\r\n\r\n\t\t\t\t// 左边独有\r\n\t\t\t\t\"Integrated Circuits\": \"#bebada\", // 淡紫色\r\n\t\t\t\t\"Vehicles and their parts\": \"#fb8072\", // 番茄红\r\n\t\t\t\tPlastics: \"#80b1d3\", // 天蓝色\r\n\t\t\t\t\"Iron and Steel\": \"#fdb462\", // 橙色\r\n\t\t\t\t\"Instruments and Apparatus\": \"#b3de69\", // 亮绿\r\n\t\t\t\t\"Organic Chemicals\": \"#fccde5\", // 粉红色\r\n\r\n\t\t\t\t// 右边独有\r\n\t\t\t\t\"Transport Equipment\": \"#bc80bd\", // 紫色\r\n\t\t\t\t\"Electrical Machinery\": \"#ccebc5\", // 浅绿\r\n\t\t\t\tChemicals: \"#ffed6f\", // 明黄\r\n\t\t\t\t\"Manufactured Goods\": \"#d9d9d9\", // 灰色\r\n\r\n\t\t\t\t// 额外类别\r\n\t\t\t\t\"Raw Materials\": \"#fdb462\", // 用橙色，不与左边重叠可换\r\n\t\t\t\tFoodstuff: \"#fb8072\", // 用番茄红，也可换\r\n\r\n\t\t\t\t// 其他\r\n\t\t\t\tOthers: \"#d9d9d9\" // 灰色\r\n\t\t\t};\r\n\r\n\t\t\tconst renderStackedChart = () => {\r\n\t\t\t\tif (!stackedContainer.value) {\r\n\t\t\t\t\tconsole.error(\"Stacked container not found\");\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 过滤掉年份等无效条目，保留有效数据\r\n\t\t\t\tconst filteredData = processedField.value.filter(item => {\r\n\t\t\t\t\tif (!item.raw) return false;\r\n\t\t\t\t\t// 过滤形如(2019)或(2019)[14]这样的项\r\n\t\t\t\t\treturn !/^\\(\\d{4}\\)(\\[\\d+\\])?$/.test(item.raw.trim());\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// 处理数据：提取名称，数值和颜色\r\n\t\t\t\tconst stackData = filteredData.map(item => {\r\n\t\t\t\t\tconst nameOnly = item.raw.replace(/\\s*\\d+(\\.\\d+)?%?$/, \"\").trim();\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tname: nameOnly,\r\n\t\t\t\t\t\tvalue: safeToNumber(item.value, props.fieldKey),\r\n\t\t\t\t\t\tcolor: CATEGORY_COLORS[nameOnly] || \"#cccccc\" // 默认灰色\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// 清空旧图\r\n\t\t\t\td3.select(stackedContainer.value).selectAll(\"*\").remove();\r\n\r\n\t\t\t\tconst container = d3.select(stackedContainer.value);\r\n\t\t\t\tconst width = stackedContainer.value.clientWidth;\r\n\t\t\t\tconst height = stackedContainer.value.clientHeight;\r\n\t\t\t\tconst margin = { top: 20, right: 140, bottom: 20, left: 140 };\r\n\r\n\t\t\t\tif (width <= 0 || height <= 0) {\r\n\t\t\t\t\tconsole.error(\"Invalid container size\");\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst svg = container\r\n\t\t\t\t\t.append(\"svg\")\r\n\t\t\t\t\t.attr(\"width\", \"100%\")\r\n\t\t\t\t\t.attr(\"height\", \"100%\")\r\n\t\t\t\t\t.attr(\"viewBox\", `0 0 ${width} ${height}`);\r\n\r\n\t\t\t\t// Y比例尺，百分比堆叠，最大100%\r\n\t\t\t\tconst y = d3\r\n\t\t\t\t\t.scaleLinear()\r\n\t\t\t\t\t.domain([0, 100])\r\n\t\t\t\t\t.range([height - margin.bottom, margin.top]);\r\n\r\n\t\t\t\t// X比例尺，单一堆叠柱宽度\r\n\t\t\t\tconst x = d3\r\n\t\t\t\t\t.scaleBand()\r\n\t\t\t\t\t.domain([0])\r\n\t\t\t\t\t.range([margin.left, width - margin.right])\r\n\t\t\t\t\t.padding(0.4);\r\n\r\n\t\t\t\t// 计算堆叠柱每段的y坐标和高度\r\n\t\t\t\tlet cumulative = 0;\r\n\t\t\t\tconst segments = stackData.map(d => {\r\n\t\t\t\t\tconst segment = {\r\n\t\t\t\t\t\t...d,\r\n\t\t\t\t\t\ty: y(cumulative + d.value),\r\n\t\t\t\t\t\theight: y(cumulative) - y(cumulative + d.value),\r\n\t\t\t\t\t\tx: x(0),\r\n\t\t\t\t\t\twidth: x.bandwidth()\r\n\t\t\t\t\t};\r\n\t\t\t\t\tcumulative += d.value;\r\n\t\t\t\t\treturn segment;\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// 画堆叠柱块\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.selectAll(\".stack-bar\")\r\n\t\t\t\t\t.data(segments)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"rect\")\r\n\t\t\t\t\t.attr(\"class\", \"stack-bar\")\r\n\t\t\t\t\t.attr(\"x\", d => d.x)\r\n\t\t\t\t\t.attr(\"y\", d => d.y)\r\n\t\t\t\t\t.attr(\"width\", d => d.width)\r\n\t\t\t\t\t.attr(\"height\", d => d.height)\r\n\t\t\t\t\t.attr(\"fill\", d => d.color)\r\n\t\t\t\t\t.style(\"opacity\", 0.8);\r\n\r\n\t\t\t\t// 添加数值标签，字体更小，避免拥挤\r\n\t\t\t\tconst labelThreshold = 18; // 高度阈值，单位px，小于则移至外面显示\r\n\r\n\t\t\t\tconst labels = svg\r\n\t\t\t\t\t.selectAll(\".stack-label\")\r\n\t\t\t\t\t.data(segments)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"class\", \"stack-label-group\");\r\n\r\n\t\t\t\tlabels.each(function (d) {\r\n\t\t\t\t\tconst g = d3.select(this);\r\n\r\n\t\t\t\t\tif (d.height >= labelThreshold) {\r\n\t\t\t\t\t\t// 内部显示标签，居中\r\n\t\t\t\t\t\tg.append(\"text\")\r\n\t\t\t\t\t\t\t.attr(\"x\", d.x + d.width / 2)\r\n\t\t\t\t\t\t\t.attr(\"y\", d.y + d.height / 2 + 4)\r\n\t\t\t\t\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t\t\t\t\t.attr(\"font-size\", \"9px\")\r\n\t\t\t\t\t\t\t.attr(\"fill\", \"#222\")\r\n\t\t\t\t\t\t\t.text(d.value + \"%\");\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// 外部显示标签，右侧对齐，添加连线\r\n\t\t\t\t\t\tconst labelX = d.x + d.width + 5; // 堆叠柱右边5px\r\n\t\t\t\t\t\tconst labelY = d.y + d.height / 2 + 4;\r\n\r\n\t\t\t\t\t\t// 画连线\r\n\t\t\t\t\t\tg.append(\"line\")\r\n\t\t\t\t\t\t\t.attr(\"x1\", d.x + d.width)\r\n\t\t\t\t\t\t\t.attr(\"y1\", d.y + d.height / 2)\r\n\t\t\t\t\t\t\t.attr(\"x2\", labelX - 2)\r\n\t\t\t\t\t\t\t.attr(\"y2\", labelY - 4)\r\n\t\t\t\t\t\t\t.attr(\"stroke\", \"#666\")\r\n\t\t\t\t\t\t\t.attr(\"stroke-width\", 1);\r\n\r\n\t\t\t\t\t\t// 画标签文字\r\n\t\t\t\t\t\tg.append(\"text\")\r\n\t\t\t\t\t\t\t.attr(\"x\", labelX)\r\n\t\t\t\t\t\t\t.attr(\"y\", labelY)\r\n\t\t\t\t\t\t\t.attr(\"text-anchor\", \"start\")\r\n\t\t\t\t\t\t\t.attr(\"font-size\", \"9px\")\r\n\t\t\t\t\t\t\t.attr(\"fill\", \"#222\")\r\n\t\t\t\t\t\t\t.text(d.value + \"%\");\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// 图例相关参数\r\n\t\t\t\tconst legendItemHeight = 18;\r\n\t\t\t\tconst legendFontSize = 9;\r\n\t\t\t\tconst legendLeftX = margin.left - 120;\r\n\t\t\t\tconst legendRightX = width - margin.right + 40;\r\n\t\t\t\tconst legendYStart = margin.top;\r\n\r\n\t\t\t\t// 左边5个图例\r\n\t\t\t\tconst leftLegend = stackData.slice(0, 5);\r\n\t\t\t\t// 右边5个图例\r\n\t\t\t\tconst rightLegend = stackData.slice(5, 10);\r\n\r\n\t\t\t\t// 画左边图例\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.selectAll(\".legend-left\")\r\n\t\t\t\t\t.data(leftLegend)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"class\", \"legend-left\")\r\n\t\t\t\t\t.attr(\r\n\t\t\t\t\t\t\"transform\",\r\n\t\t\t\t\t\t(d, i) =>\r\n\t\t\t\t\t\t\t`translate(${legendLeftX}, ${\r\n\t\t\t\t\t\t\t\tlegendYStart + i * legendItemHeight\r\n\t\t\t\t\t\t\t})`\r\n\t\t\t\t\t)\r\n\t\t\t\t\t.each(function (d) {\r\n\t\t\t\t\t\tconst g = d3.select(this);\r\n\t\t\t\t\t\tg.append(\"rect\")\r\n\t\t\t\t\t\t\t.attr(\"width\", 12)\r\n\t\t\t\t\t\t\t.attr(\"height\", 12)\r\n\t\t\t\t\t\t\t.attr(\"fill\", d.color)\r\n\t\t\t\t\t\t\t.style(\"opacity\", 0.8);\r\n\t\t\t\t\t\tg.append(\"text\")\r\n\t\t\t\t\t\t\t.attr(\"x\", 18) // 往右移点\r\n\t\t\t\t\t\t\t.attr(\"y\", 10)\r\n\t\t\t\t\t\t\t.attr(\"font-size\", legendFontSize)\r\n\t\t\t\t\t\t\t.attr(\"fill\", \"#333\")\r\n\t\t\t\t\t\t\t.text(d.name);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t// 画右边图例\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.selectAll(\".legend-right\")\r\n\t\t\t\t\t.data(rightLegend)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"class\", \"legend-right\")\r\n\t\t\t\t\t.attr(\r\n\t\t\t\t\t\t\"transform\",\r\n\t\t\t\t\t\t(d, i) =>\r\n\t\t\t\t\t\t\t`translate(${legendRightX}, ${\r\n\t\t\t\t\t\t\t\tlegendYStart + i * legendItemHeight\r\n\t\t\t\t\t\t\t})`\r\n\t\t\t\t\t)\r\n\t\t\t\t\t.each(function (d) {\r\n\t\t\t\t\t\tconst g = d3.select(this);\r\n\t\t\t\t\t\tg.append(\"rect\")\r\n\t\t\t\t\t\t\t.attr(\"width\", 12)\r\n\t\t\t\t\t\t\t.attr(\"height\", 12)\r\n\t\t\t\t\t\t\t.attr(\"fill\", d.color)\r\n\t\t\t\t\t\t\t.style(\"opacity\", 0.8);\r\n\t\t\t\t\t\tg.append(\"text\")\r\n\t\t\t\t\t\t\t.attr(\"x\", 18)\r\n\t\t\t\t\t\t\t.attr(\"y\", 10)\r\n\t\t\t\t\t\t\t.attr(\"font-size\", legendFontSize)\r\n\t\t\t\t\t\t\t.attr(\"fill\", \"#333\")\r\n\t\t\t\t\t\t\t.text(d.name);\r\n\t\t\t\t\t});\r\n\t\t\t};\r\n\r\n\t\t\t// 交互处理函数\r\n\t\t\tconst handleTextHover = () => {\r\n\t\t\t\tisTextHovered.value = true;\r\n\t\t\t};\r\n\r\n\t\t\tconst resetHover = () => {\r\n\t\t\t\thoveredIndex.value = null;\r\n\t\t\t\tisTextHovered.value = false;\r\n\t\t\t};\r\n\r\n\t\t\tconst handleTextClick = () => {\r\n\t\t\t\temit(\"chartClick\", {\r\n\t\t\t\t\ttype: \"text\",\r\n\t\t\t\t\tdata: processedField.value,\r\n\t\t\t\t\tvalue: processedField.value\r\n\t\t\t\t});\r\n\t\t\t};\r\n\r\n\t\t\tconst formatNumber = (value, fieldKey) => {\r\n\t\t\t\tconst num = Number(value);\r\n\t\t\t\tif (isNaN(num)) return \"0\";\r\n\r\n\t\t\t\t// 百分比特殊处理\r\n\t\t\t\tif (props.type === \"percentage\") {\r\n\t\t\t\t\treturn num.toFixed(1) + \"%\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 统一中文单位显示规则\r\n\t\t\t\tif (num >= 100000000) {\r\n\t\t\t\t\t// 1亿以上\r\n\t\t\t\t\treturn (num / 100000000).toFixed(2) + \"亿\";\r\n\t\t\t\t} else if (num >= 10000) {\r\n\t\t\t\t\t// 1万以上\r\n\t\t\t\t\treturn (num / 10000).toFixed(1) + \"万\";\r\n\t\t\t\t} else if (num >= 1000) {\r\n\t\t\t\t\t// 1千以上\r\n\t\t\t\t\treturn (num / 1000).toFixed(1) + \"千\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// 小于1千\r\n\t\t\t\t\treturn num.toFixed(0);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t// 数据处理函数\r\n\t\t\tconst isYearEntry = value => {\r\n\t\t\t\tif (typeof value !== \"string\") return false;\r\n\t\t\t\tconst trimmedValue = value.trim();\r\n\t\t\t\treturn (\r\n\t\t\t\t\t/^(\\()?\\d{4}(\\))?\\s*:?/.test(trimmedValue) ||\r\n\t\t\t\t\t/^\\(?FY\\s*\\d{4}\\)?\\s*:?/i.test(trimmedValue) ||\r\n\t\t\t\t\t/^(\\()?\\d{4}\\s*[-–]\\s*\\d{2,4}(\\))?\\s*:?/.test(trimmedValue) ||\r\n\t\t\t\t\t/^(Year|Yr|Annual)\\s*\\d{4}/i.test(trimmedValue)\r\n\t\t\t\t);\r\n\t\t\t};\r\n\r\n\t\t\tconst isValidPieData = computed(() => {\r\n\t\t\t\tif (!pieData.value.length) return false;\r\n\t\t\t\treturn pieData.value.every(\r\n\t\t\t\t\titem => !isYearEntry(item.name) && !isYearEntry(item.value)\r\n\t\t\t\t);\r\n\t\t\t});\r\n\r\n\t\t\tconst pieData = computed(() => {\r\n\t\t\t\tif (!processedField.value) return [];\r\n\r\n\t\t\t\tconst processItem = (item, index) => {\r\n\t\t\t\t\t// 获取原始值，处理各种可能的数据结构\r\n\t\t\t\t\tlet rawValue;\r\n\t\t\t\t\tif (typeof item === \"object\" && item !== null) {\r\n\t\t\t\t\t\trawValue = item.raw || item.value || item;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trawValue = item;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 如果是年份条目则跳过\r\n\t\t\t\t\tif (isYearEntry(rawValue)) return null;\r\n\r\n\t\t\t\t\t// 转换为数值\r\n\t\t\t\t\tconst value = safeToNumber(rawValue, props.fieldKey);\r\n\t\t\t\t\tif (value === null) return null;\r\n\r\n\t\t\t\t\t// 获取名称，处理各种可能的数据结构\r\n\t\t\t\t\tlet name = \"项目\";\r\n\t\t\t\t\tif (typeof item === \"object\" && item !== null) {\r\n\t\t\t\t\t\t// 确保 raw 是字符串才调用 replace\r\n\t\t\t\t\t\tconst rawText =\r\n\t\t\t\t\t\t\ttypeof item.raw === \"string\"\r\n\t\t\t\t\t\t\t\t? item.raw\r\n\t\t\t\t\t\t\t\t: typeof item.value === \"string\"\r\n\t\t\t\t\t\t\t\t? item.value\r\n\t\t\t\t\t\t\t\t: JSON.stringify(item);\r\n\t\t\t\t\t\tname = rawText.replace(/:\\s*\\d+\\.?\\d*%?/g, \"\").trim();\r\n\t\t\t\t\t} else if (typeof item === \"string\") {\r\n\t\t\t\t\t\tname = item.replace(/:\\s*\\d+\\.?\\d*%?/g, \"\").trim();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 如果是年份条目则跳过\r\n\t\t\t\t\tif (isYearEntry(name)) return null;\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tvalue: Math.min(100, Math.max(0, value)),\r\n\t\t\t\t\t\tname: name || \"项目\",\r\n\t\t\t\t\t\tindex: index\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif (Array.isArray(processedField.value)) {\r\n\t\t\t\t\treturn processedField.value\r\n\t\t\t\t\t\t.map((item, index) => processItem(item, index))\r\n\t\t\t\t\t\t.filter(item => item !== null && !isYearEntry(item.name));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst result = processItem(processedField.value, 0);\r\n\t\t\t\treturn result ? [result] : [];\r\n\t\t\t});\r\n\r\n\t\t\tconst safeToNumber = (value, fieldKey) => {\r\n\t\t\t\tif (value === null || value === undefined) return 0;\r\n\t\t\t\tif (typeof value === \"number\") return value;\r\n\r\n\t\t\t\tif (typeof value === \"string\") {\r\n\t\t\t\t\t// 处理中文单位\r\n\t\t\t\t\tconst yiMatch = value.match(/(-?[\\d.]+)亿/);\r\n\t\t\t\t\tif (yiMatch) return parseFloat(yiMatch[1]) * 100000000;\r\n\r\n\t\t\t\t\tconst wanMatch = value.match(/(-?[\\d.]+)万/);\r\n\t\t\t\t\tif (wanMatch) return parseFloat(wanMatch[1]) * 10000;\r\n\r\n\t\t\t\t\tconst qianMatch = value.match(/(-?[\\d.]+)千/);\r\n\t\t\t\t\tif (qianMatch) return parseFloat(qianMatch[1]) * 1000;\r\n\r\n\t\t\t\t\t// 处理百分比\r\n\t\t\t\t\tconst percentMatch = value.match(/(-?\\d+\\.?\\d*)%/);\r\n\t\t\t\t\tif (percentMatch) return parseFloat(percentMatch[1]);\r\n\r\n\t\t\t\t\t// 默认数字\r\n\t\t\t\t\tconst num = parseFloat(value.replace(/[^\\d.-]/g, \"\"));\r\n\t\t\t\t\treturn isNaN(num) ? 0 : num;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (typeof value === \"object\") {\r\n\t\t\t\t\treturn safeToNumber(value.value || value.raw, fieldKey);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn 0;\r\n\t\t\t};\r\n\r\n\t\t\tconst formatSimpleText = value => {\r\n\t\t\t\tif (!value) return \"-\";\r\n\r\n\t\t\t\t// 处理数组\r\n\t\t\t\tif (Array.isArray(value)) {\r\n\t\t\t\t\tconst items = value.map(item => {\r\n\t\t\t\t\t\tif (typeof item === \"object\" && item !== null) {\r\n\t\t\t\t\t\t\tlet text = item.raw || item.value || JSON.stringify(item);\r\n\t\t\t\t\t\t\tif (item.unit) text += ` ${item.unit}`;\r\n\t\t\t\t\t\t\tif (item.year) text += ` (${item.year})`;\r\n\t\t\t\t\t\t\treturn text;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn item;\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn items.length > 2\r\n\t\t\t\t\t\t? items.slice(0, 2).join(\"; \") + \"...\"\r\n\t\t\t\t\t\t: items.join(\"; \");\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 处理对象\r\n\t\t\t\tif (typeof value === \"object\" && value !== null) {\r\n\t\t\t\t\tlet text = value.raw || value.value || \"-\";\r\n\t\t\t\t\tif (value.unit) text += ` ${value.unit}`;\r\n\t\t\t\t\tif (value.year) text += ` (${value.year})`;\r\n\t\t\t\t\treturn text;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 处理原始值\r\n\t\t\t\treturn value.toString().length > 50\r\n\t\t\t\t\t? value.toString().substring(0, 50) + \"...\"\r\n\t\t\t\t\t: value.toString();\r\n\t\t\t};\r\n\r\n\t\t\tconst simpleBarData = computed(() => {\r\n\t\t\t\tif (!processedField.value) return [];\r\n\r\n\t\t\t\tlet values = [];\r\n\r\n\t\t\t\tif (Array.isArray(processedField.value)) {\r\n\t\t\t\t\tvalues = processedField.value\r\n\t\t\t\t\t\t.filter(item => {\r\n\t\t\t\t\t\t\tconst value = item?.value || item?.raw;\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\tvalue !== undefined && value !== null && !isYearEntry(value)\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.map(item => safeToNumber(item.value || item.raw, props.fieldKey));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvalues = [\r\n\t\t\t\t\t\tsafeToNumber(\r\n\t\t\t\t\t\t\tprocessedField.value.value || processedField.value.raw,\r\n\t\t\t\t\t\t\tprops.fieldKey\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t].filter(v => v !== null);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (values.length === 0) return [];\r\n\r\n\t\t\t\treturn values.map((v, index) => ({\r\n\t\t\t\t\tvalue: v,\r\n\t\t\t\t\theight: v,\r\n\t\t\t\t\tcolor: colors[index % colors.length],\r\n\t\t\t\t\tindex: index\r\n\t\t\t\t}));\r\n\t\t\t});\r\n\r\n\t\t\tconst lineData = computed(() => {\r\n\t\t\t\tif (!processedField.value) return [];\r\n\r\n\t\t\t\tif (Array.isArray(processedField.value)) {\r\n\t\t\t\t\treturn processedField.value\r\n\t\t\t\t\t\t.filter(item => {\r\n\t\t\t\t\t\t\tconst value = item?.value || item?.raw;\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\tvalue !== undefined && value !== null && !isYearEntry(value)\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.map((item, index) => {\r\n\t\t\t\t\t\t\tconst value = safeToNumber(\r\n\t\t\t\t\t\t\t\titem.value || item.raw,\r\n\t\t\t\t\t\t\t\tprops.fieldKey\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tx: index,\r\n\t\t\t\t\t\t\t\ty: value,\r\n\t\t\t\t\t\t\t\traw: item.raw || item.value,\r\n\t\t\t\t\t\t\t\tindex: index\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst value = safeToNumber(\r\n\t\t\t\t\tprocessedField.value.value || processedField.value.raw,\r\n\t\t\t\t\tprops.fieldKey\r\n\t\t\t\t);\r\n\t\t\t\treturn value !== null\r\n\t\t\t\t\t? [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tx: 0,\r\n\t\t\t\t\t\t\t\ty: value,\r\n\t\t\t\t\t\t\t\traw: processedField.value.raw || processedField.value.value,\r\n\t\t\t\t\t\t\t\tindex: 0\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t  ]\r\n\t\t\t\t\t: [];\r\n\t\t\t});\r\n\r\n\t\t\tconst hasData = computed(() => {\r\n\t\t\t\tif (!processedField.value) return false;\r\n\t\t\t\tif (Array.isArray(processedField.value))\r\n\t\t\t\t\treturn processedField.value.length > 0;\r\n\t\t\t\tif (typeof processedField.value === \"object\")\r\n\t\t\t\t\treturn Object.keys(processedField.value).length > 0;\r\n\t\t\t\treturn String(processedField.value).trim().length > 0;\r\n\t\t\t});\r\n\r\n\t\t\treturn {\r\n\t\t\t\thoveredIndex,\r\n\t\t\t\tactiveIndex,\r\n\t\t\t\tisTextHovered,\r\n\t\t\t\tpieContainer,\r\n\t\t\t\tbarContainer,\r\n\t\t\t\tlineContainer,\r\n\t\t\t\tstackedContainer,\r\n\t\t\t\thandleTextHover,\r\n\t\t\t\tresetHover,\r\n\t\t\t\thandleTextClick,\r\n\t\t\t\tformatSimpleText,\r\n\t\t\t\thasData,\r\n\t\t\t\tisValidPieData,\r\n\t\t\t\tpieData,\r\n\t\t\t\tsimpleBarData,\r\n\t\t\t\tlineData,\r\n\t\t\t\tformatNumber,\r\n\t\t\t\tprocessedField\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n</script>\r\n\r\n<style scoped>\r\n\t.simple-chart {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tposition: relative;\r\n\t\tfont-family: Arial, sans-serif;\r\n\t}\r\n\r\n\t/* 文本样式 */\r\n\t.simple-text {\r\n\t\ttext-align: center;\r\n\t\tfont-size: 14px;\r\n\t\tword-break: break-word;\r\n\t\tpadding: 8px;\r\n\t\tcursor: pointer;\r\n\t\ttransition: all 0.2s ease;\r\n\t\tborder-radius: 4px;\r\n\t\tbackground-color: #f8f9fa;\r\n\t\tmax-width: 100%;\r\n\t}\r\n\r\n\t.simple-text:hover {\r\n\t\tbackground-color: #e9ecef;\r\n\t\ttransform: translateY(-2px);\r\n\t\tbox-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t.text-tooltip {\r\n\t\tposition: absolute;\r\n\t\ttop: -25px;\r\n\t\tleft: 50%;\r\n\t\ttransform: translateX(-50%);\r\n\t\tbackground-color: rgba(0, 0, 0, 0.8);\r\n\t\tcolor: white;\r\n\t\tpadding: 4px 8px;\r\n\t\tborder-radius: 4px;\r\n\t\tfont-size: 12px;\r\n\t\tpointer-events: none;\r\n\t\twhite-space: nowrap;\r\n\t\tz-index: 10;\r\n\t}\r\n\r\n\t/* D3图表容器 */\r\n\t.d3-chart-container {\r\n\t\twidth: 100%;\r\n\t\theight: 180px;\r\n\t\tmin-height: 120px;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t/* D3 tooltip样式 */\r\n\t.d3-tooltip {\r\n\t\tz-index: 10;\r\n\t\twhite-space: nowrap;\r\n\t\tpointer-events: none;\r\n\t\tbox-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\r\n\t}\r\n\r\n\t/* 无数据样式 */\r\n\t.no-data {\r\n\t\tcolor: #999;\r\n\t\tfont-style: italic;\r\n\t\tpadding: 10px;\r\n\t}\r\n\r\n\t/* Y轴样式 */\r\n\t.y-axis line {\r\n\t\tstroke: #e0e0e0;\r\n\t\tstroke-dasharray: 2, 2;\r\n\t}\r\n\r\n\t.y-axis text {\r\n\t\tfont-size: 10px;\r\n\t\tfill: #666;\r\n\t}\r\n\r\n\t/* 响应式调整 */\r\n\t@media (max-width: 768px) {\r\n\t\t.simple-text {\r\n\t\t\tfont-size: 12px;\r\n\t\t}\r\n\r\n\t\t.d3-chart-container {\r\n\t\t\tmin-height: 60px;\r\n\t\t}\r\n\t}\r\n\r\n\t/* 添加在style部分的末尾 */\r\n\t.bar-label,\r\n\t.line-label,\r\n\t.stack-label {\r\n\t\tfont-family: Arial, sans-serif;\r\n\t\tpointer-events: none;\r\n\t\tuser-select: none;\r\n\t}\r\n\r\n\t@media (max-width: 768px) {\r\n\t\t.bar-label,\r\n\t\t.line-label,\r\n\t\t.stack-label {\r\n\t\t\tfont-size: 8px;\r\n\t\t}\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}