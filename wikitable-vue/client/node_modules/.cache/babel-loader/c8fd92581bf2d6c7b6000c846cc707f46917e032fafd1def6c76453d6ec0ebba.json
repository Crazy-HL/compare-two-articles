{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createVNode as _createVNode, Fragment as _Fragment, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-62c843dc\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = [\"id\"];\nexport function render(_ctx, _cache) {\n  const _component_LoadingSpinner = _resolveComponent(\"LoadingSpinner\");\n  const _component_ErrorDisplay = _resolveComponent(\"ErrorDisplay\");\n  const _component_WikipediaContent = _resolveComponent(\"WikipediaContent\");\n  const _component_TextPopup = _resolveComponent(\"TextPopup\");\n  const _component_ArticleOutline = _resolveComponent(\"ArticleOutline\");\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass(['div0', _ctx.selectContentClass]),\n    id: _ctx.divId,\n    ref: \"divRef\"\n  }, [_createElementVNode(\"h1\", null, _toDisplayString(_ctx.pageTitle), 1 /* TEXT */), _createCommentVNode(\" 加载动画 \"), _ctx.loading ? (_openBlock(), _createBlock(_component_LoadingSpinner, {\n    key: 0\n  })) : _ctx.error ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" 错误信息 \"), _createVNode(_component_ErrorDisplay, {\n    message: _ctx.error,\n    onRetry: _ctx.fetchWikipediaContent\n  }, null, 8 /* PROPS */, [\"message\", \"onRetry\"])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 2\n  }, [_createCommentVNode(\" 文章内容 \"), _createVNode(_component_WikipediaContent, {\n    content: _ctx.pageHtml,\n    onSelect: _ctx.handleSelection\n  }, null, 8 /* PROPS */, [\"content\", \"onSelect\"])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)), _createCommentVNode(\" 弹出框 \"), _createVNode(_component_TextPopup, {\n    visible: _ctx.showPopup[_ctx.divId],\n    content: _ctx.selectedText[_ctx.divId],\n    containerClass: _ctx.divId === 'div1' ? 'chart-container1' : 'chart-container2',\n    containerRef: _ctx.divRef,\n    divId: _ctx.divId,\n    linkedOutline: _ctx.linkedOutline,\n    onClose: _ctx.closePopup\n  }, null, 8 /* PROPS */, [\"visible\", \"content\", \"containerClass\", \"containerRef\", \"divId\", \"linkedOutline\", \"onClose\"]), _createCommentVNode(\" 悬浮大纲组件 \"), _createVNode(_component_ArticleOutline, {\n    content: _ctx.pageHtml,\n    divId: _ctx.divId\n  }, null, 8 /* PROPS */, [\"content\", \"divId\"]), _createCommentVNode(\" 添加 key 属性 \")], 10 /* CLASS, PROPS */, _hoisted_1);\n}","map":{"version":3,"names":["_createElementBlock","class","_normalizeClass","_ctx","selectContentClass","id","divId","ref","_createElementVNode","_toDisplayString","pageTitle","_createCommentVNode","loading","_createBlock","_component_LoadingSpinner","key","error","_Fragment","_createVNode","_component_ErrorDisplay","message","onRetry","fetchWikipediaContent","_component_WikipediaContent","content","pageHtml","onSelect","handleSelection","_component_TextPopup","visible","showPopup","selectedText","containerClass","containerRef","divRef","linkedOutline","onClose","closePopup","_component_ArticleOutline","_hoisted_1"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\ParentComponent.vue"],"sourcesContent":["<template>\r\n\t<div :class=\"['div0', selectContentClass]\" :id=\"divId\" ref=\"divRef\">\r\n\t\t<h1>{{ pageTitle }}</h1>\r\n\r\n\t\t<!-- 加载动画 -->\r\n\t\t<LoadingSpinner v-if=\"loading\" />\r\n\r\n\t\t<!-- 错误信息 -->\r\n\t\t<ErrorDisplay\r\n\t\t\tv-else-if=\"error\"\r\n\t\t\t:message=\"error\"\r\n\t\t\t@retry=\"fetchWikipediaContent\" />\r\n\r\n\t\t<!-- 文章内容 -->\r\n\t\t<WikipediaContent v-else :content=\"pageHtml\" @select=\"handleSelection\" />\r\n\r\n\t\t<!-- 弹出框 -->\r\n\t\t<TextPopup\r\n\t\t\t:visible=\"showPopup[divId]\"\r\n\t\t\t:content=\"selectedText[divId]\"\r\n\t\t\t:containerClass=\"\r\n\t\t\t\tdivId === 'div1' ? 'chart-container1' : 'chart-container2'\r\n\t\t\t\"\r\n\t\t\t:containerRef=\"divRef\"\r\n\t\t\t:divId=\"divId\"\r\n\t\t\t:linkedOutline=\"linkedOutline\"\r\n\t\t\t@close=\"closePopup\" />\r\n\r\n\t\t<!-- 悬浮大纲组件 -->\r\n\t\t<ArticleOutline :content=\"pageHtml\" :divId=\"divId\" />\r\n\t\t<!-- 添加 key 属性 -->\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted, nextTick } from \"vue\";\r\n\timport LoadingSpinner from \"./LoadingSpinner.vue\";\r\n\timport ErrorDisplay from \"./ErrorDisplay.vue\";\r\n\timport WikipediaContent from \"./WikipediaContent.vue\";\r\n\timport TextPopup from \"./TextPopup.vue\";\r\n\timport ArticleOutline from \"./ArticleOutline.vue\"; // 引入大纲组件\r\n\timport * as d3 from \"d3\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\r\n\tconst props = defineProps({\r\n\t\tpageTitle: String,\r\n\t\tdivId: String,\r\n\t\tselectContentClass: String\r\n\t});\r\n\r\n\tconst pageHtml = ref(\"\"); // 文章 HTML 内容\r\n\tconst loading = ref(true); // 加载状态\r\n\tconst error = ref(\"\"); // 错误信息\r\n\tconst selectedText = ref({}); // 存储每个 div 的选中内容\r\n\tconst showPopup = ref({}); // 存储每个 div 的弹窗显示状态\r\n\tconst divRef = ref(null); // `Div1` 或 `Div3` 的 DOM 参考\r\n\r\n\t// 自定义关联数组\r\n\tconst linkedOutline = ref([\r\n\t\t{ leftId: \"heading-0-div1\", rightId: \"heading-0-div3\" },\r\n\t\t{ leftId: \"heading-3-div1\", rightId: \"heading-3-div3\" },\r\n\t\t{ leftId: \"heading-9-div1\", rightId: \"heading-12-div3\" },\r\n\t\t{ leftId: \"heading-23-div1\", rightId: \"heading-13-div3\" },\r\n\t\t{ leftId: \"heading-24-div1\", rightId: \"heading-14-div3\" },\r\n\t\t{ leftId: \"heading-25-div1\", rightId: \"heading-19-div3\" },\r\n\t\t{ leftId: \"heading-26-div1\", rightId: \"heading-15-div3\" },\r\n\t\t{ leftId: \"heading-28-div1\", rightId: \"heading-16-div3\" },\r\n\t\t{ leftId: \"heading-30-div1\", rightId: \"heading-17-div3\" },\r\n\t\t{ leftId: \"heading-32-div1\", rightId: \"heading-32-div3\" },\r\n\t\t{ leftId: \"heading-33-div1\", rightId: \"heading-33-div3\" },\r\n\t\t{ leftId: \"heading-34-div1\", rightId: \"heading-35-div3\" },\r\n\t\t{ leftId: \"heading-35-div1\", rightId: \"heading-37-div3\" }\r\n\t]);\r\n\r\n\t// 处理 scroll-and-popup 事件\r\n\tconst handleScrollAndPopup = ({ sourceDivId, targetId, content }) => {\r\n\t\tconsole.log(\r\n\t\t\t\"处理 scroll-and-popup 事件，sourceDivId:\",\r\n\t\t\tsourceDivId,\r\n\t\t\t\"targetId:\",\r\n\t\t\ttargetId\r\n\t\t);\r\n\r\n\t\t// 如果事件来自当前 Div，则不处理\r\n\t\tif (sourceDivId === props.divId) return;\r\n\r\n\t\t// 滚动到目标章节\r\n\t\tconst targetElement = document.getElementById(targetId);\r\n\t\tif (targetElement) {\r\n\t\t\tconsole.log(\"找到目标元素，开始滚动\");\r\n\t\t\ttargetElement.scrollIntoView({ behavior: \"smooth\" });\r\n\r\n\t\t\t// 弹出相关内容\r\n\t\t\tselectedText.value[props.divId] = content;\r\n\t\t\tshowPopup.value[props.divId] = true;\r\n\r\n\t\t\t// 确保弹窗位置更新\r\n\t\t\tnextTick(() => {\r\n\t\t\t\tupdatePopupPosition();\r\n\t\t\t\tconsole.log(\"弹窗位置已更新\");\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconsole.error(\"未找到目标元素，targetId:\", targetId);\r\n\t\t}\r\n\t};\r\n\r\n\t// **获取 Wikipedia 页面**\r\n\tconst fetchWikipediaContent = async () => {\r\n\t\ttry {\r\n\t\t\tconst apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(\r\n\t\t\t\tprops.pageTitle\r\n\t\t\t)}`;\r\n\t\t\tconst response = await fetch(apiUrl);\r\n\t\t\tif (!response.ok) throw new Error(\"Failed to fetch data\");\r\n\r\n\t\t\tconst html = await response.text();\r\n\t\t\tconsole.log(\"API 请求成功，返回的 HTML:\", html);\r\n\r\n\t\t\t// 解析 HTML\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\r\n\t\t\t// 给所有 h1-h6 添加唯一 ID\r\n\t\t\tconst headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\r\n\t\t\theadings.forEach((heading, index) => {\r\n\t\t\t\tconst uniqueId = `heading-${index}-${props.divId}`; // 生成唯一 ID\r\n\t\t\t\theading.id = uniqueId;\r\n\t\t\t});\r\n\r\n\t\t\t// 仅获取正文部分\r\n\t\t\tconst contentElement = doc.querySelector(\"body\");\r\n\t\t\tif (!contentElement) throw new Error(\"Content not found\");\r\n\r\n\t\t\tpageHtml.value = contentElement.innerHTML;\r\n\t\t\tconsole.log(\"解析后的页面内容:\", pageHtml.value);\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(\"API 请求失败:\", err);\r\n\t\t\terror.value = \"Error fetching Wikipedia content: \" + err.message;\r\n\t\t} finally {\r\n\t\t\tloading.value = false;\r\n\t\t}\r\n\t};\r\n\r\n\t// **手动引入 Wikipedia CSS**\r\n\tconst injectWikipediaStyles = () => {\r\n\t\tconst wikipediaStyles = [\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=site.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=ext.cite.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=ext.scribunto.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=skins.vector.styles\"\r\n\t\t];\r\n\r\n\t\twikipediaStyles.forEach(url => {\r\n\t\t\tif (!document.querySelector(`link[href=\"${url}\"]`)) {\r\n\t\t\t\tconst styleTag = document.createElement(\"link\");\r\n\t\t\t\tstyleTag.rel = \"stylesheet\";\r\n\t\t\t\tstyleTag.href = url;\r\n\t\t\t\tdocument.head.appendChild(styleTag);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t// **处理选中内容**\r\n\tconst handleSelection = selectedText => {\r\n\t\tif (!selectedText) {\r\n\t\t\tconsole.error(\"选中的内容为空\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 获取选中的文本所在的章节 ID\r\n\t\tconst chapterId = findChapterId(selectedText);\r\n\t\tif (!chapterId) {\r\n\t\t\tconsole.error(\"未找到选中的章节 ID\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconsole.log(\"选中的章节 ID:\", chapterId);\r\n\r\n\t\t// 存储选中的内容和章节 ID\r\n\t\tselectedText.value[props.divId] = { content: selectedText, chapterId };\r\n\t\tshowPopup.value[props.divId] = true;\r\n\r\n\t\t// 通过 eventBus 通知另一个 div 进行滚动和弹出\r\n\t\tbus.emit(\"scroll-and-popup\", {\r\n\t\t\tsourceDivId: props.divId, // 当前 Div 的 ID\r\n\t\t\tchapterId: chapterId // 选中的章节 ID\r\n\t\t});\r\n\r\n\t\t// 确保弹窗位置更新\r\n\t\tnextTick(() => {\r\n\t\t\tupdatePopupPosition();\r\n\t\t});\r\n\t};\r\n\r\n\t// 查找选中的文本所在的章节 ID\r\n\tconst findChapterId = selectedText => {\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst doc = parser.parseFromString(pageHtml.value, \"text/html\");\r\n\r\n\t\t// 遍历所有章节（h1-h6）\r\n\t\tconst headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\r\n\t\tfor (const heading of headings) {\r\n\t\t\t// 检查选中的文本是否在该章节的范围内\r\n\t\t\tif (heading.textContent.includes(selectedText)) {\r\n\t\t\t\treturn heading.id; // 返回章节 ID\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null; // 未找到章节 ID\r\n\t};\r\n\r\n\t// 查找选中的文本所在的章节 ID\r\n\tconst findChapterId = selectedText => {\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst doc = parser.parseFromString(pageHtml.value, \"text/html\");\r\n\r\n\t\t// 遍历所有章节（h1-h6）\r\n\t\tconst headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\r\n\t\tfor (const heading of headings) {\r\n\t\t\t// 检查选中的文本是否在该章节的范围内\r\n\t\t\tif (heading.textContent.includes(selectedText)) {\r\n\t\t\t\treturn heading.id; // 返回章节 ID\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null; // 未找到章节 ID\r\n\t};\r\n\r\n\t// **关闭弹出框**\r\n\tconst closePopup = () => {\r\n\t\tshowPopup.value[props.divId] = false; // 根据 divId 关闭弹窗\r\n\t\tselectedText.value[props.divId] = \"\"; // 根据 divId 清除选中内容\r\n\r\n\t\t// 根据 divId 清空对应的容器\r\n\t\tconst container =\r\n\t\t\tprops.divId === \"div1\" ? \".chart-container1\" : \".chart-container2\";\r\n\t\td3.select(container).html(\"\");\r\n\t};\r\n\r\n\t// **更新遮罩层和弹出框的位置**\r\n\tconst updatePopupPosition = () => {\r\n\t\tif (showPopup.value[props.divId] && divRef.value) {\r\n\t\t\tconst popup = divRef.value.querySelector(\".text-popup\");\r\n\t\t\tconst overlay = divRef.value.querySelector(\".overlay\");\r\n\t\t\tif (popup && overlay) {\r\n\t\t\t\tconst rect = divRef.value.getBoundingClientRect();\r\n\t\t\t\tconst scrollTop = divRef.value.scrollTop;\r\n\t\t\t\tconst scrollLeft = divRef.value.scrollLeft;\r\n\r\n\t\t\t\t// 动态调整遮罩层和弹出框的位置\r\n\t\t\t\toverlay.style.top = `${scrollTop}px`;\r\n\t\t\t\toverlay.style.left = `${scrollLeft}px`;\r\n\t\t\t\toverlay.style.width = `${divRef.value.clientWidth}px`;\r\n\t\t\t\toverlay.style.height = `${divRef.value.clientHeight}px`;\r\n\r\n\t\t\t\tpopup.style.top = `${rect.height / 2 + scrollTop}px`;\r\n\t\t\t\tpopup.style.left = `${rect.width / 2 + scrollLeft}px`;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// **组件挂载后加载 Wikipedia 内容**\r\n\tonMounted(() => {\r\n\t\t// 确保 divRef 已初始化\r\n\t\tif (divRef.value) {\r\n\t\t\tconsole.log(\"divRef 已绑定到 DOM 元素:\", divRef.value);\r\n\t\t} else {\r\n\t\t\tconsole.error(\"divRef 未绑定到 DOM 元素\");\r\n\t\t}\r\n\t\tfetchWikipediaContent();\r\n\r\n\t\t// 监听父容器滚动事件\r\n\t\tif (divRef.value) {\r\n\t\t\tdivRef.value.addEventListener(\"scroll\", updatePopupPosition);\r\n\t\t}\r\n\t\t// 监听 scroll-and-popup 事件\r\n\t\tbus.on(\"scroll-and-popup\", handleScrollAndPopup);\r\n\t});\r\n\r\n\t// **组件卸载时解绑事件**\r\n\tonUnmounted(() => {\r\n\t\t// 解绑父容器滚动事件\r\n\t\tif (divRef.value) {\r\n\t\t\tdivRef.value.removeEventListener(\"scroll\", updatePopupPosition);\r\n\t\t}\r\n\t\t// 解绑 scroll-and-popup 事件\r\n\t\tbus.off(\"scroll-and-popup\", handleScrollAndPopup);\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\th1 {\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t/* 文章容器 */\r\n\t.div0 {\r\n\t\tposition: relative;\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t#div1,\r\n\t#div3 {\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t.showHtml {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\toverflow: auto;\r\n\t}\r\n\r\n\t/* 选中文本的高亮样式 */\r\n\t::selection {\r\n\t\tbackground-color: yellow;\r\n\t\tcolor: black;\r\n\t}\r\n</style>\r\n"],"mappings":";;mBAAA;;;;;;;uBACCA,mBAAA,CA8BM;IA9BAC,KAAK,EADZC,eAAA,UACuBC,IAAA,CAAAC,kBAAkB;IAAIC,EAAE,EAAEF,IAAA,CAAAG,KAAK;IAAEC,GAAG,EAAC;MAC1DC,mBAAA,CAAwB,YAAAC,gBAAA,CAAjBN,IAAA,CAAAO,SAAS,kBAEhBC,mBAAA,UAAa,EACSR,IAAA,CAAAS,OAAO,I,cAA7BC,YAAA,CAAiCC,yBAAA;IALnCC,GAAA;EAAA,MAScZ,IAAA,CAAAa,KAAK,I,cADjBhB,mBAAA,CAGkCiB,SAAA;IAXpCF,GAAA;EAAA,IAOEJ,mBAAA,UAAa,EACbO,YAAA,CAGkCC,uBAAA;IADhCC,OAAO,EAAEjB,IAAA,CAAAa,KAAK;IACdK,OAAK,EAAElB,IAAA,CAAAmB;qHAGTtB,mBAAA,CAAyEiB,SAAA;IAd3EF,GAAA;EAAA,IAaEJ,mBAAA,UAAa,EACbO,YAAA,CAAyEK,2BAAA;IAA/CC,OAAO,EAAErB,IAAA,CAAAsB,QAAQ;IAAGC,QAAM,EAAEvB,IAAA,CAAAwB;sGAEtDhB,mBAAA,SAAY,EACZO,YAAA,CASuBU,oBAAA;IARrBC,OAAO,EAAE1B,IAAA,CAAA2B,SAAS,CAAC3B,IAAA,CAAAG,KAAK;IACxBkB,OAAO,EAAErB,IAAA,CAAA4B,YAAY,CAAC5B,IAAA,CAAAG,KAAK;IAC3B0B,cAAc,EAAQ7B,IAAA,CAAAG,KAAK;IAG3B2B,YAAY,EAAE9B,IAAA,CAAA+B,MAAM;IACpB5B,KAAK,EAAEH,IAAA,CAAAG,KAAK;IACZ6B,aAAa,EAAEhC,IAAA,CAAAgC,aAAa;IAC5BC,OAAK,EAAEjC,IAAA,CAAAkC;0HAET1B,mBAAA,YAAe,EACfO,YAAA,CAAqDoB,yBAAA;IAApCd,OAAO,EAAErB,IAAA,CAAAsB,QAAQ;IAAGnB,KAAK,EAAEH,IAAA,CAAAG;iDAC5CK,mBAAA,eAAkB,C,yBA9BpB4B,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}