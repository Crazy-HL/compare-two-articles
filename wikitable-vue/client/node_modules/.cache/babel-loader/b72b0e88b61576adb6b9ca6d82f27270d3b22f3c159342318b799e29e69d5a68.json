{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, watch, onMounted, onUnmounted } from \"vue\";\nimport eventBus from \"@/js/eventBus.js\";\nexport default {\n  __name: 'ArticleOutline',\n  props: {\n    content: String,\n    // 文章 HTML\n    divId: String // \"div1\" 或 \"div3\"\n  },\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const props = __props;\n    const isVisible = ref(false);\n    const outline = ref([]);\n    const buttonStyle = ref({});\n    const outlineStyle = ref({});\n    const linkedOutline = ref([]); // 共享的关联章节数据\n\n    // **切换大纲的显示**\n    const toggleOutline = () => {\n      isVisible.value = !isVisible.value;\n    };\n\n    // **解析文章，提取 h1-h6 标题**\n    const extractOutline = (content, containerId) => {\n      if (!content) return [];\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(content, \"text/html\");\n      const headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\n      return Array.from(headings).map((heading, index) => {\n        const level = parseInt(heading.tagName.substring(1));\n        const id = `heading-${index}-${containerId}`;\n        heading.id = id;\n        return {\n          id,\n          text: heading.textContent,\n          level\n        };\n      });\n    };\n\n    // **动态生成关联关系**    结合 标准化处理 + 编辑距离 + 关键词匹配\n    const normalizeText = text => {\n      return text.toLowerCase().replace(/[^\\w\\s]/g, \"\") // 移除标点\n      .replace(/\\b(the|a|an|of|in|on|and|or|to|with|for)\\b/g, \"\") // 移除停用词\n      .trim();\n    };\n\n    // 归一化编辑距离（Levenshtein Ratio）\n    const levenshteinRatio = (a, b) => {\n      const lenA = a.length;\n      const lenB = b.length;\n      const distance = levenshteinDistance(a, b);\n      return 1 - distance / Math.max(lenA, lenB); // 归一化到 [0,1] 之间\n    };\n\n    // Jaccard 相似度计算\n    const jaccardSimilarity = (text1, text2) => {\n      const words1 = new Set(text1.split(/\\s+/));\n      const words2 = new Set(text2.split(/\\s+/));\n      const intersection = new Set([...words1].filter(word => words2.has(word)));\n      const union = new Set([...words1, ...words2]);\n      return intersection.size / union.size; // 计算 Jaccard 相似度\n    };\n    const levenshteinDistance = (a, b) => {\n      const dp = Array(a.length + 1).fill(null).map(() => Array(b.length + 1).fill(0));\n      for (let i = 0; i <= a.length; i++) dp[i][0] = i;\n      for (let j = 0; j <= b.length; j++) dp[0][j] = j;\n      for (let i = 1; i <= a.length; i++) {\n        for (let j = 1; j <= b.length; j++) {\n          const cost = a[i - 1] === b[j - 1] ? 0 : 1;\n          dp[i][j] = Math.min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + cost);\n        }\n      }\n      return dp[a.length][b.length];\n    };\n\n    // 综合相似度计算\n    const isSimilar = function (text1, text2) {\n      let levThreshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.7;\n      let jacThreshold = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.5;\n      const normText1 = normalizeText(text1);\n      const normText2 = normalizeText(text2);\n      const levRatio = levenshteinRatio(normText1, normText2);\n      const jacSim = jaccardSimilarity(normText1, normText2);\n\n      // 设定动态权重\n      const weightedScore = 0.7 * levRatio + 0.3 * jacSim;\n      return weightedScore >= 0.65; // 设定合适的匹配阈值\n    };\n    const generateLinkedOutline = (outline1, outline2) => {\n      const linked = [];\n      outline1.forEach(item1 => {\n        outline2.forEach(item2 => {\n          if (isSimilar(item1.text, item2.text)) {\n            linked.push({\n              leftId: item1.id,\n              rightId: item2.id\n            });\n          }\n        });\n      });\n      return linked;\n    };\n\n    // **监听 content 变化，更新大纲**\n    watch(() => props.content, newContent => {\n      outline.value = extractOutline(newContent, props.divId);\n\n      // 提取另一个容器的大纲数据\n      const otherContainerId = props.divId === \"div1\" ? \"div3\" : \"div1\";\n      const otherContainer = document.getElementById(otherContainerId);\n      if (otherContainer) {\n        const otherContent = otherContainer.innerHTML;\n        const otherOutline = extractOutline(otherContent, otherContainerId);\n        const newLinkedOutline = generateLinkedOutline(outline.value, otherOutline);\n        linkedOutline.value = newLinkedOutline;\n\n        // 通过 eventBus 通知另一个大纲组件\n        eventBus.emit(\"update-linked-outline\", newLinkedOutline);\n      }\n    }, {\n      immediate: true\n    });\n\n    // **监听 eventBus，确保两边大纲同步**\n    eventBus.on(\"update-linked-outline\", newLinkedOutline => {\n      linkedOutline.value = newLinkedOutline;\n    });\n\n    // **检查是否存在关联章节**\n    const isLinked = item => linkedOutline.value.some(linked => linked.leftId === item.id || linked.rightId === item.id);\n\n    // **滚动到章节**\n    const scrollToChapter = id => {\n      // 跳转到当前文章的章节\n      const element = document.getElementById(id);\n      if (element) element.scrollIntoView({\n        behavior: \"smooth\"\n      });\n\n      // 找到关联章节并跳转\n      const linkedItem = linkedOutline.value.find(linked => linked.leftId === id || linked.rightId === id);\n      if (linkedItem) {\n        const targetId = linkedItem.leftId === id ? linkedItem.rightId : linkedItem.leftId;\n        eventBus.emit(\"scroll-to-chapter\", targetId);\n      }\n    };\n\n    // **监听 eventBus，确保两个组件同步跳转**\n    eventBus.on(\"scroll-to-chapter\", targetId => {\n      const targetElement = document.getElementById(targetId);\n      if (targetElement) targetElement.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    });\n\n    // **更新按钮和大纲的相对位置**\n    const updatePosition = () => {\n      const isDiv1 = props.divId === \"div1\";\n      buttonStyle.value = {\n        position: \"absolute\",\n        top: \"10px\",\n        [isDiv1 ? \"right\" : \"left\"]: \"10px\"\n      };\n      outlineStyle.value = {\n        position: \"absolute\",\n        top: \"50px\",\n        [isDiv1 ? \"right\" : \"left\"]: \"10px\",\n        width: \"260px\",\n        maxHeight: \"80vh\",\n        overflowY: \"auto\",\n        zIndex: \"1000\",\n        background: \"white\",\n        borderRadius: \"8px\",\n        boxShadow: \"0 4px 12px rgba(0, 0, 0, 0.15)\",\n        padding: \"15px\"\n      };\n    };\n\n    // **窗口滚动时更新大纲位置**\n    const handleScroll = () => {\n      const referenceElement = document.getElementById(props.divId);\n      if (!referenceElement) return;\n      const scrollY = referenceElement.scrollTop;\n      buttonStyle.value.top = `${scrollY + 10}px`;\n      outlineStyle.value.top = `${scrollY + 50}px`;\n    };\n\n    // **初始化**\n    onMounted(() => {\n      outline.value = extractOutline(props.content, props.divId);\n      updatePosition();\n      const referenceElement = document.getElementById(props.divId);\n      if (referenceElement) referenceElement.addEventListener(\"scroll\", handleScroll);\n    });\n\n    // **组件销毁时移除事件**\n    onUnmounted(() => {\n      const referenceElement = document.getElementById(props.divId);\n      if (referenceElement) referenceElement.removeEventListener(\"scroll\", handleScroll);\n      eventBus.off(\"update-linked-outline\");\n      eventBus.off(\"scroll-to-chapter\");\n    });\n    const __returned__ = {\n      props,\n      isVisible,\n      outline,\n      buttonStyle,\n      outlineStyle,\n      linkedOutline,\n      toggleOutline,\n      extractOutline,\n      normalizeText,\n      levenshteinRatio,\n      jaccardSimilarity,\n      levenshteinDistance,\n      isSimilar,\n      generateLinkedOutline,\n      isLinked,\n      scrollToChapter,\n      updatePosition,\n      handleScroll,\n      ref,\n      watch,\n      onMounted,\n      onUnmounted,\n      get eventBus() {\n        return eventBus;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","onMounted","onUnmounted","eventBus","props","__props","isVisible","outline","buttonStyle","outlineStyle","linkedOutline","toggleOutline","value","extractOutline","content","containerId","parser","DOMParser","doc","parseFromString","headings","querySelectorAll","Array","from","map","heading","index","level","parseInt","tagName","substring","id","text","textContent","normalizeText","toLowerCase","replace","trim","levenshteinRatio","a","b","lenA","length","lenB","distance","levenshteinDistance","Math","max","jaccardSimilarity","text1","text2","words1","Set","split","words2","intersection","filter","word","has","union","size","dp","fill","i","j","cost","min","isSimilar","levThreshold","arguments","undefined","jacThreshold","normText1","normText2","levRatio","jacSim","weightedScore","generateLinkedOutline","outline1","outline2","linked","forEach","item1","item2","push","leftId","rightId","newContent","divId","otherContainerId","otherContainer","document","getElementById","otherContent","innerHTML","otherOutline","newLinkedOutline","emit","immediate","on","isLinked","item","some","scrollToChapter","element","scrollIntoView","behavior","linkedItem","find","targetId","targetElement","updatePosition","isDiv1","position","top","width","maxHeight","overflowY","zIndex","background","borderRadius","boxShadow","padding","handleScroll","referenceElement","scrollY","scrollTop","addEventListener","removeEventListener","off"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/ArticleOutline.vue"],"sourcesContent":["<template>\r\n\t<!-- 大纲切换按钮 -->\r\n\t<button @click=\"toggleOutline\" class=\"toggle-btn\" :style=\"buttonStyle\">\r\n\t\t<svg v-if=\"!isVisible\" class=\"icon\" viewBox=\"0 0 24 24\">\r\n\t\t\t<path\r\n\t\t\t\tfill=\"currentColor\"\r\n\t\t\t\td=\"M3 6h18v2H3V6zm0 5h18v2H3v-2zm0 5h18v2H3v-2z\"></path>\r\n\t\t</svg>\r\n\t\t<svg v-else class=\"icon close\" viewBox=\"0 0 24 24\">\r\n\t\t\t<path fill=\"currentColor\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n\t\t</svg>\r\n\t</button>\r\n\r\n\t<!-- 大纲内容 -->\r\n\t<div v-if=\"isVisible\" class=\"outline-container\" :style=\"outlineStyle\">\r\n\t\t<div class=\"outline\">\r\n\t\t\t<ul>\r\n\t\t\t\t<li\r\n\t\t\t\t\tv-for=\"(item, index) in outline\"\r\n\t\t\t\t\t:key=\"item.id\"\r\n\t\t\t\t\t:class=\"{ highlight: isLinked(item), linked: isLinked(item) }\"\r\n\t\t\t\t\t:style=\"{ paddingLeft: `${(item.level - 1) * 15}px` }\">\r\n\t\t\t\t\t<a :href=\"'#' + item.id\" @click.prevent=\"scrollToChapter(item.id)\">{{\r\n\t\t\t\t\t\titem.text\r\n\t\t\t\t\t}}</a>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, watch, onMounted, onUnmounted } from \"vue\";\r\n\timport eventBus from \"@/js/eventBus.js\";\r\n\r\n\tconst props = defineProps({\r\n\t\tcontent: String, // 文章 HTML\r\n\t\tdivId: String // \"div1\" 或 \"div3\"\r\n\t});\r\n\r\n\tconst isVisible = ref(false);\r\n\tconst outline = ref([]);\r\n\tconst buttonStyle = ref({});\r\n\tconst outlineStyle = ref({});\r\n\tconst linkedOutline = ref([]); // 共享的关联章节数据\r\n\r\n\t// **切换大纲的显示**\r\n\tconst toggleOutline = () => {\r\n\t\tisVisible.value = !isVisible.value;\r\n\t};\r\n\r\n\t// **解析文章，提取 h1-h6 标题**\r\n\tconst extractOutline = (content, containerId) => {\r\n\t\tif (!content) return [];\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst doc = parser.parseFromString(content, \"text/html\");\r\n\t\tconst headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\r\n\r\n\t\treturn Array.from(headings).map((heading, index) => {\r\n\t\t\tconst level = parseInt(heading.tagName.substring(1));\r\n\t\t\tconst id = `heading-${index}-${containerId}`;\r\n\t\t\theading.id = id;\r\n\t\t\treturn { id, text: heading.textContent, level };\r\n\t\t});\r\n\t};\r\n\r\n\t// **动态生成关联关系**    结合 标准化处理 + 编辑距离 + 关键词匹配\r\n\tconst normalizeText = text => {\r\n\t\treturn text\r\n\t\t\t.toLowerCase()\r\n\t\t\t.replace(/[^\\w\\s]/g, \"\") // 移除标点\r\n\t\t\t.replace(/\\b(the|a|an|of|in|on|and|or|to|with|for)\\b/g, \"\") // 移除停用词\r\n\t\t\t.trim();\r\n\t};\r\n\r\n\t// 归一化编辑距离（Levenshtein Ratio）\r\n\tconst levenshteinRatio = (a, b) => {\r\n\t\tconst lenA = a.length;\r\n\t\tconst lenB = b.length;\r\n\t\tconst distance = levenshteinDistance(a, b);\r\n\t\treturn 1 - distance / Math.max(lenA, lenB); // 归一化到 [0,1] 之间\r\n\t};\r\n\r\n\t// Jaccard 相似度计算\r\n\tconst jaccardSimilarity = (text1, text2) => {\r\n\t\tconst words1 = new Set(text1.split(/\\s+/));\r\n\t\tconst words2 = new Set(text2.split(/\\s+/));\r\n\t\tconst intersection = new Set([...words1].filter(word => words2.has(word)));\r\n\t\tconst union = new Set([...words1, ...words2]);\r\n\t\treturn intersection.size / union.size; // 计算 Jaccard 相似度\r\n\t};\r\n\tconst levenshteinDistance = (a, b) => {\r\n\t\tconst dp = Array(a.length + 1)\r\n\t\t\t.fill(null)\r\n\t\t\t.map(() => Array(b.length + 1).fill(0));\r\n\r\n\t\tfor (let i = 0; i <= a.length; i++) dp[i][0] = i;\r\n\t\tfor (let j = 0; j <= b.length; j++) dp[0][j] = j;\r\n\r\n\t\tfor (let i = 1; i <= a.length; i++) {\r\n\t\t\tfor (let j = 1; j <= b.length; j++) {\r\n\t\t\t\tconst cost = a[i - 1] === b[j - 1] ? 0 : 1;\r\n\t\t\t\tdp[i][j] = Math.min(\r\n\t\t\t\t\tdp[i - 1][j] + 1,\r\n\t\t\t\t\tdp[i][j - 1] + 1,\r\n\t\t\t\t\tdp[i - 1][j - 1] + cost\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn dp[a.length][b.length];\r\n\t};\r\n\r\n\t// 综合相似度计算\r\n\tconst isSimilar = (text1, text2, levThreshold = 0.7, jacThreshold = 0.5) => {\r\n\t\tconst normText1 = normalizeText(text1);\r\n\t\tconst normText2 = normalizeText(text2);\r\n\t\tconst levRatio = levenshteinRatio(normText1, normText2);\r\n\t\tconst jacSim = jaccardSimilarity(normText1, normText2);\r\n\r\n\t\t// 设定动态权重\r\n\t\tconst weightedScore = 0.7 * levRatio + 0.3 * jacSim;\r\n\t\treturn weightedScore >= 0.65; // 设定合适的匹配阈值\r\n\t};\r\n\r\n\tconst generateLinkedOutline = (outline1, outline2) => {\r\n\t\tconst linked = [];\r\n\t\toutline1.forEach(item1 => {\r\n\t\t\toutline2.forEach(item2 => {\r\n\t\t\t\tif (isSimilar(item1.text, item2.text)) {\r\n\t\t\t\t\tlinked.push({ leftId: item1.id, rightId: item2.id });\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn linked;\r\n\t};\r\n\r\n\t// **监听 content 变化，更新大纲**\r\n\twatch(\r\n\t\t() => props.content,\r\n\t\tnewContent => {\r\n\t\t\toutline.value = extractOutline(newContent, props.divId);\r\n\r\n\t\t\t// 提取另一个容器的大纲数据\r\n\t\t\tconst otherContainerId = props.divId === \"div1\" ? \"div3\" : \"div1\";\r\n\t\t\tconst otherContainer = document.getElementById(otherContainerId);\r\n\t\t\tif (otherContainer) {\r\n\t\t\t\tconst otherContent = otherContainer.innerHTML;\r\n\t\t\t\tconst otherOutline = extractOutline(otherContent, otherContainerId);\r\n\t\t\t\tconst newLinkedOutline = generateLinkedOutline(\r\n\t\t\t\t\toutline.value,\r\n\t\t\t\t\totherOutline\r\n\t\t\t\t);\r\n\t\t\t\tlinkedOutline.value = newLinkedOutline;\r\n\r\n\t\t\t\t// 通过 eventBus 通知另一个大纲组件\r\n\t\t\t\teventBus.emit(\"update-linked-outline\", newLinkedOutline);\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\t// **监听 eventBus，确保两边大纲同步**\r\n\teventBus.on(\"update-linked-outline\", newLinkedOutline => {\r\n\t\tlinkedOutline.value = newLinkedOutline;\r\n\t});\r\n\r\n\t// **检查是否存在关联章节**\r\n\tconst isLinked = item =>\r\n\t\tlinkedOutline.value.some(\r\n\t\t\tlinked => linked.leftId === item.id || linked.rightId === item.id\r\n\t\t);\r\n\r\n\t// **滚动到章节**\r\n\tconst scrollToChapter = id => {\r\n\t\t// 跳转到当前文章的章节\r\n\t\tconst element = document.getElementById(id);\r\n\t\tif (element) element.scrollIntoView({ behavior: \"smooth\" });\r\n\r\n\t\t// 找到关联章节并跳转\r\n\t\tconst linkedItem = linkedOutline.value.find(\r\n\t\t\tlinked => linked.leftId === id || linked.rightId === id\r\n\t\t);\r\n\t\tif (linkedItem) {\r\n\t\t\tconst targetId =\r\n\t\t\t\tlinkedItem.leftId === id ? linkedItem.rightId : linkedItem.leftId;\r\n\t\t\teventBus.emit(\"scroll-to-chapter\", targetId);\r\n\t\t}\r\n\t};\r\n\r\n\t// **监听 eventBus，确保两个组件同步跳转**\r\n\teventBus.on(\"scroll-to-chapter\", targetId => {\r\n\t\tconst targetElement = document.getElementById(targetId);\r\n\t\tif (targetElement) targetElement.scrollIntoView({ behavior: \"smooth\" });\r\n\t});\r\n\r\n\t// **更新按钮和大纲的相对位置**\r\n\tconst updatePosition = () => {\r\n\t\tconst isDiv1 = props.divId === \"div1\";\r\n\t\tbuttonStyle.value = {\r\n\t\t\tposition: \"absolute\",\r\n\t\t\ttop: \"10px\",\r\n\t\t\t[isDiv1 ? \"right\" : \"left\"]: \"10px\"\r\n\t\t};\r\n\t\toutlineStyle.value = {\r\n\t\t\tposition: \"absolute\",\r\n\t\t\ttop: \"50px\",\r\n\t\t\t[isDiv1 ? \"right\" : \"left\"]: \"10px\",\r\n\t\t\twidth: \"260px\",\r\n\t\t\tmaxHeight: \"80vh\",\r\n\t\t\toverflowY: \"auto\",\r\n\t\t\tzIndex: \"1000\",\r\n\t\t\tbackground: \"white\",\r\n\t\t\tborderRadius: \"8px\",\r\n\t\t\tboxShadow: \"0 4px 12px rgba(0, 0, 0, 0.15)\",\r\n\t\t\tpadding: \"15px\"\r\n\t\t};\r\n\t};\r\n\r\n\t// **窗口滚动时更新大纲位置**\r\n\tconst handleScroll = () => {\r\n\t\tconst referenceElement = document.getElementById(props.divId);\r\n\t\tif (!referenceElement) return;\r\n\r\n\t\tconst scrollY = referenceElement.scrollTop;\r\n\t\tbuttonStyle.value.top = `${scrollY + 10}px`;\r\n\t\toutlineStyle.value.top = `${scrollY + 50}px`;\r\n\t};\r\n\r\n\t// **初始化**\r\n\tonMounted(() => {\r\n\t\toutline.value = extractOutline(props.content, props.divId);\r\n\t\tupdatePosition();\r\n\t\tconst referenceElement = document.getElementById(props.divId);\r\n\t\tif (referenceElement)\r\n\t\t\treferenceElement.addEventListener(\"scroll\", handleScroll);\r\n\t});\r\n\r\n\t// **组件销毁时移除事件**\r\n\tonUnmounted(() => {\r\n\t\tconst referenceElement = document.getElementById(props.divId);\r\n\t\tif (referenceElement)\r\n\t\t\treferenceElement.removeEventListener(\"scroll\", handleScroll);\r\n\t\teventBus.off(\"update-linked-outline\");\r\n\t\teventBus.off(\"scroll-to-chapter\");\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t/* **按钮样式** */\r\n\t.toggle-btn {\r\n\t\tpadding: 10px;\r\n\t\tborder-radius: 50%;\r\n\t\tcursor: pointer;\r\n\t\tz-index: 2000;\r\n\t\tbackground-color: #0077b6;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\twidth: 36px;\r\n\t\theight: 36px;\r\n\t\tbox-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n\t\ttransition: all 0.3s ease-in-out;\r\n\t}\r\n\r\n\t/* **大纲样式** */\r\n\t.outline-container {\r\n\t\tbackground: white;\r\n\t\tborder-radius: 8px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n\t\tpadding: 15px;\r\n\t\tmax-height: 80vh;\r\n\t\toverflow-y: auto;\r\n\t\twidth: 260px;\r\n\t\ttransition: all 0.3s ease-in-out;\r\n\t}\r\n\r\n\t.outline ul {\r\n\t\tlist-style-type: none;\r\n\t\tpadding-left: 0;\r\n\t}\r\n\r\n\t.outline li {\r\n\t\tmargin-bottom: 8px;\r\n\t\tfont-size: 14px;\r\n\t\ttransition: padding-left 0.2s ease-in-out;\r\n\t}\r\n\r\n\t/* **高亮和关联章节样式** */\r\n\t.outline li.highlight a {\r\n\t\tbackground-color: #ffff00;\r\n\t\tborder-radius: 5px;\r\n\t}\r\n\r\n\t.outline li.linked a {\r\n\t\tfont-weight: bold;\r\n\t\tcolor: #0077b6;\r\n\t}\r\n\r\n\t.outline li a {\r\n\t\ttext-decoration: none;\r\n\t\tcolor: #0077b6;\r\n\t}\r\n\r\n\t.outline li a:hover {\r\n\t\ttext-decoration: underline;\r\n\t\tcolor: #005f8a;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}