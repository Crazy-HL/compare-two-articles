{"ast":null,"code":"import { ref, watch, onMounted, onUnmounted } from \"vue\";\nexport default {\n  __name: 'ArticleOutline',\n  props: {\n    content: String,\n    // 文章 HTML\n    divId: String,\n    // \"div1\" 或 \"div3\"\n    linkedOutline: Array,\n    // 关联的大纲数据\n    otherDivId: String // 另一个文章的 divId\n  },\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const props = __props;\n    const isVisible = ref(false);\n    const outline = ref([]);\n    const buttonStyle = ref({});\n    const outlineStyle = ref({});\n    const linkedOutline = ref(props.linkedOutline);\n\n    // 切换大纲的显示\n    const toggleOutline = () => {\n      isVisible.value = !isVisible.value;\n    };\n\n    // 解析文章，提取 h1-h6 标题\n    const extractOutline = content => {\n      if (!content) return [];\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(content, \"text/html\");\n      const headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\n      return Array.from(headings).map((heading, index) => {\n        const level = parseInt(heading.tagName.substring(1));\n        const id = `heading-${index}-${props.divId}`;\n        heading.id = id;\n        return {\n          id,\n          text: heading.textContent,\n          level\n        };\n      });\n    };\n\n    // 监听 content 变化，更新大纲\n    watch(() => props.content, newContent => {\n      outline.value = extractOutline(newContent);\n    }, {\n      immediate: true\n    });\n\n    // 检查是否存在关联章节\n    const isLinked = item => {\n      return linkedOutline.value.some(linked => linked.leftId === item.id || linked.rightId === item.id);\n    };\n\n    // 滚动到章节\n    const scrollToChapter = id => {\n      const element = document.getElementById(id);\n      if (element) {\n        element.scrollIntoView({\n          behavior: \"smooth\"\n        });\n      }\n    };\n\n    // 更新按钮和大纲的相对位置\n    const updatePosition = () => {\n      const isDiv1 = props.divId === \"div1\";\n      buttonStyle.value = {\n        position: \"absolute\",\n        top: \"10px\",\n        [isDiv1 ? \"right\" : \"left\"]: \"10px\"\n      };\n      outlineStyle.value = {\n        position: \"absolute\",\n        top: \"50px\",\n        [isDiv1 ? \"right\" : \"left\"]: \"10px\",\n        width: \"260px\",\n        maxHeight: \"80vh\",\n        overflowY: \"auto\",\n        zIndex: \"1000\",\n        background: \"white\",\n        borderRadius: \"8px\",\n        boxShadow: \"0 4px 12px rgba(0, 0, 0, 0.15)\",\n        padding: \"15px\"\n      };\n    };\n\n    // 获取与左侧文章相关的章节\n    const getLinkedChapter = () => {\n      const referenceElement = document.getElementById(props.divId);\n      if (!referenceElement) return;\n      const scrollY = referenceElement.scrollTop;\n      // 计算相似章节的位置\n      for (let item of outline.value) {\n        const element = document.getElementById(item.id);\n        if (element && element.offsetTop <= scrollY + 50) {\n          const linkedItem = linkedOutline.value.find(linked => linked.leftId === item.id);\n          if (linkedItem) {\n            scrollToChapter(linkedItem.rightId);\n          }\n          break;\n        }\n      }\n    };\n\n    // 监听窗口滚动\n    const handleScroll = () => {\n      const referenceElement = document.getElementById(props.divId);\n      if (!referenceElement) return;\n      const scrollY = referenceElement.scrollTop;\n      buttonStyle.value.top = `${scrollY + 10}px`;\n      outlineStyle.value.top = `${scrollY + 50}px`;\n      getLinkedChapter(); // 在滚动时同步滚动到关联章节\n    };\n\n    // 初始化\n    onMounted(() => {\n      outline.value = extractOutline(props.content);\n      updatePosition();\n      const referenceElement = document.getElementById(props.divId);\n      if (referenceElement) referenceElement.addEventListener(\"scroll\", handleScroll);\n    });\n\n    // 组件销毁时移除事件\n    onUnmounted(() => {\n      const referenceElement = document.getElementById(props.divId);\n      if (referenceElement) referenceElement.removeEventListener(\"scroll\", handleScroll);\n    });\n    const __returned__ = {\n      props,\n      isVisible,\n      outline,\n      buttonStyle,\n      outlineStyle,\n      linkedOutline,\n      toggleOutline,\n      extractOutline,\n      isLinked,\n      scrollToChapter,\n      updatePosition,\n      getLinkedChapter,\n      handleScroll,\n      ref,\n      watch,\n      onMounted,\n      onUnmounted\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","onMounted","onUnmounted","props","__props","isVisible","outline","buttonStyle","outlineStyle","linkedOutline","toggleOutline","value","extractOutline","content","parser","DOMParser","doc","parseFromString","headings","querySelectorAll","Array","from","map","heading","index","level","parseInt","tagName","substring","id","divId","text","textContent","newContent","immediate","isLinked","item","some","linked","leftId","rightId","scrollToChapter","element","document","getElementById","scrollIntoView","behavior","updatePosition","isDiv1","position","top","width","maxHeight","overflowY","zIndex","background","borderRadius","boxShadow","padding","getLinkedChapter","referenceElement","scrollY","scrollTop","offsetTop","linkedItem","find","handleScroll","addEventListener","removeEventListener"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/ArticleOutline.vue"],"sourcesContent":["<template>\r\n\t<!-- 大纲切换按钮 -->\r\n\t<button @click=\"toggleOutline\" class=\"toggle-btn\" :style=\"buttonStyle\">\r\n\t\t<svg v-if=\"!isVisible\" class=\"icon\" viewBox=\"0 0 24 24\">\r\n\t\t\t<path\r\n\t\t\t\tfill=\"currentColor\"\r\n\t\t\t\td=\"M3 6h18v2H3V6zm0 5h18v2H3v-2zm0 5h18v2H3v-2z\"></path>\r\n\t\t</svg>\r\n\t\t<svg v-else class=\"icon close\" viewBox=\"0 0 24 24\">\r\n\t\t\t<path fill=\"currentColor\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n\t\t</svg>\r\n\t</button>\r\n\r\n\t<!-- 大纲内容 -->\r\n\t<div v-if=\"isVisible\" class=\"outline-container\" :style=\"outlineStyle\">\r\n\t\t<div class=\"outline\">\r\n\t\t\t<ul>\r\n\t\t\t\t<li\r\n\t\t\t\t\tv-for=\"(item, index) in outline\"\r\n\t\t\t\t\t:key=\"item.id\"\r\n\t\t\t\t\t:class=\"{ highlight: isLinked(item), linked: isLinked(item) }\"\r\n\t\t\t\t\t:style=\"{ paddingLeft: `${(item.level - 1) * 15}px` }\">\r\n\t\t\t\t\t<a :href=\"'#' + item.id\" @click.prevent=\"scrollToChapter(item.id)\">{{\r\n\t\t\t\t\t\titem.text\r\n\t\t\t\t\t}}</a>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, watch, onMounted, onUnmounted } from \"vue\";\r\n\r\n\tconst props = defineProps({\r\n\t\tcontent: String, // 文章 HTML\r\n\t\tdivId: String, // \"div1\" 或 \"div3\"\r\n\t\tlinkedOutline: Array, // 关联的大纲数据\r\n\t\totherDivId: String // 另一个文章的 divId\r\n\t});\r\n\r\n\tconst isVisible = ref(false);\r\n\tconst outline = ref([]);\r\n\tconst buttonStyle = ref({});\r\n\tconst outlineStyle = ref({});\r\n\tconst linkedOutline = ref(props.linkedOutline);\r\n\r\n\t// 切换大纲的显示\r\n\tconst toggleOutline = () => {\r\n\t\tisVisible.value = !isVisible.value;\r\n\t};\r\n\r\n\t// 解析文章，提取 h1-h6 标题\r\n\tconst extractOutline = content => {\r\n\t\tif (!content) return [];\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst doc = parser.parseFromString(content, \"text/html\");\r\n\t\tconst headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\r\n\r\n\t\treturn Array.from(headings).map((heading, index) => {\r\n\t\t\tconst level = parseInt(heading.tagName.substring(1));\r\n\t\t\tconst id = `heading-${index}-${props.divId}`;\r\n\t\t\theading.id = id;\r\n\t\t\treturn { id, text: heading.textContent, level };\r\n\t\t});\r\n\t};\r\n\r\n\t// 监听 content 变化，更新大纲\r\n\twatch(\r\n\t\t() => props.content,\r\n\t\tnewContent => {\r\n\t\t\toutline.value = extractOutline(newContent);\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\t// 检查是否存在关联章节\r\n\tconst isLinked = item => {\r\n\t\treturn linkedOutline.value.some(\r\n\t\t\tlinked => linked.leftId === item.id || linked.rightId === item.id\r\n\t\t);\r\n\t};\r\n\r\n\t// 滚动到章节\r\n\tconst scrollToChapter = id => {\r\n\t\tconst element = document.getElementById(id);\r\n\t\tif (element) {\r\n\t\t\telement.scrollIntoView({ behavior: \"smooth\" });\r\n\t\t}\r\n\t};\r\n\r\n\t// 更新按钮和大纲的相对位置\r\n\tconst updatePosition = () => {\r\n\t\tconst isDiv1 = props.divId === \"div1\";\r\n\t\tbuttonStyle.value = {\r\n\t\t\tposition: \"absolute\",\r\n\t\t\ttop: \"10px\",\r\n\t\t\t[isDiv1 ? \"right\" : \"left\"]: \"10px\"\r\n\t\t};\r\n\t\toutlineStyle.value = {\r\n\t\t\tposition: \"absolute\",\r\n\t\t\ttop: \"50px\",\r\n\t\t\t[isDiv1 ? \"right\" : \"left\"]: \"10px\",\r\n\t\t\twidth: \"260px\",\r\n\t\t\tmaxHeight: \"80vh\",\r\n\t\t\toverflowY: \"auto\",\r\n\t\t\tzIndex: \"1000\",\r\n\t\t\tbackground: \"white\",\r\n\t\t\tborderRadius: \"8px\",\r\n\t\t\tboxShadow: \"0 4px 12px rgba(0, 0, 0, 0.15)\",\r\n\t\t\tpadding: \"15px\"\r\n\t\t};\r\n\t};\r\n\r\n\t// 获取与左侧文章相关的章节\r\n\tconst getLinkedChapter = () => {\r\n\t\tconst referenceElement = document.getElementById(props.divId);\r\n\t\tif (!referenceElement) return;\r\n\r\n\t\tconst scrollY = referenceElement.scrollTop;\r\n\t\t// 计算相似章节的位置\r\n\t\tfor (let item of outline.value) {\r\n\t\t\tconst element = document.getElementById(item.id);\r\n\t\t\tif (element && element.offsetTop <= scrollY + 50) {\r\n\t\t\t\tconst linkedItem = linkedOutline.value.find(\r\n\t\t\t\t\tlinked => linked.leftId === item.id\r\n\t\t\t\t);\r\n\t\t\t\tif (linkedItem) {\r\n\t\t\t\t\tscrollToChapter(linkedItem.rightId);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// 监听窗口滚动\r\n\tconst handleScroll = () => {\r\n\t\tconst referenceElement = document.getElementById(props.divId);\r\n\t\tif (!referenceElement) return;\r\n\r\n\t\tconst scrollY = referenceElement.scrollTop;\r\n\t\tbuttonStyle.value.top = `${scrollY + 10}px`;\r\n\t\toutlineStyle.value.top = `${scrollY + 50}px`;\r\n\t\tgetLinkedChapter(); // 在滚动时同步滚动到关联章节\r\n\t};\r\n\r\n\t// 初始化\r\n\tonMounted(() => {\r\n\t\toutline.value = extractOutline(props.content);\r\n\t\tupdatePosition();\r\n\t\tconst referenceElement = document.getElementById(props.divId);\r\n\t\tif (referenceElement)\r\n\t\t\treferenceElement.addEventListener(\"scroll\", handleScroll);\r\n\t});\r\n\r\n\t// 组件销毁时移除事件\r\n\tonUnmounted(() => {\r\n\t\tconst referenceElement = document.getElementById(props.divId);\r\n\t\tif (referenceElement)\r\n\t\t\treferenceElement.removeEventListener(\"scroll\", handleScroll);\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t/* **按钮样式** */\r\n\t.toggle-btn {\r\n\t\tpadding: 10px;\r\n\t\tborder-radius: 50%;\r\n\t\tcursor: pointer;\r\n\t\tz-index: 2000;\r\n\t\tbackground-color: #0077b6;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\twidth: 36px;\r\n\t\theight: 36px;\r\n\t\tbox-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n\t\ttransition: all 0.3s ease-in-out;\r\n\t}\r\n\r\n\t/* **大纲样式** */\r\n\t.outline-container {\r\n\t\tbackground: white;\r\n\t\tborder-radius: 8px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n\t\tpadding: 15px;\r\n\t\tmax-height: 80vh;\r\n\t\toverflow-y: auto;\r\n\t\twidth: 260px;\r\n\t\ttransition: all 0.3s ease-in-out;\r\n\t}\r\n\r\n\t.outline ul {\r\n\t\tlist-style-type: none;\r\n\t\tpadding-left: 0;\r\n\t}\r\n\r\n\t.outline li {\r\n\t\tmargin-bottom: 8px;\r\n\t\tfont-size: 14px;\r\n\t\ttransition: padding-left 0.2s ease-in-out;\r\n\t}\r\n\r\n\t/* **高亮和关联章节样式** */\r\n\t.outline li.highlight a {\r\n\t\tbackground-color: #ffff00;\r\n\t\tborder-radius: 5px;\r\n\t}\r\n\r\n\t.outline li.linked a {\r\n\t\tfont-weight: bold;\r\n\t\tcolor: #0077b6;\r\n\t}\r\n\r\n\t.outline li a {\r\n\t\ttext-decoration: none;\r\n\t\tcolor: #0077b6;\r\n\t}\r\n\r\n\t.outline li a:hover {\r\n\t\ttext-decoration: underline;\r\n\t\tcolor: #005f8a;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}