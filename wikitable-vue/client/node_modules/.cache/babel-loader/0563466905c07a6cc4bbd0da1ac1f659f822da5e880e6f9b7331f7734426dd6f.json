{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeStyle as _normalizeStyle, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, withModifiers as _withModifiers, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-1f9d3193\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  key: 0,\n  class: \"icon\",\n  viewBox: \"0 0 24 24\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"path\", {\n  fill: \"currentColor\",\n  d: \"M3 6h18v2H3V6zm0 5h18v2H3v-2zm0 5h18v2H3v-2z\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_3 = [_hoisted_2];\nconst _hoisted_4 = {\n  key: 1,\n  class: \"icon close\",\n  viewBox: \"0 0 24 24\"\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"path\", {\n  fill: \"currentColor\",\n  d: \"M6 18L18 6M6 6l12 12\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_6 = [_hoisted_5];\nconst _hoisted_7 = {\n  class: \"outline\"\n};\nconst _hoisted_8 = [\"href\", \"onClick\"];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" 大纲切换按钮 \"), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = function () {\n      return _ctx.toggleOutline && _ctx.toggleOutline(...arguments);\n    }),\n    class: \"toggle-btn\",\n    style: _normalizeStyle(_ctx.buttonStyle)\n  }, [!_ctx.isVisible ? (_openBlock(), _createElementBlock(\"svg\", _hoisted_1, [..._hoisted_3])) : (_openBlock(), _createElementBlock(\"svg\", _hoisted_4, [..._hoisted_6]))], 4 /* STYLE */), _createCommentVNode(\" 大纲内容 \"), _ctx.isVisible ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: \"outline-container\",\n    style: _normalizeStyle(_ctx.outlineStyle)\n  }, [_createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.outline, (item, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: item.id,\n      class: _normalizeClass({\n        highlight: _ctx.isLinked(item),\n        linked: _ctx.isLinked(item)\n      }),\n      style: _normalizeStyle({\n        paddingLeft: `${(item.level - 1) * 15}px`\n      })\n    }, [_createElementVNode(\"a\", {\n      href: '#' + item.id,\n      onClick: _withModifiers($event => _ctx.scrollToChapter(item.id), [\"prevent\"])\n    }, _toDisplayString(item.text), 9 /* TEXT, PROPS */, _hoisted_8)], 6 /* CLASS, STYLE */);\n  }), 128 /* KEYED_FRAGMENT */))])])], 4 /* STYLE */)) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["key","class","viewBox","_createElementVNode","fill","d","_hoisted_2","_hoisted_5","_createElementBlock","_Fragment","_createCommentVNode","onClick","_cache","_ctx","toggleOutline","arguments","style","_normalizeStyle","buttonStyle","isVisible","_hoisted_1","_hoisted_3","_hoisted_4","_hoisted_6","outlineStyle","_hoisted_7","_renderList","outline","item","index","id","_normalizeClass","highlight","isLinked","linked","paddingLeft","level","href","_withModifiers","$event","scrollToChapter","text","_hoisted_8"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\ArticleOutline.vue"],"sourcesContent":["<template>\r\n\t<!-- 大纲切换按钮 -->\r\n\t<button @click=\"toggleOutline\" class=\"toggle-btn\" :style=\"buttonStyle\">\r\n\t\t<svg v-if=\"!isVisible\" class=\"icon\" viewBox=\"0 0 24 24\">\r\n\t\t\t<path\r\n\t\t\t\tfill=\"currentColor\"\r\n\t\t\t\td=\"M3 6h18v2H3V6zm0 5h18v2H3v-2zm0 5h18v2H3v-2z\"></path>\r\n\t\t</svg>\r\n\t\t<svg v-else class=\"icon close\" viewBox=\"0 0 24 24\">\r\n\t\t\t<path fill=\"currentColor\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n\t\t</svg>\r\n\t</button>\r\n\r\n\t<!-- 大纲内容 -->\r\n\t<div v-if=\"isVisible\" class=\"outline-container\" :style=\"outlineStyle\">\r\n\t\t<div class=\"outline\">\r\n\t\t\t<ul>\r\n\t\t\t\t<li\r\n\t\t\t\t\tv-for=\"(item, index) in outline\"\r\n\t\t\t\t\t:key=\"item.id\"\r\n\t\t\t\t\t:class=\"{ highlight: isLinked(item), linked: isLinked(item) }\"\r\n\t\t\t\t\t:style=\"{ paddingLeft: `${(item.level - 1) * 15}px` }\">\r\n\t\t\t\t\t<a :href=\"'#' + item.id\" @click.prevent=\"scrollToChapter(item.id)\">{{\r\n\t\t\t\t\t\titem.text\r\n\t\t\t\t\t}}</a>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\t\timport { ref, watch, onMounted, onUnmounted } from \"vue\";\r\n\t\timport eventBus from \"@/js/eventBus.js\";\r\n\r\n\t\tconst props = defineProps({\r\n\t\t\tcontent: String, // 文章 HTML\r\n\t\t\tdivId: String // \"div1\" 或 \"div3\"\r\n\t\t});\r\n\r\n\t\tconst isVisible = ref(false);\r\n\t\tconst outline = ref([]);\r\n\t\tconst buttonStyle = ref({});\r\n\t\tconst outlineStyle = ref({});\r\n\t\tconst linkedOutline = ref([]); // 共享的关联章节数据\r\n\r\n\t\t// **切换大纲的显示**\r\n\t\tconst toggleOutline = () => {\r\n\t\t\tisVisible.value = !isVisible.value;\r\n\t\t};\r\n\r\n\t\t// **解析文章，提取 h1-h6 标题**\r\n\t\tconst extractOutline = (content, containerId) => {\r\n\t\t\tif (!content) return [];\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(content, \"text/html\");\r\n\t\t\tconst headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\r\n\r\n\t\t\treturn Array.from(headings).map((heading, index) => {\r\n\t\t\t\tconst level = parseInt(heading.tagName.substring(1));\r\n\t\t\t\tconst id = `heading-${index}-${containerId}`;\r\n\t\t\t\theading.id = id;\r\n\t\t\t\treturn { id, text: heading.textContent, level };\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t// **动态生成关联关系**    结合 标准化处理 + 编辑距离 + 关键词匹配\r\n\t  const normalizeText = text => {\r\n\t\t// 去除标点符号，多余的空格，换行符，并转换为小写\r\n\t\treturn text\r\n\t\t\t.replace(/[^\\w\\s]/g, '') // 去除标点符号\r\n\t\t\t.trim()\r\n\t\t\t.replace(/\\s+/g, ' ')\r\n\t\t\t.toLowerCase();\r\n\t};\r\n\r\n\t// 计算 Levenshtein 编辑距离\r\n\tconst levenshteinDistance = (a, b) => {\r\n\t\tconst dp = Array(a.length + 1)\r\n\t\t\t.fill(null)\r\n\t\t\t.map(() => Array(b.length + 1).fill(0));\r\n\r\n\t\tfor (let i = 0; i <= a.length; i++) dp[i][0] = i;\r\n\t\tfor (let j = 0; j <= b.length; j++) dp[0][j] = j;\r\n\r\n\t\tfor (let i = 1; i <= a.length; i++) {\r\n\t\t\tfor (let j = 1; j <= b.length; j++) {\r\n\t\t\t\tconst cost = a[i - 1] === b[j - 1] ? 0 : 1;\r\n\t\t\t\tdp[i][j] = Math.min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + cost);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn dp[a.length][b.length];\r\n\t};\r\n\r\n\t// 同义词表\r\n\tconst synonyms = {\r\n\t\tintroduction: ['overview', 'preface'],\r\n\t\tsummary: ['conclusion', 'recap'],\r\n\t\tchapter: ['section', 'part'],\r\n\t\t// 添加更多同义词\r\n\t};\r\n\r\n\t// 获取同义词\r\n\tconst getSynonyms = word => synonyms[word] || [word];\r\n\r\n\t// 判断是否有相同的同义词\r\n\tconst hasCommonSynonyms = (text1, text2) => {\r\n\t\tconst words1 = text1.split(/\\s+/);\r\n\t\tconst words2 = text2.split(/\\s+/);\r\n\r\n\t\tfor (const word1 of words1) {\r\n\t\t\tconst synonyms1 = getSynonyms(word1);\r\n\t\t\tfor (const word2 of words2) {\r\n\t\t\t\tconst synonyms2 = getSynonyms(word2);\r\n\t\t\t\tif (synonyms1.some(syn => synonyms2.includes(syn))) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t// 关联大纲\r\n\tconst generateLinkedOutline = (outline1, outline2) => {\r\n\t\tconst linked = [];\r\n\t\tconst matchedIds = new Set(); // 记录已匹配的 ID，防止重复匹配\r\n\r\n\t\t// **第一轮：完全匹配**\r\n\t\toutline1.forEach(item1 => {\r\n\t\t\toutline2.forEach(item2 => {\r\n\t\t\t\tif (normalizeText(item1.text) === normalizeText(item2.text)) {\r\n\t\t\t\t\tlinked.push({ leftId: item1.id, rightId: item2.id });\r\n\t\t\t\t\tmatchedIds.add(item1.id);\r\n\t\t\t\t\tmatchedIds.add(item2.id);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t// **第二轮：同义词匹配**\r\n\t\toutline1.forEach(item1 => {\r\n\t\t\tif (matchedIds.has(item1.id)) return;\r\n\t\t\toutline2.forEach(item2 => {\r\n\t\t\t\tif (matchedIds.has(item2.id)) return;\r\n\t\t\t\tif (hasCommonSynonyms(normalizeText(item1.text), normalizeText(item2.text)) {\r\n\t\t\t\t\tlinked.push({ leftId: item1.id, rightId: item2.id });\r\n\t\t\t\t\tmatchedIds.add(item1.id);\r\n\t\t\t\t\tmatchedIds.add(item2.id);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t// **第三轮：编辑距离匹配**\r\n\t\toutline1.forEach(item1 => {\r\n\t\t\tif (matchedIds.has(item1.id)) return;\r\n\t\t\toutline2.forEach(item2 => {\r\n\t\t\t\tif (matchedIds.has(item2.id)) return;\r\n\t\t\t\tif (levenshteinDistance(normalizeText(item1.text), normalizeText(item2.text)) <= 3) {\r\n\t\t\t\t\tlinked.push({ leftId: item1.id, rightId: item2.id });\r\n\t\t\t\t\tmatchedIds.add(item1.id);\r\n\t\t\t\t\tmatchedIds.add(item2.id);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\treturn linked;\r\n\t};\r\n\r\n\t\t// **监听 content 变化，更新大纲**\r\n\t\twatch(\r\n\t\t\t() => props.content,\r\n\t\t\tnewContent => {\r\n\t\t\t\toutline.value = extractOutline(newContent, props.divId);\r\n\r\n\t\t\t\t// 提取另一个容器的大纲数据\r\n\t\t\t\tconst otherContainerId = props.divId === \"div1\" ? \"div3\" : \"div1\";\r\n\t\t\t\tconst otherContainer = document.getElementById(otherContainerId);\r\n\t\t\t\tif (otherContainer) {\r\n\t\t\t\t\tconst otherContent = otherContainer.innerHTML;\r\n\t\t\t\t\tconst otherOutline = extractOutline(otherContent, otherContainerId);\r\n\t\t\t\t\tconst newLinkedOutline = generateLinkedOutline(\r\n\t\t\t\t\t\toutline.value,\r\n\t\t\t\t\t\totherOutline\r\n\t\t\t\t\t);\r\n\t\t\t\t\tlinkedOutline.value = newLinkedOutline;\r\n\r\n\t\t\t\t\t// 通过 eventBus 通知另一个大纲组件\r\n\t\t\t\t\teventBus.emit(\"update-linked-outline\", newLinkedOutline);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{ immediate: true }\r\n\t\t);\r\n\r\n\t\t// **监听 eventBus，确保两边大纲同步**\r\n\t\teventBus.on(\"update-linked-outline\", newLinkedOutline => {\r\n\t\t\tlinkedOutline.value = newLinkedOutline;\r\n\t\t});\r\n\r\n\t\t// **检查是否存在关联章节**\r\n\t\tconst isLinked = item =>\r\n\t\t\tlinkedOutline.value.some(\r\n\t\t\t\tlinked => linked.leftId === item.id || linked.rightId === item.id\r\n\t\t\t);\r\n\r\n\t\t// **滚动到章节**\r\n\t\tconst scrollToChapter = id => {\r\n\t\t\t// 跳转到当前文章的章节\r\n\t\t\tconst element = document.getElementById(id);\r\n\t\t\tif (element) element.scrollIntoView({ behavior: \"smooth\" });\r\n\r\n\t\t\t// 找到关联章节并跳转\r\n\t\t\tconst linkedItem = linkedOutline.value.find(\r\n\t\t\t\tlinked => linked.leftId === id || linked.rightId === id\r\n\t\t\t);\r\n\t\t\tif (linkedItem) {\r\n\t\t\t\tconst targetId =\r\n\t\t\t\t\tlinkedItem.leftId === id ? linkedItem.rightId : linkedItem.leftId;\r\n\t\t\t\teventBus.emit(\"scroll-to-chapter\", targetId);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// **监听 eventBus，确保两个组件同步跳转**\r\n\t\teventBus.on(\"scroll-to-chapter\", targetId => {\r\n\t\t\tconst targetElement = document.getElementById(targetId);\r\n\t\t\tif (targetElement) targetElement.scrollIntoView({ behavior: \"smooth\" });\r\n\t\t});\r\n\r\n\t\t// **更新按钮和大纲的相对位置**\r\n\t\tconst updatePosition = () => {\r\n\t\t\tconst isDiv1 = props.divId === \"div1\";\r\n\t\t\tbuttonStyle.value = {\r\n\t\t\t\tposition: \"absolute\",\r\n\t\t\t\ttop: \"10px\",\r\n\t\t\t\t[isDiv1 ? \"right\" : \"left\"]: \"10px\"\r\n\t\t\t};\r\n\t\t\toutlineStyle.value = {\r\n\t\t\t\tposition: \"absolute\",\r\n\t\t\t\ttop: \"50px\",\r\n\t\t\t\t[isDiv1 ? \"right\" : \"left\"]: \"10px\",\r\n\t\t\t\twidth: \"260px\",\r\n\t\t\t\tmaxHeight: \"80vh\",\r\n\t\t\t\toverflowY: \"auto\",\r\n\t\t\t\tzIndex: \"1000\",\r\n\t\t\t\tbackground: \"white\",\r\n\t\t\t\tborderRadius: \"8px\",\r\n\t\t\t\tboxShadow: \"0 4px 12px rgba(0, 0, 0, 0.15)\",\r\n\t\t\t\tpadding: \"15px\"\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\t// **窗口滚动时更新大纲位置**\r\n\t\tconst handleScroll = () => {\r\n\t\t\tconst referenceElement = document.getElementById(props.divId);\r\n\t\t\tif (!referenceElement) return;\r\n\r\n\t\t\tconst scrollY = referenceElement.scrollTop;\r\n\t\t\tbuttonStyle.value.top = `${scrollY + 10}px`;\r\n\t\t\toutlineStyle.value.top = `${scrollY + 50}px`;\r\n\t\t};\r\n\r\n\t\t// **初始化**\r\n\t\tonMounted(() => {\r\n\t\t\toutline.value = extractOutline(props.content, props.divId);\r\n\t\t\tupdatePosition();\r\n\t\t\tconst referenceElement = document.getElementById(props.divId);\r\n\t\t\tif (referenceElement)\r\n\t\t\t\treferenceElement.addEventListener(\"scroll\", handleScroll);\r\n\t\t});\r\n\r\n\t\t// **组件销毁时移除事件**\r\n\t\tonUnmounted(() => {\r\n\t\t\tconst referenceElement = document.getElementById(props.divId);\r\n\t\t\tif (referenceElement)\r\n\t\t\t\treferenceElement.removeEventListener(\"scroll\", handleScroll);\r\n\t\t\teventBus.off(\"update-linked-outline\");\r\n\t\t\teventBus.off(\"scroll-to-chapter\");\r\n\t\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t/* **按钮样式** */\r\n\t.toggle-btn {\r\n\t\tpadding: 10px;\r\n\t\tborder-radius: 50%;\r\n\t\tcursor: pointer;\r\n\t\tz-index: 2000;\r\n\t\tbackground-color: #0077b6;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\twidth: 36px;\r\n\t\theight: 36px;\r\n\t\tbox-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n\t\ttransition: all 0.3s ease-in-out;\r\n\t}\r\n\r\n\t/* **大纲样式** */\r\n\t.outline-container {\r\n\t\tbackground: white;\r\n\t\tborder-radius: 8px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n\t\tpadding: 15px;\r\n\t\tmax-height: 80vh;\r\n\t\toverflow-y: auto;\r\n\t\twidth: 260px;\r\n\t\ttransition: all 0.3s ease-in-out;\r\n\t}\r\n\r\n\t.outline ul {\r\n\t\tlist-style-type: none;\r\n\t\tpadding-left: 0;\r\n\t}\r\n\r\n\t.outline li {\r\n\t\tmargin-bottom: 8px;\r\n\t\tfont-size: 14px;\r\n\t\ttransition: padding-left 0.2s ease-in-out;\r\n\t}\r\n\r\n\t/* **高亮和关联章节样式** */\r\n\t.outline li.highlight a {\r\n\t\tbackground-color: #ffff00;\r\n\t\tborder-radius: 5px;\r\n\t}\r\n\r\n\t.outline li.linked a {\r\n\t\tfont-weight: bold;\r\n\t\tcolor: #0077b6;\r\n\t}\r\n\r\n\t.outline li a {\r\n\t\ttext-decoration: none;\r\n\t\tcolor: #0077b6;\r\n\t}\r\n\r\n\t.outline li a:hover {\r\n\t\ttext-decoration: underline;\r\n\t\tcolor: #005f8a;\r\n\t}\r\n</style>\r\n"],"mappings":";;;EAAAA,GAAA;EAGyBC,KAAK,EAAC,MAAM;EAACC,OAAO,EAAC;;gEAC3CC,mBAAA,CAEyD;EADxDC,IAAI,EAAC,cAAc;EACnBC,CAAC,EAAC;;oBAFHC,UAEyD,C;;EAN5DN,GAAA;EAQcC,KAAK,EAAC,YAAY;EAACC,OAAO,EAAC;;gEACtCC,mBAAA,CAA0D;EAApDC,IAAI,EAAC,cAAc;EAACC,CAAC,EAAC;;oBAA5BE,UAA0D,C;;EAMtDN,KAAK,EAAC;AAAS;mBAftB;;uBAAAO,mBAAA,CAAAC,SAAA,SACCC,mBAAA,YAAe,EACfP,mBAAA,CASS;IATAQ,OAAK,EAAAC,MAAA,QAAAA,MAAA;MAAA,OAAEC,IAAA,CAAAC,aAAA,IAAAD,IAAA,CAAAC,aAAA,IAAAC,SAAA,CAAa;IAAA;IAAEd,KAAK,EAAC,YAAY;IAAEe,KAAK,EAFzDC,eAAA,CAE2DJ,IAAA,CAAAK,WAAW;OACxDL,IAAA,CAAAM,SAAS,I,cAArBX,mBAAA,CAIM,OAJNY,UAIM,EAPR,IAAAC,UAAA,O,cAQEb,mBAAA,CAEM,OAFNc,UAEM,EAVR,IAAAC,UAAA,I,kBAaCb,mBAAA,UAAa,EACFG,IAAA,CAAAM,SAAS,I,cAApBX,mBAAA,CAcM;IA5BPR,GAAA;IAcuBC,KAAK,EAAC,mBAAmB;IAAEe,KAAK,EAdvDC,eAAA,CAcyDJ,IAAA,CAAAW,YAAY;MACnErB,mBAAA,CAYM,OAZNsB,UAYM,GAXLtB,mBAAA,CAUK,c,kBATJK,mBAAA,CAQKC,SAAA,QAzBTiB,WAAA,CAkB6Bb,IAAA,CAAAc,OAAO,EAlBpC,CAkBaC,IAAI,EAAEC,KAAK;yBADpBrB,mBAAA,CAQK;MANHR,GAAG,EAAE4B,IAAI,CAACE,EAAE;MACZ7B,KAAK,EApBX8B,eAAA;QAAAC,SAAA,EAoB0BnB,IAAA,CAAAoB,QAAQ,CAACL,IAAI;QAAAM,MAAA,EAAWrB,IAAA,CAAAoB,QAAQ,CAACL,IAAI;MAAA;MACzDZ,KAAK,EArBXC,eAAA;QAAAkB,WAAA,MAqBgCP,IAAI,CAACQ,KAAK;MAAA;QACrCjC,mBAAA,CAEM;MAFFkC,IAAI,QAAQT,IAAI,CAACE,EAAE;MAAGnB,OAAK,EAtBpC2B,cAAA,CAAAC,MAAA,IAsB8C1B,IAAA,CAAA2B,eAAe,CAACZ,IAAI,CAACE,EAAE;wBAC/DF,IAAI,CAACa,IAAI,wBAvBfC,UAAA,E;yDAAAhC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}