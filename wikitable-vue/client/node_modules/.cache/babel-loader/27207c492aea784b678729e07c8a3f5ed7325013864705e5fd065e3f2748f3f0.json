{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, computed, watch } from \"vue\";\nimport LoadingSpinner from \"./LoadingSpinner.vue\";\nexport default {\n  __name: 'CompareTable',\n  props: {\n    div1RawData: String,\n    div3RawData: String\n  },\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const props = __props;\n\n    // 表格数据\n    const processedTable1 = ref({\n      title: \"表格1\",\n      rows: [],\n      columns: []\n    });\n    const processedTable2 = ref({\n      title: \"表格2\",\n      rows: [],\n      columns: []\n    });\n    const isLoading = ref(false);\n\n    // 计算属性\n    const hasData = computed(() => {\n      return props.div1RawData && props.div3RawData && processedTable1.value.columns.length > 0 && processedTable2.value.columns.length > 0;\n    });\n    const commonYears = computed(() => {\n      const years1 = processedTable1.value.columns.map(col => col.data.Year).filter(y => !isNaN(y));\n      const years2 = processedTable2.value.columns.map(col => col.data.Year).filter(y => !isNaN(y));\n      return [...new Set([...years1, ...years2])].sort((a, b) => a - b);\n    });\n    const commonAttributes = computed(() => {\n      const attrs1 = processedTable1.value.rows || [];\n      const attrs2 = processedTable2.value.rows || [];\n      return attrs1.filter(attr => attrs2.includes(attr) && ![\"Year\", \"Team\", \"Season\"].includes(attr) && (hasDataForAttribute(processedTable1.value, attr) || hasDataForAttribute(processedTable2.value, attr)));\n    });\n\n    // 监听数据变化\n    watch(() => [props.div1RawData, props.div3RawData], async () => {\n      if (props.div1RawData || props.div3RawData) {\n        isLoading.value = true;\n        try {\n          if (props.div1RawData) {\n            processedTable1.value = parseTableToStandardJSON(props.div1RawData, \"表格1\");\n          }\n          if (props.div3RawData) {\n            processedTable2.value = parseTableToStandardJSON(props.div3RawData, \"表格2\");\n          }\n        } finally {\n          isLoading.value = false;\n        }\n      }\n    }, {\n      immediate: true\n    });\n\n    // 获取序列数据\n    function getSeriesData(table, attr) {\n      return commonYears.value.map(year => getValueByYear(table, year, attr));\n    }\n\n    // 按年份查找值\n    function getValueByYear(table, year, attr) {\n      const record = table.columns.find(col => col.data.Year == year && col.data[attr] !== undefined);\n      return record ? parseFloat(record.data[attr]) : null;\n    }\n\n    // 标准化值到0-100%范围\n    function normalizeValue(value, attr) {\n      if (value === null) return 0;\n\n      // 特殊处理百分比数据\n      if (attr.includes(\"%\")) {\n        return value * 100;\n      }\n\n      // 自动计算比例（基于当前数据范围）\n      const allValues = [...getSeriesData(processedTable1.value, attr), ...getSeriesData(processedTable2.value, attr)].filter(v => v !== null);\n      if (allValues.length === 0) return 0;\n      const max = Math.max(...allValues);\n      const min = Math.min(...allValues);\n      const range = max - min;\n      return range !== 0 ? (value - min) / range * 100 : 50;\n    }\n\n    // 检查属性是否有有效数据\n    function hasDataForAttribute(table, attr) {\n      return table.columns.some(col => col.data[attr] !== undefined && col.data[attr] !== null && !isNaN(col.data[attr]));\n    }\n\n    // 计算平均值\n    function getAverage(table, attr) {\n      const values = table.columns.map(col => col.data[attr]).filter(v => typeof v === \"number\");\n      return values.length ? (values.reduce((a, b) => a + b, 0) / values.length).toFixed(2) : \"N/A\";\n    }\n\n    // 属性名称映射\n    function getAttributeName(attr) {\n      const nameMap = {\n        GP: \"出场次数\",\n        GS: \"首发次数\",\n        MPG: \"场均时间(分钟)\",\n        PPG: \"场均得分\",\n        APG: \"场均助攻\",\n        RPG: \"场均篮板\",\n        SPG: \"场均抢断\",\n        BPG: \"场均盖帽\",\n        \"FG%\": \"投篮命中率\",\n        \"3P%\": \"三分命中率\",\n        \"FT%\": \"罚球命中率\"\n      };\n      return nameMap[attr] || attr;\n    }\n\n    // 属性单位\n    function getAttributeUnit(attr) {\n      if (attr.includes(\"%\")) return \"百分比\";\n      if (attr === \"MPG\") return \"分钟\";\n      if (attr.includes(\"PG\")) return \"次数\";\n      return \"\";\n    }\n\n    // 表格解析方法\n    function parseTableToStandardJSON(html) {\n      let defaultTitle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"未命名表格\";\n      const result = {\n        title: extractTitleFromHTML(html) || defaultTitle,\n        rows: [],\n        columns: []\n      };\n      try {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(html, \"text/html\");\n        const table = doc.querySelector(\"table\");\n        if (!table) return result;\n\n        // 提取表头\n        const headerRow = table.querySelector(\"tr\");\n        if (!headerRow) return result;\n        const headers = Array.from(headerRow.children).map(cell => {\n          const abbr = cell.querySelector(\"abbr\");\n          return (abbr?.title || cell.textContent).trim().replace(/[\\n†*]/g, \"\");\n        });\n        result.rows = headers;\n\n        // 提取数据行\n        const dataRows = Array.from(table.querySelectorAll(\"tr:not(:first-child)\"));\n        dataRows.forEach(row => {\n          const cells = Array.from(row.children);\n          if (cells.length === 0) return;\n          const recordName = cells[0].textContent.trim().replace(/[\\n†*]/g, \"\");\n          const recordData = {};\n          headers.forEach((header, index) => {\n            if (index < cells.length) {\n              let value = cells[index].textContent.trim();\n              recordData[header] = smartValueConversion(value);\n            }\n          });\n          result.columns.push({\n            name: recordName,\n            data: recordData\n          });\n        });\n        return result;\n      } catch (error) {\n        console.error(\"表格解析错误:\", error);\n        return result;\n      }\n    }\n\n    // 智能值类型转换\n    function smartValueConversion(rawValue) {\n      if (!rawValue || [\"-\", \"—\", \"N/A\"].includes(rawValue)) return null;\n      if (/^\\.\\d+$/.test(rawValue)) return parseFloat(rawValue);\n      const numericValue = parseFloat(rawValue.replace(/[^\\d.-]/g, \"\"));\n      return isNaN(numericValue) ? rawValue : numericValue;\n    }\n\n    // 从HTML提取标题\n    function extractTitleFromHTML(html) {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(html, \"text/html\");\n      return doc.querySelector(\"h1, h2, h3, h4, caption\")?.textContent.trim() || null;\n    }\n    const __returned__ = {\n      props,\n      processedTable1,\n      processedTable2,\n      isLoading,\n      hasData,\n      commonYears,\n      commonAttributes,\n      getSeriesData,\n      getValueByYear,\n      normalizeValue,\n      hasDataForAttribute,\n      getAverage,\n      getAttributeName,\n      getAttributeUnit,\n      parseTableToStandardJSON,\n      smartValueConversion,\n      extractTitleFromHTML,\n      ref,\n      computed,\n      watch,\n      LoadingSpinner\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","watch","LoadingSpinner","props","__props","processedTable1","title","rows","columns","processedTable2","isLoading","hasData","div1RawData","div3RawData","value","length","commonYears","years1","map","col","data","Year","filter","y","isNaN","years2","Set","sort","a","b","commonAttributes","attrs1","attrs2","attr","includes","hasDataForAttribute","parseTableToStandardJSON","immediate","getSeriesData","table","year","getValueByYear","record","find","undefined","parseFloat","normalizeValue","allValues","v","max","Math","min","range","some","getAverage","values","reduce","toFixed","getAttributeName","nameMap","GP","GS","MPG","PPG","APG","RPG","SPG","BPG","getAttributeUnit","html","defaultTitle","arguments","result","extractTitleFromHTML","parser","DOMParser","doc","parseFromString","querySelector","headerRow","headers","Array","from","children","cell","abbr","textContent","trim","replace","dataRows","querySelectorAll","forEach","row","cells","recordName","recordData","header","index","smartValueConversion","push","name","error","console","rawValue","test","numericValue"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/CompareTable.vue"],"sourcesContent":["<template>\r\n\t<div class=\"compare-container\">\r\n\t\t<!-- 加载状态 -->\r\n\t\t<LoadingSpinner v-if=\"isLoading\" message=\"正在处理表格数据...\" />\r\n\r\n\t\t<!-- 对比图表 -->\r\n\t\t<template v-else>\r\n\t\t\t<div v-if=\"hasData\" class=\"charts-container\">\r\n\t\t\t\t<!-- 每个属性生成一个对比图表 -->\r\n\t\t\t\t<div v-for=\"attr in commonAttributes\" :key=\"attr\" class=\"chart-card\">\r\n\t\t\t\t\t<h3 class=\"chart-title\">{{ getAttributeName(attr) }}</h3>\r\n\r\n\t\t\t\t\t<div class=\"chart-wrapper\">\r\n\t\t\t\t\t\t<!-- 图例 -->\r\n\t\t\t\t\t\t<div class=\"chart-legend\">\r\n\t\t\t\t\t\t\t<span class=\"legend-item table1\">\r\n\t\t\t\t\t\t\t\t{{ processedTable1.title }}\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t<span class=\"legend-item table2\">\r\n\t\t\t\t\t\t\t\t{{ processedTable2.title }}\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<!-- 图表主体 -->\r\n\t\t\t\t\t\t<div class=\"time-series-chart\">\r\n\t\t\t\t\t\t\t<!-- Y轴标签 -->\r\n\t\t\t\t\t\t\t<div class=\"y-axis\">\r\n\t\t\t\t\t\t\t\t<span>{{ getAttributeUnit(attr) }}</span>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<!-- 图表内容 -->\r\n\t\t\t\t\t\t\t<div class=\"chart-content\">\r\n\t\t\t\t\t\t\t\t<!-- X轴年份标签 -->\r\n\t\t\t\t\t\t\t\t<div class=\"x-axis\">\r\n\t\t\t\t\t\t\t\t\t<div v-for=\"year in commonYears\" :key=\"year\" class=\"tick\">\r\n\t\t\t\t\t\t\t\t\t\t{{ year }}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t<!-- 数据线 -->\r\n\t\t\t\t\t\t\t\t<div class=\"data-lines\">\r\n\t\t\t\t\t\t\t\t\t<!-- 表格1数据线 -->\r\n\t\t\t\t\t\t\t\t\t<div class=\"data-line table1\">\r\n\t\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\t\tv-for=\"(value, index) in getSeriesData(\r\n\t\t\t\t\t\t\t\t\t\t\t\tprocessedTable1,\r\n\t\t\t\t\t\t\t\t\t\t\t\tattr\r\n\t\t\t\t\t\t\t\t\t\t\t)\"\r\n\t\t\t\t\t\t\t\t\t\t\t:key=\"'table1-' + index\"\r\n\t\t\t\t\t\t\t\t\t\t\tclass=\"data-point\"\r\n\t\t\t\t\t\t\t\t\t\t\t:style=\"{\r\n\t\t\t\t\t\t\t\t\t\t\t\tleft: `${index * (100 / (commonYears.length - 1))}%`,\r\n\t\t\t\t\t\t\t\t\t\t\t\tbottom: `${normalizeValue(value, attr)}%`,\r\n\t\t\t\t\t\t\t\t\t\t\t\topacity: value !== null ? 1 : 0\r\n\t\t\t\t\t\t\t\t\t\t\t}\"\r\n\t\t\t\t\t\t\t\t\t\t\t:title=\"`${processedTable1.title} ${\r\n\t\t\t\t\t\t\t\t\t\t\t\tcommonYears[index]\r\n\t\t\t\t\t\t\t\t\t\t\t}: ${value !== null ? value : '无数据'}`\"></div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t\t<!-- 表格2数据线 -->\r\n\t\t\t\t\t\t\t\t\t<div class=\"data-line table2\">\r\n\t\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\t\tv-for=\"(value, index) in getSeriesData(\r\n\t\t\t\t\t\t\t\t\t\t\t\tprocessedTable2,\r\n\t\t\t\t\t\t\t\t\t\t\t\tattr\r\n\t\t\t\t\t\t\t\t\t\t\t)\"\r\n\t\t\t\t\t\t\t\t\t\t\t:key=\"'table2-' + index\"\r\n\t\t\t\t\t\t\t\t\t\t\tclass=\"data-point\"\r\n\t\t\t\t\t\t\t\t\t\t\t:style=\"{\r\n\t\t\t\t\t\t\t\t\t\t\t\tleft: `${index * (100 / (commonYears.length - 1))}%`,\r\n\t\t\t\t\t\t\t\t\t\t\t\tbottom: `${normalizeValue(value, attr)}%`,\r\n\t\t\t\t\t\t\t\t\t\t\t\topacity: value !== null ? 1 : 0\r\n\t\t\t\t\t\t\t\t\t\t\t}\"\r\n\t\t\t\t\t\t\t\t\t\t\t:title=\"`${processedTable2.title} ${\r\n\t\t\t\t\t\t\t\t\t\t\t\tcommonYears[index]\r\n\t\t\t\t\t\t\t\t\t\t\t}: ${value !== null ? value : '无数据'}`\"></div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<!-- 统计摘要 -->\r\n\t\t\t\t\t<div class=\"stats-summary\">\r\n\t\t\t\t\t\t<div class=\"stat-item\">\r\n\t\t\t\t\t\t\t<span class=\"stat-label\">{{ processedTable1.title }}平均:</span>\r\n\t\t\t\t\t\t\t<span class=\"stat-value\">{{\r\n\t\t\t\t\t\t\t\tgetAverage(processedTable1, attr)\r\n\t\t\t\t\t\t\t}}</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"stat-item\">\r\n\t\t\t\t\t\t\t<span class=\"stat-label\">{{ processedTable2.title }}平均:</span>\r\n\t\t\t\t\t\t\t<span class=\"stat-value\">{{\r\n\t\t\t\t\t\t\t\tgetAverage(processedTable2, attr)\r\n\t\t\t\t\t\t\t}}</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div v-else class=\"empty-state\">请先从左/右侧选择两个表格进行对比</div>\r\n\t\t</template>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, watch } from \"vue\";\r\n\timport LoadingSpinner from \"./LoadingSpinner.vue\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdiv1RawData: String,\r\n\t\tdiv3RawData: String\r\n\t});\r\n\r\n\t// 表格数据\r\n\tconst processedTable1 = ref({ title: \"表格1\", rows: [], columns: [] });\r\n\tconst processedTable2 = ref({ title: \"表格2\", rows: [], columns: [] });\r\n\tconst isLoading = ref(false);\r\n\r\n\t// 计算属性\r\n\tconst hasData = computed(() => {\r\n\t\treturn (\r\n\t\t\tprops.div1RawData &&\r\n\t\t\tprops.div3RawData &&\r\n\t\t\tprocessedTable1.value.columns.length > 0 &&\r\n\t\t\tprocessedTable2.value.columns.length > 0\r\n\t\t);\r\n\t});\r\n\r\n\tconst commonYears = computed(() => {\r\n\t\tconst years1 = processedTable1.value.columns\r\n\t\t\t.map(col => col.data.Year)\r\n\t\t\t.filter(y => !isNaN(y));\r\n\r\n\t\tconst years2 = processedTable2.value.columns\r\n\t\t\t.map(col => col.data.Year)\r\n\t\t\t.filter(y => !isNaN(y));\r\n\r\n\t\treturn [...new Set([...years1, ...years2])].sort((a, b) => a - b);\r\n\t});\r\n\r\n\tconst commonAttributes = computed(() => {\r\n\t\tconst attrs1 = processedTable1.value.rows || [];\r\n\t\tconst attrs2 = processedTable2.value.rows || [];\r\n\t\treturn attrs1.filter(\r\n\t\t\tattr =>\r\n\t\t\t\tattrs2.includes(attr) &&\r\n\t\t\t\t![\"Year\", \"Team\", \"Season\"].includes(attr) &&\r\n\t\t\t\t(hasDataForAttribute(processedTable1.value, attr) ||\r\n\t\t\t\t\thasDataForAttribute(processedTable2.value, attr))\r\n\t\t);\r\n\t});\r\n\r\n\t// 监听数据变化\r\n\twatch(\r\n\t\t() => [props.div1RawData, props.div3RawData],\r\n\t\tasync () => {\r\n\t\t\tif (props.div1RawData || props.div3RawData) {\r\n\t\t\t\tisLoading.value = true;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (props.div1RawData) {\r\n\t\t\t\t\t\tprocessedTable1.value = parseTableToStandardJSON(\r\n\t\t\t\t\t\t\tprops.div1RawData,\r\n\t\t\t\t\t\t\t\"表格1\"\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (props.div3RawData) {\r\n\t\t\t\t\t\tprocessedTable2.value = parseTableToStandardJSON(\r\n\t\t\t\t\t\t\tprops.div3RawData,\r\n\t\t\t\t\t\t\t\"表格2\"\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t} finally {\r\n\t\t\t\t\tisLoading.value = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\t// 获取序列数据\r\n\tfunction getSeriesData(table, attr) {\r\n\t\treturn commonYears.value.map(year => getValueByYear(table, year, attr));\r\n\t}\r\n\r\n\t// 按年份查找值\r\n\tfunction getValueByYear(table, year, attr) {\r\n\t\tconst record = table.columns.find(\r\n\t\t\tcol => col.data.Year == year && col.data[attr] !== undefined\r\n\t\t);\r\n\t\treturn record ? parseFloat(record.data[attr]) : null;\r\n\t}\r\n\r\n\t// 标准化值到0-100%范围\r\n\tfunction normalizeValue(value, attr) {\r\n\t\tif (value === null) return 0;\r\n\r\n\t\t// 特殊处理百分比数据\r\n\t\tif (attr.includes(\"%\")) {\r\n\t\t\treturn value * 100;\r\n\t\t}\r\n\r\n\t\t// 自动计算比例（基于当前数据范围）\r\n\t\tconst allValues = [\r\n\t\t\t...getSeriesData(processedTable1.value, attr),\r\n\t\t\t...getSeriesData(processedTable2.value, attr)\r\n\t\t].filter(v => v !== null);\r\n\r\n\t\tif (allValues.length === 0) return 0;\r\n\r\n\t\tconst max = Math.max(...allValues);\r\n\t\tconst min = Math.min(...allValues);\r\n\t\tconst range = max - min;\r\n\r\n\t\treturn range !== 0 ? ((value - min) / range) * 100 : 50;\r\n\t}\r\n\r\n\t// 检查属性是否有有效数据\r\n\tfunction hasDataForAttribute(table, attr) {\r\n\t\treturn table.columns.some(\r\n\t\t\tcol =>\r\n\t\t\t\tcol.data[attr] !== undefined &&\r\n\t\t\t\tcol.data[attr] !== null &&\r\n\t\t\t\t!isNaN(col.data[attr])\r\n\t\t);\r\n\t}\r\n\r\n\t// 计算平均值\r\n\tfunction getAverage(table, attr) {\r\n\t\tconst values = table.columns\r\n\t\t\t.map(col => col.data[attr])\r\n\t\t\t.filter(v => typeof v === \"number\");\r\n\t\treturn values.length\r\n\t\t\t? (values.reduce((a, b) => a + b, 0) / values.length).toFixed(2)\r\n\t\t\t: \"N/A\";\r\n\t}\r\n\r\n\t// 属性名称映射\r\n\tfunction getAttributeName(attr) {\r\n\t\tconst nameMap = {\r\n\t\t\tGP: \"出场次数\",\r\n\t\t\tGS: \"首发次数\",\r\n\t\t\tMPG: \"场均时间(分钟)\",\r\n\t\t\tPPG: \"场均得分\",\r\n\t\t\tAPG: \"场均助攻\",\r\n\t\t\tRPG: \"场均篮板\",\r\n\t\t\tSPG: \"场均抢断\",\r\n\t\t\tBPG: \"场均盖帽\",\r\n\t\t\t\"FG%\": \"投篮命中率\",\r\n\t\t\t\"3P%\": \"三分命中率\",\r\n\t\t\t\"FT%\": \"罚球命中率\"\r\n\t\t};\r\n\t\treturn nameMap[attr] || attr;\r\n\t}\r\n\r\n\t// 属性单位\r\n\tfunction getAttributeUnit(attr) {\r\n\t\tif (attr.includes(\"%\")) return \"百分比\";\r\n\t\tif (attr === \"MPG\") return \"分钟\";\r\n\t\tif (attr.includes(\"PG\")) return \"次数\";\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t// 表格解析方法\r\n\tfunction parseTableToStandardJSON(html, defaultTitle = \"未命名表格\") {\r\n\t\tconst result = {\r\n\t\t\ttitle: extractTitleFromHTML(html) || defaultTitle,\r\n\t\t\trows: [],\r\n\t\t\tcolumns: []\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\t\tconst table = doc.querySelector(\"table\");\r\n\t\t\tif (!table) return result;\r\n\r\n\t\t\t// 提取表头\r\n\t\t\tconst headerRow = table.querySelector(\"tr\");\r\n\t\t\tif (!headerRow) return result;\r\n\r\n\t\t\tconst headers = Array.from(headerRow.children).map(cell => {\r\n\t\t\t\tconst abbr = cell.querySelector(\"abbr\");\r\n\t\t\t\treturn (abbr?.title || cell.textContent).trim().replace(/[\\n†*]/g, \"\");\r\n\t\t\t});\r\n\t\t\tresult.rows = headers;\r\n\r\n\t\t\t// 提取数据行\r\n\t\t\tconst dataRows = Array.from(\r\n\t\t\t\ttable.querySelectorAll(\"tr:not(:first-child)\")\r\n\t\t\t);\r\n\t\t\tdataRows.forEach(row => {\r\n\t\t\t\tconst cells = Array.from(row.children);\r\n\t\t\t\tif (cells.length === 0) return;\r\n\r\n\t\t\t\tconst recordName = cells[0].textContent.trim().replace(/[\\n†*]/g, \"\");\r\n\t\t\t\tconst recordData = {};\r\n\r\n\t\t\t\theaders.forEach((header, index) => {\r\n\t\t\t\t\tif (index < cells.length) {\r\n\t\t\t\t\t\tlet value = cells[index].textContent.trim();\r\n\t\t\t\t\t\trecordData[header] = smartValueConversion(value);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tresult.columns.push({\r\n\t\t\t\t\tname: recordName,\r\n\t\t\t\t\tdata: recordData\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\treturn result;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"表格解析错误:\", error);\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\n\t// 智能值类型转换\r\n\tfunction smartValueConversion(rawValue) {\r\n\t\tif (!rawValue || [\"-\", \"—\", \"N/A\"].includes(rawValue)) return null;\r\n\t\tif (/^\\.\\d+$/.test(rawValue)) return parseFloat(rawValue);\r\n\t\tconst numericValue = parseFloat(rawValue.replace(/[^\\d.-]/g, \"\"));\r\n\t\treturn isNaN(numericValue) ? rawValue : numericValue;\r\n\t}\r\n\r\n\t// 从HTML提取标题\r\n\tfunction extractTitleFromHTML(html) {\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\treturn (\r\n\t\t\tdoc.querySelector(\"h1, h2, h3, h4, caption\")?.textContent.trim() || null\r\n\t\t);\r\n\t}\r\n</script>\r\n\r\n<style scoped>\r\n\t.compare-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tpadding: 20px;\r\n\t\toverflow-y: auto;\r\n\t}\r\n\r\n\t.charts-container {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: repeat(auto-fill, minmax(400px, 1fr));\r\n\t\tgap: 20px;\r\n\t}\r\n\r\n\t.chart-card {\r\n\t\tbackground: white;\r\n\t\tborder-radius: 8px;\r\n\t\tbox-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n\t\tpadding: 20px;\r\n\t\ttransition: transform 0.2s;\r\n\t}\r\n\r\n\t.chart-card:hover {\r\n\t\ttransform: translateY(-5px);\r\n\t}\r\n\r\n\t.chart-title {\r\n\t\tmargin: 0 0 15px 0;\r\n\t\tcolor: #2c3e50;\r\n\t\tfont-size: 18px;\r\n\t\tfont-weight: 600;\r\n\t}\r\n\r\n\t.chart-wrapper {\r\n\t\tposition: relative;\r\n\t\tmargin-bottom: 15px;\r\n\t}\r\n\r\n\t.chart-legend {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\tgap: 20px;\r\n\t\tmargin-bottom: 10px;\r\n\t}\r\n\r\n\t.legend-item {\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tfont-size: 14px;\r\n\t\tpadding: 4px 12px;\r\n\t\tborder-radius: 4px;\r\n\t}\r\n\r\n\t.legend-item.table1 {\r\n\t\tbackground: rgba(84, 112, 198, 0.1);\r\n\t\tcolor: #5470c6;\r\n\t}\r\n\r\n\t.legend-item.table2 {\r\n\t\tbackground: rgba(238, 102, 102, 0.1);\r\n\t\tcolor: #ee6666;\r\n\t}\r\n\r\n\t.time-series-chart {\r\n\t\tdisplay: flex;\r\n\t\theight: 250px;\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t.y-axis {\r\n\t\twidth: 40px;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tfont-size: 12px;\r\n\t\tcolor: #666;\r\n\t\twriting-mode: vertical-rl;\r\n\t\ttransform: rotate(180deg);\r\n\t}\r\n\r\n\t.chart-content {\r\n\t\tflex: 1;\r\n\t\tposition: relative;\r\n\t\tborder-left: 1px solid #eee;\r\n\t\tborder-bottom: 1px solid #eee;\r\n\t}\r\n\r\n\t.x-axis {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t\tposition: absolute;\r\n\t\tbottom: -25px;\r\n\t\twidth: 100%;\r\n\t\tpadding: 0 10px;\r\n\t}\r\n\r\n\t.x-axis .tick {\r\n\t\tfont-size: 11px;\r\n\t\tcolor: #666;\r\n\t\ttransform: rotate(-45deg);\r\n\t\ttransform-origin: left top;\r\n\t\twhite-space: nowrap;\r\n\t}\r\n\r\n\t.data-lines {\r\n\t\tposition: relative;\r\n\t\theight: 100%;\r\n\t\twidth: calc(100% - 10px);\r\n\t\tmargin-left: 10px;\r\n\t}\r\n\r\n\t.data-line {\r\n\t\tposition: absolute;\r\n\t\theight: 100%;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t.data-line::before {\r\n\t\tcontent: \"\";\r\n\t\tposition: absolute;\r\n\t\tbottom: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\theight: 1px;\r\n\t\tbackground: repeating-linear-gradient(\r\n\t\t\tto right,\r\n\t\t\ttransparent,\r\n\t\t\ttransparent 4px,\r\n\t\t\t#eee 4px,\r\n\t\t\t#eee 8px\r\n\t\t);\r\n\t}\r\n\r\n\t.data-point {\r\n\t\tposition: absolute;\r\n\t\twidth: 10px;\r\n\t\theight: 10px;\r\n\t\tborder-radius: 50%;\r\n\t\ttransform: translate(-50%, 50%);\r\n\t\ttransition: all 0.3s ease;\r\n\t\tcursor: pointer;\r\n\t}\r\n\r\n\t.data-line.table1 .data-point {\r\n\t\tbackground: #5470c6;\r\n\t\tborder: 2px solid rgba(84, 112, 198, 0.3);\r\n\t}\r\n\r\n\t.data-line.table2 .data-point {\r\n\t\tbackground: #ee6666;\r\n\t\tborder: 2px solid rgba(238, 102, 102, 0.3);\r\n\t}\r\n\r\n\t.data-point:hover {\r\n\t\ttransform: translate(-50%, 50%) scale(1.5);\r\n\t\tz-index: 10;\r\n\t}\r\n\r\n\t.stats-summary {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-around;\r\n\t\tmargin-top: 15px;\r\n\t\tpadding-top: 15px;\r\n\t\tborder-top: 1px dashed #eee;\r\n\t}\r\n\r\n\t.stat-item {\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t.stat-label {\r\n\t\tdisplay: block;\r\n\t\tfont-size: 12px;\r\n\t\tcolor: #7f8c8d;\r\n\t}\r\n\r\n\t.stat-value {\r\n\t\tfont-weight: bold;\r\n\t\tcolor: #2c3e50;\r\n\t}\r\n\r\n\t.empty-state {\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\theight: 100%;\r\n\t\tcolor: #888;\r\n\t\tfont-size: 16px;\r\n\t}\r\n\r\n\t@media (max-width: 768px) {\r\n\t\t.charts-container {\r\n\t\t\tgrid-template-columns: 1fr;\r\n\t\t}\r\n\r\n\t\t.chart-card {\r\n\t\t\tpadding: 15px;\r\n\t\t}\r\n\r\n\t\t.time-series-chart {\r\n\t\t\theight: 200px;\r\n\t\t}\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}