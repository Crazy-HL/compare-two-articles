{"ast":null,"code":"import { ref, computed } from \"vue\";\nimport * as d3 from \"d3\";\nimport { renderLineChart, renderBarChart, renderPieChart, renderNonVisualChart, renderRadarChart, renderStackedBarChart } from \"@/js/chartUtils\";\nexport default {\n  __name: 'TextPopup',\n  props: {\n    visible: Boolean,\n    // 是否显示弹出框\n    content: String,\n    // 弹出框内容\n    containerClass: String // 图表容器类名\n  },\n  emits: [\"close\"],\n  setup(__props, _ref) {\n    let {\n      expose: __expose,\n      emit: __emit\n    } = _ref;\n    __expose();\n    const props = __props;\n    const emit = __emit; // 定义 close 事件\n\n    const currentView = ref(\"text\"); // 当前视图模式：text 或 visual\n    const loading = ref(false); // 可视化图表加载状态\n\n    // 判断内容是否是表格\n    const isTable = computed(() => {\n      return /<table.*?>.*?<\\/table>/s.test(props.content);\n    });\n\n    // 关闭弹出框\n    const close = () => {\n      emit(\"close\");\n    };\n\n    // 切换视图\n    const switchView = async view => {\n      currentView.value = view;\n      if (view === \"visual\") {\n        loading.value = true;\n        await processText(); // 调用后端处理文本并渲染图表\n        loading.value = false;\n      }\n    };\n\n    // 获取可视化 JSON 数据\n    async function processText() {\n      try {\n        api.post(\"process_text\", {\n          text: props.content.toString().trim()\n        }, data => {\n          if (data.error) {\n            console.error(\"后端返回的错误:\", data.error);\n            alert(`处理文章内容时出错: ${data.message}`);\n            return;\n          }\n          const jsonData = data.json_data;\n          console.log(\"后端返回的数据:\", jsonData);\n\n          // 清空之前的图表\n          d3.select(`.${props.containerClass}`).html(\"\");\n          if (data.data_type === \"Non-Visual\") {\n            renderNonVisualChart(`.${props.containerClass}`, data, {\n              message: \"当前数据无法可视化\"\n            });\n          } else {\n            renderChart(jsonData, data.chart_classification);\n          }\n        });\n      } catch (error) {\n        console.error(\"处理文章内容时出错:\", error);\n        alert(\"处理文章内容时出错，请稍后重试\");\n      }\n    }\n\n    // 渲染图表\n    function renderChart(rawJsonData, chartType) {\n      if (!rawJsonData || typeof rawJsonData !== \"object\" || !rawJsonData.data) {\n        renderNonVisualChart(`.${props.containerClass}`, rawJsonData, {\n          message: \"JSON 数据无效\"\n        });\n        console.error(\"JSON 数据无效:\", rawJsonData);\n        return;\n      }\n      const data = rawJsonData.data;\n      const options = rawJsonData.options || {};\n\n      // 根据图表类型渲染\n      if (chartType === \"Line Chart\") {\n        renderLineChart(`.${props.containerClass}`, data, options);\n      } else if (chartType === \"Bar Chart\") {\n        renderBarChart(`.${props.containerClass}`, data, options);\n      } else if (chartType === \"Pie Chart\") {\n        renderPieChart(`.${props.containerClass}`, data, options);\n      } else if (chartType === \"Stacked Bar Chart\") {\n        renderStackedBarChart(`.${props.containerClass}`, data, options);\n      } else {\n        console.error(\"未知的图表类型:\", chartType);\n      }\n    }\n    const __returned__ = {\n      props,\n      emit,\n      currentView,\n      loading,\n      isTable,\n      close,\n      switchView,\n      processText,\n      renderChart,\n      ref,\n      computed,\n      get d3() {\n        return d3;\n      },\n      get renderLineChart() {\n        return renderLineChart;\n      },\n      get renderBarChart() {\n        return renderBarChart;\n      },\n      get renderPieChart() {\n        return renderPieChart;\n      },\n      get renderNonVisualChart() {\n        return renderNonVisualChart;\n      },\n      get renderRadarChart() {\n        return renderRadarChart;\n      },\n      get renderStackedBarChart() {\n        return renderStackedBarChart;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","d3","renderLineChart","renderBarChart","renderPieChart","renderNonVisualChart","renderRadarChart","renderStackedBarChart","props","__props","emit","__emit","currentView","loading","isTable","test","content","close","switchView","view","value","processText","api","post","text","toString","trim","data","error","console","alert","message","jsonData","json_data","log","select","containerClass","html","data_type","renderChart","chart_classification","rawJsonData","chartType","options"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/TextPopup.vue"],"sourcesContent":["<template>\r\n\t<!-- 遮罩层 -->\r\n\t<div v-if=\"visible\" class=\"overlay\" @click=\"close\"></div>\r\n\r\n\t<!-- 弹出框 -->\r\n\t<div v-if=\"visible\" class=\"text-popup\" @click=\"close\">\r\n\t\t<!-- 切换视图按钮 -->\r\n\t\t<div class=\"view-switcher\">\r\n\t\t\t<button\r\n\t\t\t\t@click.prevent.stop=\"switchView('text')\"\r\n\t\t\t\t:class=\"{ active: currentView === 'text' }\"\r\n\t\t\t\ttitle=\"文本视图\">\r\n\t\t\t\t<font-awesome-icon :icon=\"['fas', 'align-left']\" />\r\n\t\t\t</button>\r\n\r\n\t\t\t<button\r\n\t\t\t\t@click.prevent.stop=\"switchView('visual')\"\r\n\t\t\t\t:class=\"{ active: currentView === 'visual' }\"\r\n\t\t\t\ttitle=\"可视化视图\">\r\n\t\t\t\t<font-awesome-icon :icon=\"['fas', 'chart-bar']\" />\r\n\t\t\t</button>\r\n\t\t</div>\r\n\r\n\t\t<!-- 文本视图 -->\r\n\t\t<div v-if=\"currentView === 'text'\">\r\n\t\t\t<div v-if=\"isTable\" class=\"table-container\" v-html=\"content\"></div>\r\n\t\t\t<div v-else>\r\n\t\t\t\t<p>{{ content }}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- 可视化视图 -->\r\n\t\t<div v-if=\"currentView === 'visual'\" class=\"visualization-container\">\r\n\t\t\t<div v-if=\"loading\" class=\"loading-spinner\"></div>\r\n\t\t\t<div v-else :class=\"containerClass\"></div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed } from \"vue\";\r\n\timport * as d3 from \"d3\";\r\n\timport {\r\n\t\trenderLineChart,\r\n\t\trenderBarChart,\r\n\t\trenderPieChart,\r\n\t\trenderNonVisualChart,\r\n\t\trenderRadarChart,\r\n\t\trenderStackedBarChart\r\n\t} from \"@/js/chartUtils\";\r\n\r\n\tconst props = defineProps({\r\n\t\tvisible: Boolean, // 是否显示弹出框\r\n\t\tcontent: String, // 弹出框内容\r\n\t\tcontainerClass: String // 图表容器类名\r\n\t});\r\n\r\n\tconst emit = defineEmits([\"close\"]); // 定义 close 事件\r\n\r\n\tconst currentView = ref(\"text\"); // 当前视图模式：text 或 visual\r\n\tconst loading = ref(false); // 可视化图表加载状态\r\n\r\n\t// 判断内容是否是表格\r\n\tconst isTable = computed(() => {\r\n\t\treturn /<table.*?>.*?<\\/table>/s.test(props.content);\r\n\t});\r\n\r\n\t// 关闭弹出框\r\n\tconst close = () => {\r\n\t\temit(\"close\");\r\n\t};\r\n\r\n\t// 切换视图\r\n\tconst switchView = async view => {\r\n\t\tcurrentView.value = view;\r\n\t\tif (view === \"visual\") {\r\n\t\t\tloading.value = true;\r\n\t\t\tawait processText(); // 调用后端处理文本并渲染图表\r\n\t\t\tloading.value = false;\r\n\t\t}\r\n\t};\r\n\r\n\t// 获取可视化 JSON 数据\r\n\tasync function processText() {\r\n\t\ttry {\r\n\t\t\tapi.post(\r\n\t\t\t\t\"process_text\",\r\n\t\t\t\t{ text: props.content.toString().trim() },\r\n\t\t\t\tdata => {\r\n\t\t\t\t\tif (data.error) {\r\n\t\t\t\t\t\tconsole.error(\"后端返回的错误:\", data.error);\r\n\t\t\t\t\t\talert(`处理文章内容时出错: ${data.message}`);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst jsonData = data.json_data;\r\n\t\t\t\t\tconsole.log(\"后端返回的数据:\", jsonData);\r\n\r\n\t\t\t\t\t// 清空之前的图表\r\n\t\t\t\t\td3.select(`.${props.containerClass}`).html(\"\");\r\n\r\n\t\t\t\t\tif (data.data_type === \"Non-Visual\") {\r\n\t\t\t\t\t\trenderNonVisualChart(`.${props.containerClass}`, data, {\r\n\t\t\t\t\t\t\tmessage: \"当前数据无法可视化\"\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trenderChart(jsonData, data.chart_classification);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"处理文章内容时出错:\", error);\r\n\t\t\talert(\"处理文章内容时出错，请稍后重试\");\r\n\t\t}\r\n\t}\r\n\r\n\t// 渲染图表\r\n\tfunction renderChart(rawJsonData, chartType) {\r\n\t\tif (!rawJsonData || typeof rawJsonData !== \"object\" || !rawJsonData.data) {\r\n\t\t\trenderNonVisualChart(`.${props.containerClass}`, rawJsonData, {\r\n\t\t\t\tmessage: \"JSON 数据无效\"\r\n\t\t\t});\r\n\t\t\tconsole.error(\"JSON 数据无效:\", rawJsonData);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst data = rawJsonData.data;\r\n\t\tconst options = rawJsonData.options || {};\r\n\r\n\t\t// 根据图表类型渲染\r\n\t\tif (chartType === \"Line Chart\") {\r\n\t\t\trenderLineChart(`.${props.containerClass}`, data, options);\r\n\t\t} else if (chartType === \"Bar Chart\") {\r\n\t\t\trenderBarChart(`.${props.containerClass}`, data, options);\r\n\t\t} else if (chartType === \"Pie Chart\") {\r\n\t\t\trenderPieChart(`.${props.containerClass}`, data, options);\r\n\t\t} else if (chartType === \"Stacked Bar Chart\") {\r\n\t\t\trenderStackedBarChart(`.${props.containerClass}`, data, options);\r\n\t\t} else {\r\n\t\t\tconsole.error(\"未知的图表类型:\", chartType);\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style scoped>\r\n\t/* 遮罩层 */\r\n\t.overlay {\r\n\t\tposition: fixed;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tbackground: rgba(255, 255, 255, 0.1);\r\n\t\tbackdrop-filter: blur(10px);\r\n\t\tz-index: 90;\r\n\t\tanimation: fadeIn 0.3s ease-in-out;\r\n\t}\r\n\r\n\t/* 弹出框 */\r\n\t.text-popup {\r\n\t\tposition: fixed;\r\n\t\ttop: 50%;\r\n\t\tleft: 50%;\r\n\t\ttransform: translate(-50%, -50%);\r\n\t\twidth: 90%;\r\n\t\tmax-height: 80vh;\r\n\t\toverflow: auto;\r\n\t\tbackground: rgba(255, 255, 255, 0.98);\r\n\t\tpadding: 25px;\r\n\t\tbox-shadow: 0px 10px 30px rgba(0, 0, 0, 0.4);\r\n\t\tborder-radius: 12px;\r\n\t\ttext-align: center;\r\n\t\tfont-size: 0.8vw;\r\n\t\tfont-weight: 500;\r\n\t\tline-height: 1.6;\r\n\t\tcolor: #333;\r\n\t\tz-index: 100;\r\n\t\tcursor: pointer;\r\n\t\tbackdrop-filter: blur(20px);\r\n\t\tanimation: fadeIn 0.3s ease-in-out;\r\n\t\tborder: 1px solid rgba(255, 255, 255, 0.2);\r\n\t\tmargin: 0;\r\n\t}\r\n\r\n\t/* 视图切换按钮 */\r\n\t.view-switcher {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\tmargin-bottom: 20px;\r\n\t}\r\n\r\n\t.view-switcher button {\r\n\t\tpadding: 25px;\r\n\t\tmargin: 0 5px;\r\n\t\tborder: none;\r\n\t\tborder-radius: 50%;\r\n\t\tbackground-color: #f0f0f0;\r\n\t\tcursor: pointer;\r\n\t\ttransition: background-color 0.3s ease, transform 0.2s ease;\r\n\t\twidth: 36px;\r\n\t\theight: 36px;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t}\r\n\r\n\t.view-switcher button:hover {\r\n\t\tbackground-color: #ddd;\r\n\t\ttransform: scale(1.1);\r\n\t}\r\n\r\n\t.view-switcher button.active {\r\n\t\tbackground-color: #0077b6;\r\n\t\tcolor: white;\r\n\t}\r\n\r\n\t/* 可视化容器 */\r\n\t.visualization-container {\r\n\t\twidth: 100%;\r\n\t\theight: 300px;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}