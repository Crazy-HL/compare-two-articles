{"ast":null,"code":"import { createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"chart\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  ref: \"chart\",\n  class: \"chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createElementVNode(\"div\", _hoisted_2, null, 512 /* NEED_PATCH */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","ref","class","_createElementBlock","_Fragment","_hoisted_1","_hoisted_2"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\text.vue"],"sourcesContent":["<template>\r\n\t<h1>chart</h1>\r\n\t<div ref=\"chart\" class=\"chart\"></div>\r\n</template>\r\n\r\n<script>\r\n\timport * as d3 from \"d3\";\r\n\r\n\timport { ref, onMounted } from \"vue\";\r\n\r\n\texport default {\r\n\t\tsetup() {\r\n\t\t\tconst chart = ref(null);\r\n\r\n\t\t\tconst json = {\r\n\t\t\t\ttype: \"stackedBar\",\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tlabels: [\"2021\", \"2023\", \"2024\", \"Career\"],\r\n\t\t\t\t\tvalues: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tGP: 1,\r\n\t\t\t\t\t\t\tGS: 1,\r\n\t\t\t\t\t\t\tMPG: 34.9,\r\n\t\t\t\t\t\t\t\"FG%\": 0.412,\r\n\t\t\t\t\t\t\t\"3P%\": 0.5,\r\n\t\t\t\t\t\t\t\"FT%\": 0.667,\r\n\t\t\t\t\t\t\tRPG: 11.0,\r\n\t\t\t\t\t\t\tAPG: 10.0,\r\n\t\t\t\t\t\t\tSPG: 2.0,\r\n\t\t\t\t\t\t\tBPG: 1.0,\r\n\t\t\t\t\t\t\tPPG: 22.0\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tGP: 1,\r\n\t\t\t\t\t\t\tGS: 1,\r\n\t\t\t\t\t\t\tMPG: 45.3,\r\n\t\t\t\t\t\t\t\"FG%\": 0.571,\r\n\t\t\t\t\t\t\t\"3P%\": 0.5,\r\n\t\t\t\t\t\t\t\"FT%\": 1.0,\r\n\t\t\t\t\t\t\tRPG: 10.0,\r\n\t\t\t\t\t\t\tAPG: 6.0,\r\n\t\t\t\t\t\t\tSPG: 1.0,\r\n\t\t\t\t\t\t\tBPG: 2.0,\r\n\t\t\t\t\t\t\tPPG: 30.0\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tGP: 1,\r\n\t\t\t\t\t\t\tGS: 1,\r\n\t\t\t\t\t\t\tMPG: 40.9,\r\n\t\t\t\t\t\t\t\"FG%\": 0.3,\r\n\t\t\t\t\t\t\t\"3P%\": 0.2,\r\n\t\t\t\t\t\t\t\"FT%\": 1.0,\r\n\t\t\t\t\t\t\tRPG: 9.0,\r\n\t\t\t\t\t\t\tAPG: 9.0,\r\n\t\t\t\t\t\t\tSPG: 3.0,\r\n\t\t\t\t\t\t\tBPG: 2.0,\r\n\t\t\t\t\t\t\tPPG: 23.0\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tGP: 3,\r\n\t\t\t\t\t\t\tGS: 3,\r\n\t\t\t\t\t\t\tMPG: 40.4,\r\n\t\t\t\t\t\t\t\"FG%\": 0.431,\r\n\t\t\t\t\t\t\t\"3P%\": 0.4,\r\n\t\t\t\t\t\t\t\"FT%\": 0.864,\r\n\t\t\t\t\t\t\tRPG: 10.0,\r\n\t\t\t\t\t\t\tAPG: 8.3,\r\n\t\t\t\t\t\t\tSPG: 2.0,\r\n\t\t\t\t\t\t\tBPG: 1.7,\r\n\t\t\t\t\t\t\tPPG: 25.0\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\toptions: { colors: [\"#ff5733\", \"#33ff57\"] }\r\n\t\t\t};\r\n\r\n\t\t\tfunction renderStackedBarChart(chartRef, data, options) {\r\n\t\t\t\tif (!chartRef) {\r\n\t\t\t\t\tconsole.error(\"图表容器未找到\");\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst margin = { top: 20, right: 100, bottom: 50, left: 50 };\r\n\t\t\t\tconst width = 800 - margin.left - margin.right;\r\n\t\t\t\tconst height = 400 - margin.top - margin.bottom;\r\n\r\n\t\t\t\t// 清空之前的图表\r\n\t\t\t\td3.select(chartRef).html(\"\");\r\n\r\n\t\t\t\t// 创建 SVG 容器\r\n\t\t\t\tconst svg = d3\r\n\t\t\t\t\t.select(chartRef)\r\n\t\t\t\t\t.append(\"svg\")\r\n\t\t\t\t\t.attr(\"width\", width + margin.left + margin.right)\r\n\t\t\t\t\t.attr(\"height\", height + margin.top + margin.bottom)\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n\t\t\t\tconst labels = data.labels;\r\n\t\t\t\tconst values = data.values;\r\n\r\n\t\t\t\t// 清理数据\r\n\t\t\t\tconst cleanedLabels = labels.map(label =>\r\n\t\t\t\t\tlabel === undefined || label === null ? \"\" : label\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// 提取 keys（例如：GP, GS, MPG, etc.）\r\n\t\t\t\tconst keys = Object.keys(values[0]);\r\n\r\n\t\t\t\t// 将 values 转换为适合 d3.stack() 的格式\r\n\t\t\t\tconst stackedData = keys.map(key => {\r\n\t\t\t\t\treturn values.map(d => d[key]);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// 设置 X 轴比例尺\r\n\t\t\t\tconst x = d3\r\n\t\t\t\t\t.scaleBand()\r\n\t\t\t\t\t.domain(cleanedLabels)\r\n\t\t\t\t\t.range([0, width])\r\n\t\t\t\t\t.padding(0.1);\r\n\r\n\t\t\t\t// 设置 Y 轴比例尺\r\n\t\t\t\tconst y = d3\r\n\t\t\t\t\t.scaleLinear()\r\n\t\t\t\t\t.domain([0, d3.max(stackedData.flat())])\r\n\t\t\t\t\t.nice()\r\n\t\t\t\t\t.range([height, 0]);\r\n\r\n\t\t\t\t// 绘制堆叠条形图\r\n\t\t\t\tconst stack = d3.stack().keys(keys);\r\n\r\n\t\t\t\tconst layers = stack(values);\r\n\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.selectAll(\".layer\")\r\n\t\t\t\t\t.data(layers)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"class\", \"layer\")\r\n\t\t\t\t\t.selectAll(\".bar\")\r\n\t\t\t\t\t.data(d => d)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"rect\")\r\n\t\t\t\t\t.attr(\"x\", (d, i) => x(cleanedLabels[i]))\r\n\t\t\t\t\t.attr(\"y\", d => y(d[1]))\r\n\t\t\t\t\t.attr(\"width\", x.bandwidth())\r\n\t\t\t\t\t.attr(\"height\", d => y(d[0]) - y(d[1]))\r\n\t\t\t\t\t.style(\"fill\", (d, i) => options.colors[i % options.colors.length]);\r\n\t\t\t}\r\n\t\t\tonMounted(() => {\r\n\t\t\t\tif (chart.value) {\r\n\t\t\t\t\t// 调用渲染函数\r\n\t\t\t\t\trenderStackedBarChart(chart.value, json.data, json.options);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.error(\"chart 容器未找到\");\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\treturn {\r\n\t\t\t\tchart\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n</script>\r\n\r\n<style>\r\n\t.chart {\r\n\t\twidth: 800px;\r\n\t\theight: 400px;\r\n\t}\r\n</style>\r\n"],"mappings":";gCACCA,mBAAA,CAAc,YAAV,OAAK;;EACJC,GAAG,EAAC,OAAO;EAACC,KAAK,EAAC;;;uBAFxBC,mBAAA,CAAAC,SAAA,SACCC,UAAc,EACdL,mBAAA,CAAqC,OAArCM,UAAqC,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}