{"ast":null,"code":"import { createVNode as _createVNode, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-2e821d1e\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"div0\",\n  id: \"div2\"\n};\nconst _hoisted_2 = {\n  class: \"VisContainer\"\n};\nconst _hoisted_3 = {\n  class: \"topContainer container\"\n};\nconst _hoisted_4 = {\n  class: \"botContainer container\"\n};\nconst _hoisted_5 = {\n  class: \"io\"\n};\nconst _hoisted_6 = {\n  class: \"io\"\n};\nconst _hoisted_7 = {\n  class: \"question-box\"\n};\nconst _hoisted_8 = {\n  key: 0,\n  class: \"answer\"\n};\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"strong\", null, \"GPT 回答:\", -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createVNode($setup[\"IO\"], {\n    width: \"542px\",\n    height: \"310px\",\n    placeholder: $setup.selectText1\n  }, null, 8 /* PROPS */, [\"placeholder\"])]), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_createVNode($setup[\"IO\"], {\n    width: \"250px\",\n    height: \"290px\",\n    placeholder: $setup.selectText2\n  }, null, 8 /* PROPS */, [\"placeholder\"])]), _createElementVNode(\"div\", _hoisted_6, [_createVNode($setup[\"IO\"], {\n    width: \"240px\",\n    height: \"290px\",\n    placeholder: $setup.selectText3\n  }, null, 8 /* PROPS */, [\"placeholder\"])])]), _createElementVNode(\"button\", {\n    onClick: $setup.compareTexts\n  }, \"对比文章\"), _createCommentVNode(\" 提问框 \"), _createElementVNode(\"div\", _hoisted_7, [_withDirectives(_createElementVNode(\"textarea\", {\n    id: \"question\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.userQuestion = $event),\n    rows: \"4\",\n    cols: \"50\",\n    placeholder: \"请输入你想问的问题...\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.userQuestion]])]), _createCommentVNode(\" 提问按钮 \"), _createElementVNode(\"button\", {\n    onClick: $setup.askQuestion\n  }, \"向 ChatGPT 提问\"), _createCommentVNode(\" 显示 GPT 的回答 \"), $setup.gptAnswer ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_hoisted_9, _createElementVNode(\"p\", null, _toDisplayString($setup.gptAnswer), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"names":["class","id","key","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_createVNode","$setup","width","height","placeholder","selectText1","_hoisted_4","_hoisted_5","selectText2","_hoisted_6","selectText3","onClick","compareTexts","_createCommentVNode","_hoisted_7","_cache","$event","userQuestion","rows","cols","askQuestion","gptAnswer","_hoisted_8","_hoisted_9","_toDisplayString"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\Div2.vue"],"sourcesContent":["<template>\r\n\t<div class=\"div0\" id=\"div2\">\r\n\t\t<div class=\"VisContainer\">\r\n\t\t\t<div class=\"topContainer container\">\r\n\t\t\t\t<IO width=\"542px\" height=\"310px\" :placeholder=\"selectText1\"></IO>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"botContainer container\">\r\n\t\t\t\t<div class=\"io\">\r\n\t\t\t\t\t<IO width=\"250px\" height=\"290px\" :placeholder=\"selectText2\"></IO>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"io\">\r\n\t\t\t\t\t<IO width=\"240px\" height=\"290px\" :placeholder=\"selectText3\"></IO>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<button @click=\"compareTexts\">对比文章</button>\r\n\r\n\t\t\t<!-- 提问框 -->\r\n\t\t\t<div class=\"question-box\">\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tid=\"question\"\r\n\t\t\t\t\tv-model=\"userQuestion\"\r\n\t\t\t\t\trows=\"4\"\r\n\t\t\t\t\tcols=\"50\"\r\n\t\t\t\t\tplaceholder=\"请输入你想问的问题...\"></textarea>\r\n\t\t\t</div>\r\n\r\n\t\t\t<!-- 提问按钮 -->\r\n\t\t\t<button @click=\"askQuestion\">向 ChatGPT 提问</button>\r\n\r\n\t\t\t<!-- 显示 GPT 的回答 -->\r\n\t\t\t<div v-if=\"gptAnswer\" class=\"answer\">\r\n\t\t\t\t<strong>GPT 回答:</strong>\r\n\t\t\t\t<p>{{ gptAnswer }}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted } from \"vue\";\r\n\timport IO from \"./input_output.vue\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\r\n\tconst selectText1 = ref(\"\");\r\n\tconst selectText2 = ref(\"\");\r\n\tconst selectText3 = ref(\"\");\r\n\tconst userQuestion = ref(\"\"); // 用户输入的提问\r\n\tconst gptAnswer = ref(\"\"); // GPT 返回的答案\r\n\r\n\tlet offDiv1, offDiv3;\r\n\r\n\tonMounted(() => {\r\n\t\toffDiv1 = bus.on(\"div1Event\", data => handleSelection(data, \"div1\"));\r\n\t\toffDiv3 = bus.on(\"div3Event\", data => handleSelection(data, \"div3\"));\r\n\t});\r\n\r\n\tonUnmounted(() => {\r\n\t\toffDiv1();\r\n\t\toffDiv3();\r\n\t});\r\n\r\n\tfunction handleSelection(data, source) {\r\n\t\tconst plainText = getPlainTextFromSelection(data.content);\r\n\t\tif (source === \"div1\") {\r\n\t\t\tselectText2.value = plainText;\r\n\t\t} else if (source === \"div3\") {\r\n\t\t\tselectText3.value = plainText;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getPlainTextFromSelection(htmlContent) {\r\n\t\tconst container = document.createElement(\"div\");\r\n\t\tcontainer.innerHTML = htmlContent;\r\n\t\treturn container.innerText || container.textContent || \"\";\r\n\t}\r\n\r\n\t// 发送用户的提问到 GPT\r\n\tasync function askQuestion() {\r\n\t\tif (!userQuestion.value) {\r\n\t\t\talert(\"请输入问题！\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await api.post(\r\n\t\t\t\t\"gpt_ask\", // 新增接口\r\n\t\t\t\t{ question: userQuestion.value },\r\n\t\t\t\tdata => {\r\n\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\tgptAnswer.value = data.answer; // 显示 GPT 的回答\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.error(\"提问失败:\", data.error);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"请求失败:\", error);\r\n\t\t}\r\n\t}\r\n\r\n\tasync function compareTexts() {\r\n\t\ttry {\r\n\t\t\tapi.post(\r\n\t\t\t\t\"gpt_compare\",\r\n\t\t\t\t{ text1: selectText2.value, text2: selectText3.value },\r\n\t\t\t\tdata => {\r\n\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\tselectText1.value = data.result;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.error(\"对比失败:\", data.error);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconsole.log(\"@@@222\", data);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"请求失败:\", error);\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style scoped>\r\n\t/* 样式 */\r\n\t#div2 {\r\n\t\twidth: 40%;\r\n\t\theight: 100%;\r\n\t\tflex-grow: 1;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\r\n\t.VisContainer {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tmargin: 10px;\r\n\t\tborder: 2px solid rgb(4, 44, 68);\r\n\t\tflex-grow: 1;\r\n\t}\r\n\r\n\t.container {\r\n\t\tdisplay: flex;\r\n\t\tborder: 1px solid black;\r\n\t\tmargin: 10px;\r\n\t\tflex-grow: 1;\r\n\t}\r\n\r\n\t.botContainer {\r\n\t\tflex-direction: row;\r\n\t}\r\n\r\n\t.io {\r\n\t\tflex: 1;\r\n\t\tmargin: 5px;\r\n\t\tborder: 1px solid blue;\r\n\t\tpadding: 5px;\r\n\t}\r\n\r\n\t/* 提问框样式 */\r\n\t.question-box {\r\n\t\tmargin-top: 20px;\r\n\t}\r\n\r\n\ttextarea {\r\n\t\twidth: 100%;\r\n\t\tresize: none;\r\n\t\tpadding: 10px;\r\n\t\tfont-size: 16px;\r\n\t}\r\n\r\n\tbutton {\r\n\t\tmargin-top: 10px;\r\n\t\tpadding: 10px;\r\n\t\tbackground-color: #4caf50;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tcursor: pointer;\r\n\t}\r\n\r\n\tbutton:hover {\r\n\t\tbackground-color: #45a049;\r\n\t}\r\n\r\n\t/* GPT回答展示 */\r\n\t.answer {\r\n\t\tmargin-top: 20px;\r\n\t\tpadding: 10px;\r\n\t\tbackground-color: #f1f1f1;\r\n\t\tborder-radius: 5px;\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,KAAK,EAAC,MAAM;EAACC,EAAE,EAAC;;;EACfD,KAAK,EAAC;AAAc;;EACnBA,KAAK,EAAC;AAAwB;;EAG9BA,KAAK,EAAC;AAAwB;;EAC7BA,KAAK,EAAC;AAAI;;EAGVA,KAAK,EAAC;AAAI;;EAOXA,KAAK,EAAC;AAAc;;EAjB5BE,GAAA;EA8ByBF,KAAK,EAAC;;gEAC3BG,mBAAA,CAAwB,gBAAhB,SAAO;;uBA9BlBC,mBAAA,CAkCM,OAlCNC,UAkCM,GAjCLF,mBAAA,CAgCM,OAhCNG,UAgCM,GA/BLH,mBAAA,CAEM,OAFNI,UAEM,GADLC,YAAA,CAAiEC,MAAA;IAA7DC,KAAK,EAAC,OAAO;IAACC,MAAM,EAAC,OAAO;IAAEC,WAAW,EAAEH,MAAA,CAAAI;8CAEhDV,mBAAA,CAOM,OAPNW,UAOM,GANLX,mBAAA,CAEM,OAFNY,UAEM,GADLP,YAAA,CAAiEC,MAAA;IAA7DC,KAAK,EAAC,OAAO;IAACC,MAAM,EAAC,OAAO;IAAEC,WAAW,EAAEH,MAAA,CAAAO;8CAEhDb,mBAAA,CAEM,OAFNc,UAEM,GADLT,YAAA,CAAiEC,MAAA;IAA7DC,KAAK,EAAC,OAAO;IAACC,MAAM,EAAC,OAAO;IAAEC,WAAW,EAAEH,MAAA,CAAAS;gDAGjDf,mBAAA,CAA2C;IAAlCgB,OAAK,EAAEV,MAAA,CAAAW;EAAY,GAAE,MAAI,GAElCC,mBAAA,SAAY,EACZlB,mBAAA,CAOM,OAPNmB,UAOM,G,gBANLnB,mBAAA,CAKuC;IAJtCF,EAAE,EAAC,UAAU;IAnBlB,uBAAAsB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAoBcf,MAAA,CAAAgB,YAAY,GAAAD,MAAA;IACrBE,IAAI,EAAC,GAAG;IACRC,IAAI,EAAC,IAAI;IACTf,WAAW,EAAC;iDAHHH,MAAA,CAAAgB,YAAY,E,KAMvBJ,mBAAA,UAAa,EACblB,mBAAA,CAAkD;IAAzCgB,OAAK,EAAEV,MAAA,CAAAmB;EAAW,GAAE,cAAY,GAEzCP,mBAAA,gBAAmB,EACRZ,MAAA,CAAAoB,SAAS,I,cAApBzB,mBAAA,CAGM,OAHN0B,UAGM,GAFLC,UAAwB,EACxB5B,mBAAA,CAAsB,WAAA6B,gBAAA,CAAhBvB,MAAA,CAAAoB,SAAS,iB,KAhCnBR,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}