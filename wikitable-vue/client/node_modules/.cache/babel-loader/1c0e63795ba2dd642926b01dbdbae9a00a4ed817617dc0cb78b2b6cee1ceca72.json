{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed, onMounted, watch, onUnmounted } from \"vue\";\nimport SimpleChart from \"./SimpleChart.vue\";\nimport FullChart from \"./FullChart.vue\";\nimport bus from \"@/js/eventBus.js\";\nexport default {\n  __name: 'CompareTable',\n  props: {\n    div1RawData: Object,\n    div3RawData: Object\n  },\n  emits: [\"compareAttribute\"],\n  setup(__props, _ref) {\n    let {\n      expose: __expose,\n      emit: __emit\n    } = _ref;\n    __expose();\n    const props = __props;\n    const emit = __emit;\n\n    // 状态变量\n    const leftInfobox = ref({\n      title: \"\",\n      type: \"\",\n      data: {}\n    });\n    const rightInfobox = ref({\n      title: \"\",\n      type: \"\",\n      data: {}\n    });\n    const showFullChartModal = ref(false);\n    const currentChart = ref({\n      title: \"\",\n      field: {},\n      data: []\n    });\n    const showSortingHeatmap = ref(true);\n    const isInitializing = ref(true);\n    const hasAutoCompared = ref(false);\n    const leftDataLoaded = ref(false);\n    const rightDataLoaded = ref(false);\n    const sortedFieldsWithScores = ref([]);\n\n    // 可比较字段配置\n    const COMPARABLE_FIELDS = [{\n      key: \"GDP\",\n      type: \"number\",\n      typeLabel: \"数值(美元)\",\n      visualization: \"bar-chart\",\n      legend: \"国内生产总值（单位：万亿美元）\"\n    }, {\n      key: \"Population\",\n      type: \"number\",\n      typeLabel: \"数值(人)\",\n      visualization: \"bar-chart\",\n      legend: \"人口数量（单位：亿人）\"\n    }, {\n      key: \"GDP growth\",\n      type: \"percentage\",\n      typeLabel: \"百分比(%)\",\n      visualization: \"line-chart\",\n      legend: \"GDP年增长率（%）\"\n    }, {\n      key: \"Inflation (CPI)\",\n      type: \"percentage\",\n      typeLabel: \"百分比(%)\",\n      visualization: \"pie-chart\",\n      legend: \"消费者价格指数变化\"\n    }, {\n      key: \"GDP rank\",\n      type: \"text\",\n      typeLabel: \"文本\",\n      visualization: \"text-only\",\n      legend: \"全球GDP排名\"\n    }];\n\n    // 自动对比方法\n    const tryAutoCompare = () => {\n      if (hasAutoCompared.value || !leftDataLoaded.value || !rightDataLoaded.value) return;\n      isInitializing.value = true;\n      hasAutoCompared.value = true;\n\n      // 找到分数最高的字段进行自动对比\n      const mostSignificantField = sortedFieldsWithScores.value[0];\n      if (mostSignificantField) {\n        emit(\"compareAttribute\", {\n          fieldKey: mostSignificantField.key,\n          leftData: getField(leftInfobox.value, mostSignificantField.key),\n          rightData: getField(rightInfobox.value, mostSignificantField.key),\n          leftTitle: leftInfobox.value.title,\n          rightTitle: rightInfobox.value.title,\n          fieldType: mostSignificantField.type,\n          fieldLabel: mostSignificantField.typeLabel\n        });\n      }\n      isInitializing.value = false;\n    };\n    const getField = (infobox, fieldKey) => {\n      if (!infobox?.data) {\n        return [];\n      }\n      for (const section of Object.values(infobox.data)) {\n        if (section[fieldKey] !== undefined) {\n          const fieldData = section[fieldKey];\n          if (Array.isArray(fieldData)) {\n            return fieldData.map(item => {\n              if (typeof item === \"object\" && item !== null) {\n                return item.value ?? item.raw ?? item;\n              }\n              return item;\n            });\n          }\n          if (typeof fieldData === \"object\" && fieldData !== null) {\n            return [fieldData.value ?? fieldData.raw ?? fieldData];\n          }\n          return [fieldData];\n        }\n      }\n      return [];\n    };\n    const calculateDifferenceScore = field => {\n      const leftValues = getField(leftInfobox.value, field.key).map(v => typeof v === \"object\" ? v.value ?? v.raw : v).map(Number).filter(n => !isNaN(n));\n      const rightValues = getField(rightInfobox.value, field.key).map(v => typeof v === \"object\" ? v.value ?? v.raw : v).map(Number).filter(n => !isNaN(n));\n      if (leftValues.length === 0 || rightValues.length === 0) {\n        return 0;\n      }\n      let maxScore = 0;\n      const comparedPairs = [];\n      leftValues.forEach(leftNum => {\n        rightValues.forEach(rightNum => {\n          const isOpposite = leftNum > 0 && rightNum < 0 || leftNum < 0 && rightNum > 0;\n          const absDiff = Math.abs(leftNum - rightNum);\n          const avg = (Math.abs(leftNum) + Math.abs(rightNum)) / 2;\n          const relativeDiff = avg > 0 ? absDiff / avg : 0;\n          let score;\n          if (isOpposite) {\n            score = 90 + 10 * relativeDiff;\n          } else {\n            score = 10 + 40 * relativeDiff;\n          }\n          comparedPairs.push({\n            leftNum,\n            rightNum,\n            isOpposite,\n            relativeDiff,\n            score\n          });\n          if (score > maxScore) maxScore = score;\n        });\n      });\n      const weight = field.key.toLowerCase().includes(\"gdp growth\") ? 3 : 1;\n      const finalScore = Math.min(100, Math.round(maxScore * weight));\n      return finalScore;\n    };\n    const getFieldWeight = fieldKey => {\n      const weights = {\n        GDP: 1.5,\n        Population: 1.3,\n        \"GDP growth\": 2.0,\n        Inflation: 1.8,\n        Labor: 1.2\n      };\n      for (const [key, weight] of Object.entries(weights)) {\n        if (fieldKey.toLowerCase().includes(key.toLowerCase())) {\n          return weight;\n        }\n      }\n      return 1.0;\n    };\n    const getHeatmapColor = score => {\n      const maxScore = 100;\n      const ratio = Math.min(score / maxScore, 1);\n      const hue = (1 - ratio) * 120;\n      return `hsl(${hue}, 80%, ${85 - ratio * 25}%)`;\n    };\n    const sortedFields = computed(() => {\n      return sortedFieldsWithScores.value;\n    });\n    const comparableFields = computed(() => {\n      return COMPARABLE_FIELDS.filter(field => {\n        const leftVal = getField(leftInfobox.value, field.key);\n        const rightVal = getField(rightInfobox.value, field.key);\n        return leftVal.length > 0 || rightVal.length > 0;\n      });\n    });\n    const tryCalculateScores = () => {\n      if (leftDataLoaded.value && rightDataLoaded.value) {\n        sortedFieldsWithScores.value = comparableFields.value.map(field => ({\n          ...field,\n          score: calculateDifferenceScore(field)\n        })).sort((a, b) => {\n          if (a.type !== \"text\" && b.type === \"text\") return -1;\n          if (a.type === \"text\" && b.type !== \"text\") return 1;\n          return b.score - a.score;\n        });\n\n        // 计算完成后尝试自动对比\n        tryAutoCompare();\n      }\n    };\n    const showFullChart = (infobox, field) => {\n      currentChart.value = {\n        title: infobox.title,\n        field: field,\n        data: getField(infobox, field.key)\n      };\n      showFullChartModal.value = true;\n    };\n    const closeFullChart = () => {\n      showFullChartModal.value = false;\n    };\n    const hoverInfobox = (infobox, fieldKey, side) => {\n      bus.emit(`hover-${side}-infobox`, {\n        fieldKey,\n        infoboxTitle: infobox.title\n      });\n      const divId = side === \"left\" ? \"div1\" : \"div3\";\n      bus.emit(`highlight-${divId}-paragraphs`, fieldKey);\n    };\n    const unhoverInfobox = side => {\n      bus.emit(`unhover-${side}-infobox`);\n      const divId = side === \"left\" ? \"div1\" : \"div3\";\n      bus.emit(`clear-${divId}-highlights`);\n    };\n    const hoverBothInfoboxes = fieldKey => {\n      hoverInfobox(leftInfobox.value, fieldKey, \"left\");\n      hoverInfobox(rightInfobox.value, fieldKey, \"right\");\n    };\n    const unhoverBothInfoboxes = () => {\n      unhoverInfobox(\"left\");\n      unhoverInfobox(\"right\");\n    };\n    const handleMiddleColumnClick = field => {\n      emit(\"compareAttribute\", {\n        fieldKey: field.key,\n        leftData: getField(leftInfobox.value, field.key),\n        rightData: getField(rightInfobox.value, field.key),\n        leftTitle: leftInfobox.value.title,\n        rightTitle: rightInfobox.value.title,\n        fieldType: field.type,\n        fieldLabel: field.typeLabel\n      });\n      bus.emit(\"highlight-div1-paragraphs\", field.key);\n      bus.emit(\"highlight-div3-paragraphs\", field.key);\n    };\n    const showCombinedChart = field => {\n      const leftData = getField(leftInfobox.value, field.key);\n      const rightData = getField(rightInfobox.value, field.key);\n      currentChart.value = {\n        title: `合并图表 - ${field.key}`,\n        field: field,\n        data: [...leftData, ...rightData]\n      };\n      showFullChartModal.value = true;\n    };\n    const processInfoboxData = data => {\n      if (!data) {\n        console.warn(\"接收到空Infobox数据\");\n        return {\n          title: \"\",\n          type: \"\",\n          data: {}\n        };\n      }\n      return {\n        title: data.title || \"无标题\",\n        type: data.type || \"未知类型\",\n        data: data.sections || {}\n      };\n    };\n    onMounted(() => {\n      bus.on(\"div1_InfoboxData\", data => {\n        leftInfobox.value = processInfoboxData(data);\n        leftDataLoaded.value = true;\n        tryCalculateScores();\n      });\n      bus.on(\"div3_InfoboxData\", data => {\n        rightInfobox.value = processInfoboxData(data);\n        rightDataLoaded.value = true;\n        tryCalculateScores();\n      });\n    });\n    watch([() => leftDataLoaded.value, () => rightDataLoaded.value], _ref2 => {\n      let [leftLoaded, rightLoaded] = _ref2;\n      if (leftLoaded && rightLoaded) {\n        tryCalculateScores();\n      }\n    });\n    onUnmounted(() => {\n      bus.off(\"div1_InfoboxData\");\n      bus.off(\"div3_InfoboxData\");\n    });\n    const __returned__ = {\n      props,\n      emit,\n      leftInfobox,\n      rightInfobox,\n      showFullChartModal,\n      currentChart,\n      showSortingHeatmap,\n      isInitializing,\n      hasAutoCompared,\n      leftDataLoaded,\n      rightDataLoaded,\n      sortedFieldsWithScores,\n      COMPARABLE_FIELDS,\n      tryAutoCompare,\n      getField,\n      calculateDifferenceScore,\n      getFieldWeight,\n      getHeatmapColor,\n      sortedFields,\n      comparableFields,\n      tryCalculateScores,\n      showFullChart,\n      closeFullChart,\n      hoverInfobox,\n      unhoverInfobox,\n      hoverBothInfoboxes,\n      unhoverBothInfoboxes,\n      handleMiddleColumnClick,\n      showCombinedChart,\n      processInfoboxData,\n      ref,\n      computed,\n      onMounted,\n      watch,\n      onUnmounted,\n      SimpleChart,\n      FullChart,\n      get bus() {\n        return bus;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","watch","onUnmounted","SimpleChart","FullChart","bus","props","__props","emit","__emit","leftInfobox","title","type","data","rightInfobox","showFullChartModal","currentChart","field","showSortingHeatmap","isInitializing","hasAutoCompared","leftDataLoaded","rightDataLoaded","sortedFieldsWithScores","COMPARABLE_FIELDS","key","typeLabel","visualization","legend","tryAutoCompare","value","mostSignificantField","fieldKey","leftData","getField","rightData","leftTitle","rightTitle","fieldType","fieldLabel","infobox","section","Object","values","undefined","fieldData","Array","isArray","map","item","raw","calculateDifferenceScore","leftValues","v","Number","filter","n","isNaN","rightValues","length","maxScore","comparedPairs","forEach","leftNum","rightNum","isOpposite","absDiff","Math","abs","avg","relativeDiff","score","push","weight","toLowerCase","includes","finalScore","min","round","getFieldWeight","weights","GDP","Population","Inflation","Labor","entries","getHeatmapColor","ratio","hue","sortedFields","comparableFields","leftVal","rightVal","tryCalculateScores","sort","a","b","showFullChart","closeFullChart","hoverInfobox","side","infoboxTitle","divId","unhoverInfobox","hoverBothInfoboxes","unhoverBothInfoboxes","handleMiddleColumnClick","showCombinedChart","processInfoboxData","console","warn","sections","on","_ref2","leftLoaded","rightLoaded","off"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/CompareTable.vue"],"sourcesContent":["<template>\r\n\t<div class=\"compare-container\">\r\n\t\t<!-- 加载状态提示 -->\r\n\t\t<div v-if=\"isInitializing\" class=\"initial-loading\">\r\n\t\t\t<div class=\"loading-spinner\"></div>\r\n\t\t\t<p>正在准备数据对比...</p>\r\n\t\t</div>\r\n\r\n\t\t<!-- 排序热力图开关 -->\r\n\t\t<div class=\"heatmap-control\">\r\n\t\t\t<button @click=\"showSortingHeatmap = !showSortingHeatmap\">\r\n\t\t\t\t{{ showSortingHeatmap ? \"隐藏\" : \"显示\" }}排序热力图\r\n\t\t\t</button>\r\n\t\t</div>\r\n\r\n\t\t<!-- 排序热力图可视化 -->\r\n\t\t<div class=\"sorting-heatmap\" v-if=\"showSortingHeatmap\">\r\n\t\t\t<div class=\"heatmap-header\">\r\n\t\t\t\t<span>排序</span>\r\n\t\t\t\t<span>属性</span>\r\n\t\t\t\t<span>类型</span>\r\n\t\t\t\t<span>差异分数</span>\r\n\t\t\t\t<span>权重</span>\r\n\t\t\t</div>\r\n\t\t\t<div\r\n\t\t\t\tclass=\"heatmap-row\"\r\n\t\t\t\tv-for=\"(field, index) in sortedFieldsWithScores\"\r\n\t\t\t\t:key=\"field.key\"\r\n\t\t\t\t:style=\"{\r\n\t\t\t\t\tbackgroundColor: getHeatmapColor(field.score),\r\n\t\t\t\t\tborderLeft: `4px solid ${getHeatmapColor(field.score)}`\r\n\t\t\t\t}\">\r\n\t\t\t\t<span class=\"field-rank\">{{ index + 1 }}</span>\r\n\t\t\t\t<span class=\"field-name\">{{ field.key }}</span>\r\n\t\t\t\t<span class=\"field-type\">{{ field.typeLabel }}</span>\r\n\t\t\t\t<span class=\"field-score\">{{ field.score.toFixed(1) }}</span>\r\n\t\t\t\t<span class=\"field-weight\">{{\r\n\t\t\t\t\tgetFieldWeight(field.key).toFixed(1)\r\n\t\t\t\t}}</span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- 主对比表格 -->\r\n\t\t<div class=\"comparison-grid\">\r\n\t\t\t<div class=\"header left-column\">\r\n\t\t\t\t{{ leftInfobox.title }}\r\n\t\t\t</div>\r\n\t\t\t<div class=\"header middle-column\">对比属性</div>\r\n\t\t\t<div class=\"header right-column\">\r\n\t\t\t\t{{ rightInfobox.title }}\r\n\t\t\t</div>\r\n\r\n\t\t\t<template v-for=\"field in sortedFields\" :key=\"field.key\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell left-column\"\r\n\t\t\t\t\t@mouseover=\"hoverInfobox(leftInfobox, field.key, 'left')\"\r\n\t\t\t\t\t@mouseout=\"unhoverInfobox('left')\"\r\n\t\t\t\t\t@click=\"showFullChart(leftInfobox, field)\">\r\n\t\t\t\t\t<SimpleChart\r\n\t\t\t\t\t\t:field=\"getField(leftInfobox, field.key)\"\r\n\t\t\t\t\t\t:type=\"field.type\"\r\n\t\t\t\t\t\t:visualization=\"field.visualization\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell middle-column\"\r\n\t\t\t\t\t@mouseover=\"hoverBothInfoboxes(field.key)\"\r\n\t\t\t\t\t@mouseout=\"unhoverBothInfoboxes()\">\r\n\t\t\t\t\t<div class=\"field-name\">{{ field.key }}</div>\r\n\t\t\t\t\t<div class=\"field-type\">{{ field.typeLabel }}</div>\r\n\t\t\t\t\t<div class=\"icon-actions\">\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tclass=\"icon-btn compare\"\r\n\t\t\t\t\t\t\ttitle=\"对比分析\"\r\n\t\t\t\t\t\t\t@click=\"handleMiddleColumnClick(field)\">\r\n\t\t\t\t\t\t\t⚖️\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tclass=\"icon-btn merge\"\r\n\t\t\t\t\t\t\ttitle=\"合并图表\"\r\n\t\t\t\t\t\t\t@click=\"showCombinedChart(field)\">\r\n\t\t\t\t\t\t\t📊\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell right-column\"\r\n\t\t\t\t\t@mouseover=\"hoverInfobox(rightInfobox, field.key, 'right')\"\r\n\t\t\t\t\t@mouseout=\"unhoverInfobox('right')\"\r\n\t\t\t\t\t@click=\"showFullChart(rightInfobox, field)\">\r\n\t\t\t\t\t<SimpleChart\r\n\t\t\t\t\t\t:field=\"getField(rightInfobox, field.key)\"\r\n\t\t\t\t\t\t:type=\"field.type\"\r\n\t\t\t\t\t\t:visualization=\"field.visualization\" />\r\n\t\t\t\t</div>\r\n\t\t\t</template>\r\n\t\t</div>\r\n\r\n\t\t<!-- 全屏图表模态框 -->\r\n\t\t<div\r\n\t\t\tv-if=\"showFullChartModal\"\r\n\t\t\tclass=\"full-chart-modal\"\r\n\t\t\t@click.self=\"closeFullChart\">\r\n\t\t\t<div class=\"modal-content\">\r\n\t\t\t\t<button class=\"close-btn\" @click=\"closeFullChart\">×</button>\r\n\t\t\t\t<h3>{{ currentChart.title }} - {{ currentChart.field.key }}</h3>\r\n\t\t\t\t<div class=\"chart-container\">\r\n\t\t\t\t\t<FullChart\r\n\t\t\t\t\t\t:field=\"currentChart.data\"\r\n\t\t\t\t\t\t:type=\"currentChart.field.type\"\r\n\t\t\t\t\t\t:visualization=\"currentChart.field.visualization\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"chart-legend\" v-if=\"currentChart.field.legend\">\r\n\t\t\t\t\t{{ currentChart.field.legend }}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, onMounted, watch, onUnmounted } from \"vue\";\r\n\timport SimpleChart from \"./SimpleChart.vue\";\r\n\timport FullChart from \"./FullChart.vue\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdiv1RawData: Object,\r\n\t\tdiv3RawData: Object\r\n\t});\r\n\r\n\tconst emit = defineEmits([\"compareAttribute\"]);\r\n\r\n\t// 状态变量\r\n\tconst leftInfobox = ref({ title: \"\", type: \"\", data: {} });\r\n\tconst rightInfobox = ref({ title: \"\", type: \"\", data: {} });\r\n\tconst showFullChartModal = ref(false);\r\n\tconst currentChart = ref({\r\n\t\ttitle: \"\",\r\n\t\tfield: {},\r\n\t\tdata: []\r\n\t});\r\n\tconst showSortingHeatmap = ref(true);\r\n\tconst isInitializing = ref(true);\r\n\tconst hasAutoCompared = ref(false);\r\n\tconst leftDataLoaded = ref(false);\r\n\tconst rightDataLoaded = ref(false);\r\n\tconst sortedFieldsWithScores = ref([]);\r\n\r\n\t// 可比较字段配置\r\n\tconst COMPARABLE_FIELDS = [\r\n\t\t{\r\n\t\t\tkey: \"GDP\",\r\n\t\t\ttype: \"number\",\r\n\t\t\ttypeLabel: \"数值(美元)\",\r\n\t\t\tvisualization: \"bar-chart\",\r\n\t\t\tlegend: \"国内生产总值（单位：万亿美元）\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Population\",\r\n\t\t\ttype: \"number\",\r\n\t\t\ttypeLabel: \"数值(人)\",\r\n\t\t\tvisualization: \"bar-chart\",\r\n\t\t\tlegend: \"人口数量（单位：亿人）\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"GDP growth\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"line-chart\",\r\n\t\t\tlegend: \"GDP年增长率（%）\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Inflation (CPI)\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"pie-chart\",\r\n\t\t\tlegend: \"消费者价格指数变化\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"GDP rank\",\r\n\t\t\ttype: \"text\",\r\n\t\t\ttypeLabel: \"文本\",\r\n\t\t\tvisualization: \"text-only\",\r\n\t\t\tlegend: \"全球GDP排名\"\r\n\t\t}\r\n\t];\r\n\r\n\t// 自动对比方法\r\n\tconst tryAutoCompare = () => {\r\n\t\tif (\r\n\t\t\thasAutoCompared.value ||\r\n\t\t\t!leftDataLoaded.value ||\r\n\t\t\t!rightDataLoaded.value\r\n\t\t)\r\n\t\t\treturn;\r\n\r\n\t\tisInitializing.value = true;\r\n\t\thasAutoCompared.value = true;\r\n\r\n\t\t// 找到分数最高的字段进行自动对比\r\n\t\tconst mostSignificantField = sortedFieldsWithScores.value[0];\r\n\t\tif (mostSignificantField) {\r\n\t\t\temit(\"compareAttribute\", {\r\n\t\t\t\tfieldKey: mostSignificantField.key,\r\n\t\t\t\tleftData: getField(leftInfobox.value, mostSignificantField.key),\r\n\t\t\t\trightData: getField(rightInfobox.value, mostSignificantField.key),\r\n\t\t\t\tleftTitle: leftInfobox.value.title,\r\n\t\t\t\trightTitle: rightInfobox.value.title,\r\n\t\t\t\tfieldType: mostSignificantField.type,\r\n\t\t\t\tfieldLabel: mostSignificantField.typeLabel\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tisInitializing.value = false;\r\n\t};\r\n\r\n\tconst getField = (infobox, fieldKey) => {\r\n\t\tif (!infobox?.data) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tfor (const section of Object.values(infobox.data)) {\r\n\t\t\tif (section[fieldKey] !== undefined) {\r\n\t\t\t\tconst fieldData = section[fieldKey];\r\n\r\n\t\t\t\tif (Array.isArray(fieldData)) {\r\n\t\t\t\t\treturn fieldData.map(item => {\r\n\t\t\t\t\t\tif (typeof item === \"object\" && item !== null) {\r\n\t\t\t\t\t\t\treturn item.value ?? item.raw ?? item;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn item;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (typeof fieldData === \"object\" && fieldData !== null) {\r\n\t\t\t\t\treturn [fieldData.value ?? fieldData.raw ?? fieldData];\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn [fieldData];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [];\r\n\t};\r\n\r\n\tconst calculateDifferenceScore = field => {\r\n\t\tconst leftValues = getField(leftInfobox.value, field.key)\r\n\t\t\t.map(v => (typeof v === \"object\" ? v.value ?? v.raw : v))\r\n\t\t\t.map(Number)\r\n\t\t\t.filter(n => !isNaN(n));\r\n\r\n\t\tconst rightValues = getField(rightInfobox.value, field.key)\r\n\t\t\t.map(v => (typeof v === \"object\" ? v.value ?? v.raw : v))\r\n\t\t\t.map(Number)\r\n\t\t\t.filter(n => !isNaN(n));\r\n\r\n\t\tif (leftValues.length === 0 || rightValues.length === 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tlet maxScore = 0;\r\n\t\tconst comparedPairs = [];\r\n\r\n\t\tleftValues.forEach(leftNum => {\r\n\t\t\trightValues.forEach(rightNum => {\r\n\t\t\t\tconst isOpposite =\r\n\t\t\t\t\t(leftNum > 0 && rightNum < 0) || (leftNum < 0 && rightNum > 0);\r\n\r\n\t\t\t\tconst absDiff = Math.abs(leftNum - rightNum);\r\n\t\t\t\tconst avg = (Math.abs(leftNum) + Math.abs(rightNum)) / 2;\r\n\t\t\t\tconst relativeDiff = avg > 0 ? absDiff / avg : 0;\r\n\r\n\t\t\t\tlet score;\r\n\t\t\t\tif (isOpposite) {\r\n\t\t\t\t\tscore = 90 + 10 * relativeDiff;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tscore = 10 + 40 * relativeDiff;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcomparedPairs.push({\r\n\t\t\t\t\tleftNum,\r\n\t\t\t\t\trightNum,\r\n\t\t\t\t\tisOpposite,\r\n\t\t\t\t\trelativeDiff,\r\n\t\t\t\t\tscore\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (score > maxScore) maxScore = score;\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tconst weight = field.key.toLowerCase().includes(\"gdp growth\") ? 3 : 1;\r\n\t\tconst finalScore = Math.min(100, Math.round(maxScore * weight));\r\n\r\n\t\treturn finalScore;\r\n\t};\r\n\r\n\tconst getFieldWeight = fieldKey => {\r\n\t\tconst weights = {\r\n\t\t\tGDP: 1.5,\r\n\t\t\tPopulation: 1.3,\r\n\t\t\t\"GDP growth\": 2.0,\r\n\t\t\tInflation: 1.8,\r\n\t\t\tLabor: 1.2\r\n\t\t};\r\n\r\n\t\tfor (const [key, weight] of Object.entries(weights)) {\r\n\t\t\tif (fieldKey.toLowerCase().includes(key.toLowerCase())) {\r\n\t\t\t\treturn weight;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn 1.0;\r\n\t};\r\n\r\n\tconst getHeatmapColor = score => {\r\n\t\tconst maxScore = 100;\r\n\t\tconst ratio = Math.min(score / maxScore, 1);\r\n\t\tconst hue = (1 - ratio) * 120;\r\n\t\treturn `hsl(${hue}, 80%, ${85 - ratio * 25}%)`;\r\n\t};\r\n\r\n\tconst sortedFields = computed(() => {\r\n\t\treturn sortedFieldsWithScores.value;\r\n\t});\r\n\r\n\tconst comparableFields = computed(() => {\r\n\t\treturn COMPARABLE_FIELDS.filter(field => {\r\n\t\t\tconst leftVal = getField(leftInfobox.value, field.key);\r\n\t\t\tconst rightVal = getField(rightInfobox.value, field.key);\r\n\t\t\treturn leftVal.length > 0 || rightVal.length > 0;\r\n\t\t});\r\n\t});\r\n\r\n\tconst tryCalculateScores = () => {\r\n\t\tif (leftDataLoaded.value && rightDataLoaded.value) {\r\n\t\t\tsortedFieldsWithScores.value = comparableFields.value\r\n\t\t\t\t.map(field => ({\r\n\t\t\t\t\t...field,\r\n\t\t\t\t\tscore: calculateDifferenceScore(field)\r\n\t\t\t\t}))\r\n\t\t\t\t.sort((a, b) => {\r\n\t\t\t\t\tif (a.type !== \"text\" && b.type === \"text\") return -1;\r\n\t\t\t\t\tif (a.type === \"text\" && b.type !== \"text\") return 1;\r\n\t\t\t\t\treturn b.score - a.score;\r\n\t\t\t\t});\r\n\r\n\t\t\t// 计算完成后尝试自动对比\r\n\t\t\ttryAutoCompare();\r\n\t\t}\r\n\t};\r\n\r\n\tconst showFullChart = (infobox, field) => {\r\n\t\tcurrentChart.value = {\r\n\t\t\ttitle: infobox.title,\r\n\t\t\tfield: field,\r\n\t\t\tdata: getField(infobox, field.key)\r\n\t\t};\r\n\t\tshowFullChartModal.value = true;\r\n\t};\r\n\r\n\tconst closeFullChart = () => {\r\n\t\tshowFullChartModal.value = false;\r\n\t};\r\n\r\n\tconst hoverInfobox = (infobox, fieldKey, side) => {\r\n\t\tbus.emit(`hover-${side}-infobox`, {\r\n\t\t\tfieldKey,\r\n\t\t\tinfoboxTitle: infobox.title\r\n\t\t});\r\n\r\n\t\tconst divId = side === \"left\" ? \"div1\" : \"div3\";\r\n\t\tbus.emit(`highlight-${divId}-paragraphs`, fieldKey);\r\n\t};\r\n\r\n\tconst unhoverInfobox = side => {\r\n\t\tbus.emit(`unhover-${side}-infobox`);\r\n\t\tconst divId = side === \"left\" ? \"div1\" : \"div3\";\r\n\t\tbus.emit(`clear-${divId}-highlights`);\r\n\t};\r\n\r\n\tconst hoverBothInfoboxes = fieldKey => {\r\n\t\thoverInfobox(leftInfobox.value, fieldKey, \"left\");\r\n\t\thoverInfobox(rightInfobox.value, fieldKey, \"right\");\r\n\t};\r\n\r\n\tconst unhoverBothInfoboxes = () => {\r\n\t\tunhoverInfobox(\"left\");\r\n\t\tunhoverInfobox(\"right\");\r\n\t};\r\n\r\n\tconst handleMiddleColumnClick = field => {\r\n\t\temit(\"compareAttribute\", {\r\n\t\t\tfieldKey: field.key,\r\n\t\t\tleftData: getField(leftInfobox.value, field.key),\r\n\t\t\trightData: getField(rightInfobox.value, field.key),\r\n\t\t\tleftTitle: leftInfobox.value.title,\r\n\t\t\trightTitle: rightInfobox.value.title,\r\n\t\t\tfieldType: field.type,\r\n\t\t\tfieldLabel: field.typeLabel\r\n\t\t});\r\n\r\n\t\tbus.emit(\"highlight-div1-paragraphs\", field.key);\r\n\t\tbus.emit(\"highlight-div3-paragraphs\", field.key);\r\n\t};\r\n\r\n\tconst showCombinedChart = field => {\r\n\t\tconst leftData = getField(leftInfobox.value, field.key);\r\n\t\tconst rightData = getField(rightInfobox.value, field.key);\r\n\r\n\t\tcurrentChart.value = {\r\n\t\t\ttitle: `合并图表 - ${field.key}`,\r\n\t\t\tfield: field,\r\n\t\t\tdata: [...leftData, ...rightData]\r\n\t\t};\r\n\t\tshowFullChartModal.value = true;\r\n\t};\r\n\r\n\tconst processInfoboxData = data => {\r\n\t\tif (!data) {\r\n\t\t\tconsole.warn(\"接收到空Infobox数据\");\r\n\t\t\treturn { title: \"\", type: \"\", data: {} };\r\n\t\t}\r\n\t\treturn {\r\n\t\t\ttitle: data.title || \"无标题\",\r\n\t\t\ttype: data.type || \"未知类型\",\r\n\t\t\tdata: data.sections || {}\r\n\t\t};\r\n\t};\r\n\r\n\tonMounted(() => {\r\n\t\tbus.on(\"div1_InfoboxData\", data => {\r\n\t\t\tleftInfobox.value = processInfoboxData(data);\r\n\t\t\tleftDataLoaded.value = true;\r\n\t\t\ttryCalculateScores();\r\n\t\t});\r\n\r\n\t\tbus.on(\"div3_InfoboxData\", data => {\r\n\t\t\trightInfobox.value = processInfoboxData(data);\r\n\t\t\trightDataLoaded.value = true;\r\n\t\t\ttryCalculateScores();\r\n\t\t});\r\n\t});\r\n\r\n\twatch(\r\n\t\t[() => leftDataLoaded.value, () => rightDataLoaded.value],\r\n\t\t([leftLoaded, rightLoaded]) => {\r\n\t\t\tif (leftLoaded && rightLoaded) {\r\n\t\t\t\ttryCalculateScores();\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\r\n\tonUnmounted(() => {\r\n\t\tbus.off(\"div1_InfoboxData\");\r\n\t\tbus.off(\"div3_InfoboxData\");\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.compare-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tpadding: 8px;\r\n\t\tbox-sizing: border-box;\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t.initial-loading {\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\tbottom: 0;\r\n\t\tbackground: rgba(255, 255, 255, 0.8);\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tz-index: 100;\r\n\t}\r\n\r\n\t.initial-loading p {\r\n\t\tmargin-top: 10px;\r\n\t\tfont-size: 14px;\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.loading-spinner {\r\n\t\twidth: 30px;\r\n\t\theight: 30px;\r\n\t\tborder: 3px solid #f3f3f3;\r\n\t\tborder-top: 3px solid #4caf50;\r\n\t\tborder-radius: 50%;\r\n\t\tanimation: spin 1s linear infinite;\r\n\t}\r\n\r\n\t@keyframes spin {\r\n\t\t0% {\r\n\t\t\ttransform: rotate(0deg);\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform: rotate(360deg);\r\n\t\t}\r\n\t}\r\n\r\n\t.heatmap-control {\r\n\t\tmargin-bottom: 10px;\r\n\t\ttext-align: right;\r\n\t}\r\n\r\n\t.heatmap-control button {\r\n\t\tpadding: 6px 12px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tborder-radius: 4px;\r\n\t\tcursor: pointer;\r\n\t}\r\n\r\n\t.sorting-heatmap {\r\n\t\tmargin-bottom: 20px;\r\n\t\tborder: 1px solid #eee;\r\n\t\tborder-radius: 8px;\r\n\t\toverflow: hidden;\r\n\t\tbox-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t.heatmap-header {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: 50px 2fr 1fr 1fr 1fr;\r\n\t\tpadding: 8px 12px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tfont-weight: bold;\r\n\t}\r\n\r\n\t.heatmap-row {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: 50px 2fr 1fr 1fr 1fr;\r\n\t\tpadding: 8px 12px;\r\n\t\tborder-bottom: 1px solid #eee;\r\n\t\ttransition: all 0.3s;\r\n\t}\r\n\r\n\t.heatmap-row:hover {\r\n\t\ttransform: scale(1.01);\r\n\t\tbox-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t.field-rank {\r\n\t\tfont-weight: bold;\r\n\t\tcolor: #2c3e50;\r\n\t}\r\n\r\n\t.field-name {\r\n\t\tfont-weight: bold;\r\n\t}\r\n\r\n\t.field-type {\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.field-score {\r\n\t\ttext-align: right;\r\n\t\tfont-family: monospace;\r\n\t}\r\n\r\n\t.field-weight {\r\n\t\ttext-align: right;\r\n\t\tfont-family: monospace;\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.comparison-grid {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns:\r\n\t\t\tminmax(120px, 1fr)\r\n\t\t\tminmax(80px, 100px)\r\n\t\t\tminmax(120px, 1fr);\r\n\t\twidth: 100%;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t\tborder-radius: 4px;\r\n\t\toverflow: hidden;\r\n\t\tmax-height: 500px;\r\n\t\toverflow-y: auto;\r\n\t}\r\n\r\n\t.header {\r\n\t\tpadding: 8px 6px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n\t\tposition: sticky;\r\n\t\ttop: 0;\r\n\t\tz-index: 1;\r\n\t\tborder-right: 1px solid #475569;\r\n\t\tmin-height: 36px;\r\n\t\tfont-size: 13px;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t}\r\n\r\n\t.header.middle-column {\r\n\t\tpadding: 8px 4px;\r\n\t\tbackground: #1e293b;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t}\r\n\r\n\t.cell {\r\n\t\tpadding: 8px;\r\n\t\theight: 110px;\r\n\t\tborder-bottom: 1px solid #e0e0e0;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tjustify-content: center;\r\n\t\tposition: relative;\r\n\t\tcursor: pointer;\r\n\t\ttransition: all 0.3s ease;\r\n\t\tmin-width: 0;\r\n\t\toverflow: hidden;\r\n\t}\r\n\r\n\t.left-column,\r\n\t.right-column {\r\n\t\tmax-width: 100%;\r\n\t}\r\n\r\n\t.cell:hover {\r\n\t\tbackground-color: #f5f5f5;\r\n\t}\r\n\r\n\t.left-column:hover {\r\n\t\tbackground-color: #fff8e1;\r\n\t}\r\n\r\n\t.right-column:hover {\r\n\t\tbackground-color: #fff8e1;\r\n\t}\r\n\r\n\t.middle-column {\r\n\t\tposition: relative;\r\n\t\tcursor: default;\r\n\t\tbackground-color: #f8f9fa;\r\n\t\ttransition: background-color 0.2s;\r\n\t}\r\n\r\n\t.middle-column:hover {\r\n\t\tbackground-color: #e9ecef;\r\n\t}\r\n\r\n\t.field-name {\r\n\t\tfont-weight: bold;\r\n\t\tmargin-bottom: 4px;\r\n\t\tfont-size: 12px;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t\ttext-align: center;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t.field-type {\r\n\t\tcolor: #666;\r\n\t\tfont-size: 11px;\r\n\t\tfont-style: italic;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t\ttext-align: center;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t.icon-actions {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\tgap: 15px;\r\n\t\tmargin-top: 8px;\r\n\t}\r\n\r\n\t.icon-btn {\r\n\t\tfont-size: 16px;\r\n\t\tcursor: pointer;\r\n\t\topacity: 0.7;\r\n\t\ttransition: all 0.2s;\r\n\t}\r\n\r\n\t.icon-btn:hover {\r\n\t\topacity: 1;\r\n\t\ttransform: scale(1.2);\r\n\t}\r\n\r\n\t.icon-btn.compare:hover {\r\n\t\tcolor: #4caf50;\r\n\t}\r\n\r\n\t.icon-btn.merge:hover {\r\n\t\tcolor: #2196f3;\r\n\t}\r\n\r\n\t.full-chart-modal {\r\n\t\tposition: fixed;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\tbottom: 0;\r\n\t\tbackground-color: rgba(0, 0, 0, 0.3);\r\n\t\tbackdrop-filter: blur(8px);\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t\tz-index: 1000;\r\n\t\tanimation: fadeIn 0.3s ease-out;\r\n\t}\r\n\r\n\t.modal-content {\r\n\t\tbackground: white;\r\n\t\tpadding: 16px;\r\n\t\tborder-radius: 8px;\r\n\t\twidth: 85%;\r\n\t\tmax-width: 800px;\r\n\t\tmax-height: 85vh;\r\n\t\tposition: relative;\r\n\t\toverflow-y: auto;\r\n\t}\r\n\r\n\t.chart-container {\r\n\t\theight: 60vh;\r\n\t\twidth: 100%;\r\n\t\tmargin: 16px 0;\r\n\t}\r\n\r\n\t.chart-legend {\r\n\t\tfont-size: 13px;\r\n\t\tcolor: #666;\r\n\t\ttext-align: center;\r\n\t\tmargin-top: 12px;\r\n\t\tpadding-top: 12px;\r\n\t\tborder-top: 1px solid #eee;\r\n\t}\r\n\r\n\t.close-btn {\r\n\t\tposition: absolute;\r\n\t\ttop: 8px;\r\n\t\tright: 8px;\r\n\t\tfont-size: 20px;\r\n\t\tbackground: none;\r\n\t\tborder: none;\r\n\t\tcursor: pointer;\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.close-btn:hover {\r\n\t\tcolor: #333;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}