{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, withModifiers as _withModifiers, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-1f9d3193\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"href\", \"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createCommentVNode(\" 目录按钮 \"), _createElementVNode(\"button\", {\n    onClick: $setup.toggleOutline\n  }, _toDisplayString($setup.isVisible ? \"隐藏目录\" : \"显示目录\"), 1 /* TEXT */), _createCommentVNode(\" 目录列表 \"), $setup.isVisible ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.outline, item => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: item.id\n    }, [_createElementVNode(\"a\", {\n      href: '#' + item.id,\n      class: _normalizeClass({\n        linked: $setup.isLinked(item)\n      }),\n      onClick: _withModifiers($event => $setup.scrollToChapter(item.id), [\"prevent\"])\n    }, _toDisplayString(item.text), 11 /* TEXT, CLASS, PROPS */, _hoisted_2)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","_createElementBlock","_createCommentVNode","_createElementVNode","onClick","$setup","toggleOutline","_toDisplayString","isVisible","_hoisted_1","_Fragment","_renderList","outline","item","id","href","class","_normalizeClass","linked","isLinked","_withModifiers","$event","scrollToChapter","text","_hoisted_2"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\ArticleOutline.vue"],"sourcesContent":["<script setup>\r\n\timport { ref, watch, onMounted, onUnmounted } from \"vue\";\r\n\timport eventBus from \"@/js/eventBus.js\";\r\n\r\n\tconst props = defineProps({\r\n\t\tcontent: String, // 文章 HTML\r\n\t\tdivId: String // \"div1\" 或 \"div3\"\r\n\t});\r\n\r\n\tconst isVisible = ref(false);\r\n\tconst outline = ref([]);\r\n\tconst linkedOutline = ref([]);\r\n\r\n\t// **切换大纲**\r\n\tconst toggleOutline = () => {\r\n\t\tisVisible.value = !isVisible.value;\r\n\t};\r\n\r\n\t// **提取文章大纲**\r\n\tconst extractOutline = (content, containerId) => {\r\n\t\tif (!content) return [];\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst doc = parser.parseFromString(content, \"text/html\");\r\n\t\tconst headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\r\n\r\n\t\treturn Array.from(headings).map((heading, index) => {\r\n\t\t\tconst level = parseInt(heading.tagName.substring(1));\r\n\t\t\tconst id = `heading-${index}-${containerId}`;\r\n\t\t\theading.id = id;\r\n\t\t\treturn { id, text: heading.textContent.trim(), level };\r\n\t\t});\r\n\t};\r\n\r\n\t// **文本标准化**\r\n\tconst normalizeText = text =>\r\n\t\ttext\r\n\t\t\t.toLowerCase()\r\n\t\t\t.replace(/[^\\w\\s]/g, \"\")\r\n\t\t\t.trim();\r\n\r\n\t// **计算余弦相似度**\r\n\tconst cosineSimilarity = (text1, text2) => {\r\n\t\tconst words1 = normalizeText(text1).split(/\\s+/);\r\n\t\tconst words2 = normalizeText(text2).split(/\\s+/);\r\n\t\tconst wordSet = new Set([...words1, ...words2]);\r\n\r\n\t\tlet vec1 = [],\r\n\t\t\tvec2 = [];\r\n\t\twordSet.forEach(word => {\r\n\t\t\tvec1.push(words1.filter(w => w === word).length);\r\n\t\t\tvec2.push(words2.filter(w => w === word).length);\r\n\t\t});\r\n\r\n\t\tconst dotProduct = vec1.reduce((sum, val, i) => sum + val * vec2[i], 0);\r\n\t\tconst magnitude1 = Math.sqrt(vec1.reduce((sum, val) => sum + val ** 2, 0));\r\n\t\tconst magnitude2 = Math.sqrt(vec2.reduce((sum, val) => sum + val ** 2, 0));\r\n\r\n\t\treturn magnitude1 && magnitude2\r\n\t\t\t? dotProduct / (magnitude1 * magnitude2)\r\n\t\t\t: 0;\r\n\t};\r\n\r\n\t// **编辑距离计算**\r\n\tconst levenshteinDistance = (a, b) => {\r\n\t\tconst dp = Array(a.length + 1)\r\n\t\t\t.fill(null)\r\n\t\t\t.map(() => Array(b.length + 1).fill(0));\r\n\r\n\t\tfor (let i = 0; i <= a.length; i++) dp[i][0] = i;\r\n\t\tfor (let j = 0; j <= b.length; j++) dp[0][j] = j;\r\n\r\n\t\tfor (let i = 1; i <= a.length; i++) {\r\n\t\t\tfor (let j = 1; j <= b.length; j++) {\r\n\t\t\t\tconst cost = a[i - 1] === b[j - 1] ? 0 : 1;\r\n\t\t\t\tdp[i][j] = Math.min(\r\n\t\t\t\t\tdp[i - 1][j] + 1,\r\n\t\t\t\t\tdp[i][j - 1] + 1,\r\n\t\t\t\t\tdp[i - 1][j - 1] + cost\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn dp[a.length][b.length];\r\n\t};\r\n\r\n\t// **匹配逻辑**\r\n\tconst isSimilar = (text1, text2) => {\r\n\t\tconst sim1 = cosineSimilarity(text1, text2); // 余弦相似度\r\n\t\tconst sim2 = levenshteinDistance(text1, text2); // 编辑距离\r\n\t\treturn sim1 > 0.4 || sim2 <= 3; // 调整余弦相似度阈值为 0.4，编辑距离阈值 3\r\n\t};\r\n\r\n\t// **生成匹配大纲**\r\n\tconst generateLinkedOutline = (outline1, outline2) => {\r\n\t\tconst linked = [];\r\n\t\toutline1.forEach(item1 => {\r\n\t\t\toutline2.forEach(item2 => {\r\n\t\t\t\tif (isSimilar(item1.text, item2.text)) {\r\n\t\t\t\t\tlinked.push({ leftId: item1.id, rightId: item2.id });\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn linked;\r\n\t};\r\n\r\n\t// **监听内容变化**\r\n\twatch(\r\n\t\t() => props.content,\r\n\t\tnewContent => {\r\n\t\t\toutline.value = extractOutline(newContent, props.divId);\r\n\r\n\t\t\t// 仅在 div1 计算匹配，并广播给 div3\r\n\t\t\tif (props.divId === \"div1\") {\r\n\t\t\t\tconst otherContent = document.getElementById(\"div3\")?.innerHTML;\r\n\t\t\t\tconst otherOutline = extractOutline(otherContent, \"div3\");\r\n\t\t\t\tconst newLinkedOutline = generateLinkedOutline(\r\n\t\t\t\t\toutline.value,\r\n\t\t\t\t\totherOutline\r\n\t\t\t\t);\r\n\t\t\t\tlinkedOutline.value = newLinkedOutline;\r\n\t\t\t\teventBus.emit(\"update-linked-outline\", newLinkedOutline);\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\t// **监听 eventBus**\r\n\teventBus.on(\"update-linked-outline\", newLinkedOutline => {\r\n\t\tlinkedOutline.value = newLinkedOutline;\r\n\t});\r\n\r\n\t// **高亮匹配项**\r\n\tconst isLinked = item =>\r\n\t\tlinkedOutline.value.some(\r\n\t\t\tlinked => linked.leftId === item.id || linked.rightId === item.id\r\n\t\t);\r\n\r\n\t// **滚动到章节**\r\n\tconst scrollToChapter = id => {\r\n\t\tdocument.getElementById(id)?.scrollIntoView({ behavior: \"smooth\" });\r\n\r\n\t\tconst linkedItem = linkedOutline.value.find(\r\n\t\t\tlinked => linked.leftId === id || linked.rightId === id\r\n\t\t);\r\n\t\tif (linkedItem) {\r\n\t\t\tconst targetId =\r\n\t\t\t\tlinkedItem.leftId === id ? linkedItem.rightId : linkedItem.leftId;\r\n\t\t\teventBus.emit(\"scroll-to-chapter\", targetId);\r\n\t\t}\r\n\t};\r\n\r\n\teventBus.on(\"scroll-to-chapter\", targetId => {\r\n\t\tdocument.getElementById(targetId)?.scrollIntoView({ behavior: \"smooth\" });\r\n\t});\r\n\r\n\t// **初始化**\r\n\tonMounted(() => {\r\n\t\toutline.value = extractOutline(props.content, props.divId);\r\n\t});\r\n\r\n\tonUnmounted(() => {\r\n\t\teventBus.off(\"update-linked-outline\");\r\n\t\teventBus.off(\"scroll-to-chapter\");\r\n\t});\r\n</script>\r\n\r\n<template>\r\n\t<div>\r\n\t\t<!-- 目录按钮 -->\r\n\t\t<button @click=\"toggleOutline\">\r\n\t\t\t{{ isVisible ? \"隐藏目录\" : \"显示目录\" }}\r\n\t\t</button>\r\n\r\n\t\t<!-- 目录列表 -->\r\n\t\t<ul v-if=\"isVisible\">\r\n\t\t\t<li v-for=\"item in outline\" :key=\"item.id\">\r\n\t\t\t\t<a\r\n\t\t\t\t\t:href=\"'#' + item.id\"\r\n\t\t\t\t\t:class=\"{ linked: isLinked(item) }\"\r\n\t\t\t\t\t@click.prevent=\"scrollToChapter(item.id)\">\r\n\t\t\t\t\t{{ item.text }}\r\n\t\t\t\t</a>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t</div>\r\n</template>\r\n\r\n<style scoped>\r\n\tbutton {\r\n\t\tmargin-bottom: 10px;\r\n\t\tpadding: 8px 12px;\r\n\t\tbackground-color: #007bff;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tborder-radius: 4px;\r\n\t\tcursor: pointer;\r\n\t}\r\n\tbutton:hover {\r\n\t\tbackground-color: #0056b3;\r\n\t}\r\n\tul {\r\n\t\tlist-style: none;\r\n\t\tpadding: 0;\r\n\t}\r\n\tli {\r\n\t\tmargin: 5px 0;\r\n\t}\r\n\ta {\r\n\t\ttext-decoration: none;\r\n\t\tcolor: black;\r\n\t}\r\n\t.linked {\r\n\t\tcolor: red;\r\n\t\tfont-weight: bold;\r\n\t}\r\n</style>\r\n"],"mappings":";;;EAAAA,GAAA;AAAA;mBAAA;;uBAsKCC,mBAAA,CAiBM,cAhBLC,mBAAA,UAAa,EACbC,mBAAA,CAES;IAFAC,OAAK,EAAEC,MAAA,CAAAC;EAAa,GAAAC,gBAAA,CACzBF,MAAA,CAAAG,SAAS,oCAGbN,mBAAA,UAAa,EACHG,MAAA,CAAAG,SAAS,I,cAAnBP,mBAAA,CASK,MAtLPQ,UAAA,I,kBA8KGR,mBAAA,CAOKS,SAAA,QArLRC,WAAA,CA8KsBN,MAAA,CAAAO,OAAO,EAAfC,IAAI;yBAAfZ,mBAAA,CAOK;MAPwBD,GAAG,EAAEa,IAAI,CAACC;QACtCX,mBAAA,CAKI;MAJFY,IAAI,QAAQF,IAAI,CAACC,EAAE;MACnBE,KAAK,EAjLXC,eAAA;QAAAC,MAAA,EAiLuBb,MAAA,CAAAc,QAAQ,CAACN,IAAI;MAAA;MAC9BT,OAAK,EAlLXgB,cAAA,CAAAC,MAAA,IAkLqBhB,MAAA,CAAAiB,eAAe,CAACT,IAAI,CAACC,EAAE;wBACpCD,IAAI,CAACU,IAAI,gCAnLjBC,UAAA,E;sCAAAtB,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}