{"ast":null,"code":"import * as d3 from \"d3\";\nexport default {\n  data() {\n    return {\n      jsonData: '{\"A\": 10, \"B\": 20, \"C\": 30, \"D\": 40}',\n      // 默认 JSON 数据\n      visualizationType: \"\",\n      // 推荐的可视化类型\n      selectedVisualizationType: \"bar\",\n      // 用户选择的可视化类型\n      chartData: {} // 用于存储图表数据\n    };\n  },\n  methods: {\n    // 获取后端推荐的可视化类型\n    async fetchRecommendation() {\n      try {\n        const response = await fetch(\"http://localhost:8888/recommend_visualization\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            data: JSON.parse(this.jsonData)\n          })\n        });\n        const result = await response.json();\n        this.visualizationType = result.visualization_type;\n        this.chartData = result.data;\n        this.$nextTick(() => {\n          this.renderChart(); // 确保 DOM 更新后渲染图表\n        });\n      } catch (error) {\n        console.error(\"获取推荐失败：\", error);\n      }\n    },\n    // 手动渲染图表\n    renderChart() {\n      const chartElement = this.$refs.chart;\n      if (!chartElement) {\n        console.error(\"图表容器未找到\");\n        return;\n      }\n\n      // 清空之前的图表\n      chartElement.innerHTML = \"\";\n      const svg = d3.select(chartElement).append(\"svg\").attr(\"width\", 500).attr(\"height\", 500);\n      const data = Object.entries(this.chartData);\n\n      // 根据用户选择的可视化类型渲染图表\n      switch (this.selectedVisualizationType) {\n        case \"bar\":\n          this.renderBarChart(svg, data);\n          break;\n        case \"line\":\n          this.renderLineChart(svg, data);\n          break;\n        case \"pie\":\n          this.renderPieChart(svg, data);\n          break;\n        case \"scatter\":\n          this.renderScatterChart(svg, data);\n          break;\n        case \"treemap\":\n          this.renderTreemap(svg, data);\n          break;\n        default:\n          console.error(\"未知的可视化类型：\", this.selectedVisualizationType);\n      }\n    },\n    // 渲染柱状图\n    renderBarChart(svg, data) {\n      svg.selectAll(\"rect\").data(data).enter().append(\"rect\").attr(\"x\", (d, i) => i * 100).attr(\"y\", d => 500 - d[1] * 10).attr(\"width\", 50).attr(\"height\", d => d[1] * 10).attr(\"fill\", \"blue\");\n    },\n    // 渲染折线图\n    renderLineChart(svg, data) {\n      const line = d3.line().x((d, i) => i * 50).y(d => 500 - d[1] * 10);\n      svg.append(\"path\").datum(data).attr(\"d\", line).attr(\"fill\", \"none\").attr(\"stroke\", \"green\").attr(\"stroke-width\", 2);\n    },\n    // 渲染饼图\n    renderPieChart(svg, data) {\n      const pie = d3.pie().value(d => d[1]);\n      const arcs = pie(data);\n      const arc = d3.arc().innerRadius(0).outerRadius(200);\n      const g = svg.append(\"g\").attr(\"transform\", \"translate(250, 250)\");\n      g.selectAll(\"path\").data(arcs).enter().append(\"path\").attr(\"d\", arc).attr(\"fill\", (d, i) => d3.schemeCategory10[i]);\n    },\n    // 渲染散点图\n    renderScatterChart(svg, data) {\n      svg.selectAll(\"circle\").data(data).enter().append(\"circle\").attr(\"cx\", (d, i) => i * 100).attr(\"cy\", d => 500 - d[1] * 10).attr(\"r\", 5).attr(\"fill\", \"red\");\n    },\n    // 渲染树状图\n    renderTreemap(svg, data) {\n      const root = d3.hierarchy({\n        children: data\n      }).sum(d => d[1]); // 使用数据的值作为权重\n\n      const treemap = d3.treemap().size([500, 500]) // 设置树状图的大小\n      .padding(1);\n      treemap(root);\n      const cells = svg.selectAll(\"g\").data(root.leaves()).enter().append(\"g\").attr(\"transform\", d => `translate(${d.x0},${d.y0})`);\n      cells.append(\"rect\").attr(\"width\", d => d.x1 - d.x0).attr(\"height\", d => d.y1 - d.y0).attr(\"fill\", (d, i) => d3.schemeCategory10[i % 10]);\n      cells.append(\"text\").attr(\"x\", 5).attr(\"y\", 20).text(d => d.data[0]); // 显示标签\n    }\n  }\n};","map":{"version":3,"names":["d3","data","jsonData","visualizationType","selectedVisualizationType","chartData","methods","fetchRecommendation","response","fetch","method","headers","body","JSON","stringify","parse","result","json","visualization_type","$nextTick","renderChart","error","console","chartElement","$refs","chart","innerHTML","svg","select","append","attr","Object","entries","renderBarChart","renderLineChart","renderPieChart","renderScatterChart","renderTreemap","selectAll","enter","d","i","line","x","y","datum","pie","value","arcs","arc","innerRadius","outerRadius","g","schemeCategory10","root","hierarchy","children","sum","treemap","size","padding","cells","leaves","x0","y0","x1","y1","text"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\Vis.vue"],"sourcesContent":["<template>\r\n\t<div>\r\n\t\t<h1>Data Visualization with D3.js</h1>\r\n\t\t<div>\r\n\t\t\t<label for=\"jsonData\">输入 JSON 数据：</label>\r\n\t\t\t<textarea id=\"jsonData\" v-model=\"jsonData\" rows=\"5\" cols=\"50\"></textarea>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<label for=\"visualizationType\">选择可视化类型：</label>\r\n\t\t\t<select id=\"visualizationType\" v-model=\"selectedVisualizationType\">\r\n\t\t\t\t<option value=\"bar\">柱状图 (Bar Chart)</option>\r\n\t\t\t\t<option value=\"line\">折线图 (Line Chart)</option>\r\n\t\t\t\t<option value=\"pie\">饼图 (Pie Chart)</option>\r\n\t\t\t\t<option value=\"scatter\">散点图 (Scatter Plot)</option>\r\n\t\t\t\t<option value=\"treemap\">树状图 (Treemap)</option>\r\n\t\t\t</select>\r\n\t\t</div>\r\n\t\t<button @click=\"fetchRecommendation\">获取可视化推荐</button>\r\n\t\t<button @click=\"renderChart\">手动渲染图表</button>\r\n\t\t<div v-if=\"visualizationType\">\r\n\t\t\t<h2>推荐的可视化类型：{{ visualizationType }}</h2>\r\n\t\t\t<div ref=\"chart\"></div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\n\timport * as d3 from \"d3\";\r\n\r\n\texport default {\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t\tjsonData: '{\"A\": 10, \"B\": 20, \"C\": 30, \"D\": 40}', // 默认 JSON 数据\r\n\t\t\t\tvisualizationType: \"\", // 推荐的可视化类型\r\n\t\t\t\tselectedVisualizationType: \"bar\", // 用户选择的可视化类型\r\n\t\t\t\tchartData: {} // 用于存储图表数据\r\n\t\t\t};\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\t// 获取后端推荐的可视化类型\r\n\t\t\tasync fetchRecommendation() {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst response = await fetch(\r\n\t\t\t\t\t\t\"http://localhost:8888/recommend_visualization\",\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tmethod: \"POST\",\r\n\t\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\t\t\t\tdata: JSON.parse(this.jsonData)\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\t\tconst result = await response.json();\r\n\t\t\t\t\tthis.visualizationType = result.visualization_type;\r\n\t\t\t\t\tthis.chartData = result.data;\r\n\t\t\t\t\tthis.$nextTick(() => {\r\n\t\t\t\t\t\tthis.renderChart(); // 确保 DOM 更新后渲染图表\r\n\t\t\t\t\t});\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tconsole.error(\"获取推荐失败：\", error);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t// 手动渲染图表\r\n\t\t\trenderChart() {\r\n\t\t\t\tconst chartElement = this.$refs.chart;\r\n\t\t\t\tif (!chartElement) {\r\n\t\t\t\t\tconsole.error(\"图表容器未找到\");\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 清空之前的图表\r\n\t\t\t\tchartElement.innerHTML = \"\";\r\n\r\n\t\t\t\tconst svg = d3\r\n\t\t\t\t\t.select(chartElement)\r\n\t\t\t\t\t.append(\"svg\")\r\n\t\t\t\t\t.attr(\"width\", 500)\r\n\t\t\t\t\t.attr(\"height\", 500);\r\n\r\n\t\t\t\tconst data = Object.entries(this.chartData);\r\n\r\n\t\t\t\t// 根据用户选择的可视化类型渲染图表\r\n\t\t\t\tswitch (this.selectedVisualizationType) {\r\n\t\t\t\t\tcase \"bar\":\r\n\t\t\t\t\t\tthis.renderBarChart(svg, data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"line\":\r\n\t\t\t\t\t\tthis.renderLineChart(svg, data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"pie\":\r\n\t\t\t\t\t\tthis.renderPieChart(svg, data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"scatter\":\r\n\t\t\t\t\t\tthis.renderScatterChart(svg, data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"treemap\":\r\n\t\t\t\t\t\tthis.renderTreemap(svg, data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tconsole.error(\"未知的可视化类型：\", this.selectedVisualizationType);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t// 渲染柱状图\r\n\t\t\trenderBarChart(svg, data) {\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.selectAll(\"rect\")\r\n\t\t\t\t\t.data(data)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"rect\")\r\n\t\t\t\t\t.attr(\"x\", (d, i) => i * 100)\r\n\t\t\t\t\t.attr(\"y\", d => 500 - d[1] * 10)\r\n\t\t\t\t\t.attr(\"width\", 50)\r\n\t\t\t\t\t.attr(\"height\", d => d[1] * 10)\r\n\t\t\t\t\t.attr(\"fill\", \"blue\");\r\n\t\t\t},\r\n\t\t\t// 渲染折线图\r\n\t\t\trenderLineChart(svg, data) {\r\n\t\t\t\tconst line = d3\r\n\t\t\t\t\t.line()\r\n\t\t\t\t\t.x((d, i) => i * 50)\r\n\t\t\t\t\t.y(d => 500 - d[1] * 10);\r\n\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.append(\"path\")\r\n\t\t\t\t\t.datum(data)\r\n\t\t\t\t\t.attr(\"d\", line)\r\n\t\t\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t\t\t.attr(\"stroke\", \"green\")\r\n\t\t\t\t\t.attr(\"stroke-width\", 2);\r\n\t\t\t},\r\n\t\t\t// 渲染饼图\r\n\t\t\trenderPieChart(svg, data) {\r\n\t\t\t\tconst pie = d3.pie().value(d => d[1]);\r\n\r\n\t\t\t\tconst arcs = pie(data);\r\n\r\n\t\t\t\tconst arc = d3.arc().innerRadius(0).outerRadius(200);\r\n\r\n\t\t\t\tconst g = svg.append(\"g\").attr(\"transform\", \"translate(250, 250)\");\r\n\r\n\t\t\t\tg.selectAll(\"path\")\r\n\t\t\t\t\t.data(arcs)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"path\")\r\n\t\t\t\t\t.attr(\"d\", arc)\r\n\t\t\t\t\t.attr(\"fill\", (d, i) => d3.schemeCategory10[i]);\r\n\t\t\t},\r\n\t\t\t// 渲染散点图\r\n\t\t\trenderScatterChart(svg, data) {\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.selectAll(\"circle\")\r\n\t\t\t\t\t.data(data)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"circle\")\r\n\t\t\t\t\t.attr(\"cx\", (d, i) => i * 100)\r\n\t\t\t\t\t.attr(\"cy\", d => 500 - d[1] * 10)\r\n\t\t\t\t\t.attr(\"r\", 5)\r\n\t\t\t\t\t.attr(\"fill\", \"red\");\r\n\t\t\t},\r\n\t\t\t// 渲染树状图\r\n\t\t\trenderTreemap(svg, data) {\r\n\t\t\t\tconst root = d3.hierarchy({ children: data }).sum(d => d[1]); // 使用数据的值作为权重\r\n\r\n\t\t\t\tconst treemap = d3\r\n\t\t\t\t\t.treemap()\r\n\t\t\t\t\t.size([500, 500]) // 设置树状图的大小\r\n\t\t\t\t\t.padding(1);\r\n\r\n\t\t\t\ttreemap(root);\r\n\r\n\t\t\t\tconst cells = svg\r\n\t\t\t\t\t.selectAll(\"g\")\r\n\t\t\t\t\t.data(root.leaves())\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"transform\", d => `translate(${d.x0},${d.y0})`);\r\n\r\n\t\t\t\tcells\r\n\t\t\t\t\t.append(\"rect\")\r\n\t\t\t\t\t.attr(\"width\", d => d.x1 - d.x0)\r\n\t\t\t\t\t.attr(\"height\", d => d.y1 - d.y0)\r\n\t\t\t\t\t.attr(\"fill\", (d, i) => d3.schemeCategory10[i % 10]);\r\n\r\n\t\t\t\tcells\r\n\t\t\t\t\t.append(\"text\")\r\n\t\t\t\t\t.attr(\"x\", 5)\r\n\t\t\t\t\t.attr(\"y\", 20)\r\n\t\t\t\t\t.text(d => d.data[0]); // 显示标签\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n</script>\r\n\r\n<style scoped>\r\n\ttextarea {\r\n\t\tmargin-bottom: 20px;\r\n\t}\r\n\tbutton {\r\n\t\tmargin-bottom: 20px;\r\n\t}\r\n\t.chart {\r\n\t\tmargin: 20px;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}