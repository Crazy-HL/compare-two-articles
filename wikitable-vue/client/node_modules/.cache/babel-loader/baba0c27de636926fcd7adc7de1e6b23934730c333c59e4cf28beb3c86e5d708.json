{"ast":null,"code":"import { ref, computed, onMounted, watch, onUnmounted } from \"vue\";\nimport SimpleChart from \"./SimpleChart.vue\"; // Adjust path as needed\nimport FullChart from \"./FullChart.vue\"; // Adjust path as needed\nimport bus from \"@/js/eventBus.js\"; // Adjust path as needed\n\nexport default {\n  __name: 'CompareTable',\n  props: {\n    div1RawData: Object,\n    // Raw data for left infobox, potentially from an external source\n    div3RawData: Object // Raw data for right infobox, potentially from an external source\n  },\n  emits: [\"compareAttribute\"],\n  setup(__props, _ref) {\n    let {\n      expose: __expose,\n      emit: __emit\n    } = _ref;\n    __expose();\n    const props = __props;\n    const emit = __emit;\n\n    // State variables\n    const leftInfobox = ref({\n      title: \"左侧数据\",\n      type: \"\",\n      data: {}\n    });\n    const rightInfobox = ref({\n      title: \"右侧数据\",\n      type: \"\",\n      data: {}\n    });\n    const showFullChartModal = ref(false);\n    const currentChart = ref({\n      title: \"\",\n      field: {},\n      // Field configuration (key, type, visualization, legend)\n      data: [] // Actual data array for the chart\n    });\n    const isInitializing = ref(true);\n    const hasAutoCompared = ref(false); // To ensure auto-compare runs only once\n    const leftDataLoaded = ref(false);\n    const rightDataLoaded = ref(false);\n    const sortedFieldsWithScores = ref([]); // Holds fields with their difference scores\n\n    // Comparable fields configuration (ensure keys match data structure)\n    const COMPARABLE_FIELDS = [{\n      key: \"GDP\",\n      type: \"number\",\n      typeLabel: \"数值(美元)\",\n      visualization: \"bar-chart\",\n      legend: \"国内生产总值 (万亿美元)\"\n    }, {\n      key: \"Population\",\n      type: \"number\",\n      typeLabel: \"数值(人)\",\n      visualization: \"bar-chart\",\n      legend: \"人口数量 (亿人)\"\n    }, {\n      key: \"GDP growth\",\n      type: \"percentage\",\n      typeLabel: \"百分比(%)\",\n      visualization: \"line-chart\",\n      legend: \"GDP年增长率 (%)\"\n    }, {\n      key: \"Inflation (CPI)\",\n      type: \"percentage\",\n      typeLabel: \"百分比(%)\",\n      visualization: \"pie-chart\",\n      legend: \"消费者价格指数变化 (%)\"\n    }, {\n      key: \"GDP rank\",\n      type: \"text\",\n      typeLabel: \"文本\",\n      visualization: \"text-only\",\n      legend: \"全球GDP排名\"\n    }\n    // Add more fields as needed\n    ];\n\n    // --- Core Data Processing ---\n\n    // MODIFIED getField: Returns an array of full data objects for the given fieldKey\n    const getField = (infobox, fieldKey) => {\n      if (!infobox?.data) {\n        return [];\n      }\n      // Assuming infobox.data is an object where keys are section names\n      // and values are objects containing the actual data fields.\n      // e.g., infobox.data.Statistics['GDP growth']\n      for (const section of Object.values(infobox.data)) {\n        if (section && typeof section === \"object\" && section[fieldKey] !== undefined) {\n          const fieldData = section[fieldKey];\n          if (Array.isArray(fieldData)) {\n            return fieldData; // Returns array of objects like { value: 1.4, raw: \"1.4% (2023)\", ... }\n          }\n          return [fieldData]; // Wraps single object/primitive in an array\n        }\n      }\n      return []; // Field not found in any section\n    };\n\n    // Process raw data received for an infobox\n    const processInfoboxData = rawData => {\n      if (!rawData) {\n        return {\n          title: \"无数据\",\n          type: \"未知\",\n          data: {}\n        };\n      }\n      // Assuming rawData has a 'title', 'type', and 'data' (which itself contains sections)\n      // This structure should match what `getField` expects for `infobox.data`.\n      // If your `div1RawData` is already in the { title, type, data: { section1: ..., section2: ...}} format,\n      // you might not need much processing here.\n      // Example: if rawData = { \"title\": \"USA\", \"type\": \"Country\", \"data\": { \"Statistics\": { \"GDP\": ... } } }\n      return {\n        title: rawData.title || \"无标题\",\n        type: rawData.type || \"未知类型\",\n        data: rawData.data || {} // This 'data' should contain the sections\n      };\n    };\n\n    // --- Charting and Display ---\n\n    // Calculate unified max value for consistent Y-axis scaling in SimpleChart\n    const getUnifiedMaxValue = fieldKey => {\n      const extractNumericValue = item => {\n        if (typeof item === \"object\" && item !== null && item.value !== undefined) {\n          return Number(item.value);\n        }\n        if (typeof item === \"number\") {\n          return item;\n        }\n        return NaN;\n      };\n      const leftValues = getField(leftInfobox.value, fieldKey).map(extractNumericValue).filter(n => !isNaN(n));\n      const rightValues = getField(rightInfobox.value, fieldKey).map(extractNumericValue).filter(n => !isNaN(n));\n      const leftMax = leftValues.length ? Math.max(...leftValues) : 0;\n      const rightMax = rightValues.length ? Math.max(...rightValues) : 0;\n      return Math.max(leftMax, rightMax) * 1.1 || 1; // Add 10% buffer, fallback to 1\n    };\n\n    // Props for SimpleChart component\n    const getChartProps = (infobox, fieldConfig) => {\n      return {\n        field: getField(infobox, fieldConfig.key),\n        // Pass array of full data objects\n        type: fieldConfig.type,\n        visualization: fieldConfig.visualization,\n        unifiedMax: getUnifiedMaxValue(fieldConfig.key),\n        fieldKey: fieldConfig.key\n      };\n    };\n\n    // Show full chart in modal\n    const showFullChart = (infobox, fieldConfig) => {\n      currentChart.value = {\n        title: infobox.title,\n        field: fieldConfig,\n        // Pass the entire field configuration\n        data: getField(infobox, fieldConfig.key) // Pass the array of data objects\n      };\n      showFullChartModal.value = true;\n    };\n    const closeFullChart = () => {\n      showFullChartModal.value = false;\n    };\n\n    // Show combined chart for a field\n    const showCombinedChart = fieldConfig => {\n      const leftData = getField(leftInfobox.value, fieldConfig.key);\n      const rightData = getField(rightInfobox.value, fieldConfig.key);\n\n      // Add a source property to differentiate data if needed by FullChart/sub-charts\n      const combinedData = [...leftData.map(item => ({\n        ...item,\n        sourceTitle: leftInfobox.value.title\n      })), ...rightData.map(item => ({\n        ...item,\n        sourceTitle: rightInfobox.value.title\n      }))];\n      currentChart.value = {\n        title: `合并图表 - ${fieldConfig.key}`,\n        field: fieldConfig,\n        data: combinedData\n      };\n      showFullChartModal.value = true;\n    };\n\n    // --- Comparison Logic & Field Sorting ---\n\n    // Calculate difference score between left and right data for a field\n    const calculateDifferenceScore = fieldConfig => {\n      const extractNumericValue = item => {\n        if (typeof item === \"object\" && item !== null && item.value !== undefined) {\n          return Number(item.value);\n        }\n        if (typeof item === \"number\") {\n          return item;\n        }\n        return NaN;\n      };\n      const leftValues = getField(leftInfobox.value, fieldConfig.key).map(extractNumericValue).filter(n => !isNaN(n));\n      const rightValues = getField(rightInfobox.value, fieldConfig.key).map(extractNumericValue).filter(n => !isNaN(n));\n      if (leftValues.length === 0 || rightValues.length === 0 || fieldConfig.type === \"text\") {\n        return 0; // No basis for numeric comparison or it's text\n      }\n\n      // Simplified scoring: average relative difference of the first comparable values\n      // You can implement more sophisticated scoring.\n      const val1 = leftValues[0];\n      const val2 = rightValues[0];\n      if (val1 === 0 && val2 === 0) return 0;\n      const avg = (Math.abs(val1) + Math.abs(val2)) / 2;\n      if (avg === 0) return 100; // Max difference if one is non-zero and other is zero\n\n      const relativeDiff = Math.abs(val1 - val2) / avg;\n      let score = Math.min(100, relativeDiff * 100); // Scale to 0-100\n\n      // Weighting specific fields\n      if (fieldConfig.key.toLowerCase().includes(\"gdp growth\")) score *= 1.5;\n      if (fieldConfig.key.toLowerCase().includes(\"inflation\")) score *= 1.2;\n      return Math.min(100, Math.round(score));\n    };\n\n    // Determine fields that are present in at least one infobox\n    const availableFields = computed(() => {\n      return COMPARABLE_FIELDS.filter(fieldConf => {\n        const leftVal = getField(leftInfobox.value, fieldConf.key);\n        const rightVal = getField(rightInfobox.value, fieldConf.key);\n        return leftVal.length > 0 || rightVal.length > 0;\n      });\n    });\n\n    // Calculate scores and sort fields\n    const tryCalculateScoresAndSort = () => {\n      if (leftDataLoaded.value && rightDataLoaded.value) {\n        isInitializing.value = true; // Show loading while calculating\n        sortedFieldsWithScores.value = availableFields.value.map(field => ({\n          ...field,\n          score: calculateDifferenceScore(field)\n        })).sort((a, b) => {\n          // Prioritize non-text fields, then sort by score\n          if (a.type !== \"text\" && b.type === \"text\") return -1;\n          if (a.type === \"text\" && b.type !== \"text\") return 1;\n          return b.score - a.score; // Higher score first\n        });\n        isInitializing.value = false;\n        tryAutoCompare(); // Attempt auto-comparison after scores are ready\n      }\n    };\n\n    // Computed property for the template to iterate over\n    const sortedFields = computed(() => sortedFieldsWithScores.value);\n\n    // Automatic comparison of the most significant field\n    const tryAutoCompare = () => {\n      if (hasAutoCompared.value || !leftDataLoaded.value || !rightDataLoaded.value || sortedFields.value.length === 0) {\n        return;\n      }\n      hasAutoCompared.value = true;\n      const mostSignificantField = sortedFields.value[0];\n      if (mostSignificantField && mostSignificantField.type !== \"text\") {\n        // Auto-compare non-text fields\n        handleMiddleColumnClick(mostSignificantField);\n      }\n    };\n\n    // --- Event Handlers & UI Interaction ---\n\n    const handleCellClick = (infobox, fieldConfig) => {\n      showFullChart(infobox, fieldConfig);\n    };\n    const handleMiddleColumnClick = fieldConfig => {\n      emit(\"compareAttribute\", {\n        fieldKey: fieldConfig.key,\n        leftData: getField(leftInfobox.value, fieldConfig.key),\n        rightData: getField(rightInfobox.value, fieldConfig.key),\n        leftTitle: leftInfobox.value.title,\n        rightTitle: rightInfobox.value.title,\n        fieldType: fieldConfig.type,\n        fieldLabel: fieldConfig.typeLabel,\n        fieldConfig: fieldConfig // Pass full config for more context\n      });\n    };\n    const hoverInfobox = (infobox, fieldKey, side) => {\n      bus.emit(`hover-${side}-infobox`, {\n        fieldKey,\n        infoboxTitle: infobox.title\n      });\n    };\n    const unhoverInfobox = side => {\n      bus.emit(`unhover-${side}-infobox`);\n    };\n    const hoverBothInfoboxes = fieldKey => {\n      hoverInfobox(leftInfobox.value, fieldKey, \"left\");\n      hoverInfobox(rightInfobox.value, fieldKey, \"right\");\n    };\n    const unhoverBothInfoboxes = () => {\n      unhoverInfobox(\"left\");\n      unhoverInfobox(\"right\");\n    };\n\n    // Heatmap color based on score (optional visual cue)\n    const getHeatmapColor = score => {\n      if (score === undefined || score === 0) return \"#f8f9fa\"; // Default background\n      const maxScore = 100;\n      const ratio = Math.min(score / maxScore, 1);\n      // Green (low diff) to Yellow to Red (high diff)\n      // Hue: 120 (green) -> 60 (yellow) -> 0 (red)\n      const hue = 120 * (1 - ratio);\n      return `hsl(${hue}, 70%, ${85 - ratio * 20}%)`;\n    };\n\n    // --- Lifecycle and Watchers ---\n\n    onMounted(() => {\n      isInitializing.value = true;\n\n      // Listen for data from event bus (or use props if data comes directly)\n      bus.on(\"div1_InfoboxData\", data => {\n        leftInfobox.value = processInfoboxData(data);\n        leftDataLoaded.value = true;\n        if (leftDataLoaded.value && rightDataLoaded.value) tryCalculateScoresAndSort();\n      });\n      bus.on(\"div3_InfoboxData\", data => {\n        rightInfobox.value = processInfoboxData(data);\n        rightDataLoaded.value = true;\n        if (leftDataLoaded.value && rightDataLoaded.value) tryCalculateScoresAndSort();\n      });\n\n      // If data is passed via props, process it here\n      if (props.div1RawData) {\n        leftInfobox.value = processInfoboxData(props.div1RawData);\n        leftDataLoaded.value = true;\n      }\n      if (props.div3RawData) {\n        rightInfobox.value = processInfoboxData(props.div3RawData);\n        rightDataLoaded.value = true;\n      }\n      if (leftDataLoaded.value && rightDataLoaded.value) {\n        tryCalculateScoresAndSort();\n      } else {\n        // If data is not yet loaded via bus, keep initializing true\n        // It will be set to false after tryCalculateScoresAndSort completes\n        // Or if data is guaranteed to come via props, this might not be needed.\n        if (!props.div1RawData && !props.div3RawData) {\n          // still waiting for bus events\n        } else {\n          isInitializing.value = false; // Data from props was processed or missing\n        }\n      }\n    });\n\n    // Watch for prop changes if data can be updated externally\n    watch(() => props.div1RawData, newData => {\n      if (newData) {\n        leftInfobox.value = processInfoboxData(newData);\n        leftDataLoaded.value = true; // Reset loaded status if needed\n        hasAutoCompared.value = false; // Allow re-auto-compare on data change\n        tryCalculateScoresAndSort();\n      }\n    });\n    watch(() => props.div3RawData, newData => {\n      if (newData) {\n        rightInfobox.value = processInfoboxData(newData);\n        rightDataLoaded.value = true;\n        hasAutoCompared.value = false;\n        tryCalculateScoresAndSort();\n      }\n    });\n    onUnmounted(() => {\n      bus.off(\"div1_InfoboxData\");\n      bus.off(\"div3_InfoboxData\");\n    });\n    const __returned__ = {\n      props,\n      emit,\n      leftInfobox,\n      rightInfobox,\n      showFullChartModal,\n      currentChart,\n      isInitializing,\n      hasAutoCompared,\n      leftDataLoaded,\n      rightDataLoaded,\n      sortedFieldsWithScores,\n      COMPARABLE_FIELDS,\n      getField,\n      processInfoboxData,\n      getUnifiedMaxValue,\n      getChartProps,\n      showFullChart,\n      closeFullChart,\n      showCombinedChart,\n      calculateDifferenceScore,\n      availableFields,\n      tryCalculateScoresAndSort,\n      sortedFields,\n      tryAutoCompare,\n      handleCellClick,\n      handleMiddleColumnClick,\n      hoverInfobox,\n      unhoverInfobox,\n      hoverBothInfoboxes,\n      unhoverBothInfoboxes,\n      getHeatmapColor,\n      ref,\n      computed,\n      onMounted,\n      watch,\n      onUnmounted,\n      SimpleChart,\n      FullChart,\n      get bus() {\n        return bus;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","watch","onUnmounted","SimpleChart","FullChart","bus","props","__props","emit","__emit","leftInfobox","title","type","data","rightInfobox","showFullChartModal","currentChart","field","isInitializing","hasAutoCompared","leftDataLoaded","rightDataLoaded","sortedFieldsWithScores","COMPARABLE_FIELDS","key","typeLabel","visualization","legend","getField","infobox","fieldKey","section","Object","values","undefined","fieldData","Array","isArray","processInfoboxData","rawData","getUnifiedMaxValue","extractNumericValue","item","value","Number","NaN","leftValues","map","filter","n","isNaN","rightValues","leftMax","length","Math","max","rightMax","getChartProps","fieldConfig","unifiedMax","showFullChart","closeFullChart","showCombinedChart","leftData","rightData","combinedData","sourceTitle","calculateDifferenceScore","val1","val2","avg","abs","relativeDiff","score","min","toLowerCase","includes","round","availableFields","fieldConf","leftVal","rightVal","tryCalculateScoresAndSort","sort","a","b","tryAutoCompare","sortedFields","mostSignificantField","handleMiddleColumnClick","handleCellClick","leftTitle","rightTitle","fieldType","fieldLabel","hoverInfobox","side","infoboxTitle","unhoverInfobox","hoverBothInfoboxes","unhoverBothInfoboxes","getHeatmapColor","maxScore","ratio","hue","on","div1RawData","div3RawData","newData","off"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/CompareTable.vue"],"sourcesContent":["<template>\r\n\t<div class=\"compare-container\">\r\n\t\t<!-- 加载状态提示 -->\r\n\t\t<div v-if=\"isInitializing\" class=\"initial-loading\">\r\n\t\t\t<div class=\"loading-spinner\"></div>\r\n\t\t\t<p>正在准备数据对比...</p>\r\n\t\t</div>\r\n\r\n\t\t<!-- 主对比表格 -->\r\n\t\t<div v-if=\"!isInitializing\" class=\"comparison-grid\">\r\n\t\t\t<div class=\"header left-column\">\r\n\t\t\t\t{{ leftInfobox.title }}\r\n\t\t\t</div>\r\n\t\t\t<div class=\"header middle-column\">对比属性</div>\r\n\t\t\t<div class=\"header right-column\">\r\n\t\t\t\t{{ rightInfobox.title }}\r\n\t\t\t</div>\r\n\r\n\t\t\t<template v-for=\"field in sortedFields\" :key=\"field.key\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell left-column\"\r\n\t\t\t\t\t@mouseover=\"hoverInfobox(leftInfobox, field.key, 'left')\"\r\n\t\t\t\t\t@mouseout=\"unhoverInfobox('left')\"\r\n\t\t\t\t\t@click=\"handleCellClick(leftInfobox, field)\">\r\n\t\t\t\t\t<!-- Modified to handleCellClick -->\r\n\t\t\t\t\t<SimpleChart v-bind=\"getChartProps(leftInfobox, field)\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell middle-column\"\r\n\t\t\t\t\t:style=\"{ backgroundColor: getHeatmapColor(field.score) }\"\r\n\t\t\t\t\t@mouseover=\"hoverBothInfoboxes(field.key)\"\r\n\t\t\t\t\t@mouseout=\"unhoverBothInfoboxes()\">\r\n\t\t\t\t\t<div class=\"field-name\">{{ field.key }}</div>\r\n\t\t\t\t\t<div class=\"field-type\">{{ field.typeLabel }}</div>\r\n\t\t\t\t\t<!-- Display score if available -->\r\n\t\t\t\t\t<div v-if=\"field.score !== undefined\" class=\"field-score\">\r\n\t\t\t\t\t\t差异分: {{ field.score }}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"icon-actions\">\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tclass=\"icon-btn compare\"\r\n\t\t\t\t\t\t\ttitle=\"对比分析\"\r\n\t\t\t\t\t\t\t@click=\"handleMiddleColumnClick(field)\">\r\n\t\t\t\t\t\t\t⚖️\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tclass=\"icon-btn merge\"\r\n\t\t\t\t\t\t\ttitle=\"合并图表\"\r\n\t\t\t\t\t\t\t@click=\"showCombinedChart(field)\">\r\n\t\t\t\t\t\t\t📊\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell right-column\"\r\n\t\t\t\t\t@mouseover=\"hoverInfobox(rightInfobox, field.key, 'right')\"\r\n\t\t\t\t\t@mouseout=\"unhoverInfobox('right')\"\r\n\t\t\t\t\t@click=\"handleCellClick(rightInfobox, field)\">\r\n\t\t\t\t\t<!-- Modified to handleCellClick -->\r\n\t\t\t\t\t<SimpleChart v-bind=\"getChartProps(rightInfobox, field)\" />\r\n\t\t\t\t</div>\r\n\t\t\t</template>\r\n\t\t\t<div\r\n\t\t\t\tv-if=\"sortedFields.length === 0 && !isInitializing\"\r\n\t\t\t\tclass=\"no-common-fields\">\r\n\t\t\t\t没有共同的可对比属性。\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- 全屏图表模态框 -->\r\n\t\t<div\r\n\t\t\tv-if=\"showFullChartModal\"\r\n\t\t\tclass=\"full-chart-modal\"\r\n\t\t\t@click.self=\"closeFullChart\">\r\n\t\t\t<div class=\"modal-content\">\r\n\t\t\t\t<button class=\"close-btn\" @click=\"closeFullChart\">×</button>\r\n\t\t\t\t<h3>{{ currentChart.title }} - {{ currentChart.field.key }}</h3>\r\n\t\t\t\t<div class=\"chart-container-modal\">\r\n\t\t\t\t\t<!-- Renamed to avoid conflict -->\r\n\t\t\t\t\t<FullChart\r\n\t\t\t\t\t\t:field=\"currentChart.data\"\r\n\t\t\t\t\t\t:type=\"currentChart.field.type\"\r\n\t\t\t\t\t\t:visualization=\"currentChart.field.visualization\"\r\n\t\t\t\t\t\t:field-key=\"currentChart.field.key\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"chart-legend\" v-if=\"currentChart.field.legend\">\r\n\t\t\t\t\t{{ currentChart.field.legend }}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, onMounted, watch, onUnmounted } from \"vue\";\r\n\timport SimpleChart from \"./SimpleChart.vue\"; // Adjust path as needed\r\n\timport FullChart from \"./FullChart.vue\"; // Adjust path as needed\r\n\timport bus from \"@/js/eventBus.js\"; // Adjust path as needed\r\n\r\n\tconst props = defineProps({\r\n\t\tdiv1RawData: Object, // Raw data for left infobox, potentially from an external source\r\n\t\tdiv3RawData: Object // Raw data for right infobox, potentially from an external source\r\n\t});\r\n\r\n\tconst emit = defineEmits([\"compareAttribute\"]);\r\n\r\n\t// State variables\r\n\tconst leftInfobox = ref({ title: \"左侧数据\", type: \"\", data: {} });\r\n\tconst rightInfobox = ref({ title: \"右侧数据\", type: \"\", data: {} });\r\n\tconst showFullChartModal = ref(false);\r\n\tconst currentChart = ref({\r\n\t\ttitle: \"\",\r\n\t\tfield: {}, // Field configuration (key, type, visualization, legend)\r\n\t\tdata: [] // Actual data array for the chart\r\n\t});\r\n\tconst isInitializing = ref(true);\r\n\tconst hasAutoCompared = ref(false); // To ensure auto-compare runs only once\r\n\tconst leftDataLoaded = ref(false);\r\n\tconst rightDataLoaded = ref(false);\r\n\tconst sortedFieldsWithScores = ref([]); // Holds fields with their difference scores\r\n\r\n\t// Comparable fields configuration (ensure keys match data structure)\r\n\tconst COMPARABLE_FIELDS = [\r\n\t\t{\r\n\t\t\tkey: \"GDP\",\r\n\t\t\ttype: \"number\",\r\n\t\t\ttypeLabel: \"数值(美元)\",\r\n\t\t\tvisualization: \"bar-chart\",\r\n\t\t\tlegend: \"国内生产总值 (万亿美元)\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Population\",\r\n\t\t\ttype: \"number\",\r\n\t\t\ttypeLabel: \"数值(人)\",\r\n\t\t\tvisualization: \"bar-chart\",\r\n\t\t\tlegend: \"人口数量 (亿人)\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"GDP growth\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"line-chart\",\r\n\t\t\tlegend: \"GDP年增长率 (%)\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Inflation (CPI)\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"pie-chart\",\r\n\t\t\tlegend: \"消费者价格指数变化 (%)\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"GDP rank\",\r\n\t\t\ttype: \"text\",\r\n\t\t\ttypeLabel: \"文本\",\r\n\t\t\tvisualization: \"text-only\",\r\n\t\t\tlegend: \"全球GDP排名\"\r\n\t\t}\r\n\t\t// Add more fields as needed\r\n\t];\r\n\r\n\t// --- Core Data Processing ---\r\n\r\n\t// MODIFIED getField: Returns an array of full data objects for the given fieldKey\r\n\tconst getField = (infobox, fieldKey) => {\r\n\t\tif (!infobox?.data) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\t\t// Assuming infobox.data is an object where keys are section names\r\n\t\t// and values are objects containing the actual data fields.\r\n\t\t// e.g., infobox.data.Statistics['GDP growth']\r\n\t\tfor (const section of Object.values(infobox.data)) {\r\n\t\t\tif (\r\n\t\t\t\tsection &&\r\n\t\t\t\ttypeof section === \"object\" &&\r\n\t\t\t\tsection[fieldKey] !== undefined\r\n\t\t\t) {\r\n\t\t\t\tconst fieldData = section[fieldKey];\r\n\t\t\t\tif (Array.isArray(fieldData)) {\r\n\t\t\t\t\treturn fieldData; // Returns array of objects like { value: 1.4, raw: \"1.4% (2023)\", ... }\r\n\t\t\t\t}\r\n\t\t\t\treturn [fieldData]; // Wraps single object/primitive in an array\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn []; // Field not found in any section\r\n\t};\r\n\r\n\t// Process raw data received for an infobox\r\n\tconst processInfoboxData = rawData => {\r\n\t\tif (!rawData) {\r\n\t\t\treturn { title: \"无数据\", type: \"未知\", data: {} };\r\n\t\t}\r\n\t\t// Assuming rawData has a 'title', 'type', and 'data' (which itself contains sections)\r\n\t\t// This structure should match what `getField` expects for `infobox.data`.\r\n\t\t// If your `div1RawData` is already in the { title, type, data: { section1: ..., section2: ...}} format,\r\n\t\t// you might not need much processing here.\r\n\t\t// Example: if rawData = { \"title\": \"USA\", \"type\": \"Country\", \"data\": { \"Statistics\": { \"GDP\": ... } } }\r\n\t\treturn {\r\n\t\t\ttitle: rawData.title || \"无标题\",\r\n\t\t\ttype: rawData.type || \"未知类型\",\r\n\t\t\tdata: rawData.data || {} // This 'data' should contain the sections\r\n\t\t};\r\n\t};\r\n\r\n\t// --- Charting and Display ---\r\n\r\n\t// Calculate unified max value for consistent Y-axis scaling in SimpleChart\r\n\tconst getUnifiedMaxValue = fieldKey => {\r\n\t\tconst extractNumericValue = item => {\r\n\t\t\tif (\r\n\t\t\t\ttypeof item === \"object\" &&\r\n\t\t\t\titem !== null &&\r\n\t\t\t\titem.value !== undefined\r\n\t\t\t) {\r\n\t\t\t\treturn Number(item.value);\r\n\t\t\t}\r\n\t\t\tif (typeof item === \"number\") {\r\n\t\t\t\treturn item;\r\n\t\t\t}\r\n\t\t\treturn NaN;\r\n\t\t};\r\n\r\n\t\tconst leftValues = getField(leftInfobox.value, fieldKey)\r\n\t\t\t.map(extractNumericValue)\r\n\t\t\t.filter(n => !isNaN(n));\r\n\t\tconst rightValues = getField(rightInfobox.value, fieldKey)\r\n\t\t\t.map(extractNumericValue)\r\n\t\t\t.filter(n => !isNaN(n));\r\n\r\n\t\tconst leftMax = leftValues.length ? Math.max(...leftValues) : 0;\r\n\t\tconst rightMax = rightValues.length ? Math.max(...rightValues) : 0;\r\n\r\n\t\treturn Math.max(leftMax, rightMax) * 1.1 || 1; // Add 10% buffer, fallback to 1\r\n\t};\r\n\r\n\t// Props for SimpleChart component\r\n\tconst getChartProps = (infobox, fieldConfig) => {\r\n\t\treturn {\r\n\t\t\tfield: getField(infobox, fieldConfig.key), // Pass array of full data objects\r\n\t\t\ttype: fieldConfig.type,\r\n\t\t\tvisualization: fieldConfig.visualization,\r\n\t\t\tunifiedMax: getUnifiedMaxValue(fieldConfig.key),\r\n\t\t\tfieldKey: fieldConfig.key\r\n\t\t};\r\n\t};\r\n\r\n\t// Show full chart in modal\r\n\tconst showFullChart = (infobox, fieldConfig) => {\r\n\t\tcurrentChart.value = {\r\n\t\t\ttitle: infobox.title,\r\n\t\t\tfield: fieldConfig, // Pass the entire field configuration\r\n\t\t\tdata: getField(infobox, fieldConfig.key) // Pass the array of data objects\r\n\t\t};\r\n\t\tshowFullChartModal.value = true;\r\n\t};\r\n\r\n\tconst closeFullChart = () => {\r\n\t\tshowFullChartModal.value = false;\r\n\t};\r\n\r\n\t// Show combined chart for a field\r\n\tconst showCombinedChart = fieldConfig => {\r\n\t\tconst leftData = getField(leftInfobox.value, fieldConfig.key);\r\n\t\tconst rightData = getField(rightInfobox.value, fieldConfig.key);\r\n\r\n\t\t// Add a source property to differentiate data if needed by FullChart/sub-charts\r\n\t\tconst combinedData = [\r\n\t\t\t...leftData.map(item => ({\r\n\t\t\t\t...item,\r\n\t\t\t\tsourceTitle: leftInfobox.value.title\r\n\t\t\t})),\r\n\t\t\t...rightData.map(item => ({\r\n\t\t\t\t...item,\r\n\t\t\t\tsourceTitle: rightInfobox.value.title\r\n\t\t\t}))\r\n\t\t];\r\n\r\n\t\tcurrentChart.value = {\r\n\t\t\ttitle: `合并图表 - ${fieldConfig.key}`,\r\n\t\t\tfield: fieldConfig,\r\n\t\t\tdata: combinedData\r\n\t\t};\r\n\t\tshowFullChartModal.value = true;\r\n\t};\r\n\r\n\t// --- Comparison Logic & Field Sorting ---\r\n\r\n\t// Calculate difference score between left and right data for a field\r\n\tconst calculateDifferenceScore = fieldConfig => {\r\n\t\tconst extractNumericValue = item => {\r\n\t\t\tif (\r\n\t\t\t\ttypeof item === \"object\" &&\r\n\t\t\t\titem !== null &&\r\n\t\t\t\titem.value !== undefined\r\n\t\t\t) {\r\n\t\t\t\treturn Number(item.value);\r\n\t\t\t}\r\n\t\t\tif (typeof item === \"number\") {\r\n\t\t\t\treturn item;\r\n\t\t\t}\r\n\t\t\treturn NaN;\r\n\t\t};\r\n\r\n\t\tconst leftValues = getField(leftInfobox.value, fieldConfig.key)\r\n\t\t\t.map(extractNumericValue)\r\n\t\t\t.filter(n => !isNaN(n));\r\n\t\tconst rightValues = getField(rightInfobox.value, fieldConfig.key)\r\n\t\t\t.map(extractNumericValue)\r\n\t\t\t.filter(n => !isNaN(n));\r\n\r\n\t\tif (\r\n\t\t\tleftValues.length === 0 ||\r\n\t\t\trightValues.length === 0 ||\r\n\t\t\tfieldConfig.type === \"text\"\r\n\t\t) {\r\n\t\t\treturn 0; // No basis for numeric comparison or it's text\r\n\t\t}\r\n\r\n\t\t// Simplified scoring: average relative difference of the first comparable values\r\n\t\t// You can implement more sophisticated scoring.\r\n\t\tconst val1 = leftValues[0];\r\n\t\tconst val2 = rightValues[0];\r\n\t\tif (val1 === 0 && val2 === 0) return 0;\r\n\t\tconst avg = (Math.abs(val1) + Math.abs(val2)) / 2;\r\n\t\tif (avg === 0) return 100; // Max difference if one is non-zero and other is zero\r\n\r\n\t\tconst relativeDiff = Math.abs(val1 - val2) / avg;\r\n\t\tlet score = Math.min(100, relativeDiff * 100); // Scale to 0-100\r\n\r\n\t\t// Weighting specific fields\r\n\t\tif (fieldConfig.key.toLowerCase().includes(\"gdp growth\")) score *= 1.5;\r\n\t\tif (fieldConfig.key.toLowerCase().includes(\"inflation\")) score *= 1.2;\r\n\r\n\t\treturn Math.min(100, Math.round(score));\r\n\t};\r\n\r\n\t// Determine fields that are present in at least one infobox\r\n\tconst availableFields = computed(() => {\r\n\t\treturn COMPARABLE_FIELDS.filter(fieldConf => {\r\n\t\t\tconst leftVal = getField(leftInfobox.value, fieldConf.key);\r\n\t\t\tconst rightVal = getField(rightInfobox.value, fieldConf.key);\r\n\t\t\treturn leftVal.length > 0 || rightVal.length > 0;\r\n\t\t});\r\n\t});\r\n\r\n\t// Calculate scores and sort fields\r\n\tconst tryCalculateScoresAndSort = () => {\r\n\t\tif (leftDataLoaded.value && rightDataLoaded.value) {\r\n\t\t\tisInitializing.value = true; // Show loading while calculating\r\n\t\t\tsortedFieldsWithScores.value = availableFields.value\r\n\t\t\t\t.map(field => ({\r\n\t\t\t\t\t...field,\r\n\t\t\t\t\tscore: calculateDifferenceScore(field)\r\n\t\t\t\t}))\r\n\t\t\t\t.sort((a, b) => {\r\n\t\t\t\t\t// Prioritize non-text fields, then sort by score\r\n\t\t\t\t\tif (a.type !== \"text\" && b.type === \"text\") return -1;\r\n\t\t\t\t\tif (a.type === \"text\" && b.type !== \"text\") return 1;\r\n\t\t\t\t\treturn b.score - a.score; // Higher score first\r\n\t\t\t\t});\r\n\t\t\tisInitializing.value = false;\r\n\t\t\ttryAutoCompare(); // Attempt auto-comparison after scores are ready\r\n\t\t}\r\n\t};\r\n\r\n\t// Computed property for the template to iterate over\r\n\tconst sortedFields = computed(() => sortedFieldsWithScores.value);\r\n\r\n\t// Automatic comparison of the most significant field\r\n\tconst tryAutoCompare = () => {\r\n\t\tif (\r\n\t\t\thasAutoCompared.value ||\r\n\t\t\t!leftDataLoaded.value ||\r\n\t\t\t!rightDataLoaded.value ||\r\n\t\t\tsortedFields.value.length === 0\r\n\t\t) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\thasAutoCompared.value = true;\r\n\t\tconst mostSignificantField = sortedFields.value[0];\r\n\t\tif (mostSignificantField && mostSignificantField.type !== \"text\") {\r\n\t\t\t// Auto-compare non-text fields\r\n\t\t\thandleMiddleColumnClick(mostSignificantField);\r\n\t\t}\r\n\t};\r\n\r\n\t// --- Event Handlers & UI Interaction ---\r\n\r\n\tconst handleCellClick = (infobox, fieldConfig) => {\r\n\t\tshowFullChart(infobox, fieldConfig);\r\n\t};\r\n\r\n\tconst handleMiddleColumnClick = fieldConfig => {\r\n\t\temit(\"compareAttribute\", {\r\n\t\t\tfieldKey: fieldConfig.key,\r\n\t\t\tleftData: getField(leftInfobox.value, fieldConfig.key),\r\n\t\t\trightData: getField(rightInfobox.value, fieldConfig.key),\r\n\t\t\tleftTitle: leftInfobox.value.title,\r\n\t\t\trightTitle: rightInfobox.value.title,\r\n\t\t\tfieldType: fieldConfig.type,\r\n\t\t\tfieldLabel: fieldConfig.typeLabel,\r\n\t\t\tfieldConfig: fieldConfig // Pass full config for more context\r\n\t\t});\r\n\t};\r\n\r\n\tconst hoverInfobox = (infobox, fieldKey, side) => {\r\n\t\tbus.emit(`hover-${side}-infobox`, {\r\n\t\t\tfieldKey,\r\n\t\t\tinfoboxTitle: infobox.title\r\n\t\t});\r\n\t};\r\n\r\n\tconst unhoverInfobox = side => {\r\n\t\tbus.emit(`unhover-${side}-infobox`);\r\n\t};\r\n\r\n\tconst hoverBothInfoboxes = fieldKey => {\r\n\t\thoverInfobox(leftInfobox.value, fieldKey, \"left\");\r\n\t\thoverInfobox(rightInfobox.value, fieldKey, \"right\");\r\n\t};\r\n\r\n\tconst unhoverBothInfoboxes = () => {\r\n\t\tunhoverInfobox(\"left\");\r\n\t\tunhoverInfobox(\"right\");\r\n\t};\r\n\r\n\t// Heatmap color based on score (optional visual cue)\r\n\tconst getHeatmapColor = score => {\r\n\t\tif (score === undefined || score === 0) return \"#f8f9fa\"; // Default background\r\n\t\tconst maxScore = 100;\r\n\t\tconst ratio = Math.min(score / maxScore, 1);\r\n\t\t// Green (low diff) to Yellow to Red (high diff)\r\n\t\t// Hue: 120 (green) -> 60 (yellow) -> 0 (red)\r\n\t\tconst hue = 120 * (1 - ratio);\r\n\t\treturn `hsl(${hue}, 70%, ${85 - ratio * 20}%)`;\r\n\t};\r\n\r\n\t// --- Lifecycle and Watchers ---\r\n\r\n\tonMounted(() => {\r\n\t\tisInitializing.value = true;\r\n\r\n\t\t// Listen for data from event bus (or use props if data comes directly)\r\n\t\tbus.on(\"div1_InfoboxData\", data => {\r\n\t\t\tleftInfobox.value = processInfoboxData(data);\r\n\t\t\tleftDataLoaded.value = true;\r\n\t\t\tif (leftDataLoaded.value && rightDataLoaded.value)\r\n\t\t\t\ttryCalculateScoresAndSort();\r\n\t\t});\r\n\t\tbus.on(\"div3_InfoboxData\", data => {\r\n\t\t\trightInfobox.value = processInfoboxData(data);\r\n\t\t\trightDataLoaded.value = true;\r\n\t\t\tif (leftDataLoaded.value && rightDataLoaded.value)\r\n\t\t\t\ttryCalculateScoresAndSort();\r\n\t\t});\r\n\r\n\t\t// If data is passed via props, process it here\r\n\t\tif (props.div1RawData) {\r\n\t\t\tleftInfobox.value = processInfoboxData(props.div1RawData);\r\n\t\t\tleftDataLoaded.value = true;\r\n\t\t}\r\n\t\tif (props.div3RawData) {\r\n\t\t\trightInfobox.value = processInfoboxData(props.div3RawData);\r\n\t\t\trightDataLoaded.value = true;\r\n\t\t}\r\n\r\n\t\tif (leftDataLoaded.value && rightDataLoaded.value) {\r\n\t\t\ttryCalculateScoresAndSort();\r\n\t\t} else {\r\n\t\t\t// If data is not yet loaded via bus, keep initializing true\r\n\t\t\t// It will be set to false after tryCalculateScoresAndSort completes\r\n\t\t\t// Or if data is guaranteed to come via props, this might not be needed.\r\n\t\t\tif (!props.div1RawData && !props.div3RawData) {\r\n\t\t\t\t// still waiting for bus events\r\n\t\t\t} else {\r\n\t\t\t\tisInitializing.value = false; // Data from props was processed or missing\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\t// Watch for prop changes if data can be updated externally\r\n\twatch(\r\n\t\t() => props.div1RawData,\r\n\t\tnewData => {\r\n\t\t\tif (newData) {\r\n\t\t\t\tleftInfobox.value = processInfoboxData(newData);\r\n\t\t\t\tleftDataLoaded.value = true; // Reset loaded status if needed\r\n\t\t\t\thasAutoCompared.value = false; // Allow re-auto-compare on data change\r\n\t\t\t\ttryCalculateScoresAndSort();\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\twatch(\r\n\t\t() => props.div3RawData,\r\n\t\tnewData => {\r\n\t\t\tif (newData) {\r\n\t\t\t\trightInfobox.value = processInfoboxData(newData);\r\n\t\t\t\trightDataLoaded.value = true;\r\n\t\t\t\thasAutoCompared.value = false;\r\n\t\t\t\ttryCalculateScoresAndSort();\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\r\n\tonUnmounted(() => {\r\n\t\tbus.off(\"div1_InfoboxData\");\r\n\t\tbus.off(\"div3_InfoboxData\");\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.compare-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tpadding: 8px;\r\n\t\tbox-sizing: border-box;\r\n\t\tposition: relative;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\r\n\t.initial-loading {\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\tbottom: 0;\r\n\t\tbackground: rgba(255, 255, 255, 0.9); /* Slightly more opaque */\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tz-index: 100;\r\n\t\tfont-size: 14px;\r\n\t\tcolor: #555;\r\n\t}\r\n\r\n\t.initial-loading p {\r\n\t\tmargin-top: 12px;\r\n\t}\r\n\r\n\t.loading-spinner {\r\n\t\twidth: 35px;\r\n\t\theight: 35px;\r\n\t\tborder: 4px solid #e0e0e0; /* Lighter border */\r\n\t\tborder-top: 4px solid #1976d2; /* Primary color for spinner */\r\n\t\tborder-radius: 50%;\r\n\t\tanimation: spin 0.8s linear infinite;\r\n\t}\r\n\r\n\t@keyframes spin {\r\n\t\t0% {\r\n\t\t\ttransform: rotate(0deg);\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform: rotate(360deg);\r\n\t\t}\r\n\t}\r\n\r\n\t.comparison-grid {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: minmax(150px, 1fr) minmax(100px, 150px) minmax(\r\n\t\t\t\t150px,\r\n\t\t\t\t1fr\r\n\t\t\t); /* Adjusted column widths */\r\n\t\twidth: 100%;\r\n\t\tborder: 1px solid #d1d5db; /* Softer border */\r\n\t\tborder-radius: 6px; /* Slightly more rounded */\r\n\t\toverflow: hidden;\r\n\t\t/* max-height: calc(100vh - 100px); Consider a dynamic max-height */\r\n\t\tflex-grow: 1;\r\n\t\toverflow-y: auto; /* Ensure scrollability for many fields */\r\n\t}\r\n\r\n\t.header {\r\n\t\tpadding: 10px 8px; /* Increased padding */\r\n\t\tbackground: #4a5568; /* Darker, more neutral header */\r\n\t\tcolor: white;\r\n\t\tfont-weight: 600; /* Slightly bolder */\r\n\t\ttext-align: center;\r\n\t\tposition: sticky;\r\n\t\ttop: 0;\r\n\t\tz-index: 10; /* Ensure header is above cells */\r\n\t\tborder-right: 1px solid #718096; /* Separator color */\r\n\t\tfont-size: 13px;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t}\r\n\t.header:last-child {\r\n\t\tborder-right: none;\r\n\t}\r\n\r\n\t.header.middle-column {\r\n\t\tbackground: #2d3748; /* Even darker for middle distinction */\r\n\t}\r\n\r\n\t.cell {\r\n\t\tpadding: 10px; /* Increased padding */\r\n\t\tmin-height: 120px; /* Ensure enough space for SimpleChart */\r\n\t\tborder-bottom: 1px solid #e2e8f0; /* Softer cell border */\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tjustify-content: center; /* Vertically center content */\r\n\t\talign-items: center; /* Horizontally center content */\r\n\t\tposition: relative;\r\n\t\tcursor: pointer;\r\n\t\ttransition: background-color 0.2s ease-in-out;\r\n\t\toverflow: hidden; /* Prevent content overflow */\r\n\t}\r\n\r\n\t.cell:hover {\r\n\t\tbackground-color: #f7fafc; /* Lighter hover */\r\n\t}\r\n\t.left-column:hover,\r\n\t.right-column:hover {\r\n\t\tbackground-color: #ebf8ff; /* Specific hover for chart cells */\r\n\t}\r\n\r\n\t.middle-column {\r\n\t\tcursor: default;\r\n\t\tbackground-color: #f8f9fa;\r\n\t\ttext-align: center;\r\n\t\tborder-left: 1px solid #e2e8f0;\r\n\t\tborder-right: 1px solid #e2e8f0;\r\n\t}\r\n\t.middle-column:hover {\r\n\t\tbackground-color: #e9ecef;\r\n\t}\r\n\r\n\t.field-name {\r\n\t\tfont-weight: bold;\r\n\t\tmargin-bottom: 5px; /* Increased margin */\r\n\t\tfont-size: 12px; /* Slightly smaller for compactness */\r\n\t\tcolor: #2d3748;\r\n\t\twidth: 100%;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t}\r\n\r\n\t.field-type {\r\n\t\tcolor: #718096; /* Softer color */\r\n\t\tfont-size: 10px; /* Smaller type label */\r\n\t\tfont-style: italic;\r\n\t\tmargin-bottom: 8px;\r\n\t\twidth: 100%;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t}\r\n\t.field-score {\r\n\t\tfont-size: 10px;\r\n\t\tcolor: #4a5568;\r\n\t\tmargin-bottom: 8px;\r\n\t}\r\n\r\n\t.icon-actions {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\tgap: 20px; /* Increased gap */\r\n\t\tmargin-top: auto; /* Push actions to bottom if cell content varies */\r\n\t}\r\n\r\n\t.icon-btn {\r\n\t\tfont-size: 18px; /* Larger icons */\r\n\t\tcursor: pointer;\r\n\t\topacity: 0.6;\r\n\t\ttransition: all 0.2s;\r\n\t}\r\n\t.icon-btn:hover {\r\n\t\topacity: 1;\r\n\t\ttransform: scale(1.15); /* Slightly more pronounced hover effect */\r\n\t}\r\n\t.icon-btn.compare:hover {\r\n\t\tcolor: #48bb78;\r\n\t} /* Green */\r\n\t.icon-btn.merge:hover {\r\n\t\tcolor: #4299e1;\r\n\t} /* Blue */\r\n\r\n\t.full-chart-modal {\r\n\t\tposition: fixed;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\tbottom: 0;\r\n\t\tbackground-color: rgba(0, 0, 0, 0.6); /* Darker backdrop */\r\n\t\tbackdrop-filter: blur(5px); /* Softer blur */\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t\tz-index: 1000;\r\n\t\tpadding: 20px; /* Add padding for smaller screens */\r\n\t\tbox-sizing: border-box;\r\n\t}\r\n\r\n\t.modal-content {\r\n\t\tbackground: white;\r\n\t\tpadding: 20px 24px; /* More padding */\r\n\t\tborder-radius: 8px;\r\n\t\twidth: 90%; /* Responsive width */\r\n\t\tmax-width: 850px; /* Max width */\r\n\t\tmax-height: 90vh; /* Max height */\r\n\t\tdisplay: flex; /* Use flex for layout */\r\n\t\tflex-direction: column; /* Stack content vertically */\r\n\t\tposition: relative;\r\n\t\tbox-shadow: 0 10px 25px rgba(0, 0, 0, 0.1), 0 5px 10px rgba(0, 0, 0, 0.05);\r\n\t\toverflow: hidden; /* Prevent content from breaking out before internal scroll */\r\n\t}\r\n\t.modal-content h3 {\r\n\t\tmargin-top: 0;\r\n\t\tmargin-bottom: 16px;\r\n\t\tfont-size: 1.25rem;\r\n\t\tcolor: #2d3748;\r\n\t}\r\n\r\n\t.chart-container-modal {\r\n\t\t/* Renamed to avoid conflict with .chart-container in FullChart */\r\n\t\theight: auto; /* Let FullChart's internal height control take over */\r\n\t\tmin-height: 300px; /* Minimum height for the chart area */\r\n\t\tmax-height: calc(90vh - 150px); /* Adjust based on header/footer/padding */\r\n\t\twidth: 100%;\r\n\t\tmargin: 0; /* Remove margin if FullChart has padding */\r\n\t\toverflow-y: auto; /* Scroll within chart area if FullChart content overflows */\r\n\t\tflex-grow: 1; /* Allow chart container to take available space */\r\n\t}\r\n\r\n\t.chart-legend {\r\n\t\tfont-size: 12px; /* Smaller legend text */\r\n\t\tcolor: #4a5568;\r\n\t\ttext-align: center;\r\n\t\tmargin-top: 12px;\r\n\t\tpadding-top: 12px;\r\n\t\tborder-top: 1px solid #e2e8f0;\r\n\t\tflex-shrink: 0; /* Prevent legend from shrinking */\r\n\t}\r\n\r\n\t.close-btn {\r\n\t\tposition: absolute;\r\n\t\ttop: 12px; /* Adjusted position */\r\n\t\tright: 12px;\r\n\t\tfont-size: 24px; /* Larger close icon */\r\n\t\tfont-weight: bold;\r\n\t\tbackground: none;\r\n\t\tborder: none;\r\n\t\tcursor: pointer;\r\n\t\tcolor: #718096;\r\n\t\tline-height: 1;\r\n\t}\r\n\t.close-btn:hover {\r\n\t\tcolor: #2d3748;\r\n\t}\r\n\r\n\t.no-common-fields {\r\n\t\tgrid-column: 1 / -1; /* Span all columns */\r\n\t\ttext-align: center;\r\n\t\tpadding: 40px 20px;\r\n\t\tfont-size: 1rem;\r\n\t\tcolor: #718096;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tmin-height: 200px; /* Ensure it's visible */\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}