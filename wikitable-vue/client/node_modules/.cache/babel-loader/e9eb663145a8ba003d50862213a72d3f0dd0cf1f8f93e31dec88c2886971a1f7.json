{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-201e19b8\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"chart-wrapper\"\n};\nconst _hoisted_2 = {\n  ref: \"chartContainer\",\n  class: \"full-chart\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"no-data-message\"\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, null, 512 /* NEED_PATCH */), !_ctx.hasData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _toDisplayString(_ctx.noDataText), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","ref","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_ctx","hasData","_hoisted_3","_toDisplayString","noDataText","_createCommentVNode"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\FullChart.vue"],"sourcesContent":["<template>\r\n\t<div class=\"chart-wrapper\">\r\n\t\t<div ref=\"chartContainer\" class=\"full-chart\"></div>\r\n\t\t<div v-if=\"!hasData\" class=\"no-data-message\">\r\n\t\t\t{{ noDataText }}\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\n\timport * as d3 from 'd3';\r\n\timport { defineComponent, ref, computed, onMounted, onUnmounted, watch } from 'vue';\r\n\r\n\texport default defineComponent({\r\n\t  name: 'FullChart',\r\n\t  props: {\r\n\t    data: {\r\n\t      type: Object,\r\n\t      required: true,\r\n\t      validator: (value) => {\r\n\t        return value && ['line', 'bar'].includes(value.type) &&\r\n\t               Array.isArray(value.data);\r\n\t      },\r\n\t      default: () => ({ type: 'line', data: [] })\r\n\t    },\r\n\t    compareData: {\r\n\t      type: Array,\r\n\t      default: () => []\r\n\t    },\r\n\t    title: {\r\n\t      type: String,\r\n\t      default: ''\r\n\t    },\r\n\t    side: {\r\n\t      type: String,\r\n\t      default: 'left',\r\n\t      validator: (value) => ['left', 'right'].includes(value)\r\n\t    }\r\n\t  },\r\n\t  setup(props) {\r\n\t    const chartContainer = ref(null);\r\n\t    const noDataText = ref('数据加载中...');\r\n\t    const color = computed(() => props.side === 'left' ? '#4a90e2' : '#ef4444');\r\n\t    const highlightColor = '#FFD700';\r\n\r\n\t    const hasData = computed(() => {\r\n\t      return props.data?.data?.length > 0 &&\r\n\t             props.data.data.every(item => item && !isNaN(item.year) && !isNaN(item.value));\r\n\t    });\r\n\r\n\t    // 绘图方法\r\n\t    const drawChart = () => {\r\n\t      if (!chartContainer.value || !hasData.value) {\r\n\t        noDataText.value = !props.data?.data?.length ? '无数据可显示' : '数据格式错误';\r\n\t        d3.select(chartContainer.value).selectAll('*').remove();\r\n\t        return;\r\n\t      }\r\n\r\n\t      try {\r\n\t        // 清除现有图表\r\n\t        const container = d3.select(chartContainer.value);\r\n\t        container.selectAll('*').remove();\r\n\r\n\t        // 设置尺寸\r\n\t        const width = chartContainer.value.clientWidth;\r\n\t        const height = chartContainer.value.clientHeight;\r\n\t        const margin = { top: 30, right: 30, bottom: 50, left: 50 };\r\n\t        const innerWidth = width - margin.left - margin.right;\r\n\t        const innerHeight = height - margin.top - margin.bottom;\r\n\r\n\t        // 创建SVG\r\n\t        const svg = container\r\n\t          .append('svg')\r\n\t          .attr('width', width)\r\n\t          .attr('height', height)\r\n\t          .append('g')\r\n\t          .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n\t        // 数据处理\r\n\t        const validData = props.data.data\r\n\t          .filter(item => item && !isNaN(item.year) && !isNaN(item.value))\r\n\t          .sort((a, b) => a.year - b.year);\r\n\r\n\t        // 创建比例尺\r\n\t        const x = props.data.type === 'bar'\r\n\t          ? d3.scaleBand()\r\n\t              .domain(validData.map(d => d.year.toString()))\r\n\t              .range([0, innerWidth])\r\n\t              .padding(0.2)\r\n\t          : d3.scaleLinear()\r\n\t              .domain(d3.extent(validData, d => d.year))\r\n\t              .range([0, innerWidth]);\r\n\r\n\t        const y = d3.scaleLinear()\r\n\t          .domain([0, d3.max(validData, d => d.value) * 1.1])\r\n\t          .range([innerHeight, 0]);\r\n\r\n\t        // 绘制网格线\r\n\t        svg.append('g')\r\n\t          .attr('class', 'grid')\r\n\t          .call(d3.axisLeft(y).tickSize(-innerWidth).tickFormat(''))\r\n\t          .selectAll('line')\r\n\t          .attr('stroke', '#e2e8f0')\r\n\t          .attr('stroke-dasharray', '2,2');\r\n\r\n\t        // 绘制坐标轴\r\n\t        svg.append('g')\r\n\t          .attr('transform', `translate(0,${innerHeight})`)\r\n\t          .call(props.data.type === 'bar'\r\n\t            ? d3.axisBottom(x)\r\n\t            : d3.axisBottom(x).tickFormat(d3.format('d')));\r\n\r\n\t        svg.append('g')\r\n\t          .call(d3.axisLeft(y));\r\n\r\n\t        // 添加标签\r\n\t        svg.append('text')\r\n\t          .attr('transform', `translate(${innerWidth/2},${innerHeight + margin.bottom*0.7})`)\r\n\t          .style('text-anchor', 'middle')\r\n\t          .text('年份');\r\n\r\n\t        svg.append('text')\r\n\t          .attr('transform', 'rotate(-90)')\r\n\t          .attr('y', 0 - margin.left*0.7)\r\n\t          .attr('x', 0 - innerHeight/2)\r\n\t          .attr('dy', '1em')\r\n\t          .style('text-anchor', 'middle')\r\n\t          .text('数值');\r\n\r\n\t        // 绘制图表\r\n\t        if (props.data.type === 'bar') {\r\n\t          drawBarChart(svg, validData, x, y, innerWidth, innerHeight);\r\n\t        } else {\r\n\t          drawLineChart(svg, validData, x, y);\r\n\t        }\r\n\r\n\t      } catch (error) {\r\n\t        console.error('图表渲染错误:', error);\r\n\t        noDataText.value = '图表渲染失败';\r\n\t      }\r\n\t    };\r\n\r\n\t    // 柱状图绘制逻辑\r\n\t    const drawBarChart = (svg, data, x, y, width, height) => {\r\n\t      svg.selectAll('.bar')\r\n\t        .data(data)\r\n\t        .enter()\r\n\t        .append('rect')\r\n\t        .attr('class', 'bar')\r\n\t        .attr('x', d => x(d.year.toString()))\r\n\t        .attr('width', x.bandwidth())\r\n\t        .attr('y', d => y(d.value))\r\n\t        .attr('height', d => height - y(d.value))\r\n\t        .attr('fill', color.value);\r\n\t    };\r\n\r\n\t    // 折线图绘制逻辑\r\n\t    const drawLineChart = (svg, data, x, y) => {\r\n\t      const line = d3.line()\r\n\t        .x(d => x(d.year))\r\n\t        .y(d => y(d.value))\r\n\t        .curve(d3.curveMonotoneX);\r\n\r\n\t      svg.append('path')\r\n\t        .datum(data)\r\n\t        .attr('fill', 'none')\r\n\t        .attr('stroke', color.value)\r\n\t        .attr('stroke-width', 3)\r\n\t        .attr('d', line);\r\n\r\n\t      // 高亮相同年份的点\r\n\t      if (props.compareData?.length > 0) {\r\n\t        const commonYears = getCommonYears(data, props.compareData);\r\n\t        commonYears.forEach(year => {\r\n\t          const points = data.filter(d => d.year === year);\r\n\t          points.forEach(point => {\r\n\t            svg.append('circle')\r\n\t              .attr('cx', x(point.year))\r\n\t              .attr('cy', y(point.value))\r\n\t              .attr('r', 8)\r\n\t              .attr('fill', highlightColor)\r\n\t              .attr('class', 'highlight-point');\r\n\t          });\r\n\t        });\r\n\t      }\r\n\t    };\r\n\r\n\t    // 获取共同年份\r\n\t    const getCommonYears = (data1, data2) => {\r\n\t      const years1 = new Set(data1.map(d => d.year));\r\n\t      const years2 = new Set(data2.filter(d => d).map(d => d.year));\r\n\t      return [...years1].filter(year => years2.has(year)));\r\n\t    };\r\n\r\n\t    // 监听变化\r\n\t    watch(() => [props.data, props.compareData], () => {\r\n\t      drawChart();\r\n\t    }, { deep: true });\r\n\r\n\t    // 生命周期\r\n\t    onMounted(() => {\r\n\t      setTimeout(drawChart, 100); // 确保DOM加载完成\r\n\t      window.addEventListener('resize', drawChart);\r\n\t    });\r\n\r\n\t    onUnmounted(() => {\r\n\t      window.removeEventListener('resize', drawChart);\r\n\t    });\r\n\r\n\t    return {\r\n\t      chartContainer,\r\n\t      hasData,\r\n\t      noDataText\r\n\t    };\r\n\t  }\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.chart-wrapper {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tposition: relative;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t}\r\n\r\n\t.full-chart {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tmin-height: 400px;\r\n\t}\r\n\r\n\t.no-data-message {\r\n\t\tposition: absolute;\r\n\t\ttop: 50%;\r\n\t\tleft: 50%;\r\n\t\ttransform: translate(-50%, -50%);\r\n\t\tcolor: #666;\r\n\t\tfont-size: 16px;\r\n\t}\r\n\r\n\t.highlight-point {\r\n\t\tanimation: pulse 1.5s infinite;\r\n\t}\r\n\r\n\t@keyframes pulse {\r\n\t\t0% {\r\n\t\t\tr: 6;\r\n\t\t\topacity: 1;\r\n\t\t}\r\n\t\t50% {\r\n\t\t\tr: 9;\r\n\t\t\topacity: 0.7;\r\n\t\t}\r\n\t\t100% {\r\n\t\t\tr: 6;\r\n\t\t\topacity: 1;\r\n\t\t}\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,KAAK,EAAC;AAAe;;EACpBC,GAAG,EAAC,gBAAgB;EAACD,KAAK,EAAC;;;EAFlCE,GAAA;EAGuBF,KAAK,EAAC;;;uBAF5BG,mBAAA,CAKM,OALNC,UAKM,GAJLC,mBAAA,CAAmD,OAAnDC,UAAmD,+B,CACvCC,IAAA,CAAAC,OAAO,I,cAAnBL,mBAAA,CAEM,OAFNM,UAEM,EAAAC,gBAAA,CADFH,IAAA,CAAAI,UAAU,oBAJhBC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}