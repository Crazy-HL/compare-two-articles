{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, openBlock as _openBlock, createBlock as _createBlock, renderList as _renderList, Fragment as _Fragment, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-ea6f3360\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"compare-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"charts-container\"\n};\nconst _hoisted_3 = {\n  class: \"chart-title\"\n};\nconst _hoisted_4 = {\n  class: \"chart-wrapper\"\n};\nconst _hoisted_5 = {\n  class: \"chart-legend\"\n};\nconst _hoisted_6 = {\n  class: \"legend-item table1\"\n};\nconst _hoisted_7 = {\n  class: \"legend-item table2\"\n};\nconst _hoisted_8 = {\n  class: \"time-series-chart\"\n};\nconst _hoisted_9 = {\n  class: \"y-axis\"\n};\nconst _hoisted_10 = {\n  class: \"chart-content\"\n};\nconst _hoisted_11 = {\n  class: \"x-axis\"\n};\nconst _hoisted_12 = {\n  class: \"data-lines\"\n};\nconst _hoisted_13 = {\n  class: \"data-line table1\"\n};\nconst _hoisted_14 = [\"title\"];\nconst _hoisted_15 = {\n  class: \"data-line table2\"\n};\nconst _hoisted_16 = [\"title\"];\nconst _hoisted_17 = {\n  class: \"stats-summary\"\n};\nconst _hoisted_18 = {\n  class: \"stat-item\"\n};\nconst _hoisted_19 = {\n  class: \"stat-label\"\n};\nconst _hoisted_20 = {\n  class: \"stat-value\"\n};\nconst _hoisted_21 = {\n  class: \"stat-item\"\n};\nconst _hoisted_22 = {\n  class: \"stat-label\"\n};\nconst _hoisted_23 = {\n  class: \"stat-value\"\n};\nconst _hoisted_24 = {\n  key: 1,\n  class: \"empty-state\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 加载状态 \"), $setup.isLoading ? (_openBlock(), _createBlock($setup[\"LoadingSpinner\"], {\n    key: 0,\n    message: \"正在处理表格数据...\"\n  })) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" 对比图表 \"), $setup.hasData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createCommentVNode(\" 每个属性生成一个对比图表 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.commonAttributes, attr => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: attr,\n      class: \"chart-card\"\n    }, [_createElementVNode(\"h3\", _hoisted_3, _toDisplayString($setup.getAttributeName(attr)), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_4, [_createCommentVNode(\" 图例 \"), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"span\", _hoisted_6, _toDisplayString($setup.processedTable1.title), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_7, _toDisplayString($setup.processedTable2.title), 1 /* TEXT */)]), _createCommentVNode(\" 图表主体 \"), _createElementVNode(\"div\", _hoisted_8, [_createCommentVNode(\" Y轴标签 \"), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"span\", null, _toDisplayString($setup.getAttributeUnit(attr)), 1 /* TEXT */)]), _createCommentVNode(\" 图表内容 \"), _createElementVNode(\"div\", _hoisted_10, [_createCommentVNode(\" X轴年份标签 \"), _createElementVNode(\"div\", _hoisted_11, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.commonYears, year => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: year,\n        class: \"tick\"\n      }, _toDisplayString(year), 1 /* TEXT */);\n    }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" 数据线 \"), _createElementVNode(\"div\", _hoisted_12, [_createCommentVNode(\" 表格1数据线 \"), _createElementVNode(\"div\", _hoisted_13, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.getSeriesData($setup.processedTable1, attr), (value, index) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: 'table1-' + index,\n        class: \"data-point\",\n        style: _normalizeStyle({\n          left: `${index * (100 / ($setup.commonYears.length - 1))}%`,\n          bottom: `${$setup.normalizeValue(value, attr)}%`,\n          opacity: value !== null ? 1 : 0\n        }),\n        title: `${$setup.processedTable1.title} ${$setup.commonYears[index]}: ${value !== null ? value : '无数据'}`\n      }, null, 12 /* STYLE, PROPS */, _hoisted_14);\n    }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" 表格2数据线 \"), _createElementVNode(\"div\", _hoisted_15, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.getSeriesData($setup.processedTable2, attr), (value, index) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: 'table2-' + index,\n        class: \"data-point\",\n        style: _normalizeStyle({\n          left: `${index * (100 / ($setup.commonYears.length - 1))}%`,\n          bottom: `${$setup.normalizeValue(value, attr)}%`,\n          opacity: value !== null ? 1 : 0\n        }),\n        title: `${$setup.processedTable2.title} ${$setup.commonYears[index]}: ${value !== null ? value : '无数据'}`\n      }, null, 12 /* STYLE, PROPS */, _hoisted_16);\n    }), 128 /* KEYED_FRAGMENT */))])])])])]), _createCommentVNode(\" 统计摘要 \"), _createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"div\", _hoisted_18, [_createElementVNode(\"span\", _hoisted_19, _toDisplayString($setup.processedTable1.title) + \"平均:\", 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_20, _toDisplayString($setup.getAverage($setup.processedTable1, attr)), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_21, [_createElementVNode(\"span\", _hoisted_22, _toDisplayString($setup.processedTable2.title) + \"平均:\", 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_23, _toDisplayString($setup.getAverage($setup.processedTable2, attr)), 1 /* TEXT */)])])]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_24, \"请先从左/右侧选择两个表格进行对比\"))], 64 /* STABLE_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createCommentVNode","$setup","isLoading","_createBlock","message","_Fragment","hasData","_hoisted_2","_renderList","commonAttributes","attr","_createElementVNode","_hoisted_3","_toDisplayString","getAttributeName","_hoisted_4","_hoisted_5","_hoisted_6","processedTable1","title","_hoisted_7","processedTable2","_hoisted_8","_hoisted_9","getAttributeUnit","_hoisted_10","_hoisted_11","commonYears","year","_hoisted_12","_hoisted_13","getSeriesData","value","index","style","_normalizeStyle","length","normalizeValue","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","getAverage","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\CompareTable.vue"],"sourcesContent":["<template>\r\n\t<div class=\"compare-container\">\r\n\t\t<!-- 加载状态 -->\r\n\t\t<LoadingSpinner v-if=\"isLoading\" message=\"正在处理表格数据...\" />\r\n\r\n\t\t<!-- 对比图表 -->\r\n\t\t<template v-else>\r\n\t\t\t<div v-if=\"hasData\" class=\"charts-container\">\r\n\t\t\t\t<!-- 每个属性生成一个对比图表 -->\r\n\t\t\t\t<div v-for=\"attr in commonAttributes\" :key=\"attr\" class=\"chart-card\">\r\n\t\t\t\t\t<h3 class=\"chart-title\">{{ getAttributeName(attr) }}</h3>\r\n\r\n\t\t\t\t\t<div class=\"chart-wrapper\">\r\n\t\t\t\t\t\t<!-- 图例 -->\r\n\t\t\t\t\t\t<div class=\"chart-legend\">\r\n\t\t\t\t\t\t\t<span class=\"legend-item table1\">\r\n\t\t\t\t\t\t\t\t{{ processedTable1.title }}\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t<span class=\"legend-item table2\">\r\n\t\t\t\t\t\t\t\t{{ processedTable2.title }}\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<!-- 图表主体 -->\r\n\t\t\t\t\t\t<div class=\"time-series-chart\">\r\n\t\t\t\t\t\t\t<!-- Y轴标签 -->\r\n\t\t\t\t\t\t\t<div class=\"y-axis\">\r\n\t\t\t\t\t\t\t\t<span>{{ getAttributeUnit(attr) }}</span>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<!-- 图表内容 -->\r\n\t\t\t\t\t\t\t<div class=\"chart-content\">\r\n\t\t\t\t\t\t\t\t<!-- X轴年份标签 -->\r\n\t\t\t\t\t\t\t\t<div class=\"x-axis\">\r\n\t\t\t\t\t\t\t\t\t<div v-for=\"year in commonYears\" :key=\"year\" class=\"tick\">\r\n\t\t\t\t\t\t\t\t\t\t{{ year }}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t<!-- 数据线 -->\r\n\t\t\t\t\t\t\t\t<div class=\"data-lines\">\r\n\t\t\t\t\t\t\t\t\t<!-- 表格1数据线 -->\r\n\t\t\t\t\t\t\t\t\t<div class=\"data-line table1\">\r\n\t\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\t\tv-for=\"(value, index) in getSeriesData(\r\n\t\t\t\t\t\t\t\t\t\t\t\tprocessedTable1,\r\n\t\t\t\t\t\t\t\t\t\t\t\tattr\r\n\t\t\t\t\t\t\t\t\t\t\t)\"\r\n\t\t\t\t\t\t\t\t\t\t\t:key=\"'table1-' + index\"\r\n\t\t\t\t\t\t\t\t\t\t\tclass=\"data-point\"\r\n\t\t\t\t\t\t\t\t\t\t\t:style=\"{\r\n\t\t\t\t\t\t\t\t\t\t\t\tleft: `${index * (100 / (commonYears.length - 1))}%`,\r\n\t\t\t\t\t\t\t\t\t\t\t\tbottom: `${normalizeValue(value, attr)}%`,\r\n\t\t\t\t\t\t\t\t\t\t\t\topacity: value !== null ? 1 : 0\r\n\t\t\t\t\t\t\t\t\t\t\t}\"\r\n\t\t\t\t\t\t\t\t\t\t\t:title=\"`${processedTable1.title} ${\r\n\t\t\t\t\t\t\t\t\t\t\t\tcommonYears[index]\r\n\t\t\t\t\t\t\t\t\t\t\t}: ${value !== null ? value : '无数据'}`\"></div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t\t<!-- 表格2数据线 -->\r\n\t\t\t\t\t\t\t\t\t<div class=\"data-line table2\">\r\n\t\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\t\tv-for=\"(value, index) in getSeriesData(\r\n\t\t\t\t\t\t\t\t\t\t\t\tprocessedTable2,\r\n\t\t\t\t\t\t\t\t\t\t\t\tattr\r\n\t\t\t\t\t\t\t\t\t\t\t)\"\r\n\t\t\t\t\t\t\t\t\t\t\t:key=\"'table2-' + index\"\r\n\t\t\t\t\t\t\t\t\t\t\tclass=\"data-point\"\r\n\t\t\t\t\t\t\t\t\t\t\t:style=\"{\r\n\t\t\t\t\t\t\t\t\t\t\t\tleft: `${index * (100 / (commonYears.length - 1))}%`,\r\n\t\t\t\t\t\t\t\t\t\t\t\tbottom: `${normalizeValue(value, attr)}%`,\r\n\t\t\t\t\t\t\t\t\t\t\t\topacity: value !== null ? 1 : 0\r\n\t\t\t\t\t\t\t\t\t\t\t}\"\r\n\t\t\t\t\t\t\t\t\t\t\t:title=\"`${processedTable2.title} ${\r\n\t\t\t\t\t\t\t\t\t\t\t\tcommonYears[index]\r\n\t\t\t\t\t\t\t\t\t\t\t}: ${value !== null ? value : '无数据'}`\"></div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<!-- 统计摘要 -->\r\n\t\t\t\t\t<div class=\"stats-summary\">\r\n\t\t\t\t\t\t<div class=\"stat-item\">\r\n\t\t\t\t\t\t\t<span class=\"stat-label\">{{ processedTable1.title }}平均:</span>\r\n\t\t\t\t\t\t\t<span class=\"stat-value\">{{\r\n\t\t\t\t\t\t\t\tgetAverage(processedTable1, attr)\r\n\t\t\t\t\t\t\t}}</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"stat-item\">\r\n\t\t\t\t\t\t\t<span class=\"stat-label\">{{ processedTable2.title }}平均:</span>\r\n\t\t\t\t\t\t\t<span class=\"stat-value\">{{\r\n\t\t\t\t\t\t\t\tgetAverage(processedTable2, attr)\r\n\t\t\t\t\t\t\t}}</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div v-else class=\"empty-state\">请先从左/右侧选择两个表格进行对比</div>\r\n\t\t</template>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, watch } from \"vue\";\r\n\timport LoadingSpinner from \"./LoadingSpinner.vue\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdiv1RawData: String,\r\n\t\tdiv3RawData: String\r\n\t});\r\n\r\n\t// 表格数据\r\n\tconst processedTable1 = ref({ title: \"表格1\", rows: [], columns: [] });\r\n\tconst processedTable2 = ref({ title: \"表格2\", rows: [], columns: [] });\r\n\tconst isLoading = ref(false);\r\n\r\n\t// 计算属性\r\n\tconst hasData = computed(() => {\r\n\t\treturn (\r\n\t\t\tprops.div1RawData &&\r\n\t\t\tprops.div3RawData &&\r\n\t\t\tprocessedTable1.value.columns.length > 0 &&\r\n\t\t\tprocessedTable2.value.columns.length > 0\r\n\t\t);\r\n\t});\r\n\r\n\tconst commonYears = computed(() => {\r\n\t\tconst years1 = processedTable1.value.columns\r\n\t\t\t.map(col => col.data.Year)\r\n\t\t\t.filter(y => !isNaN(y));\r\n\r\n\t\tconst years2 = processedTable2.value.columns\r\n\t\t\t.map(col => col.data.Year)\r\n\t\t\t.filter(y => !isNaN(y));\r\n\r\n\t\treturn [...new Set([...years1, ...years2])].sort((a, b) => a - b);\r\n\t});\r\n\r\n\tconst commonAttributes = computed(() => {\r\n\t\tconst attrs1 = processedTable1.value.rows || [];\r\n\t\tconst attrs2 = processedTable2.value.rows || [];\r\n\t\treturn attrs1.filter(\r\n\t\t\tattr =>\r\n\t\t\t\tattrs2.includes(attr) &&\r\n\t\t\t\t![\"Year\", \"Team\", \"Season\"].includes(attr) &&\r\n\t\t\t\t(hasDataForAttribute(processedTable1.value, attr) ||\r\n\t\t\t\t\thasDataForAttribute(processedTable2.value, attr))\r\n\t\t);\r\n\t});\r\n\r\n\t// 监听数据变化\r\n\twatch(\r\n\t\t() => [props.div1RawData, props.div3RawData],\r\n\t\tasync () => {\r\n\t\t\tif (props.div1RawData || props.div3RawData) {\r\n\t\t\t\tisLoading.value = true;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (props.div1RawData) {\r\n\t\t\t\t\t\tprocessedTable1.value = parseTableToStandardJSON(\r\n\t\t\t\t\t\t\tprops.div1RawData,\r\n\t\t\t\t\t\t\t\"表格1\"\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (props.div3RawData) {\r\n\t\t\t\t\t\tprocessedTable2.value = parseTableToStandardJSON(\r\n\t\t\t\t\t\t\tprops.div3RawData,\r\n\t\t\t\t\t\t\t\"表格2\"\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t} finally {\r\n\t\t\t\t\tisLoading.value = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\t// 获取序列数据\r\n\tfunction getSeriesData(table, attr) {\r\n\t\treturn commonYears.value.map(year => getValueByYear(table, year, attr));\r\n\t}\r\n\r\n\t// 按年份查找值\r\n\tfunction getValueByYear(table, year, attr) {\r\n\t\tconst record = table.columns.find(\r\n\t\t\tcol => col.data.Year == year && col.data[attr] !== undefined\r\n\t\t);\r\n\t\treturn record ? parseFloat(record.data[attr]) : null;\r\n\t}\r\n\r\n\t// 标准化值到0-100%范围\r\n\tfunction normalizeValue(value, attr) {\r\n\t\tif (value === null) return 0;\r\n\r\n\t\t// 特殊处理百分比数据\r\n\t\tif (attr.includes(\"%\")) {\r\n\t\t\treturn value * 100;\r\n\t\t}\r\n\r\n\t\t// 自动计算比例（基于当前数据范围）\r\n\t\tconst allValues = [\r\n\t\t\t...getSeriesData(processedTable1.value, attr),\r\n\t\t\t...getSeriesData(processedTable2.value, attr)\r\n\t\t].filter(v => v !== null);\r\n\r\n\t\tif (allValues.length === 0) return 0;\r\n\r\n\t\tconst max = Math.max(...allValues);\r\n\t\tconst min = Math.min(...allValues);\r\n\t\tconst range = max - min;\r\n\r\n\t\treturn range !== 0 ? ((value - min) / range) * 100 : 50;\r\n\t}\r\n\r\n\t// 检查属性是否有有效数据\r\n\tfunction hasDataForAttribute(table, attr) {\r\n\t\treturn table.columns.some(\r\n\t\t\tcol =>\r\n\t\t\t\tcol.data[attr] !== undefined &&\r\n\t\t\t\tcol.data[attr] !== null &&\r\n\t\t\t\t!isNaN(col.data[attr])\r\n\t\t);\r\n\t}\r\n\r\n\t// 计算平均值\r\n\tfunction getAverage(table, attr) {\r\n\t\tconst values = table.columns\r\n\t\t\t.map(col => col.data[attr])\r\n\t\t\t.filter(v => typeof v === \"number\");\r\n\t\treturn values.length\r\n\t\t\t? (values.reduce((a, b) => a + b, 0) / values.length).toFixed(2)\r\n\t\t\t: \"N/A\";\r\n\t}\r\n\r\n\t// 属性名称映射\r\n\tfunction getAttributeName(attr) {\r\n\t\tconst nameMap = {\r\n\t\t\tGP: \"出场次数\",\r\n\t\t\tGS: \"首发次数\",\r\n\t\t\tMPG: \"场均时间(分钟)\",\r\n\t\t\tPPG: \"场均得分\",\r\n\t\t\tAPG: \"场均助攻\",\r\n\t\t\tRPG: \"场均篮板\",\r\n\t\t\tSPG: \"场均抢断\",\r\n\t\t\tBPG: \"场均盖帽\",\r\n\t\t\t\"FG%\": \"投篮命中率\",\r\n\t\t\t\"3P%\": \"三分命中率\",\r\n\t\t\t\"FT%\": \"罚球命中率\"\r\n\t\t};\r\n\t\treturn nameMap[attr] || attr;\r\n\t}\r\n\r\n\t// 属性单位\r\n\tfunction getAttributeUnit(attr) {\r\n\t\tif (attr.includes(\"%\")) return \"百分比\";\r\n\t\tif (attr === \"MPG\") return \"分钟\";\r\n\t\tif (attr.includes(\"PG\")) return \"次数\";\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t// 表格解析方法\r\n\tfunction parseTableToStandardJSON(html, defaultTitle = \"未命名表格\") {\r\n\t\tconst result = {\r\n\t\t\ttitle: extractTitleFromHTML(html) || defaultTitle,\r\n\t\t\trows: [],\r\n\t\t\tcolumns: []\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\t\tconst table = doc.querySelector(\"table\");\r\n\t\t\tif (!table) return result;\r\n\r\n\t\t\t// 提取表头\r\n\t\t\tconst headerRow = table.querySelector(\"tr\");\r\n\t\t\tif (!headerRow) return result;\r\n\r\n\t\t\tconst headers = Array.from(headerRow.children).map(cell => {\r\n\t\t\t\tconst abbr = cell.querySelector(\"abbr\");\r\n\t\t\t\treturn (abbr?.title || cell.textContent).trim().replace(/[\\n†*]/g, \"\");\r\n\t\t\t});\r\n\t\t\tresult.rows = headers;\r\n\r\n\t\t\t// 提取数据行\r\n\t\t\tconst dataRows = Array.from(\r\n\t\t\t\ttable.querySelectorAll(\"tr:not(:first-child)\")\r\n\t\t\t);\r\n\t\t\tdataRows.forEach(row => {\r\n\t\t\t\tconst cells = Array.from(row.children);\r\n\t\t\t\tif (cells.length === 0) return;\r\n\r\n\t\t\t\tconst recordName = cells[0].textContent.trim().replace(/[\\n†*]/g, \"\");\r\n\t\t\t\tconst recordData = {};\r\n\r\n\t\t\t\theaders.forEach((header, index) => {\r\n\t\t\t\t\tif (index < cells.length) {\r\n\t\t\t\t\t\tlet value = cells[index].textContent.trim();\r\n\t\t\t\t\t\trecordData[header] = smartValueConversion(value);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tresult.columns.push({\r\n\t\t\t\t\tname: recordName,\r\n\t\t\t\t\tdata: recordData\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\treturn result;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"表格解析错误:\", error);\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\n\t// 智能值类型转换\r\n\tfunction smartValueConversion(rawValue) {\r\n\t\tif (!rawValue || [\"-\", \"—\", \"N/A\"].includes(rawValue)) return null;\r\n\t\tif (/^\\.\\d+$/.test(rawValue)) return parseFloat(rawValue);\r\n\t\tconst numericValue = parseFloat(rawValue.replace(/[^\\d.-]/g, \"\"));\r\n\t\treturn isNaN(numericValue) ? rawValue : numericValue;\r\n\t}\r\n\r\n\t// 从HTML提取标题\r\n\tfunction extractTitleFromHTML(html) {\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\treturn (\r\n\t\t\tdoc.querySelector(\"h1, h2, h3, h4, caption\")?.textContent.trim() || null\r\n\t\t);\r\n\t}\r\n</script>\r\n\r\n<style scoped>\r\n\t.compare-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tpadding: 20px;\r\n\t\toverflow-y: auto;\r\n\t}\r\n\r\n\t.charts-container {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: repeat(auto-fill, minmax(400px, 1fr));\r\n\t\tgap: 20px;\r\n\t}\r\n\r\n\t.chart-card {\r\n\t\tbackground: white;\r\n\t\tborder-radius: 8px;\r\n\t\tbox-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n\t\tpadding: 20px;\r\n\t\ttransition: transform 0.2s;\r\n\t}\r\n\r\n\t.chart-card:hover {\r\n\t\ttransform: translateY(-5px);\r\n\t}\r\n\r\n\t.chart-title {\r\n\t\tmargin: 0 0 15px 0;\r\n\t\tcolor: #2c3e50;\r\n\t\tfont-size: 18px;\r\n\t\tfont-weight: 600;\r\n\t}\r\n\r\n\t.chart-wrapper {\r\n\t\tposition: relative;\r\n\t\tmargin-bottom: 15px;\r\n\t}\r\n\r\n\t.chart-legend {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\tgap: 20px;\r\n\t\tmargin-bottom: 10px;\r\n\t}\r\n\r\n\t.legend-item {\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tfont-size: 14px;\r\n\t\tpadding: 4px 12px;\r\n\t\tborder-radius: 4px;\r\n\t}\r\n\r\n\t.legend-item.table1 {\r\n\t\tbackground: rgba(84, 112, 198, 0.1);\r\n\t\tcolor: #5470c6;\r\n\t}\r\n\r\n\t.legend-item.table2 {\r\n\t\tbackground: rgba(238, 102, 102, 0.1);\r\n\t\tcolor: #ee6666;\r\n\t}\r\n\r\n\t.time-series-chart {\r\n\t\tdisplay: flex;\r\n\t\theight: 250px;\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t.y-axis {\r\n\t\twidth: 40px;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tfont-size: 12px;\r\n\t\tcolor: #666;\r\n\t\twriting-mode: vertical-rl;\r\n\t\ttransform: rotate(180deg);\r\n\t}\r\n\r\n\t.chart-content {\r\n\t\tflex: 1;\r\n\t\tposition: relative;\r\n\t\tborder-left: 1px solid #eee;\r\n\t\tborder-bottom: 1px solid #eee;\r\n\t}\r\n\r\n\t.x-axis {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t\tposition: absolute;\r\n\t\tbottom: -25px;\r\n\t\twidth: 100%;\r\n\t\tpadding: 0 10px;\r\n\t}\r\n\r\n\t.x-axis .tick {\r\n\t\tfont-size: 11px;\r\n\t\tcolor: #666;\r\n\t\ttransform: rotate(-45deg);\r\n\t\ttransform-origin: left top;\r\n\t\twhite-space: nowrap;\r\n\t}\r\n\r\n\t.data-lines {\r\n\t\tposition: relative;\r\n\t\theight: 100%;\r\n\t\twidth: calc(100% - 10px);\r\n\t\tmargin-left: 10px;\r\n\t}\r\n\r\n\t.data-line {\r\n\t\tposition: absolute;\r\n\t\theight: 100%;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t.data-line::before {\r\n\t\tcontent: \"\";\r\n\t\tposition: absolute;\r\n\t\tbottom: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\theight: 1px;\r\n\t\tbackground: repeating-linear-gradient(\r\n\t\t\tto right,\r\n\t\t\ttransparent,\r\n\t\t\ttransparent 4px,\r\n\t\t\t#eee 4px,\r\n\t\t\t#eee 8px\r\n\t\t);\r\n\t}\r\n\r\n\t.data-point {\r\n\t\tposition: absolute;\r\n\t\twidth: 10px;\r\n\t\theight: 10px;\r\n\t\tborder-radius: 50%;\r\n\t\ttransform: translate(-50%, 50%);\r\n\t\ttransition: all 0.3s ease;\r\n\t\tcursor: pointer;\r\n\t}\r\n\r\n\t.data-line.table1 .data-point {\r\n\t\tbackground: #5470c6;\r\n\t\tborder: 2px solid rgba(84, 112, 198, 0.3);\r\n\t}\r\n\r\n\t.data-line.table2 .data-point {\r\n\t\tbackground: #ee6666;\r\n\t\tborder: 2px solid rgba(238, 102, 102, 0.3);\r\n\t}\r\n\r\n\t.data-point:hover {\r\n\t\ttransform: translate(-50%, 50%) scale(1.5);\r\n\t\tz-index: 10;\r\n\t}\r\n\r\n\t.stats-summary {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-around;\r\n\t\tmargin-top: 15px;\r\n\t\tpadding-top: 15px;\r\n\t\tborder-top: 1px dashed #eee;\r\n\t}\r\n\r\n\t.stat-item {\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t.stat-label {\r\n\t\tdisplay: block;\r\n\t\tfont-size: 12px;\r\n\t\tcolor: #7f8c8d;\r\n\t}\r\n\r\n\t.stat-value {\r\n\t\tfont-weight: bold;\r\n\t\tcolor: #2c3e50;\r\n\t}\r\n\r\n\t.empty-state {\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\theight: 100%;\r\n\t\tcolor: #888;\r\n\t\tfont-size: 16px;\r\n\t}\r\n\r\n\t@media (max-width: 768px) {\r\n\t\t.charts-container {\r\n\t\t\tgrid-template-columns: 1fr;\r\n\t\t}\r\n\r\n\t\t.chart-card {\r\n\t\t\tpadding: 15px;\r\n\t\t}\r\n\r\n\t\t.time-series-chart {\r\n\t\t\theight: 200px;\r\n\t\t}\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}