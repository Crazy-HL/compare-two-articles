{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, mergeProps as _mergeProps, createVNode as _createVNode, normalizeStyle as _normalizeStyle, withModifiers as _withModifiers, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-ea6f3360\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"compare-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"initial-loading\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"loading-spinner\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"正在准备数据对比...\", -1 /* HOISTED */));\nconst _hoisted_5 = [_hoisted_3, _hoisted_4];\nconst _hoisted_6 = {\n  key: 1,\n  class: \"comparison-grid\"\n};\nconst _hoisted_7 = {\n  class: \"header left-column\"\n};\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"header middle-column\"\n}, \"对比属性\", -1 /* HOISTED */));\nconst _hoisted_9 = {\n  class: \"header right-column\"\n};\nconst _hoisted_10 = [\"onMouseover\", \"onClick\"];\nconst _hoisted_11 = [\"onMouseover\"];\nconst _hoisted_12 = {\n  class: \"field-name\"\n};\nconst _hoisted_13 = {\n  class: \"field-type\"\n};\nconst _hoisted_14 = {\n  key: 0,\n  class: \"field-score\"\n};\nconst _hoisted_15 = {\n  class: \"icon-actions\"\n};\nconst _hoisted_16 = [\"onClick\"];\nconst _hoisted_17 = [\"onClick\"];\nconst _hoisted_18 = [\"onMouseover\", \"onClick\"];\nconst _hoisted_19 = {\n  key: 0,\n  class: \"no-common-fields\"\n};\nconst _hoisted_20 = {\n  class: \"modal-content\"\n};\nconst _hoisted_21 = {\n  class: \"chart-container-modal\"\n};\nconst _hoisted_22 = {\n  key: 0,\n  class: \"chart-legend\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 加载状态提示 \"), $setup.isInitializing ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [..._hoisted_5])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 主对比表格 \"), !$setup.isInitializing ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, _toDisplayString($setup.leftInfobox.title), 1 /* TEXT */), _hoisted_8, _createElementVNode(\"div\", _hoisted_9, _toDisplayString($setup.rightInfobox.title), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.sortedFields, field => {\n    return _openBlock(), _createElementBlock(_Fragment, {\n      key: field.key\n    }, [_createElementVNode(\"div\", {\n      class: \"cell left-column\",\n      onMouseover: $event => $setup.hoverInfobox($setup.leftInfobox, field.key, 'left'),\n      onMouseout: _cache[0] || (_cache[0] = $event => $setup.unhoverInfobox('left')),\n      onClick: $event => $setup.handleCellClick($setup.leftInfobox, field)\n    }, [_createCommentVNode(\" Modified to handleCellClick \"), _createVNode($setup[\"SimpleChart\"], _mergeProps({\n      ref_for: true\n    }, $setup.getChartProps($setup.leftInfobox, field)), null, 16 /* FULL_PROPS */)], 40 /* PROPS, NEED_HYDRATION */, _hoisted_10), _createElementVNode(\"div\", {\n      class: \"cell middle-column\",\n      style: _normalizeStyle({\n        backgroundColor: $setup.getHeatmapColor(field.score)\n      }),\n      onMouseover: $event => $setup.hoverBothInfoboxes(field.key),\n      onMouseout: _cache[1] || (_cache[1] = $event => $setup.unhoverBothInfoboxes())\n    }, [_createElementVNode(\"div\", _hoisted_12, _toDisplayString(field.key), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_13, _toDisplayString(field.typeLabel), 1 /* TEXT */), _createCommentVNode(\" Display score if available \"), field.score !== undefined ? (_openBlock(), _createElementBlock(\"div\", _hoisted_14, \" 差异分: \" + _toDisplayString(field.score), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_15, [_createElementVNode(\"span\", {\n      class: \"icon-btn compare\",\n      title: \"对比分析\",\n      onClick: $event => $setup.handleMiddleColumnClick(field)\n    }, \" ⚖️ \", 8 /* PROPS */, _hoisted_16), _createElementVNode(\"span\", {\n      class: \"icon-btn merge\",\n      title: \"合并图表\",\n      onClick: $event => $setup.showCombinedChart(field)\n    }, \" 📊 \", 8 /* PROPS */, _hoisted_17)])], 44 /* STYLE, PROPS, NEED_HYDRATION */, _hoisted_11), _createElementVNode(\"div\", {\n      class: \"cell right-column\",\n      onMouseover: $event => $setup.hoverInfobox($setup.rightInfobox, field.key, 'right'),\n      onMouseout: _cache[2] || (_cache[2] = $event => $setup.unhoverInfobox('right')),\n      onClick: $event => $setup.handleCellClick($setup.rightInfobox, field)\n    }, [_createCommentVNode(\" Modified to handleCellClick \"), _createVNode($setup[\"SimpleChart\"], _mergeProps({\n      ref_for: true\n    }, $setup.getChartProps($setup.rightInfobox, field)), null, 16 /* FULL_PROPS */)], 40 /* PROPS, NEED_HYDRATION */, _hoisted_18)], 64 /* STABLE_FRAGMENT */);\n  }), 128 /* KEYED_FRAGMENT */)), $setup.sortedFields.length === 0 && !$setup.isInitializing ? (_openBlock(), _createElementBlock(\"div\", _hoisted_19, \" 没有共同的可对比属性。 \")) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 全屏图表模态框 \"), $setup.showFullChartModal ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 2,\n    class: \"full-chart-modal\",\n    onClick: _withModifiers($setup.closeFullChart, [\"self\"])\n  }, [_createElementVNode(\"div\", _hoisted_20, [_createElementVNode(\"button\", {\n    class: \"close-btn\",\n    onClick: $setup.closeFullChart\n  }, \"×\"), _createElementVNode(\"h3\", null, _toDisplayString($setup.currentChart.title) + \" - \" + _toDisplayString($setup.currentChart.field.key), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_21, [_createCommentVNode(\" Renamed to avoid conflict \"), _createVNode($setup[\"FullChart\"], {\n    field: $setup.currentChart.data,\n    type: $setup.currentChart.field.type,\n    visualization: $setup.currentChart.field.visualization,\n    \"field-key\": $setup.currentChart.field.key\n  }, null, 8 /* PROPS */, [\"field\", \"type\", \"visualization\", \"field-key\"])]), $setup.currentChart.field.legend ? (_openBlock(), _createElementBlock(\"div\", _hoisted_22, _toDisplayString($setup.currentChart.field.legend), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementVNode","_hoisted_3","_hoisted_4","_createElementBlock","_hoisted_1","_createCommentVNode","$setup","isInitializing","_hoisted_2","_hoisted_5","_hoisted_6","_hoisted_7","_toDisplayString","leftInfobox","title","_hoisted_8","_hoisted_9","rightInfobox","_Fragment","_renderList","sortedFields","field","onMouseover","$event","hoverInfobox","onMouseout","_cache","unhoverInfobox","onClick","handleCellClick","_createVNode","_mergeProps","ref_for","getChartProps","_hoisted_10","style","_normalizeStyle","backgroundColor","getHeatmapColor","score","hoverBothInfoboxes","unhoverBothInfoboxes","_hoisted_12","_hoisted_13","typeLabel","undefined","_hoisted_14","_hoisted_15","handleMiddleColumnClick","_hoisted_16","showCombinedChart","_hoisted_17","_hoisted_11","_hoisted_18","length","_hoisted_19","showFullChartModal","_withModifiers","closeFullChart","_hoisted_20","currentChart","_hoisted_21","data","type","visualization","legend","_hoisted_22"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\CompareTable.vue"],"sourcesContent":["<template>\r\n\t<div class=\"compare-container\">\r\n\t\t<!-- 加载状态提示 -->\r\n\t\t<div v-if=\"isInitializing\" class=\"initial-loading\">\r\n\t\t\t<div class=\"loading-spinner\"></div>\r\n\t\t\t<p>正在准备数据对比...</p>\r\n\t\t</div>\r\n\r\n\t\t<!-- 主对比表格 -->\r\n\t\t<div v-if=\"!isInitializing\" class=\"comparison-grid\">\r\n\t\t\t<div class=\"header left-column\">\r\n\t\t\t\t{{ leftInfobox.title }}\r\n\t\t\t</div>\r\n\t\t\t<div class=\"header middle-column\">对比属性</div>\r\n\t\t\t<div class=\"header right-column\">\r\n\t\t\t\t{{ rightInfobox.title }}\r\n\t\t\t</div>\r\n\r\n\t\t\t<template v-for=\"field in sortedFields\" :key=\"field.key\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell left-column\"\r\n\t\t\t\t\t@mouseover=\"hoverInfobox(leftInfobox, field.key, 'left')\"\r\n\t\t\t\t\t@mouseout=\"unhoverInfobox('left')\"\r\n\t\t\t\t\t@click=\"handleCellClick(leftInfobox, field)\">\r\n\t\t\t\t\t<!-- Modified to handleCellClick -->\r\n\t\t\t\t\t<SimpleChart v-bind=\"getChartProps(leftInfobox, field)\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell middle-column\"\r\n\t\t\t\t\t:style=\"{ backgroundColor: getHeatmapColor(field.score) }\"\r\n\t\t\t\t\t@mouseover=\"hoverBothInfoboxes(field.key)\"\r\n\t\t\t\t\t@mouseout=\"unhoverBothInfoboxes()\">\r\n\t\t\t\t\t<div class=\"field-name\">{{ field.key }}</div>\r\n\t\t\t\t\t<div class=\"field-type\">{{ field.typeLabel }}</div>\r\n\t\t\t\t\t<!-- Display score if available -->\r\n\t\t\t\t\t<div v-if=\"field.score !== undefined\" class=\"field-score\">\r\n\t\t\t\t\t\t差异分: {{ field.score }}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"icon-actions\">\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tclass=\"icon-btn compare\"\r\n\t\t\t\t\t\t\ttitle=\"对比分析\"\r\n\t\t\t\t\t\t\t@click=\"handleMiddleColumnClick(field)\">\r\n\t\t\t\t\t\t\t⚖️\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tclass=\"icon-btn merge\"\r\n\t\t\t\t\t\t\ttitle=\"合并图表\"\r\n\t\t\t\t\t\t\t@click=\"showCombinedChart(field)\">\r\n\t\t\t\t\t\t\t📊\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell right-column\"\r\n\t\t\t\t\t@mouseover=\"hoverInfobox(rightInfobox, field.key, 'right')\"\r\n\t\t\t\t\t@mouseout=\"unhoverInfobox('right')\"\r\n\t\t\t\t\t@click=\"handleCellClick(rightInfobox, field)\">\r\n\t\t\t\t\t<!-- Modified to handleCellClick -->\r\n\t\t\t\t\t<SimpleChart v-bind=\"getChartProps(rightInfobox, field)\" />\r\n\t\t\t\t</div>\r\n\t\t\t</template>\r\n\t\t\t<div\r\n\t\t\t\tv-if=\"sortedFields.length === 0 && !isInitializing\"\r\n\t\t\t\tclass=\"no-common-fields\">\r\n\t\t\t\t没有共同的可对比属性。\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- 全屏图表模态框 -->\r\n\t\t<div\r\n\t\t\tv-if=\"showFullChartModal\"\r\n\t\t\tclass=\"full-chart-modal\"\r\n\t\t\t@click.self=\"closeFullChart\">\r\n\t\t\t<div class=\"modal-content\">\r\n\t\t\t\t<button class=\"close-btn\" @click=\"closeFullChart\">×</button>\r\n\t\t\t\t<h3>{{ currentChart.title }} - {{ currentChart.field.key }}</h3>\r\n\t\t\t\t<div class=\"chart-container-modal\">\r\n\t\t\t\t\t<!-- Renamed to avoid conflict -->\r\n\t\t\t\t\t<FullChart\r\n\t\t\t\t\t\t:field=\"currentChart.data\"\r\n\t\t\t\t\t\t:type=\"currentChart.field.type\"\r\n\t\t\t\t\t\t:visualization=\"currentChart.field.visualization\"\r\n\t\t\t\t\t\t:field-key=\"currentChart.field.key\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"chart-legend\" v-if=\"currentChart.field.legend\">\r\n\t\t\t\t\t{{ currentChart.field.legend }}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, onMounted, watch, onUnmounted } from \"vue\";\r\n\timport SimpleChart from \"./SimpleChart.vue\"; // Adjust path as needed\r\n\timport FullChart from \"./FullChart.vue\"; // Adjust path as needed\r\n\timport bus from \"@/js/eventBus.js\"; // Adjust path as needed\r\n\r\n\tconst props = defineProps({\r\n\t\tdiv1RawData: Object, // Raw data for left infobox, potentially from an external source\r\n\t\tdiv3RawData: Object // Raw data for right infobox, potentially from an external source\r\n\t});\r\n\r\n\tconst emit = defineEmits([\"compareAttribute\"]);\r\n\r\n\t// State variables\r\n\tconst leftInfobox = ref({ title: \"左侧数据\", type: \"\", data: {} });\r\n\tconst rightInfobox = ref({ title: \"右侧数据\", type: \"\", data: {} });\r\n\tconst showFullChartModal = ref(false);\r\n\tconst currentChart = ref({\r\n\t\ttitle: \"\",\r\n\t\tfield: {}, // Field configuration (key, type, visualization, legend)\r\n\t\tdata: [] // Actual data array for the chart\r\n\t});\r\n\tconst isInitializing = ref(true);\r\n\tconst hasAutoCompared = ref(false); // To ensure auto-compare runs only once\r\n\tconst leftDataLoaded = ref(false);\r\n\tconst rightDataLoaded = ref(false);\r\n\tconst sortedFieldsWithScores = ref([]); // Holds fields with their difference scores\r\n\r\n\t// Comparable fields configuration (ensure keys match data structure)\r\n\tconst COMPARABLE_FIELDS = [\r\n\t\t{\r\n\t\t\tkey: \"GDP\",\r\n\t\t\ttype: \"number\",\r\n\t\t\ttypeLabel: \"数值(美元)\",\r\n\t\t\tvisualization: \"bar-chart\",\r\n\t\t\tlegend: \"国内生产总值 (万亿美元)\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Population\",\r\n\t\t\ttype: \"number\",\r\n\t\t\ttypeLabel: \"数值(人)\",\r\n\t\t\tvisualization: \"bar-chart\",\r\n\t\t\tlegend: \"人口数量 (亿人)\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"GDP growth\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"line-chart\",\r\n\t\t\tlegend: \"GDP年增长率 (%)\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Inflation (CPI)\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"pie-chart\",\r\n\t\t\tlegend: \"消费者价格指数变化 (%)\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"GDP rank\",\r\n\t\t\ttype: \"text\",\r\n\t\t\ttypeLabel: \"文本\",\r\n\t\t\tvisualization: \"text-only\",\r\n\t\t\tlegend: \"全球GDP排名\"\r\n\t\t}\r\n\t\t// Add more fields as needed\r\n\t];\r\n\r\n\t// --- Core Data Processing ---\r\n\r\n\t// MODIFIED getField: Returns an array of full data objects for the given fieldKey\r\n\tconst getField = (infobox, fieldKey) => {\r\n\t\tif (!infobox?.data) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\t\t// Assuming infobox.data is an object where keys are section names\r\n\t\t// and values are objects containing the actual data fields.\r\n\t\t// e.g., infobox.data.Statistics['GDP growth']\r\n\t\tfor (const section of Object.values(infobox.data)) {\r\n\t\t\tif (\r\n\t\t\t\tsection &&\r\n\t\t\t\ttypeof section === \"object\" &&\r\n\t\t\t\tsection[fieldKey] !== undefined\r\n\t\t\t) {\r\n\t\t\t\tconst fieldData = section[fieldKey];\r\n\t\t\t\tif (Array.isArray(fieldData)) {\r\n\t\t\t\t\treturn fieldData; // Returns array of objects like { value: 1.4, raw: \"1.4% (2023)\", ... }\r\n\t\t\t\t}\r\n\t\t\t\treturn [fieldData]; // Wraps single object/primitive in an array\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn []; // Field not found in any section\r\n\t};\r\n\r\n\t// Process raw data received for an infobox\r\n\tconst processInfoboxData = rawData => {\r\n\t\tif (!rawData) {\r\n\t\t\treturn { title: \"无数据\", type: \"未知\", data: {} };\r\n\t\t}\r\n\t\t// Assuming rawData has a 'title', 'type', and 'data' (which itself contains sections)\r\n\t\t// This structure should match what `getField` expects for `infobox.data`.\r\n\t\t// If your `div1RawData` is already in the { title, type, data: { section1: ..., section2: ...}} format,\r\n\t\t// you might not need much processing here.\r\n\t\t// Example: if rawData = { \"title\": \"USA\", \"type\": \"Country\", \"data\": { \"Statistics\": { \"GDP\": ... } } }\r\n\t\treturn {\r\n\t\t\ttitle: rawData.title || \"无标题\",\r\n\t\t\ttype: rawData.type || \"未知类型\",\r\n\t\t\tdata: rawData.data || {} // This 'data' should contain the sections\r\n\t\t};\r\n\t};\r\n\r\n\t// --- Charting and Display ---\r\n\r\n\t// Calculate unified max value for consistent Y-axis scaling in SimpleChart\r\n\tconst getUnifiedMaxValue = fieldKey => {\r\n\t\tconst extractNumericValue = item => {\r\n\t\t\tif (\r\n\t\t\t\ttypeof item === \"object\" &&\r\n\t\t\t\titem !== null &&\r\n\t\t\t\titem.value !== undefined\r\n\t\t\t) {\r\n\t\t\t\treturn Number(item.value);\r\n\t\t\t}\r\n\t\t\tif (typeof item === \"number\") {\r\n\t\t\t\treturn item;\r\n\t\t\t}\r\n\t\t\treturn NaN;\r\n\t\t};\r\n\r\n\t\tconst leftValues = getField(leftInfobox.value, fieldKey)\r\n\t\t\t.map(extractNumericValue)\r\n\t\t\t.filter(n => !isNaN(n));\r\n\t\tconst rightValues = getField(rightInfobox.value, fieldKey)\r\n\t\t\t.map(extractNumericValue)\r\n\t\t\t.filter(n => !isNaN(n));\r\n\r\n\t\tconst leftMax = leftValues.length ? Math.max(...leftValues) : 0;\r\n\t\tconst rightMax = rightValues.length ? Math.max(...rightValues) : 0;\r\n\r\n\t\treturn Math.max(leftMax, rightMax) * 1.1 || 1; // Add 10% buffer, fallback to 1\r\n\t};\r\n\r\n\t// Props for SimpleChart component\r\n\tconst getChartProps = (infobox, fieldConfig) => {\r\n\t\treturn {\r\n\t\t\tfield: getField(infobox, fieldConfig.key), // Pass array of full data objects\r\n\t\t\ttype: fieldConfig.type,\r\n\t\t\tvisualization: fieldConfig.visualization,\r\n\t\t\tunifiedMax: getUnifiedMaxValue(fieldConfig.key),\r\n\t\t\tfieldKey: fieldConfig.key\r\n\t\t};\r\n\t};\r\n\r\n\t// Show full chart in modal\r\n\tconst showFullChart = (infobox, fieldConfig) => {\r\n\t\tcurrentChart.value = {\r\n\t\t\ttitle: infobox.title,\r\n\t\t\tfield: fieldConfig, // Pass the entire field configuration\r\n\t\t\tdata: getField(infobox, fieldConfig.key) // Pass the array of data objects\r\n\t\t};\r\n\t\tshowFullChartModal.value = true;\r\n\t};\r\n\r\n\tconst closeFullChart = () => {\r\n\t\tshowFullChartModal.value = false;\r\n\t};\r\n\r\n\t// Show combined chart for a field\r\n\tconst showCombinedChart = fieldConfig => {\r\n\t\tconst leftData = getField(leftInfobox.value, fieldConfig.key);\r\n\t\tconst rightData = getField(rightInfobox.value, fieldConfig.key);\r\n\r\n\t\t// Add a source property to differentiate data if needed by FullChart/sub-charts\r\n\t\tconst combinedData = [\r\n\t\t\t...leftData.map(item => ({\r\n\t\t\t\t...item,\r\n\t\t\t\tsourceTitle: leftInfobox.value.title\r\n\t\t\t})),\r\n\t\t\t...rightData.map(item => ({\r\n\t\t\t\t...item,\r\n\t\t\t\tsourceTitle: rightInfobox.value.title\r\n\t\t\t}))\r\n\t\t];\r\n\r\n\t\tcurrentChart.value = {\r\n\t\t\ttitle: `合并图表 - ${fieldConfig.key}`,\r\n\t\t\tfield: fieldConfig,\r\n\t\t\tdata: combinedData\r\n\t\t};\r\n\t\tshowFullChartModal.value = true;\r\n\t};\r\n\r\n\t// --- Comparison Logic & Field Sorting ---\r\n\r\n\t// Calculate difference score between left and right data for a field\r\n\tconst calculateDifferenceScore = fieldConfig => {\r\n\t\tconst extractNumericValue = item => {\r\n\t\t\tif (\r\n\t\t\t\ttypeof item === \"object\" &&\r\n\t\t\t\titem !== null &&\r\n\t\t\t\titem.value !== undefined\r\n\t\t\t) {\r\n\t\t\t\treturn Number(item.value);\r\n\t\t\t}\r\n\t\t\tif (typeof item === \"number\") {\r\n\t\t\t\treturn item;\r\n\t\t\t}\r\n\t\t\treturn NaN;\r\n\t\t};\r\n\r\n\t\tconst leftValues = getField(leftInfobox.value, fieldConfig.key)\r\n\t\t\t.map(extractNumericValue)\r\n\t\t\t.filter(n => !isNaN(n));\r\n\t\tconst rightValues = getField(rightInfobox.value, fieldConfig.key)\r\n\t\t\t.map(extractNumericValue)\r\n\t\t\t.filter(n => !isNaN(n));\r\n\r\n\t\tif (\r\n\t\t\tleftValues.length === 0 ||\r\n\t\t\trightValues.length === 0 ||\r\n\t\t\tfieldConfig.type === \"text\"\r\n\t\t) {\r\n\t\t\treturn 0; // No basis for numeric comparison or it's text\r\n\t\t}\r\n\r\n\t\t// Simplified scoring: average relative difference of the first comparable values\r\n\t\t// You can implement more sophisticated scoring.\r\n\t\tconst val1 = leftValues[0];\r\n\t\tconst val2 = rightValues[0];\r\n\t\tif (val1 === 0 && val2 === 0) return 0;\r\n\t\tconst avg = (Math.abs(val1) + Math.abs(val2)) / 2;\r\n\t\tif (avg === 0) return 100; // Max difference if one is non-zero and other is zero\r\n\r\n\t\tconst relativeDiff = Math.abs(val1 - val2) / avg;\r\n\t\tlet score = Math.min(100, relativeDiff * 100); // Scale to 0-100\r\n\r\n\t\t// Weighting specific fields\r\n\t\tif (fieldConfig.key.toLowerCase().includes(\"gdp growth\")) score *= 1.5;\r\n\t\tif (fieldConfig.key.toLowerCase().includes(\"inflation\")) score *= 1.2;\r\n\r\n\t\treturn Math.min(100, Math.round(score));\r\n\t};\r\n\r\n\t// Determine fields that are present in at least one infobox\r\n\tconst availableFields = computed(() => {\r\n\t\treturn COMPARABLE_FIELDS.filter(fieldConf => {\r\n\t\t\tconst leftVal = getField(leftInfobox.value, fieldConf.key);\r\n\t\t\tconst rightVal = getField(rightInfobox.value, fieldConf.key);\r\n\t\t\treturn leftVal.length > 0 || rightVal.length > 0;\r\n\t\t});\r\n\t});\r\n\r\n\t// Calculate scores and sort fields\r\n\tconst tryCalculateScoresAndSort = () => {\r\n\t\tif (leftDataLoaded.value && rightDataLoaded.value) {\r\n\t\t\tisInitializing.value = true; // Show loading while calculating\r\n\t\t\tsortedFieldsWithScores.value = availableFields.value\r\n\t\t\t\t.map(field => ({\r\n\t\t\t\t\t...field,\r\n\t\t\t\t\tscore: calculateDifferenceScore(field)\r\n\t\t\t\t}))\r\n\t\t\t\t.sort((a, b) => {\r\n\t\t\t\t\t// Prioritize non-text fields, then sort by score\r\n\t\t\t\t\tif (a.type !== \"text\" && b.type === \"text\") return -1;\r\n\t\t\t\t\tif (a.type === \"text\" && b.type !== \"text\") return 1;\r\n\t\t\t\t\treturn b.score - a.score; // Higher score first\r\n\t\t\t\t});\r\n\t\t\tisInitializing.value = false;\r\n\t\t\ttryAutoCompare(); // Attempt auto-comparison after scores are ready\r\n\t\t}\r\n\t};\r\n\r\n\t// Computed property for the template to iterate over\r\n\tconst sortedFields = computed(() => sortedFieldsWithScores.value);\r\n\r\n\t// Automatic comparison of the most significant field\r\n\tconst tryAutoCompare = () => {\r\n\t\tif (\r\n\t\t\thasAutoCompared.value ||\r\n\t\t\t!leftDataLoaded.value ||\r\n\t\t\t!rightDataLoaded.value ||\r\n\t\t\tsortedFields.value.length === 0\r\n\t\t) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\thasAutoCompared.value = true;\r\n\t\tconst mostSignificantField = sortedFields.value[0];\r\n\t\tif (mostSignificantField && mostSignificantField.type !== \"text\") {\r\n\t\t\t// Auto-compare non-text fields\r\n\t\t\thandleMiddleColumnClick(mostSignificantField);\r\n\t\t}\r\n\t};\r\n\r\n\t// --- Event Handlers & UI Interaction ---\r\n\r\n\tconst handleCellClick = (infobox, fieldConfig) => {\r\n\t\tshowFullChart(infobox, fieldConfig);\r\n\t};\r\n\r\n\tconst handleMiddleColumnClick = fieldConfig => {\r\n\t\temit(\"compareAttribute\", {\r\n\t\t\tfieldKey: fieldConfig.key,\r\n\t\t\tleftData: getField(leftInfobox.value, fieldConfig.key),\r\n\t\t\trightData: getField(rightInfobox.value, fieldConfig.key),\r\n\t\t\tleftTitle: leftInfobox.value.title,\r\n\t\t\trightTitle: rightInfobox.value.title,\r\n\t\t\tfieldType: fieldConfig.type,\r\n\t\t\tfieldLabel: fieldConfig.typeLabel,\r\n\t\t\tfieldConfig: fieldConfig // Pass full config for more context\r\n\t\t});\r\n\t};\r\n\r\n\tconst hoverInfobox = (infobox, fieldKey, side) => {\r\n\t\tbus.emit(`hover-${side}-infobox`, {\r\n\t\t\tfieldKey,\r\n\t\t\tinfoboxTitle: infobox.title\r\n\t\t});\r\n\t};\r\n\r\n\tconst unhoverInfobox = side => {\r\n\t\tbus.emit(`unhover-${side}-infobox`);\r\n\t};\r\n\r\n\tconst hoverBothInfoboxes = fieldKey => {\r\n\t\thoverInfobox(leftInfobox.value, fieldKey, \"left\");\r\n\t\thoverInfobox(rightInfobox.value, fieldKey, \"right\");\r\n\t};\r\n\r\n\tconst unhoverBothInfoboxes = () => {\r\n\t\tunhoverInfobox(\"left\");\r\n\t\tunhoverInfobox(\"right\");\r\n\t};\r\n\r\n\t// Heatmap color based on score (optional visual cue)\r\n\tconst getHeatmapColor = score => {\r\n\t\tif (score === undefined || score === 0) return \"#f8f9fa\"; // Default background\r\n\t\tconst maxScore = 100;\r\n\t\tconst ratio = Math.min(score / maxScore, 1);\r\n\t\t// Green (low diff) to Yellow to Red (high diff)\r\n\t\t// Hue: 120 (green) -> 60 (yellow) -> 0 (red)\r\n\t\tconst hue = 120 * (1 - ratio);\r\n\t\treturn `hsl(${hue}, 70%, ${85 - ratio * 20}%)`;\r\n\t};\r\n\r\n\t// --- Lifecycle and Watchers ---\r\n\r\n\tonMounted(() => {\r\n\t\tisInitializing.value = true;\r\n\r\n\t\t// Listen for data from event bus (or use props if data comes directly)\r\n\t\tbus.on(\"div1_InfoboxData\", data => {\r\n\t\t\tleftInfobox.value = processInfoboxData(data);\r\n\t\t\tleftDataLoaded.value = true;\r\n\t\t\tif (leftDataLoaded.value && rightDataLoaded.value)\r\n\t\t\t\ttryCalculateScoresAndSort();\r\n\t\t});\r\n\t\tbus.on(\"div3_InfoboxData\", data => {\r\n\t\t\trightInfobox.value = processInfoboxData(data);\r\n\t\t\trightDataLoaded.value = true;\r\n\t\t\tif (leftDataLoaded.value && rightDataLoaded.value)\r\n\t\t\t\ttryCalculateScoresAndSort();\r\n\t\t});\r\n\r\n\t\t// If data is passed via props, process it here\r\n\t\tif (props.div1RawData) {\r\n\t\t\tleftInfobox.value = processInfoboxData(props.div1RawData);\r\n\t\t\tleftDataLoaded.value = true;\r\n\t\t}\r\n\t\tif (props.div3RawData) {\r\n\t\t\trightInfobox.value = processInfoboxData(props.div3RawData);\r\n\t\t\trightDataLoaded.value = true;\r\n\t\t}\r\n\r\n\t\tif (leftDataLoaded.value && rightDataLoaded.value) {\r\n\t\t\ttryCalculateScoresAndSort();\r\n\t\t} else {\r\n\t\t\t// If data is not yet loaded via bus, keep initializing true\r\n\t\t\t// It will be set to false after tryCalculateScoresAndSort completes\r\n\t\t\t// Or if data is guaranteed to come via props, this might not be needed.\r\n\t\t\tif (!props.div1RawData && !props.div3RawData) {\r\n\t\t\t\t// still waiting for bus events\r\n\t\t\t} else {\r\n\t\t\t\tisInitializing.value = false; // Data from props was processed or missing\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\t// Watch for prop changes if data can be updated externally\r\n\twatch(\r\n\t\t() => props.div1RawData,\r\n\t\tnewData => {\r\n\t\t\tif (newData) {\r\n\t\t\t\tleftInfobox.value = processInfoboxData(newData);\r\n\t\t\t\tleftDataLoaded.value = true; // Reset loaded status if needed\r\n\t\t\t\thasAutoCompared.value = false; // Allow re-auto-compare on data change\r\n\t\t\t\ttryCalculateScoresAndSort();\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\twatch(\r\n\t\t() => props.div3RawData,\r\n\t\tnewData => {\r\n\t\t\tif (newData) {\r\n\t\t\t\trightInfobox.value = processInfoboxData(newData);\r\n\t\t\t\trightDataLoaded.value = true;\r\n\t\t\t\thasAutoCompared.value = false;\r\n\t\t\t\ttryCalculateScoresAndSort();\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\r\n\tonUnmounted(() => {\r\n\t\tbus.off(\"div1_InfoboxData\");\r\n\t\tbus.off(\"div3_InfoboxData\");\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.compare-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tpadding: 8px;\r\n\t\tbox-sizing: border-box;\r\n\t\tposition: relative;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\r\n\t.initial-loading {\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\tbottom: 0;\r\n\t\tbackground: rgba(255, 255, 255, 0.9); /* Slightly more opaque */\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tz-index: 100;\r\n\t\tfont-size: 14px;\r\n\t\tcolor: #555;\r\n\t}\r\n\r\n\t.initial-loading p {\r\n\t\tmargin-top: 12px;\r\n\t}\r\n\r\n\t.loading-spinner {\r\n\t\twidth: 35px;\r\n\t\theight: 35px;\r\n\t\tborder: 4px solid #e0e0e0; /* Lighter border */\r\n\t\tborder-top: 4px solid #1976d2; /* Primary color for spinner */\r\n\t\tborder-radius: 50%;\r\n\t\tanimation: spin 0.8s linear infinite;\r\n\t}\r\n\r\n\t@keyframes spin {\r\n\t\t0% {\r\n\t\t\ttransform: rotate(0deg);\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform: rotate(360deg);\r\n\t\t}\r\n\t}\r\n\r\n\t.comparison-grid {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: minmax(150px, 1fr) minmax(100px, 150px) minmax(\r\n\t\t\t\t150px,\r\n\t\t\t\t1fr\r\n\t\t\t); /* Adjusted column widths */\r\n\t\twidth: 100%;\r\n\t\tborder: 1px solid #d1d5db; /* Softer border */\r\n\t\tborder-radius: 6px; /* Slightly more rounded */\r\n\t\toverflow: hidden;\r\n\t\t/* max-height: calc(100vh - 100px); Consider a dynamic max-height */\r\n\t\tflex-grow: 1;\r\n\t\toverflow-y: auto; /* Ensure scrollability for many fields */\r\n\t}\r\n\r\n\t.header {\r\n\t\tpadding: 10px 8px; /* Increased padding */\r\n\t\tbackground: #4a5568; /* Darker, more neutral header */\r\n\t\tcolor: white;\r\n\t\tfont-weight: 600; /* Slightly bolder */\r\n\t\ttext-align: center;\r\n\t\tposition: sticky;\r\n\t\ttop: 0;\r\n\t\tz-index: 10; /* Ensure header is above cells */\r\n\t\tborder-right: 1px solid #718096; /* Separator color */\r\n\t\tfont-size: 13px;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t}\r\n\t.header:last-child {\r\n\t\tborder-right: none;\r\n\t}\r\n\r\n\t.header.middle-column {\r\n\t\tbackground: #2d3748; /* Even darker for middle distinction */\r\n\t}\r\n\r\n\t.cell {\r\n\t\tpadding: 10px; /* Increased padding */\r\n\t\tmin-height: 120px; /* Ensure enough space for SimpleChart */\r\n\t\tborder-bottom: 1px solid #e2e8f0; /* Softer cell border */\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tjustify-content: center; /* Vertically center content */\r\n\t\talign-items: center; /* Horizontally center content */\r\n\t\tposition: relative;\r\n\t\tcursor: pointer;\r\n\t\ttransition: background-color 0.2s ease-in-out;\r\n\t\toverflow: hidden; /* Prevent content overflow */\r\n\t}\r\n\r\n\t.cell:hover {\r\n\t\tbackground-color: #f7fafc; /* Lighter hover */\r\n\t}\r\n\t.left-column:hover,\r\n\t.right-column:hover {\r\n\t\tbackground-color: #ebf8ff; /* Specific hover for chart cells */\r\n\t}\r\n\r\n\t.middle-column {\r\n\t\tcursor: default;\r\n\t\tbackground-color: #f8f9fa;\r\n\t\ttext-align: center;\r\n\t\tborder-left: 1px solid #e2e8f0;\r\n\t\tborder-right: 1px solid #e2e8f0;\r\n\t}\r\n\t.middle-column:hover {\r\n\t\tbackground-color: #e9ecef;\r\n\t}\r\n\r\n\t.field-name {\r\n\t\tfont-weight: bold;\r\n\t\tmargin-bottom: 5px; /* Increased margin */\r\n\t\tfont-size: 12px; /* Slightly smaller for compactness */\r\n\t\tcolor: #2d3748;\r\n\t\twidth: 100%;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t}\r\n\r\n\t.field-type {\r\n\t\tcolor: #718096; /* Softer color */\r\n\t\tfont-size: 10px; /* Smaller type label */\r\n\t\tfont-style: italic;\r\n\t\tmargin-bottom: 8px;\r\n\t\twidth: 100%;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t}\r\n\t.field-score {\r\n\t\tfont-size: 10px;\r\n\t\tcolor: #4a5568;\r\n\t\tmargin-bottom: 8px;\r\n\t}\r\n\r\n\t.icon-actions {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\tgap: 20px; /* Increased gap */\r\n\t\tmargin-top: auto; /* Push actions to bottom if cell content varies */\r\n\t}\r\n\r\n\t.icon-btn {\r\n\t\tfont-size: 18px; /* Larger icons */\r\n\t\tcursor: pointer;\r\n\t\topacity: 0.6;\r\n\t\ttransition: all 0.2s;\r\n\t}\r\n\t.icon-btn:hover {\r\n\t\topacity: 1;\r\n\t\ttransform: scale(1.15); /* Slightly more pronounced hover effect */\r\n\t}\r\n\t.icon-btn.compare:hover {\r\n\t\tcolor: #48bb78;\r\n\t} /* Green */\r\n\t.icon-btn.merge:hover {\r\n\t\tcolor: #4299e1;\r\n\t} /* Blue */\r\n\r\n\t.full-chart-modal {\r\n\t\tposition: fixed;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\tbottom: 0;\r\n\t\tbackground-color: rgba(0, 0, 0, 0.6); /* Darker backdrop */\r\n\t\tbackdrop-filter: blur(5px); /* Softer blur */\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t\tz-index: 1000;\r\n\t\tpadding: 20px; /* Add padding for smaller screens */\r\n\t\tbox-sizing: border-box;\r\n\t}\r\n\r\n\t.modal-content {\r\n\t\tbackground: white;\r\n\t\tpadding: 20px 24px; /* More padding */\r\n\t\tborder-radius: 8px;\r\n\t\twidth: 90%; /* Responsive width */\r\n\t\tmax-width: 850px; /* Max width */\r\n\t\tmax-height: 90vh; /* Max height */\r\n\t\tdisplay: flex; /* Use flex for layout */\r\n\t\tflex-direction: column; /* Stack content vertically */\r\n\t\tposition: relative;\r\n\t\tbox-shadow: 0 10px 25px rgba(0, 0, 0, 0.1), 0 5px 10px rgba(0, 0, 0, 0.05);\r\n\t\toverflow: hidden; /* Prevent content from breaking out before internal scroll */\r\n\t}\r\n\t.modal-content h3 {\r\n\t\tmargin-top: 0;\r\n\t\tmargin-bottom: 16px;\r\n\t\tfont-size: 1.25rem;\r\n\t\tcolor: #2d3748;\r\n\t}\r\n\r\n\t.chart-container-modal {\r\n\t\t/* Renamed to avoid conflict with .chart-container in FullChart */\r\n\t\theight: auto; /* Let FullChart's internal height control take over */\r\n\t\tmin-height: 300px; /* Minimum height for the chart area */\r\n\t\tmax-height: calc(90vh - 150px); /* Adjust based on header/footer/padding */\r\n\t\twidth: 100%;\r\n\t\tmargin: 0; /* Remove margin if FullChart has padding */\r\n\t\toverflow-y: auto; /* Scroll within chart area if FullChart content overflows */\r\n\t\tflex-grow: 1; /* Allow chart container to take available space */\r\n\t}\r\n\r\n\t.chart-legend {\r\n\t\tfont-size: 12px; /* Smaller legend text */\r\n\t\tcolor: #4a5568;\r\n\t\ttext-align: center;\r\n\t\tmargin-top: 12px;\r\n\t\tpadding-top: 12px;\r\n\t\tborder-top: 1px solid #e2e8f0;\r\n\t\tflex-shrink: 0; /* Prevent legend from shrinking */\r\n\t}\r\n\r\n\t.close-btn {\r\n\t\tposition: absolute;\r\n\t\ttop: 12px; /* Adjusted position */\r\n\t\tright: 12px;\r\n\t\tfont-size: 24px; /* Larger close icon */\r\n\t\tfont-weight: bold;\r\n\t\tbackground: none;\r\n\t\tborder: none;\r\n\t\tcursor: pointer;\r\n\t\tcolor: #718096;\r\n\t\tline-height: 1;\r\n\t}\r\n\t.close-btn:hover {\r\n\t\tcolor: #2d3748;\r\n\t}\r\n\r\n\t.no-common-fields {\r\n\t\tgrid-column: 1 / -1; /* Span all columns */\r\n\t\ttext-align: center;\r\n\t\tpadding: 40px 20px;\r\n\t\tfont-size: 1rem;\r\n\t\tcolor: #718096;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tmin-height: 200px; /* Ensure it's visible */\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,KAAK,EAAC;AAAmB;;EAD/BC,GAAA;EAG6BD,KAAK,EAAC;;gEAChCE,mBAAA,CAAmC;EAA9BF,KAAK,EAAC;AAAiB;gEAC5BE,mBAAA,CAAkB,WAAf,aAAW;oBADdC,UAAmC,EACnCC,UAAkB,C;;EALrBH,GAAA;EAS8BD,KAAK,EAAC;;;EAC5BA,KAAK,EAAC;AAAoB;gEAG/BE,mBAAA,CAA4C;EAAvCF,KAAK,EAAC;AAAsB,GAAC,MAAI;;EACjCA,KAAK,EAAC;AAAqB;oBAdnC;oBAAA;;EAgCUA,KAAK,EAAC;AAAY;;EAClBA,KAAK,EAAC;AAAY;;EAjC5BC,GAAA;EAmC2CD,KAAK,EAAC;;;EAGvCA,KAAK,EAAC;AAAc;oBAtC9B;oBAAA;oBAAA;;EAAAC,GAAA;EAgEID,KAAK,EAAC;;;EAUFA,KAAK,EAAC;AAAe;;EAGpBA,KAAK,EAAC;AAAuB;;EA7EtCC,GAAA;EAqFSD,KAAK,EAAC;;;uBApFdK,mBAAA,CAyFM,OAzFNC,UAyFM,GAxFLC,mBAAA,YAAe,EACJC,MAAA,CAAAC,cAAc,I,cAAzBJ,mBAAA,CAGM,OAHNK,UAGM,EANR,IAAAC,UAAA,MAAAJ,mBAAA,gBAQEA,mBAAA,WAAc,E,CACFC,MAAA,CAAAC,cAAc,I,cAA1BJ,mBAAA,CA0DM,OA1DNO,UA0DM,GAzDLV,mBAAA,CAEM,OAFNW,UAEM,EAAAC,gBAAA,CADFN,MAAA,CAAAO,WAAW,CAACC,KAAK,kBAErBC,UAA4C,EAC5Cf,mBAAA,CAEM,OAFNgB,UAEM,EAAAJ,gBAAA,CADFN,MAAA,CAAAW,YAAY,CAACH,KAAK,mB,kBAGtBX,mBAAA,CA2CWe,SAAA,QA7DdC,WAAA,CAkB6Bb,MAAA,CAAAc,YAAY,EAArBC,KAAK;yBAlBzBlB,mBAAA,CAAAe,SAAA;MAAAnB,GAAA,EAkBiDsB,KAAK,CAACtB;QACnDC,mBAAA,CAOM;MANLF,KAAK,EAAC,kBAAkB;MACvBwB,WAAS,EAAAC,MAAA,IAAEjB,MAAA,CAAAkB,YAAY,CAAClB,MAAA,CAAAO,WAAW,EAAEQ,KAAK,CAACtB,GAAG;MAC9C0B,UAAQ,EAAAC,MAAA,QAAAA,MAAA,MAAAH,MAAA,IAAEjB,MAAA,CAAAqB,cAAc;MACxBC,OAAK,EAAAL,MAAA,IAAEjB,MAAA,CAAAuB,eAAe,CAACvB,MAAA,CAAAO,WAAW,EAAEQ,KAAK;QAC1ChB,mBAAA,iCAAoC,EACpCyB,YAAA,CAA0DxB,MAAA,iBAA1DyB,WAAA,CAA0D;MAzB/DC,OAAA;IAAA,GAyB0B1B,MAAA,CAAA2B,aAAa,CAAC3B,MAAA,CAAAO,WAAW,EAAEQ,KAAK,+B,kCAzB1Da,WAAA,GA2BIlC,mBAAA,CAyBM;MAxBLF,KAAK,EAAC,oBAAoB;MACzBqC,KAAK,EA7BXC,eAAA;QAAAC,eAAA,EA6BgC/B,MAAA,CAAAgC,eAAe,CAACjB,KAAK,CAACkB,KAAK;MAAA;MACrDjB,WAAS,EAAAC,MAAA,IAAEjB,MAAA,CAAAkC,kBAAkB,CAACnB,KAAK,CAACtB,GAAG;MACvC0B,UAAQ,EAAAC,MAAA,QAAAA,MAAA,MAAAH,MAAA,IAAEjB,MAAA,CAAAmC,oBAAoB;QAC/BzC,mBAAA,CAA6C,OAA7C0C,WAA6C,EAAA9B,gBAAA,CAAlBS,KAAK,CAACtB,GAAG,kBACpCC,mBAAA,CAAmD,OAAnD2C,WAAmD,EAAA/B,gBAAA,CAAxBS,KAAK,CAACuB,SAAS,kBAC1CvC,mBAAA,gCAAmC,EACxBgB,KAAK,CAACkB,KAAK,KAAKM,SAAS,I,cAApC1C,mBAAA,CAEM,OAFN2C,WAEM,EAFoD,QACpD,GAAAlC,gBAAA,CAAGS,KAAK,CAACkB,KAAK,oBApCzBlC,mBAAA,gBAsCKL,mBAAA,CAaM,OAbN+C,WAaM,GAZL/C,mBAAA,CAKO;MAJNF,KAAK,EAAC,kBAAkB;MACxBgB,KAAK,EAAC,MAAM;MACXc,OAAK,EAAAL,MAAA,IAAEjB,MAAA,CAAA0C,uBAAuB,CAAC3B,KAAK;OAAG,MAEzC,iBA5CN4B,WAAA,GA6CMjD,mBAAA,CAKO;MAJNF,KAAK,EAAC,gBAAgB;MACtBgB,KAAK,EAAC,MAAM;MACXc,OAAK,EAAAL,MAAA,IAAEjB,MAAA,CAAA4C,iBAAiB,CAAC7B,KAAK;OAAG,MAEnC,iBAlDN8B,WAAA,E,2CAAAC,WAAA,GAqDIpD,mBAAA,CAOM;MANLF,KAAK,EAAC,mBAAmB;MACxBwB,WAAS,EAAAC,MAAA,IAAEjB,MAAA,CAAAkB,YAAY,CAAClB,MAAA,CAAAW,YAAY,EAAEI,KAAK,CAACtB,GAAG;MAC/C0B,UAAQ,EAAAC,MAAA,QAAAA,MAAA,MAAAH,MAAA,IAAEjB,MAAA,CAAAqB,cAAc;MACxBC,OAAK,EAAAL,MAAA,IAAEjB,MAAA,CAAAuB,eAAe,CAACvB,MAAA,CAAAW,YAAY,EAAEI,KAAK;QAC3ChB,mBAAA,iCAAoC,EACpCyB,YAAA,CAA2DxB,MAAA,iBAA3DyB,WAAA,CAA2D;MA3DhEC,OAAA;IAAA,GA2D0B1B,MAAA,CAAA2B,aAAa,CAAC3B,MAAA,CAAAW,YAAY,EAAEI,KAAK,+B,kCA3D3DgC,WAAA,E;kCA+DU/C,MAAA,CAAAc,YAAY,CAACkC,MAAM,WAAWhD,MAAA,CAAAC,cAAc,I,cADnDJ,mBAAA,CAIM,OAJNoD,WAIM,EAFoB,eAE1B,KAlEHlD,mBAAA,e,KAAAA,mBAAA,gBAqEEA,mBAAA,aAAgB,EAETC,MAAA,CAAAkD,kBAAkB,I,cADzBrD,mBAAA,CAmBM;IAzFRJ,GAAA;IAwEGD,KAAK,EAAC,kBAAkB;IACvB8B,OAAK,EAzET6B,cAAA,CAyEgBnD,MAAA,CAAAoD,cAAc;MAC3B1D,mBAAA,CAcM,OAdN2D,WAcM,GAbL3D,mBAAA,CAA4D;IAApDF,KAAK,EAAC,WAAW;IAAE8B,OAAK,EAAEtB,MAAA,CAAAoD;KAAgB,GAAC,GACnD1D,mBAAA,CAAgE,YAAAY,gBAAA,CAAzDN,MAAA,CAAAsD,YAAY,CAAC9C,KAAK,IAAG,KAAG,GAAAF,gBAAA,CAAGN,MAAA,CAAAsD,YAAY,CAACvC,KAAK,CAACtB,GAAG,kBACxDC,mBAAA,CAOM,OAPN6D,WAOM,GANLxD,mBAAA,+BAAkC,EAClCyB,YAAA,CAIuCxB,MAAA;IAHrCe,KAAK,EAAEf,MAAA,CAAAsD,YAAY,CAACE,IAAI;IACxBC,IAAI,EAAEzD,MAAA,CAAAsD,YAAY,CAACvC,KAAK,CAAC0C,IAAI;IAC7BC,aAAa,EAAE1D,MAAA,CAAAsD,YAAY,CAACvC,KAAK,CAAC2C,aAAa;IAC/C,WAAS,EAAE1D,MAAA,CAAAsD,YAAY,CAACvC,KAAK,CAACtB;8EAEDO,MAAA,CAAAsD,YAAY,CAACvC,KAAK,CAAC4C,MAAM,I,cAAzD9D,mBAAA,CAEM,OAFN+D,WAEM,EAAAtD,gBAAA,CADFN,MAAA,CAAAsD,YAAY,CAACvC,KAAK,CAAC4C,MAAM,oBAtFjC5D,mBAAA,e,OAAAA,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}