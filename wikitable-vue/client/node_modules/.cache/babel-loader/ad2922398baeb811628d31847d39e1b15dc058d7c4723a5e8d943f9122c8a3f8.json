{"ast":null,"code":"import { ref, watch } from \"vue\";\nimport * as d3 from \"d3\";\nimport { renderLineChart, renderBarChart, renderPieChart, renderNonVisualChart, renderRadarChart, renderStackedBarChart } from \"@/js/chartUtils\";\nexport default {\n  __name: 'Popup',\n  props: {\n    showPopup: Boolean,\n    selectedText: String,\n    currentView: String,\n    divId: String,\n    visualizationLoading: Boolean\n  },\n  emits: [\"closePopup\", \"switchView\"],\n  setup(__props, _ref) {\n    let {\n      expose: __expose,\n      emit: __emit\n    } = _ref;\n    __expose();\n    const props = __props;\n    const emit = __emit;\n    const chartContainer1 = ref(null);\n    const chartContainer2 = ref(null);\n\n    // 监听 currentView 的变化\n    watch(() => props.currentView, newView => {\n      if (newView === \"visual\") {\n        renderVisualization();\n      }\n    });\n\n    // 渲染可视化图表\n    const renderVisualization = () => {\n      const container = props.divId === \"div1\" ? chartContainer1.value : chartContainer2.value;\n      if (!container) {\n        console.error(\"图表容器未找到\");\n        return;\n      }\n\n      // 清空容器\n      container.innerHTML = \"\";\n\n      // 假设 selectedText 是需要可视化的数据\n      const data = props.selectedText;\n\n      // 模拟异步加载\n      setTimeout(() => {\n        // 调用图表渲染函数\n        renderChart(container, data);\n        // 图表渲染完成后，隐藏加载动画\n        emit(\"update:visualizationLoading\", false);\n      }, 1000); // 模拟 1 秒的加载时间\n    };\n\n    // 渲染图表\n    const renderChart = (container, data) => {\n      if (!data) {\n        renderNonVisualChart(container, {\n          message: \"当前数据无法可视化\"\n        });\n        return;\n      }\n\n      // 根据数据类型渲染图表\n      // 这里假设 data 是一个对象，包含图表类型和数据\n      const chartType = data.chartType || \"Bar Chart\";\n      const chartData = data.data || [];\n      switch (chartType) {\n        case \"Line Chart\":\n          renderLineChart(container, chartData);\n          break;\n        case \"Bar Chart\":\n          renderBarChart(container, chartData);\n          break;\n        case \"Pie Chart\":\n          renderPieChart(container, chartData);\n          break;\n        case \"Radar Chart\":\n          renderRadarChart(container, chartData);\n          break;\n        case \"Stacked Bar Chart\":\n          renderStackedBarChart(container, chartData);\n          break;\n        default:\n          renderNonVisualChart(container, {\n            message: \"未知的图表类型\"\n          });\n      }\n    };\n    const isTable = content => {\n      return /<table.*?>.*?<\\/table>/s.test(content);\n    };\n    const __returned__ = {\n      props,\n      emit,\n      chartContainer1,\n      chartContainer2,\n      renderVisualization,\n      renderChart,\n      isTable,\n      ref,\n      watch,\n      get d3() {\n        return d3;\n      },\n      get renderLineChart() {\n        return renderLineChart;\n      },\n      get renderBarChart() {\n        return renderBarChart;\n      },\n      get renderPieChart() {\n        return renderPieChart;\n      },\n      get renderNonVisualChart() {\n        return renderNonVisualChart;\n      },\n      get renderRadarChart() {\n        return renderRadarChart;\n      },\n      get renderStackedBarChart() {\n        return renderStackedBarChart;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","d3","renderLineChart","renderBarChart","renderPieChart","renderNonVisualChart","renderRadarChart","renderStackedBarChart","props","__props","emit","__emit","chartContainer1","chartContainer2","currentView","newView","renderVisualization","container","divId","value","console","error","innerHTML","data","selectedText","setTimeout","renderChart","message","chartType","chartData","isTable","content","test"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/base/Popup.vue"],"sourcesContent":["<template>\r\n\t<!-- 遮罩层 -->\r\n\t<div v-if=\"showPopup\" class=\"overlay\" @click=\"$emit('closePopup')\"></div>\r\n\r\n\t<!-- 弹出框 -->\r\n\t<div v-if=\"showPopup\" class=\"text-popup\" @click=\"$emit('closePopup')\">\r\n\t\t<!-- 切换视图按钮 -->\r\n\t\t<div class=\"view-switcher\">\r\n\t\t\t<button\r\n\t\t\t\t@click.prevent.stop=\"$emit('switchView', 'text')\"\r\n\t\t\t\t:class=\"{ active: currentView === 'text' }\"\r\n\t\t\t\ttitle=\"文本视图\">\r\n\t\t\t\t<font-awesome-icon :icon=\"['fas', 'align-left']\" />\r\n\t\t\t</button>\r\n\r\n\t\t\t<button\r\n\t\t\t\t@click.prevent.stop=\"$emit('switchView', 'visual')\"\r\n\t\t\t\t:class=\"{ active: currentView === 'visual' }\"\r\n\t\t\t\ttitle=\"可视化视图\">\r\n\t\t\t\t<font-awesome-icon :icon=\"['fas', 'chart-bar']\" />\r\n\t\t\t</button>\r\n\t\t</div>\r\n\r\n\t\t<!-- 文本视图 -->\r\n\t\t<div v-if=\"currentView === 'text'\">\r\n\t\t\t<div\r\n\t\t\t\tv-if=\"isTable(selectedText)\"\r\n\t\t\t\tclass=\"table-container\"\r\n\t\t\t\tv-html=\"selectedText\"></div>\r\n\t\t\t<div v-else>\r\n\t\t\t\t<p>{{ selectedText }}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- 可视化视图 -->\r\n\t\t<div v-if=\"currentView === 'visual'\" class=\"visualization-container\">\r\n\t\t\t<!-- 加载动画 -->\r\n\t\t\t<div v-if=\"visualizationLoading\" class=\"loading-spinner\"></div>\r\n\t\t\t<!-- 图表容器 -->\r\n\t\t\t<div\r\n\t\t\t\tv-else-if=\"divId === 'div1'\"\r\n\t\t\t\tclass=\"chart-container1\"\r\n\t\t\t\tref=\"chartContainer1\"></div>\r\n\t\t\t<div v-else class=\"chart-container2\" ref=\"chartContainer2\"></div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, watch } from \"vue\";\r\n\timport * as d3 from \"d3\";\r\n\timport {\r\n\t\trenderLineChart,\r\n\t\trenderBarChart,\r\n\t\trenderPieChart,\r\n\t\trenderNonVisualChart,\r\n\t\trenderRadarChart,\r\n\t\trenderStackedBarChart\r\n\t} from \"@/js/chartUtils\";\r\n\r\n\tconst props = defineProps({\r\n\t\tshowPopup: Boolean,\r\n\t\tselectedText: String,\r\n\t\tcurrentView: String,\r\n\t\tdivId: String,\r\n\t\tvisualizationLoading: Boolean\r\n\t});\r\n\r\n\tconst emit = defineEmits([\"closePopup\", \"switchView\"]);\r\n\r\n\tconst chartContainer1 = ref(null);\r\n\tconst chartContainer2 = ref(null);\r\n\r\n\t// 监听 currentView 的变化\r\n\twatch(\r\n\t\t() => props.currentView,\r\n\t\tnewView => {\r\n\t\t\tif (newView === \"visual\") {\r\n\t\t\t\trenderVisualization();\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\r\n\t// 渲染可视化图表\r\n\tconst renderVisualization = () => {\r\n\t\tconst container =\r\n\t\t\tprops.divId === \"div1\" ? chartContainer1.value : chartContainer2.value;\r\n\t\tif (!container) {\r\n\t\t\tconsole.error(\"图表容器未找到\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 清空容器\r\n\t\tcontainer.innerHTML = \"\";\r\n\r\n\t\t// 假设 selectedText 是需要可视化的数据\r\n\t\tconst data = props.selectedText;\r\n\r\n\t\t// 模拟异步加载\r\n\t\tsetTimeout(() => {\r\n\t\t\t// 调用图表渲染函数\r\n\t\t\trenderChart(container, data);\r\n\t\t\t// 图表渲染完成后，隐藏加载动画\r\n\t\t\temit(\"update:visualizationLoading\", false);\r\n\t\t}, 1000); // 模拟 1 秒的加载时间\r\n\t};\r\n\r\n\t// 渲染图表\r\n\tconst renderChart = (container, data) => {\r\n\t\tif (!data) {\r\n\t\t\trenderNonVisualChart(container, { message: \"当前数据无法可视化\" });\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 根据数据类型渲染图表\r\n\t\t// 这里假设 data 是一个对象，包含图表类型和数据\r\n\t\tconst chartType = data.chartType || \"Bar Chart\";\r\n\t\tconst chartData = data.data || [];\r\n\r\n\t\tswitch (chartType) {\r\n\t\t\tcase \"Line Chart\":\r\n\t\t\t\trenderLineChart(container, chartData);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Bar Chart\":\r\n\t\t\t\trenderBarChart(container, chartData);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Pie Chart\":\r\n\t\t\t\trenderPieChart(container, chartData);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Radar Chart\":\r\n\t\t\t\trenderRadarChart(container, chartData);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Stacked Bar Chart\":\r\n\t\t\t\trenderStackedBarChart(container, chartData);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\trenderNonVisualChart(container, { message: \"未知的图表类型\" });\r\n\t\t}\r\n\t};\r\n\r\n\tconst isTable = content => {\r\n\t\treturn /<table.*?>.*?<\\/table>/s.test(content);\r\n\t};\r\n</script>\r\n\r\n<style scoped>\r\n\t/* 遮罩层 */\r\n\t.overlay {\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tbackground: rgba(255, 255, 255, 0.1);\r\n\t\tbackdrop-filter: blur(10px);\r\n\t\tz-index: 90;\r\n\t\tanimation: fadeIn 0.3s ease-in-out;\r\n\t}\r\n\r\n\t/* 弹出框 */\r\n\t.text-popup {\r\n\t\tposition: absolute;\r\n\t\ttop: 50%;\r\n\t\tleft: 50%;\r\n\t\ttransform: translate(-50%, -50%);\r\n\t\twidth: 90%;\r\n\t\tmax-height: 80vh;\r\n\t\toverflow: auto;\r\n\t\tbackground: rgba(255, 255, 255, 0.98);\r\n\t\tpadding: 25px;\r\n\t\tbox-shadow: 0px 10px 30px rgba(0, 0, 0, 0.4);\r\n\t\tborder-radius: 12px;\r\n\t\ttext-align: center;\r\n\t\tfont-size: 0.8vw;\r\n\t\tfont-weight: 500;\r\n\t\tline-height: 1.6;\r\n\t\tcolor: #333;\r\n\t\tz-index: 100;\r\n\t\tcursor: pointer;\r\n\t\tbackdrop-filter: blur(20px);\r\n\t\tanimation: fadeIn 0.3s ease-in-out;\r\n\t\tborder: 1px solid rgba(255, 255, 255, 0.2);\r\n\t\tmargin: 0;\r\n\t}\r\n\r\n\t/* 视图切换按钮 */\r\n\t.view-switcher {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\tmargin-bottom: 20px;\r\n\t}\r\n\r\n\t.view-switcher button {\r\n\t\tpadding: 25px;\r\n\t\tmargin: 0 5px;\r\n\t\tborder: none;\r\n\t\tborder-radius: 50%;\r\n\t\tbackground-color: #f0f0f0;\r\n\t\tcursor: pointer;\r\n\t\ttransition: background-color 0.3s ease, transform 0.2s ease;\r\n\t\twidth: 36px;\r\n\t\theight: 36px;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t}\r\n\r\n\t.view-switcher button:hover {\r\n\t\tbackground-color: #ddd;\r\n\t\ttransform: scale(1.1);\r\n\t}\r\n\r\n\t.view-switcher button.active {\r\n\t\tbackground-color: #0077b6;\r\n\t\tcolor: white;\r\n\t}\r\n\r\n\t/* 可视化容器 */\r\n\t.visualization-container {\r\n\t\twidth: 100%;\r\n\t\theight: 300px;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t}\r\n\r\n\t/* 表格样式 */\r\n\t.table-container {\r\n\t\twidth: 100%;\r\n\t\toverflow: auto;\r\n\t\tfont-family: \"Arial\", sans-serif;\r\n\t}\r\n\r\n\t.text-popup p {\r\n\t\tmargin: 0;\r\n\t\tpadding: 10px 15px;\r\n\t\tfont-size: 1.2rem;\r\n\t\tcolor: #333;\r\n\t\ttext-align: justify;\r\n\t\tline-height: 1.8;\r\n\t\tword-break: break-word;\r\n\t\twhite-space: pre-wrap;\r\n\t\tmax-width: 90%;\r\n\t\tborder-left: 4px solid #3498db;\r\n\t\tbackground: rgba(255, 255, 255, 0.9);\r\n\t\tbox-shadow: inset 2px 2px 8px rgba(0, 0, 0, 0.05);\r\n\t}\r\n\t/* 使用 ::v-deep 穿透 scoped 样式 */\r\n\t::v-deep .custom-table {\r\n\t\twidth: 100%;\r\n\t\tborder-collapse: collapse;\r\n\t\tmargin: 5px auto;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder: 1px solid #0077b6; /* 外边框颜色 */\r\n\t\tborder-radius: 8px;\r\n\t\toverflow: hidden;\r\n\t\tfont-family: \"Arial\", sans-serif;\r\n\t\tfont-size: 16px; /* 设置整体字体大小 */\r\n\t\tcolor: #333333; /* 设置默认文字颜色 */\r\n\t}\r\n\r\n\t/* 表头样式 */\r\n\t::v-deep .custom-table th {\r\n\t\tbackground-color: #0077b6; /* 深蓝色表头 */\r\n\t\tfont-weight: bold;\r\n\t\tcolor: #ffffff; /* 文字白色 */\r\n\t\ttext-align: left;\r\n\t\tpadding: 12px;\r\n\t\tborder: 1px solid #0077b6; /* 表头单元格边框 */\r\n\t\tfont-size: 18px; /* 表头字体稍大，增强层次感 */\r\n\t}\r\n\r\n\t/* 单元格样式 */\r\n\t::v-deep .custom-table th,\r\n\t::v-deep .custom-table td {\r\n\t\tpadding: 12px;\r\n\t\tborder: 1px solid #0077b6; /* 统一的单元格边框 */\r\n\t\tfont-size: 16px; /* 调整字体大小 */\r\n\t}\r\n\r\n\t/* 悬停行高亮 */\r\n\t::v-deep .custom-table tr:hover {\r\n\t\tbackground-color: #cbe8f6; /* 浅蓝色 */\r\n\t\ttransition: background-color 0.3s ease-in-out;\r\n\t}\r\n\r\n\t/* 加载动画 */\r\n\t.loading-spinner {\r\n\t\twidth: 40px;\r\n\t\theight: 40px;\r\n\t\tborder: 4px solid #f3f3f3;\r\n\t\tborder-top: 4px solid #3498db;\r\n\t\tborder-radius: 50%;\r\n\t\tanimation: spin 1s linear infinite;\r\n\t}\r\n\r\n\t@keyframes spin {\r\n\t\t0% {\r\n\t\t\ttransform: rotate(0deg);\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform: rotate(360deg);\r\n\t\t}\r\n\t}\r\n</style>\r\n"],"mappings":"AAiDC,SAASA,GAAG,EAAEC,KAAK,QAAQ,KAAK;AAChC,OAAO,KAAKC,EAAE,MAAM,IAAI;AACxB,SACCC,eAAe,EACfC,cAAc,EACdC,cAAc,EACdC,oBAAoB,EACpBC,gBAAgB,EAChBC,qBAAqB,QACf,iBAAiB;;;;;;;;;;;;;;;;;IAExB,MAAMC,KAAK,GAAGC,OAMZ;IAEF,MAAMC,IAAI,GAAGC,MAAyC;IAEtD,MAAMC,eAAe,GAAGb,GAAG,CAAC,IAAI,CAAC;IACjC,MAAMc,eAAe,GAAGd,GAAG,CAAC,IAAI,CAAC;;IAEjC;IACAC,KAAK,CACJ,MAAMQ,KAAK,CAACM,WAAW,EACvBC,OAAO,IAAI;MACV,IAAIA,OAAO,KAAK,QAAQ,EAAE;QACzBC,mBAAmB,CAAC,CAAC;MACtB;IACD,CACD,CAAC;;IAED;IACA,MAAMA,mBAAmB,GAAGA,CAAA,KAAM;MACjC,MAAMC,SAAS,GACdT,KAAK,CAACU,KAAK,KAAK,MAAM,GAAGN,eAAe,CAACO,KAAK,GAAGN,eAAe,CAACM,KAAK;MACvE,IAAI,CAACF,SAAS,EAAE;QACfG,OAAO,CAACC,KAAK,CAAC,SAAS,CAAC;QACxB;MACD;;MAEA;MACAJ,SAAS,CAACK,SAAS,GAAG,EAAE;;MAExB;MACA,MAAMC,IAAI,GAAGf,KAAK,CAACgB,YAAY;;MAE/B;MACAC,UAAU,CAAC,MAAM;QAChB;QACAC,WAAW,CAACT,SAAS,EAAEM,IAAI,CAAC;QAC5B;QACAb,IAAI,CAAC,6BAA6B,EAAE,KAAK,CAAC;MAC3C,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACX,CAAC;;IAED;IACA,MAAMgB,WAAW,GAAGA,CAACT,SAAS,EAAEM,IAAI,KAAK;MACxC,IAAI,CAACA,IAAI,EAAE;QACVlB,oBAAoB,CAACY,SAAS,EAAE;UAAEU,OAAO,EAAE;QAAY,CAAC,CAAC;QACzD;MACD;;MAEA;MACA;MACA,MAAMC,SAAS,GAAGL,IAAI,CAACK,SAAS,IAAI,WAAW;MAC/C,MAAMC,SAAS,GAAGN,IAAI,CAACA,IAAI,IAAI,EAAE;MAEjC,QAAQK,SAAS;QAChB,KAAK,YAAY;UAChB1B,eAAe,CAACe,SAAS,EAAEY,SAAS,CAAC;UACrC;QACD,KAAK,WAAW;UACf1B,cAAc,CAACc,SAAS,EAAEY,SAAS,CAAC;UACpC;QACD,KAAK,WAAW;UACfzB,cAAc,CAACa,SAAS,EAAEY,SAAS,CAAC;UACpC;QACD,KAAK,aAAa;UACjBvB,gBAAgB,CAACW,SAAS,EAAEY,SAAS,CAAC;UACtC;QACD,KAAK,mBAAmB;UACvBtB,qBAAqB,CAACU,SAAS,EAAEY,SAAS,CAAC;UAC3C;QACD;UACCxB,oBAAoB,CAACY,SAAS,EAAE;YAAEU,OAAO,EAAE;UAAU,CAAC,CAAC;MACzD;IACD,CAAC;IAED,MAAMG,OAAO,GAAGC,OAAO,IAAI;MAC1B,OAAO,yBAAyB,CAACC,IAAI,CAACD,OAAO,CAAC;IAC/C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}