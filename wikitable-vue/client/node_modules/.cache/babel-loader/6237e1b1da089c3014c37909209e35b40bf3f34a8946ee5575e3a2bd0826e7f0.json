{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createBlock as _createBlock, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = [\"innerHTML\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", {\n    ref: \"divRef\",\n    innerHTML: $setup.pageHtml\n  }, null, 8 /* PROPS */, _hoisted_1), _createCommentVNode(\" **弹出框** \"), $setup.showPopup ? (_openBlock(), _createBlock($setup[\"TextPopup\"], {\n    key: 0,\n    content: $setup.popupType === 'text' ? $setup.selectedText : $setup.relatedSection,\n    onClose: $setup.closePopup\n  }, null, 8 /* PROPS */, [\"content\"])) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_createElementVNode","ref","innerHTML","$setup","pageHtml","_hoisted_1","_createCommentVNode","showPopup","_createBlock","key","content","popupType","selectedText","relatedSection","onClose","closePopup"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\ParentComponent.vue"],"sourcesContent":["<script setup>\r\n\timport { ref, onMounted, onUnmounted, nextTick } from \"vue\";\r\n\timport LoadingSpinner from \"./LoadingSpinner.vue\";\r\n\timport ErrorDisplay from \"./ErrorDisplay.vue\";\r\n\timport WikipediaContent from \"./WikipediaContent.vue\";\r\n\timport TextPopup from \"./TextPopup.vue\";\r\n\timport ArticleOutline from \"./ArticleOutline.vue\"; // 引入大纲组件\r\n\timport * as d3 from \"d3\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\r\n\tconst props = defineProps({\r\n\t\tpageTitle: String,\r\n\t\tdivId: String,\r\n\t\tselectContentClass: String\r\n\t});\r\n\r\n\tconst pageHtml = ref(\"\"); // 文章 HTML 内容\r\n\tconst loading = ref(true); // 加载状态\r\n\tconst error = ref(\"\"); // 错误信息\r\n\tconst selectedText = ref(\"\"); // 选中的文本内容\r\n\tconst relatedSection = ref(\"\"); // 选中表格时的关联章节\r\n\tconst showPopup = ref(false); // 控制弹窗显示\r\n\tconst popupType = ref(\"\"); // 记录弹出框类型（文本 or 关联章节）\r\n\tconst divRef = ref(null); // `Div1` 或 `Div3` 的 DOM 参考\r\n\r\n\t// **获取 Wikipedia 页面**\r\n\tconst fetchWikipediaContent = async () => {\r\n\t\ttry {\r\n\t\t\tconst apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(\r\n\t\t\t\tprops.pageTitle\r\n\t\t\t)}`;\r\n\t\t\tconst response = await fetch(apiUrl);\r\n\t\t\tif (!response.ok) throw new Error(\"Failed to fetch data\");\r\n\r\n\t\t\tconst html = await response.text();\r\n\r\n\t\t\t// 解析 HTML\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\r\n\t\t\t// **给所有 h1-h6 添加唯一 ID**\r\n\t\t\tconst headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\r\n\t\t\theadings.forEach((heading, index) => {\r\n\t\t\t\theading.id = `heading-${index}-${props.divId}`;\r\n\t\t\t});\r\n\r\n\t\t\t// **给所有表格添加类名**\r\n\t\t\tconst tables = doc.querySelectorAll(\"table\");\r\n\t\t\ttables.forEach(table => {\r\n\t\t\t\ttable.classList.add(\"custom-table\");\r\n\t\t\t});\r\n\r\n\t\t\t// 仅获取正文部分\r\n\t\t\tconst contentElement = doc.querySelector(\"body\");\r\n\t\t\tif (!contentElement) throw new Error(\"Content not found\");\r\n\r\n\t\t\tpageHtml.value = contentElement.innerHTML;\r\n\t\t} catch (err) {\r\n\t\t\terror.value = \"Error fetching Wikipedia content: \" + err.message;\r\n\t\t} finally {\r\n\t\t\tloading.value = false;\r\n\t\t}\r\n\t};\r\n\r\n\t// **处理选中内容**\r\n\tconst handleSelection = () => {\r\n\t\tconst selection = window.getSelection();\r\n\t\tif (!selection.rangeCount) return;\r\n\r\n\t\tconst range = selection.getRangeAt(0);\r\n\t\tconst containerElement = range.commonAncestorContainer;\r\n\r\n\t\t// **检查是否选中的是表格**\r\n\t\tconst selectedTable = containerElement.closest\r\n\t\t\t? containerElement.closest(\"table\")\r\n\t\t\t: null;\r\n\t\tif (selectedTable) {\r\n\t\t\t// **获取关联章节**\r\n\t\t\tconst linkedChapterContent = extractLinkedChapterContent(selectedTable);\r\n\t\t\trelatedSection.value = linkedChapterContent;\r\n\t\t\tselectedText.value = \"\"; // 清空普通文本\r\n\r\n\t\t\t// 显示表格关联章节弹窗\r\n\t\t\tpopupType.value = \"table\";\r\n\t\t\tshowPopup.value = true;\r\n\t\t\tnextTick(updatePopupPosition);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// **普通文本选中**\r\n\t\tconst text = selection.toString().trim();\r\n\t\tif (text) {\r\n\t\t\tselectedText.value = text;\r\n\t\t\trelatedSection.value = \"\"; // 清空表格关联章节\r\n\r\n\t\t\t// 显示普通文本弹窗\r\n\t\t\tpopupType.value = \"text\";\r\n\t\t\tshowPopup.value = true;\r\n\t\t\tnextTick(updatePopupPosition);\r\n\t\t} else {\r\n\t\t\tshowPopup.value = false;\r\n\t\t}\r\n\t};\r\n\r\n\t// **提取表格的关联章节**\r\n\tconst extractLinkedChapterContent = selectedTable => {\r\n\t\tlet heading = selectedTable.previousElementSibling;\r\n\r\n\t\t// 向上查找最近的 h1-h6 标题\r\n\t\twhile (heading && !/^H[1-6]$/.test(heading.tagName)) {\r\n\t\t\theading = heading.previousElementSibling;\r\n\t\t}\r\n\r\n\t\treturn heading ? heading.textContent : \"未找到关联章节\";\r\n\t};\r\n\r\n\t// **关闭弹出框**\r\n\tconst closePopup = () => {\r\n\t\tshowPopup.value = false;\r\n\t\tselectedText.value = \"\";\r\n\t\trelatedSection.value = \"\";\r\n\t};\r\n\r\n\t// **更新弹出框位置**\r\n\tconst updatePopupPosition = () => {\r\n\t\tif (showPopup.value && divRef.value) {\r\n\t\t\tconst popup = divRef.value.querySelector(\".text-popup\");\r\n\t\t\tconst rect = divRef.value.getBoundingClientRect();\r\n\t\t\tif (popup) {\r\n\t\t\t\tpopup.style.top = `${rect.height / 2}px`;\r\n\t\t\t\tpopup.style.left = `${rect.width / 2}px`;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// **组件挂载后加载 Wikipedia 内容**\r\n\tonMounted(() => {\r\n\t\tfetchWikipediaContent();\r\n\t\tdocument.addEventListener(\"mouseup\", handleSelection);\r\n\t});\r\n\r\n\t// **组件卸载时解绑事件**\r\n\tonUnmounted(() => {\r\n\t\tdocument.removeEventListener(\"mouseup\", handleSelection);\r\n\t});\r\n</script>\r\n\r\n<template>\r\n\t<div ref=\"divRef\" v-html=\"pageHtml\"></div>\r\n\r\n\t<!-- **弹出框** -->\r\n\t<TextPopup\r\n\t\tv-if=\"showPopup\"\r\n\t\t:content=\"popupType === 'text' ? selectedText : relatedSection\"\r\n\t\t@close=\"closePopup\" />\r\n</template>\r\n"],"mappings":";mBAAA;;uBAAAA,mBAAA,CAAAC,SAAA,SAoJCC,mBAAA,CAA0C;IAArCC,GAAG,EAAC,QAAQ;IAACC,SAAiB,EAATC,MAAA,CAAAC;0BApJ3BC,UAAA,GAsJCC,mBAAA,aAAgB,EAETH,MAAA,CAAAI,SAAS,I,cADhBC,YAAA,CAGuBL,MAAA;IA1JxBM,GAAA;IAyJGC,OAAO,EAAEP,MAAA,CAAAQ,SAAS,cAAcR,MAAA,CAAAS,YAAY,GAAGT,MAAA,CAAAU,cAAc;IAC7DC,OAAK,EAAEX,MAAA,CAAAY;0CA1JVT,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}