{"ast":null,"code":"import { ref, watch, onMounted } from \"vue\";\nexport default {\n  __name: 'ArticleOutline',\n  props: {\n    content: String,\n    // 文章 HTML\n    divId: String,\n    // div1 或 div3\n    linkedOutline: Array // 关联大纲数据\n  },\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const props = __props;\n    const isVisible = ref(false);\n    const outline = ref([]);\n\n    // **切换大纲的显示**\n    const toggleOutline = () => {\n      isVisible.value = !isVisible.value;\n    };\n\n    // **解析文章，提取 h1-h6 标题，并计算缩进级别**\n    const extractOutline = content => {\n      if (!content) return [];\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(content, \"text/html\");\n      const headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\n      return Array.from(headings).map((heading, index) => {\n        const level = parseInt(heading.tagName.substring(1)); // 提取 h1-h6 的级别\n        const id = `heading-${index}-${props.divId}`;\n        heading.id = id; // 确保 HTML 里有 ID\n        return {\n          id,\n          text: heading.textContent,\n          level\n        };\n      });\n    };\n\n    // **监听 content 变化，更新大纲**\n    watch(() => props.content, newContent => {\n      outline.value = extractOutline(newContent);\n    }, {\n      immediate: true\n    });\n\n    // **检查是否存在关联章节**\n    const isLinked = (item, index) => {\n      if (!props.linkedOutline) return false;\n      // 检查左边的大纲和右边大纲是否存在匹配章节\n      const linkedItem = props.linkedOutline.find(linked => linked.leftId === item.id);\n      if (linkedItem) {\n        // 如果有匹配，则返回 true，表示这两个章节关联\n        return true;\n      }\n      return false;\n    };\n\n    // **滚动到章节**\n    const scrollToChapter = id => {\n      const element = document.getElementById(id);\n      if (element) {\n        element.scrollIntoView({\n          behavior: \"smooth\"\n        });\n      }\n    };\n\n    // **初始化大纲**\n    onMounted(() => {\n      outline.value = extractOutline(props.content);\n    });\n    const __returned__ = {\n      props,\n      isVisible,\n      outline,\n      toggleOutline,\n      extractOutline,\n      isLinked,\n      scrollToChapter,\n      ref,\n      watch,\n      onMounted\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","onMounted","props","__props","isVisible","outline","toggleOutline","value","extractOutline","content","parser","DOMParser","doc","parseFromString","headings","querySelectorAll","Array","from","map","heading","index","level","parseInt","tagName","substring","id","divId","text","textContent","newContent","immediate","isLinked","item","linkedOutline","linkedItem","find","linked","leftId","scrollToChapter","element","document","getElementById","scrollIntoView","behavior"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/ArticleOutline.vue"],"sourcesContent":["<template>\r\n\t<!-- 大纲切换按钮 -->\r\n\t<button\r\n\t\t@click=\"toggleOutline\"\r\n\t\t:class=\"['toggle-btn', divId === 'div1' ? 'right' : 'left']\">\r\n\t\t<svg v-if=\"!isVisible\" class=\"icon\" viewBox=\"0 0 24 24\">\r\n\t\t\t<path\r\n\t\t\t\tfill=\"currentColor\"\r\n\t\t\t\td=\"M3 6h18v2H3V6zm0 5h18v2H3v-2zm0 5h18v2H3v-2z\"></path>\r\n\t\t</svg>\r\n\t\t<svg v-else class=\"icon close\" viewBox=\"0 0 24 24\">\r\n\t\t\t<path fill=\"currentColor\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n\t\t</svg>\r\n\t</button>\r\n\r\n\t<!-- 大纲内容 -->\r\n\t<div\r\n\t\tv-if=\"isVisible\"\r\n\t\t:class=\"['outline-container', divId === 'div1' ? 'right' : 'left']\">\r\n\t\t<div class=\"outline\">\r\n\t\t\t<ul>\r\n\t\t\t\t<!-- 生成章节列表，并添加相应的高亮或标识 -->\r\n\t\t\t\t<li\r\n\t\t\t\t\tv-for=\"(item, index) in outline\"\r\n\t\t\t\t\t:key=\"item.id\"\r\n\t\t\t\t\t:class=\"{\r\n\t\t\t\t\t\thighlight: isLinked(item, index),\r\n\t\t\t\t\t\tlinked: isLinked(item, index)\r\n\t\t\t\t\t}\"\r\n\t\t\t\t\t:style=\"{ paddingLeft: `${(item.level - 1) * 15}px` }\">\r\n\t\t\t\t\t<a :href=\"'#' + item.id\" @click.prevent=\"scrollToChapter(item.id)\">{{\r\n\t\t\t\t\t\titem.text\r\n\t\t\t\t\t}}</a>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, watch, onMounted } from \"vue\";\r\n\r\n\tconst props = defineProps({\r\n\t\tcontent: String, // 文章 HTML\r\n\t\tdivId: String, // div1 或 div3\r\n\t\tlinkedOutline: Array // 关联大纲数据\r\n\t});\r\n\r\n\tconst isVisible = ref(false);\r\n\tconst outline = ref([]);\r\n\r\n\t// **切换大纲的显示**\r\n\tconst toggleOutline = () => {\r\n\t\tisVisible.value = !isVisible.value;\r\n\t};\r\n\r\n\t// **解析文章，提取 h1-h6 标题，并计算缩进级别**\r\n\tconst extractOutline = content => {\r\n\t\tif (!content) return [];\r\n\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst doc = parser.parseFromString(content, \"text/html\");\r\n\t\tconst headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\r\n\r\n\t\treturn Array.from(headings).map((heading, index) => {\r\n\t\t\tconst level = parseInt(heading.tagName.substring(1)); // 提取 h1-h6 的级别\r\n\t\t\tconst id = `heading-${index}-${props.divId}`;\r\n\t\t\theading.id = id; // 确保 HTML 里有 ID\r\n\t\t\treturn { id, text: heading.textContent, level };\r\n\t\t});\r\n\t};\r\n\r\n\t// **监听 content 变化，更新大纲**\r\n\twatch(\r\n\t\t() => props.content,\r\n\t\tnewContent => {\r\n\t\t\toutline.value = extractOutline(newContent);\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\t// **检查是否存在关联章节**\r\n\tconst isLinked = (item, index) => {\r\n\t\tif (!props.linkedOutline) return false;\r\n\t\t// 检查左边的大纲和右边大纲是否存在匹配章节\r\n\t\tconst linkedItem = props.linkedOutline.find(\r\n\t\t\tlinked => linked.leftId === item.id\r\n\t\t);\r\n\t\tif (linkedItem) {\r\n\t\t\t// 如果有匹配，则返回 true，表示这两个章节关联\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t// **滚动到章节**\r\n\tconst scrollToChapter = id => {\r\n\t\tconst element = document.getElementById(id);\r\n\t\tif (element) {\r\n\t\t\telement.scrollIntoView({ behavior: \"smooth\" });\r\n\t\t}\r\n\t};\r\n\r\n\t// **初始化大纲**\r\n\tonMounted(() => {\r\n\t\toutline.value = extractOutline(props.content);\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t/* **按钮样式** */\r\n\t.toggle-btn {\r\n\t\tposition: absolute;\r\n\t\ttop: 10px;\r\n\t\tpadding: 10px;\r\n\t\tborder-radius: 50%;\r\n\t\tcursor: pointer;\r\n\t\tz-index: 2000;\r\n\t\tbackground-color: #0077b6;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\twidth: 36px;\r\n\t\theight: 36px;\r\n\t\tbox-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n\t\ttransition: all 0.3s ease-in-out;\r\n\t}\r\n\r\n\t.toggle-btn.right {\r\n\t\tright: 10px;\r\n\t}\r\n\r\n\t.toggle-btn.left {\r\n\t\tleft: 10px;\r\n\t}\r\n\r\n\t/* **悬浮效果** */\r\n\t.toggle-btn:hover {\r\n\t\tbackground-color: #005f8a;\r\n\t\ttransform: scale(1.1);\r\n\t}\r\n\r\n\t/* **大纲样式** */\r\n\t.outline-container {\r\n\t\tposition: absolute;\r\n\t\ttop: 50px;\r\n\t\tbackground: white;\r\n\t\tborder-radius: 8px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n\t\tpadding: 15px;\r\n\t\tmax-height: 80vh;\r\n\t\toverflow-y: auto;\r\n\t\twidth: 260px;\r\n\t\ttransition: all 0.3s ease-in-out;\r\n\t}\r\n\r\n\t.outline-container.right {\r\n\t\tright: 10px;\r\n\t}\r\n\r\n\t.outline-container.left {\r\n\t\tleft: 10px;\r\n\t}\r\n\r\n\t.outline h2 {\r\n\t\tfont-size: 1.2em;\r\n\t\tmargin-bottom: 10px;\r\n\t\tcolor: #0077b6;\r\n\t}\r\n\r\n\t.outline ul {\r\n\t\tlist-style-type: none;\r\n\t\tpadding-left: 0;\r\n\t}\r\n\r\n\t.outline li {\r\n\t\tmargin-bottom: 8px;\r\n\t\tfont-size: 14px;\r\n\t\ttransition: padding-left 0.2s ease-in-out;\r\n\t}\r\n\r\n\t/* **章节高亮和标识** */\r\n\t.outline li.highlight a {\r\n\t\tbackground-color: #ffff00; /* 高亮背景 */\r\n\t\tborder-radius: 5px;\r\n\t}\r\n\r\n\t.outline li.linked a {\r\n\t\tfont-weight: bold;\r\n\t\tcolor: #0077b6;\r\n\t}\r\n\r\n\t.outline li a {\r\n\t\ttext-decoration: none;\r\n\t\tcolor: #0077b6;\r\n\t}\r\n\r\n\t.outline li a:hover {\r\n\t\ttext-decoration: underline;\r\n\t\tcolor: #005f8a;\r\n\t}\r\n</style>\r\n"],"mappings":"AAwCC,SAASA,GAAG,EAAEC,KAAK,EAAEC,SAAS,QAAQ,KAAK;;;;;;;;;;;;;;;IAE3C,MAAMC,KAAK,GAAGC,OAIZ;IAEF,MAAMC,SAAS,GAAGL,GAAG,CAAC,KAAK,CAAC;IAC5B,MAAMM,OAAO,GAAGN,GAAG,CAAC,EAAE,CAAC;;IAEvB;IACA,MAAMO,aAAa,GAAGA,CAAA,KAAM;MAC3BF,SAAS,CAACG,KAAK,GAAG,CAACH,SAAS,CAACG,KAAK;IACnC,CAAC;;IAED;IACA,MAAMC,cAAc,GAAGC,OAAO,IAAI;MACjC,IAAI,CAACA,OAAO,EAAE,OAAO,EAAE;MAEvB,MAAMC,MAAM,GAAG,IAAIC,SAAS,CAAC,CAAC;MAC9B,MAAMC,GAAG,GAAGF,MAAM,CAACG,eAAe,CAACJ,OAAO,EAAE,WAAW,CAAC;MACxD,MAAMK,QAAQ,GAAGF,GAAG,CAACG,gBAAgB,CAAC,wBAAwB,CAAC;MAE/D,OAAOC,KAAK,CAACC,IAAI,CAACH,QAAQ,CAAC,CAACI,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAK;QACnD,MAAMC,KAAK,GAAGC,QAAQ,CAACH,OAAO,CAACI,OAAO,CAACC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtD,MAAMC,EAAE,GAAG,WAAWL,KAAK,IAAIlB,KAAK,CAACwB,KAAK,EAAE;QAC5CP,OAAO,CAACM,EAAE,GAAGA,EAAE,CAAC,CAAC;QACjB,OAAO;UAAEA,EAAE;UAAEE,IAAI,EAAER,OAAO,CAACS,WAAW;UAAEP;QAAM,CAAC;MAChD,CAAC,CAAC;IACH,CAAC;;IAED;IACArB,KAAK,CACJ,MAAME,KAAK,CAACO,OAAO,EACnBoB,UAAU,IAAI;MACbxB,OAAO,CAACE,KAAK,GAAGC,cAAc,CAACqB,UAAU,CAAC;IAC3C,CAAC,EACD;MAAEC,SAAS,EAAE;IAAK,CACnB,CAAC;;IAED;IACA,MAAMC,QAAQ,GAAGA,CAACC,IAAI,EAAEZ,KAAK,KAAK;MACjC,IAAI,CAAClB,KAAK,CAAC+B,aAAa,EAAE,OAAO,KAAK;MACtC;MACA,MAAMC,UAAU,GAAGhC,KAAK,CAAC+B,aAAa,CAACE,IAAI,CAC1CC,MAAM,IAAIA,MAAM,CAACC,MAAM,KAAKL,IAAI,CAACP,EAClC,CAAC;MACD,IAAIS,UAAU,EAAE;QACf;QACA,OAAO,IAAI;MACZ;MACA,OAAO,KAAK;IACb,CAAC;;IAED;IACA,MAAMI,eAAe,GAAGb,EAAE,IAAI;MAC7B,MAAMc,OAAO,GAAGC,QAAQ,CAACC,cAAc,CAAChB,EAAE,CAAC;MAC3C,IAAIc,OAAO,EAAE;QACZA,OAAO,CAACG,cAAc,CAAC;UAAEC,QAAQ,EAAE;QAAS,CAAC,CAAC;MAC/C;IACD,CAAC;;IAED;IACA1C,SAAS,CAAC,MAAM;MACfI,OAAO,CAACE,KAAK,GAAGC,cAAc,CAACN,KAAK,CAACO,OAAO,CAAC;IAC9C,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}