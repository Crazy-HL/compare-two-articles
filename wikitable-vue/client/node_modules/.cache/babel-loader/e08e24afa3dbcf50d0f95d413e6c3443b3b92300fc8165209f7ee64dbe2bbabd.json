{"ast":null,"code":"import axios from \"axios\";\nimport { ref, onMounted, onUpdated } from \"vue\";\n// const frameLeft = ref(null); // 使用 ref 引用 iframe 元素\n\n// 在页面加载完成后执行操作\n// onMounted(() => {\n// \tconst iframe = frameLeft.value;\n\n// \tif (iframe) {\n// \t\tiframe.addEventListener(\"load\", () => {\n// \t\t\tif (iframe.contentWindow) {\n// \t\t\t\tconst selectedText = iframe.contentWindow.getSelection().toString();\n// \t\t\t\tconsole.log(\"从 iframe 获取的选中内容:\", selectedText);\n// \t\t\t}\n// \t\t});\n// \t}\n// });\n\nexport default {\n  __name: 'history',\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    onMounted(async () => {\n      document.getElementById(\"div3\").innerHTML = tang();\n    });\n    async function tang() {\n      try {\n        const res = await axios.get(\"http://localhost:8080/api/item/%E5%94%90%E6%9C%9D/53699\");\n        const html = res.data;\n        // 返回修改后的 HTML\n        return updateImagePaths(html);\n      } catch (err) {\n        console.log(\"请求失败：\", err.message);\n        return \"\"; // 如果请求失败，返回空字符串\n      }\n    }\n    function updateImagePaths(html) {\n      const parser = new DOMParser(); // 将 HTML 内容转化为 DOM\n      const doc = parser.parseFromString(html, \"text/html\");\n      // 获取并处理 HTML 中的图像路径\n      // 示例：可以更新图片路径等内容\n      return doc.documentElement.outerHTML;\n    }\n    const __returned__ = {\n      tang,\n      updateImagePaths,\n      get axios() {\n        return axios;\n      },\n      ref,\n      onMounted,\n      onUpdated\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["axios","ref","onMounted","onUpdated","document","getElementById","innerHTML","tang","res","get","html","data","updateImagePaths","err","console","log","message","parser","DOMParser","doc","parseFromString","documentElement","outerHTML"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/history.vue"],"sourcesContent":["<template>\r\n\t<div id=\"root\">\r\n\t\t<div class=\"div0\" id=\"div1\">\r\n\t\t\t<iframe\r\n\t\t\t\tref=\"frameLeft\"\r\n\t\t\t\tid=\"frameLeft\"\r\n\t\t\t\tsrc=\"https://zh.wikipedia.org/wiki/%E5%94%90%E6%9C%9D\"\r\n\t\t\t\ttitle=\"页面1\"></iframe>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"div0\" id=\"div2\">\r\n\t\t\t<div class=\"VisContainer\">\r\n\t\t\t\t<div class=\"topContainer\">\r\n\t\t\t\t\t<button class=\"styled-button\" @click=\"tang\">点击我</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"botContainer\"></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"div0\" id=\"div3\">\r\n\t\t\t<!-- <iframe\r\n\t\t\t\tid=\"frameRight\"\r\n\t\t\t\tsrc=\"https://baike.baidu.com/item/%E5%94%90%E6%9C%9D/53699\"\r\n\t\t\t\ttitle=\"页面2\"></iframe> -->\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport axios from \"axios\";\r\n\timport { ref, onMounted, onUpdated } from \"vue\";\r\n\t// const frameLeft = ref(null); // 使用 ref 引用 iframe 元素\r\n\r\n\t// 在页面加载完成后执行操作\r\n\t// onMounted(() => {\r\n\t// \tconst iframe = frameLeft.value;\r\n\r\n\t// \tif (iframe) {\r\n\t// \t\tiframe.addEventListener(\"load\", () => {\r\n\t// \t\t\tif (iframe.contentWindow) {\r\n\t// \t\t\t\tconst selectedText = iframe.contentWindow.getSelection().toString();\r\n\t// \t\t\t\tconsole.log(\"从 iframe 获取的选中内容:\", selectedText);\r\n\t// \t\t\t}\r\n\t// \t\t});\r\n\t// \t}\r\n\t// });\r\n\tonMounted(async () => {\r\n\t\tdocument.getElementById(\"div3\").innerHTML = tang();\r\n\t});\r\n\r\n\tasync function tang() {\r\n\t\ttry {\r\n\t\t\tconst res = await axios.get(\r\n\t\t\t\t\"http://localhost:8080/api/item/%E5%94%90%E6%9C%9D/53699\"\r\n\t\t\t);\r\n\t\t\tconst html = res.data;\r\n\t\t\t// 返回修改后的 HTML\r\n\t\t\treturn updateImagePaths(html);\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(\"请求失败：\", err.message);\r\n\t\t\treturn \"\"; // 如果请求失败，返回空字符串\r\n\t\t}\r\n\t}\r\n\r\n\tfunction updateImagePaths(html) {\r\n\t\tconst parser = new DOMParser(); // 将 HTML 内容转化为 DOM\r\n\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\t// 获取并处理 HTML 中的图像路径\r\n\t\t// 示例：可以更新图片路径等内容\r\n\t\treturn doc.documentElement.outerHTML;\r\n\t}\r\n</script>\r\n\r\n<style scoped>\r\n\t#root {\r\n\t\tdisplay: flex;\r\n\t\t/* 使用 Flexbox 布局 */\r\n\t\tjustify-content: space-around;\r\n\t\t/* 在主轴上均匀分配空间 */\r\n\t\talign-items: flex-start;\r\n\t\t/* 在交叉轴上靠上对齐 */\r\n\t\theight: 100vh;\r\n\t\t/* 设定页面高度为视口高度 */\r\n\t\tmargin: 0;\r\n\t\t/* 去掉默认的 margin */\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t}\r\n\r\n\t.div0 {\r\n\t\tposition: absolute;\r\n\t\theight: 100vh;\r\n\t}\r\n\t#div1 {\r\n\t\tleft: 0;\r\n\t\twidth: 30%;\r\n\t}\r\n\t#div2 {\r\n\t\twidth: 40%;\r\n\t}\r\n\t#div3 {\r\n\t\twidth: 30%;\r\n\t\tright: 0;\r\n\t}\r\n\r\n\tiframe {\r\n\t\twidth: 100%;\r\n\t\theight: 100%; /* 确保 iframe 的内容充满容器 */\r\n\t\tborder: 1px solid #ccc;\r\n\t\toverflow: auto; /* 允许滚动 */\r\n\t}\r\n</style>\r\n"],"mappings":"AA6BC,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,EAAEC,SAAS,EAAEC,SAAS,QAAQ,KAAK;AAC/C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;IACAD,SAAS,CAAC,YAAY;MACrBE,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAACC,SAAS,GAAGC,IAAI,CAAC,CAAC;IACnD,CAAC,CAAC;IAEF,eAAeA,IAAIA,CAAA,EAAG;MACrB,IAAI;QACH,MAAMC,GAAG,GAAG,MAAMR,KAAK,CAACS,GAAG,CAC1B,yDACD,CAAC;QACD,MAAMC,IAAI,GAAGF,GAAG,CAACG,IAAI;QACrB;QACA,OAAOC,gBAAgB,CAACF,IAAI,CAAC;MAC9B,CAAC,CAAC,OAAOG,GAAG,EAAE;QACbC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,GAAG,CAACG,OAAO,CAAC;QACjC,OAAO,EAAE,CAAC,CAAC;MACZ;IACD;IAEA,SAASJ,gBAAgBA,CAACF,IAAI,EAAE;MAC/B,MAAMO,MAAM,GAAG,IAAIC,SAAS,CAAC,CAAC,CAAC,CAAC;MAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,eAAe,CAACV,IAAI,EAAE,WAAW,CAAC;MACrD;MACA;MACA,OAAOS,GAAG,CAACE,eAAe,CAACC,SAAS;IACrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}