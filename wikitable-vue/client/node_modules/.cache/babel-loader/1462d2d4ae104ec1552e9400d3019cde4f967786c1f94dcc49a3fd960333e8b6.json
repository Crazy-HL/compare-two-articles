{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, Fragment as _Fragment, renderList as _renderList, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-35226a1e\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"field-visualization\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"pie-chart\",\n  ref: \"pieChart\"\n};\nconst _hoisted_3 = {\n  class: \"line-chart\",\n  ref: \"lineChart\"\n};\nconst _hoisted_4 = {\n  class: \"bar-chart\",\n  ref: \"barChart\"\n};\nconst _hoisted_5 = {\n  class: \"text-value\"\n};\nconst _hoisted_6 = {\n  key: 1,\n  class: \"no-data\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$setup.hasData ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 0\n  }, [_createCommentVNode(\" 百分比数据（单个值） \"), $setup.isSinglePercentage ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, null, 512 /* NEED_PATCH */)) : $setup.isTimeSeries ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" 时间序列数据（折线图） \"), _createElementVNode(\"div\", _hoisted_3, null, 512 /* NEED_PATCH */)], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : $setup.isComparison ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 2\n  }, [_createCommentVNode(\" 比较数据（柱状图） \"), _createElementVNode(\"div\", _hoisted_4, null, 512 /* NEED_PATCH */)], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 3\n  }, [_createCommentVNode(\" 纯文本数据 \"), _createElementVNode(\"div\", _hoisted_5, [$setup.isArray ? (_openBlock(true), _createElementBlock(_Fragment, {\n    key: 0\n  }, _renderList($setup.processedArray, (item, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index\n    }, _toDisplayString($setup.formatTextValue(item)), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */)) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createTextVNode(_toDisplayString($setup.formatTextValue($props.field)), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */))])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))], 64 /* STABLE_FRAGMENT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_6, \"无数据\"))]);\n}","map":{"version":3,"names":["class","key","ref","_createElementBlock","_hoisted_1","$setup","hasData","_Fragment","_createCommentVNode","isSinglePercentage","_hoisted_2","isTimeSeries","_createElementVNode","_hoisted_3","isComparison","_hoisted_4","_hoisted_5","isArray","_renderList","processedArray","item","index","_toDisplayString","formatTextValue","_createTextVNode","$props","field","_hoisted_6"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\FieldVisualization.vue"],"sourcesContent":["<template>\r\n\t<div class=\"field-visualization\">\r\n\t\t<template v-if=\"hasData\">\r\n\t\t\t<!-- 百分比数据（单个值） -->\r\n\t\t\t<div v-if=\"isSinglePercentage\" class=\"pie-chart\" ref=\"pieChart\"></div>\r\n\r\n\t\t\t<!-- 时间序列数据（折线图） -->\r\n\t\t\t<div v-else-if=\"isTimeSeries\" class=\"line-chart\" ref=\"lineChart\"></div>\r\n\r\n\t\t\t<!-- 比较数据（柱状图） -->\r\n\t\t\t<div v-else-if=\"isComparison\" class=\"bar-chart\" ref=\"barChart\"></div>\r\n\r\n\t\t\t<!-- 纯文本数据 -->\r\n\t\t\t<div v-else class=\"text-value\">\r\n\t\t\t\t<template v-if=\"isArray\">\r\n\t\t\t\t\t<div v-for=\"(item, index) in processedArray\" :key=\"index\">\r\n\t\t\t\t\t\t{{ formatTextValue(item) }}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</template>\r\n\t\t\t\t<template v-else>\r\n\t\t\t\t\t{{ formatTextValue(field) }}\r\n\t\t\t\t</template>\r\n\t\t\t</div>\r\n\t\t</template>\r\n\t\t<div v-else class=\"no-data\">无数据</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, onMounted, watch } from \"vue\";\r\n\timport * as d3 from \"d3\";\r\n\r\n\tconst props = defineProps({\r\n\t\tfield: [Object, Array, String, Number],\r\n\t\ttype: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: \"number\"\r\n\t\t}\r\n\t});\r\n\r\n\tconst pieChart = ref(null);\r\n\tconst barChart = ref(null);\r\n\tconst lineChart = ref(null);\r\n\r\n\t// 数据清洗和类型判断\r\n\tconst cleanedValue = value => {\r\n\t\tif (value === null || value === undefined) return null;\r\n\t\tif (typeof value === \"number\") return value;\r\n\r\n\t\t// 处理百分比和货币符号\r\n\t\tconst strValue = String(value)\r\n\t\t\t.replace(/[$,%¥€£]/g, \"\")\r\n\t\t\t.replace(/\\(.*?\\)/g, \"\") // 移除括号内容\r\n\t\t\t.trim();\r\n\r\n\t\tconst num = parseFloat(strValue);\r\n\t\treturn isNaN(num) ? strValue : num;\r\n\t};\r\n\r\n\t// 处理后的数组数据\r\n\tconst processedArray = computed(() => {\r\n\t\tif (!Array.isArray(props.field)) return [];\r\n\t\treturn props.field\r\n\t\t\t.map(item => ({\r\n\t\t\t\tvalue: cleanedValue(item.value),\r\n\t\t\t\tunit: item.unit,\r\n\t\t\t\tyear: item.year,\r\n\t\t\t\traw: item.value\r\n\t\t\t}))\r\n\t\t\t.filter(item => item.value !== null);\r\n\t});\r\n\r\n\t// 判断显示类型\r\n\tconst isSinglePercentage = computed(() => {\r\n\t\treturn (\r\n\t\t\tprops.type === \"percentage\" &&\r\n\t\t\t!Array.isArray(props.field) &&\r\n\t\t\ttypeof cleanedValue(props.field?.value) === \"number\"\r\n\t\t);\r\n\t});\r\n\r\n\tconst isTimeSeries = computed(() => {\r\n\t\treturn (\r\n\t\t\tprocessedArray.value.length >= 2 &&\r\n\t\t\tprocessedArray.value.every(\r\n\t\t\t\titem => item.year && typeof item.value === \"number\"\r\n\t\t\t)\r\n\t\t);\r\n\t});\r\n\r\n\tconst isComparison = computed(() => {\r\n\t\treturn (\r\n\t\t\tprocessedArray.value.length >= 1 &&\r\n\t\t\tprocessedArray.value.length <= 3 &&\r\n\t\t\tprocessedArray.value.every(item => typeof item.value === \"number\")\r\n\t\t);\r\n\t});\r\n\r\n\tconst hasData = computed(() => {\r\n\t\tif (props.field === null || props.field === undefined) return false;\r\n\t\tif (Array.isArray(props.field)) return processedArray.value.length > 0;\r\n\t\treturn props.field.value !== undefined && props.field.value !== null;\r\n\t});\r\n\r\n\tconst isArray = computed(() => Array.isArray(props.field));\r\n\r\n\t// 格式化文本显示\r\n\tconst formatTextValue = item => {\r\n\t\tif (item.value === null || item.value === undefined) return \"-\";\r\n\r\n\t\tif (typeof item.value === \"number\") {\r\n\t\t\tif (props.type === \"percentage\") return `${item.value}%`;\r\n\t\t\treturn item.value.toLocaleString() + (item.unit ? ` ${item.unit}` : \"\");\r\n\t\t}\r\n\r\n\t\treturn item.raw || item.value || \"-\";\r\n\t};\r\n\r\n\t// 图表绘制方法\r\n\tconst drawPieChart = () => {\r\n\t\tclearChart(pieChart);\r\n\t\tif (!pieChart.value) return;\r\n\r\n\t\tconst percent = Math.min(100, Math.max(0, cleanedValue(props.field.value)));\r\n\t\tconst data = [percent, 100 - percent];\r\n\t\tconst color = d3.scaleOrdinal([\"#4CAF50\", \"#eee\"]);\r\n\r\n\t\tconst width = 80;\r\n\t\tconst height = 80;\r\n\t\tconst radius = Math.min(width, height) / 2;\r\n\r\n\t\tconst svg = d3\r\n\t\t\t.select(pieChart.value)\r\n\t\t\t.append(\"svg\")\r\n\t\t\t.attr(\"width\", width)\r\n\t\t\t.attr(\"height\", height)\r\n\t\t\t.append(\"g\")\r\n\t\t\t.attr(\"transform\", `translate(${width / 2},${height / 2})`);\r\n\r\n\t\tconst pie = d3.pie();\r\n\t\tconst arc = d3.arc().innerRadius(0).outerRadius(radius);\r\n\r\n\t\tsvg\r\n\t\t\t.selectAll(\"path\")\r\n\t\t\t.data(pie(data))\r\n\t\t\t.enter()\r\n\t\t\t.append(\"path\")\r\n\t\t\t.attr(\"d\", arc)\r\n\t\t\t.attr(\"fill\", d => color(d.index));\r\n\r\n\t\tsvg\r\n\t\t\t.append(\"text\")\r\n\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t.attr(\"dy\", \"0.3em\")\r\n\t\t\t.text(`${percent}%`)\r\n\t\t\t.style(\"font-size\", \"14px\")\r\n\t\t\t.style(\"font-weight\", \"bold\");\r\n\t};\r\n\r\n\tconst drawBarChart = () => {\r\n\t\tclearChart(barChart);\r\n\t\tif (!barChart.value || !processedArray.value.length) return;\r\n\r\n\t\tconst width = 150;\r\n\t\tconst height = 80;\r\n\t\tconst margin = { top: 10, right: 10, bottom: 20, left: 10 };\r\n\r\n\t\tconst data = processedArray.value.map(item => ({\r\n\t\t\tlabel: item.year || item.raw || \"\",\r\n\t\t\tvalue: item.value\r\n\t\t}));\r\n\r\n\t\tconst svg = d3\r\n\t\t\t.select(barChart.value)\r\n\t\t\t.append(\"svg\")\r\n\t\t\t.attr(\"width\", width)\r\n\t\t\t.attr(\"height\", height);\r\n\r\n\t\tconst x = d3\r\n\t\t\t.scaleBand()\r\n\t\t\t.domain(data.map(d => d.label))\r\n\t\t\t.range([margin.left, width - margin.right])\r\n\t\t\t.padding(0.2);\r\n\r\n\t\tconst y = d3\r\n\t\t\t.scaleLinear()\r\n\t\t\t.domain([0, d3.max(data, d => d.value)])\r\n\t\t\t.nice()\r\n\t\t\t.range([height - margin.bottom, margin.top]);\r\n\r\n\t\tsvg\r\n\t\t\t.selectAll(\"rect\")\r\n\t\t\t.data(data)\r\n\t\t\t.enter()\r\n\t\t\t.append(\"rect\")\r\n\t\t\t.attr(\"x\", d => x(d.label))\r\n\t\t\t.attr(\"y\", d => y(d.value))\r\n\t\t\t.attr(\"width\", x.bandwidth())\r\n\t\t\t.attr(\"height\", d => y(0) - y(d.value))\r\n\t\t\t.attr(\"fill\", \"#2196F3\");\r\n\r\n\t\tsvg\r\n\t\t\t.selectAll(\"text\")\r\n\t\t\t.data(data)\r\n\t\t\t.enter()\r\n\t\t\t.append(\"text\")\r\n\t\t\t.attr(\"x\", d => x(d.label) + x.bandwidth() / 2)\r\n\t\t\t.attr(\"y\", d => y(d.value) - 5)\r\n\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t.text(d => (props.type === \"percentage\" ? `${d.value}%` : d.value))\r\n\t\t\t.style(\"font-size\", \"10px\")\r\n\t\t\t.style(\"fill\", \"#333\");\r\n\t};\r\n\r\n\tconst drawLineChart = () => {\r\n\t\tclearChart(lineChart);\r\n\t\tif (!lineChart.value || processedArray.value.length < 2) return;\r\n\r\n\t\tconst width = 200;\r\n\t\tconst height = 80;\r\n\t\tconst margin = { top: 10, right: 10, bottom: 20, left: 10 };\r\n\r\n\t\tconst svg = d3\r\n\t\t\t.select(lineChart.value)\r\n\t\t\t.append(\"svg\")\r\n\t\t\t.attr(\"width\", width)\r\n\t\t\t.attr(\"height\", height);\r\n\r\n\t\tconst x = d3\r\n\t\t\t.scaleLinear()\r\n\t\t\t.domain(d3.extent(processedArray.value, d => d.year))\r\n\t\t\t.range([margin.left, width - margin.right]);\r\n\r\n\t\tconst y = d3\r\n\t\t\t.scaleLinear()\r\n\t\t\t.domain([0, d3.max(processedArray.value, d => d.value)])\r\n\t\t\t.nice()\r\n\t\t\t.range([height - margin.bottom, margin.top]);\r\n\r\n\t\tconst line = d3\r\n\t\t\t.line()\r\n\t\t\t.x(d => x(d.year))\r\n\t\t\t.y(d => y(d.value))\r\n\t\t\t.curve(d3.curveMonotoneX);\r\n\r\n\t\tsvg\r\n\t\t\t.append(\"path\")\r\n\t\t\t.datum(processedArray.value)\r\n\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t.attr(\"stroke\", \"#9C27B0\")\r\n\t\t\t.attr(\"stroke-width\", 2)\r\n\t\t\t.attr(\"d\", line);\r\n\r\n\t\tsvg\r\n\t\t\t.selectAll(\"circle\")\r\n\t\t\t.data(processedArray.value)\r\n\t\t\t.enter()\r\n\t\t\t.append(\"circle\")\r\n\t\t\t.attr(\"cx\", d => x(d.year))\r\n\t\t\t.attr(\"cy\", d => y(d.value))\r\n\t\t\t.attr(\"r\", 3)\r\n\t\t\t.attr(\"fill\", \"#9C27B0\");\r\n\r\n\t\tconst lastPoint = processedArray.value[processedArray.value.length - 1];\r\n\t\tsvg\r\n\t\t\t.append(\"text\")\r\n\t\t\t.attr(\"x\", x(lastPoint.year) + 10)\r\n\t\t\t.attr(\"y\", y(lastPoint.value))\r\n\t\t\t.attr(\"dy\", \"0.3em\")\r\n\t\t\t.text(\r\n\t\t\t\tprops.type === \"percentage\" ? `${lastPoint.value}%` : lastPoint.value\r\n\t\t\t)\r\n\t\t\t.style(\"font-size\", \"10px\")\r\n\t\t\t.style(\"fill\", \"#333\");\r\n\t};\r\n\r\n\tconst clearChart = element => {\r\n\t\tif (element?.value) d3.select(element.value).selectAll(\"*\").remove();\r\n\t};\r\n\r\n\t// 监听数据变化\r\n\twatch(\r\n\t\t() => [props.field, props.type],\r\n\t\t() => {\r\n\t\t\tif (!hasData.value) return;\r\n\r\n\t\t\tif (isSinglePercentage.value) drawPieChart();\r\n\t\t\telse if (isTimeSeries.value) drawLineChart();\r\n\t\t\telse if (isComparison.value) drawBarChart();\r\n\t\t},\r\n\t\t{ deep: true, immediate: true }\r\n\t);\r\n\r\n\tonMounted(() => {\r\n\t\tif (!hasData.value) return;\r\n\r\n\t\tif (isSinglePercentage.value) drawPieChart();\r\n\t\telse if (isTimeSeries.value) drawLineChart();\r\n\t\telse if (isComparison.value) drawBarChart();\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.field-visualization {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t}\r\n\r\n\t.text-value {\r\n\t\tfont-size: 14px;\r\n\t\tline-height: 1.5;\r\n\t\tpadding: 8px;\r\n\t\ttext-align: center;\r\n\t\tword-break: break-word;\r\n\t}\r\n\r\n\t.pie-chart,\r\n\t.bar-chart,\r\n\t.line-chart {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tmin-height: 80px;\r\n\t}\r\n\r\n\t.no-data {\r\n\t\tcolor: #999;\r\n\t\tfont-style: italic;\r\n\t\tpadding: 10px;\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,KAAK,EAAC;AAAqB;;EADjCC,GAAA;EAIkCD,KAAK,EAAC,WAAW;EAACE,GAAG,EAAC;;;EAGvBF,KAAK,EAAC,YAAY;EAACE,GAAG,EAAC;;;EAGvBF,KAAK,EAAC,WAAW;EAACE,GAAG,EAAC;;;EAGxCF,KAAK,EAAC;AAAY;;EAbjCC,GAAA;EAwBcD,KAAK,EAAC;;;uBAvBnBG,mBAAA,CAwBM,OAxBNC,UAwBM,GAvBWC,MAAA,CAAAC,OAAO,I,cAAvBH,mBAAA,CAqBWI,SAAA;IAvBbN,GAAA;EAAA,IAGGO,mBAAA,gBAAmB,EACRH,MAAA,CAAAI,kBAAkB,I,cAA7BN,mBAAA,CAAsE,OAAtEO,UAAsE,iCAGtDL,MAAA,CAAAM,YAAY,I,cAA5BR,mBAAA,CAAuEI,SAAA;IAP1EN,GAAA;EAAA,IAMGO,mBAAA,iBAAoB,EACpBI,mBAAA,CAAuE,OAAvEC,UAAuE,8B,oDAGvDR,MAAA,CAAAS,YAAY,I,cAA5BX,mBAAA,CAAqEI,SAAA;IAVxEN,GAAA;EAAA,IASGO,mBAAA,eAAkB,EAClBI,mBAAA,CAAqE,OAArEG,UAAqE,8B,mEAGrEZ,mBAAA,CASMI,SAAA;IAtBTN,GAAA;EAAA,IAYGO,mBAAA,WAAc,EACdI,mBAAA,CASM,OATNI,UASM,GARWX,MAAA,CAAAY,OAAO,I,kBACtBd,mBAAA,CAEMI,SAAA;IAjBXN,GAAA;EAAA,GAAAiB,WAAA,CAekCb,MAAA,CAAAc,cAAc,EAfhD,CAekBC,IAAI,EAAEC,KAAK;yBAAxBlB,mBAAA,CAEM;MAFwCF,GAAG,EAAEoB;IAAK,GAAAC,gBAAA,CACpDjB,MAAA,CAAAkB,eAAe,CAACH,IAAI;kDAGzBjB,mBAAA,CAEWI,SAAA;IArBfN,GAAA;EAAA,IAAAuB,gBAAA,CAAAF,gBAAA,CAoBQjB,MAAA,CAAAkB,eAAe,CAACE,MAAA,CAAAC,KAAK,kB,+HAI3BvB,mBAAA,CAAqC,OAArCwB,UAAqC,EAAT,KAAG,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}