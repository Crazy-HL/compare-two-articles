{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-85a7c9ae\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 1,\n  class: \"error\"\n};\nconst _hoisted_3 = [\"innerHTML\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"h1\", null, _toDisplayString($setup.pageTitle), 1 /* TEXT */), $setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, \"Loading...\")) : $setup.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _toDisplayString($setup.error), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", {\n    key: 2,\n    innerHTML: $setup.content\n  }, null, 8 /* PROPS */, _hoisted_3))]);\n}","map":{"version":3,"names":["key","class","_createElementBlock","_createElementVNode","_toDisplayString","$setup","pageTitle","loading","_hoisted_1","error","_hoisted_2","innerHTML","content","_hoisted_3"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\WikipediaViewer.vue"],"sourcesContent":["<template>\r\n\t<div>\r\n\t\t<h1>{{ pageTitle }}</h1>\r\n\t\t<div v-if=\"loading\">Loading...</div>\r\n\t\t<div v-else-if=\"error\" class=\"error\">{{ error }}</div>\r\n\t\t<div v-else v-html=\"content\"></div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted } from \"vue\";\r\n\r\n\t// 定义变量\r\n\tconst pageTitle = ref(\"LeBron James\"); // 页面标题\r\n\tconst content = ref(\"\"); // 存储页面内容\r\n\tconst loading = ref(true); // 加载状态\r\n\tconst error = ref(\"\"); // 错误信息\r\n\r\n\t// 获取维基百科内容\r\n\tconst fetchWikipediaContent = async () => {\r\n\t\ttry {\r\n\t\t\tconst apiUrl = `https://en.wikipedia.org/w/api.php?action=query&format=json&prop=extracts&titles=${encodeURIComponent(\r\n\t\t\t\tpageTitle.value\r\n\t\t\t)}&explaintext=false&origin=*`;\r\n\t\t\tconst response = await fetch(apiUrl);\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error(\"Failed to fetch data\");\r\n\t\t\t}\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconst pages = data.query.pages;\r\n\t\t\tconst pageId = Object.keys(pages)[0]; // 获取页面ID\r\n\t\t\tcontent.value = pages[pageId].extract; // 提取页面内容（包含HTML）\r\n\t\t} catch (err) {\r\n\t\t\terror.value = \"Error fetching Wikipedia content: \" + err.message;\r\n\t\t} finally {\r\n\t\t\tloading.value = false; // 结束加载状态\r\n\t\t}\r\n\t};\r\n\r\n\t// 在组件挂载时调用 API\r\n\tonMounted(() => {\r\n\t\tfetchWikipediaContent();\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.error {\r\n\t\tcolor: red;\r\n\t}\r\n</style>\r\n"],"mappings":";;;EAAAA,GAAA;AAAA;;EAAAA,GAAA;EAIyBC,KAAK,EAAC;;mBAJ/B;;uBACCC,mBAAA,CAKM,cAJLC,mBAAA,CAAwB,YAAAC,gBAAA,CAAjBC,MAAA,CAAAC,SAAS,kBACLD,MAAA,CAAAE,OAAO,I,cAAlBL,mBAAA,CAAoC,OAHtCM,UAAA,EAGsB,YAAU,KACdH,MAAA,CAAAI,KAAK,I,cAArBP,mBAAA,CAAsD,OAAtDQ,UAAsD,EAAAN,gBAAA,CAAdC,MAAA,CAAAI,KAAK,qB,cAC7CP,mBAAA,CAAmC;IALrCF,GAAA;IAKcW,SAAgB,EAARN,MAAA,CAAAO;0BALtBC,UAAA,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}