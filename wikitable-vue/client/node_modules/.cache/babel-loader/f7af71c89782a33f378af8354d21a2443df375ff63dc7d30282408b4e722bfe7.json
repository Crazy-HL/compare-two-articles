{"ast":null,"code":"import { ref, computed, onMounted, watch } from \"vue\";\nimport * as echarts from \"echarts\";\nexport default {\n  __name: 'BarChart',\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    fieldKey: String\n  },\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const props = __props;\n    const chartEl = ref(null);\n    let chartInstance = null;\n\n    // 根据字段key获取单位信息\n    const getUnitInfo = fieldKey => {\n      switch (fieldKey) {\n        case \"GDP\":\n          return {\n            unit: \"T\",\n            factor: 1e12\n          };\n        case \"Population\":\n          return {\n            unit: \"亿\",\n            factor: 1e8\n          };\n        default:\n          return {\n            unit: \"\",\n            factor: 1\n          };\n      }\n    };\n\n    // 格式化数值显示\n    const formatNumber = (value, fieldKey) => {\n      const num = Number(value);\n      if (isNaN(num)) return \"0\";\n      const {\n        unit\n      } = getUnitInfo(fieldKey);\n      return num.toFixed(2) + unit;\n    };\n    const initChart = () => {\n      if (!chartEl.value) return;\n      chartInstance = echarts.init(chartEl.value);\n\n      // 自动计算Y轴范围\n      const allValues = props.data.map(item => Number(item.value) || 0).filter(v => !isNaN(v));\n      const maxValue = allValues.length ? Math.max(...allValues) : 100;\n      const minValue = allValues.length ? Math.min(0, ...allValues) : 0;\n      const series = [{\n        name: \"数据\",\n        type: \"bar\",\n        barWidth: \"60%\",\n        data: props.data.map(item => ({\n          value: Number(item.value) || 0,\n          unit: item.unit,\n          year: item.year\n        })),\n        itemStyle: {\n          color: \"#3498db\"\n        },\n        label: {\n          show: true,\n          position: \"top\",\n          formatter: params => {\n            return formatNumber(params.value, props.fieldKey);\n          }\n        }\n      }];\n      const {\n        unit\n      } = getUnitInfo(props.fieldKey);\n      const option = {\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          },\n          formatter: params => {\n            return params.map(param => {\n              let tip = `${param.seriesName}<br/>${param.name}: ${formatNumber(param.value, props.fieldKey)}`;\n              if (param.data.unit) tip += ` ${param.data.unit}`;\n              if (param.data.year) tip += ` (${param.data.year})`;\n              return tip;\n            }).join(\"<br/>\");\n          }\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          data: props.data.map(item => item.name),\n          axisLabel: {\n            interval: 0,\n            rotate: props.data.length > 3 ? 30 : 0\n          }\n        },\n        yAxis: {\n          type: \"value\",\n          min: minValue,\n          max: maxValue * 1.1,\n          axisLabel: {\n            formatter: value => {\n              return formatNumber(value, props.fieldKey);\n            }\n          }\n        },\n        series\n      };\n      chartInstance.setOption(option);\n    };\n    onMounted(() => {\n      initChart();\n      window.addEventListener(\"resize\", () => chartInstance?.resize());\n    });\n    watch(() => props.data, () => {\n      if (chartInstance) {\n        initChart();\n      }\n    }, {\n      deep: true\n    });\n    const __returned__ = {\n      props,\n      chartEl,\n      get chartInstance() {\n        return chartInstance;\n      },\n      set chartInstance(v) {\n        chartInstance = v;\n      },\n      getUnitInfo,\n      formatNumber,\n      initChart,\n      ref,\n      computed,\n      onMounted,\n      watch,\n      get echarts() {\n        return echarts;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","watch","echarts","props","__props","chartEl","chartInstance","getUnitInfo","fieldKey","unit","factor","formatNumber","value","num","Number","isNaN","toFixed","initChart","init","allValues","data","map","item","filter","v","maxValue","length","Math","max","minValue","min","series","name","type","barWidth","year","itemStyle","color","label","show","position","formatter","params","option","tooltip","trigger","axisPointer","param","tip","seriesName","join","grid","left","right","bottom","containLabel","xAxis","axisLabel","interval","rotate","yAxis","setOption","window","addEventListener","resize","deep"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/charts/BarChart.vue"],"sourcesContent":["<template>\r\n\t<div ref=\"chartEl\" class=\"bar-chart\"></div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, onMounted, watch } from \"vue\";\r\n\timport * as echarts from \"echarts\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdata: {\r\n\t\t\ttype: Array,\r\n\t\t\tdefault: () => []\r\n\t\t},\r\n\t\tfieldKey: String\r\n\t});\r\n\r\n\tconst chartEl = ref(null);\r\n\tlet chartInstance = null;\r\n\r\n\t// 根据字段key获取单位信息\r\n\tconst getUnitInfo = fieldKey => {\r\n\t\tswitch (fieldKey) {\r\n\t\t\tcase \"GDP\":\r\n\t\t\t\treturn { unit: \"T\", factor: 1e12 };\r\n\t\t\tcase \"Population\":\r\n\t\t\t\treturn { unit: \"亿\", factor: 1e8 };\r\n\t\t\tdefault:\r\n\t\t\t\treturn { unit: \"\", factor: 1 };\r\n\t\t}\r\n\t};\r\n\r\n\t// 格式化数值显示\r\n\tconst formatNumber = (value, fieldKey) => {\r\n\t\tconst num = Number(value);\r\n\t\tif (isNaN(num)) return \"0\";\r\n\r\n\t\tconst { unit } = getUnitInfo(fieldKey);\r\n\t\treturn num.toFixed(2) + unit;\r\n\t};\r\n\r\n\tconst initChart = () => {\r\n\t\tif (!chartEl.value) return;\r\n\r\n\t\tchartInstance = echarts.init(chartEl.value);\r\n\r\n\t\t// 自动计算Y轴范围\r\n\t\tconst allValues = props.data\r\n\t\t\t.map(item => Number(item.value) || 0)\r\n\t\t\t.filter(v => !isNaN(v));\r\n\t\tconst maxValue = allValues.length ? Math.max(...allValues) : 100;\r\n\t\tconst minValue = allValues.length ? Math.min(0, ...allValues) : 0;\r\n\r\n\t\tconst series = [\r\n\t\t\t{\r\n\t\t\t\tname: \"数据\",\r\n\t\t\t\ttype: \"bar\",\r\n\t\t\t\tbarWidth: \"60%\",\r\n\t\t\t\tdata: props.data.map(item => ({\r\n\t\t\t\t\tvalue: Number(item.value) || 0,\r\n\t\t\t\t\tunit: item.unit,\r\n\t\t\t\t\tyear: item.year\r\n\t\t\t\t})),\r\n\t\t\t\titemStyle: {\r\n\t\t\t\t\tcolor: \"#3498db\"\r\n\t\t\t\t},\r\n\t\t\t\tlabel: {\r\n\t\t\t\t\tshow: true,\r\n\t\t\t\t\tposition: \"top\",\r\n\t\t\t\t\tformatter: params => {\r\n\t\t\t\t\t\treturn formatNumber(params.value, props.fieldKey);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t];\r\n\r\n\t\tconst { unit } = getUnitInfo(props.fieldKey);\r\n\r\n\t\tconst option = {\r\n\t\t\ttooltip: {\r\n\t\t\t\ttrigger: \"axis\",\r\n\t\t\t\taxisPointer: {\r\n\t\t\t\t\ttype: \"shadow\"\r\n\t\t\t\t},\r\n\t\t\t\tformatter: params => {\r\n\t\t\t\t\treturn params\r\n\t\t\t\t\t\t.map(param => {\r\n\t\t\t\t\t\t\tlet tip = `${param.seriesName}<br/>${param.name}: ${formatNumber(\r\n\t\t\t\t\t\t\t\tparam.value,\r\n\t\t\t\t\t\t\t\tprops.fieldKey\r\n\t\t\t\t\t\t\t)}`;\r\n\t\t\t\t\t\t\tif (param.data.unit) tip += ` ${param.data.unit}`;\r\n\t\t\t\t\t\t\tif (param.data.year) tip += ` (${param.data.year})`;\r\n\t\t\t\t\t\t\treturn tip;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.join(\"<br/>\");\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tgrid: {\r\n\t\t\t\tleft: \"3%\",\r\n\t\t\t\tright: \"4%\",\r\n\t\t\t\tbottom: \"3%\",\r\n\t\t\t\tcontainLabel: true\r\n\t\t\t},\r\n\t\t\txAxis: {\r\n\t\t\t\ttype: \"category\",\r\n\t\t\t\tdata: props.data.map(item => item.name),\r\n\t\t\t\taxisLabel: {\r\n\t\t\t\t\tinterval: 0,\r\n\t\t\t\t\trotate: props.data.length > 3 ? 30 : 0\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tyAxis: {\r\n\t\t\t\ttype: \"value\",\r\n\t\t\t\tmin: minValue,\r\n\t\t\t\tmax: maxValue * 1.1,\r\n\t\t\t\taxisLabel: {\r\n\t\t\t\t\tformatter: value => {\r\n\t\t\t\t\t\treturn formatNumber(value, props.fieldKey);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tseries\r\n\t\t};\r\n\r\n\t\tchartInstance.setOption(option);\r\n\t};\r\n\r\n\tonMounted(() => {\r\n\t\tinitChart();\r\n\t\twindow.addEventListener(\"resize\", () => chartInstance?.resize());\r\n\t});\r\n\r\n\twatch(\r\n\t\t() => props.data,\r\n\t\t() => {\r\n\t\t\tif (chartInstance) {\r\n\t\t\t\tinitChart();\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ deep: true }\r\n\t);\r\n</script>\r\n\r\n<style scoped>\r\n\t.bar-chart {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tmin-height: 300px;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}