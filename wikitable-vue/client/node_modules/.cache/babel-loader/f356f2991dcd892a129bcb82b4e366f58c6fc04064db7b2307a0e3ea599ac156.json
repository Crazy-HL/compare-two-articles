{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode, withModifiers as _withModifiers, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, normalizeStyle as _normalizeStyle, Fragment as _Fragment, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-6b90eab0\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"view-switcher\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"innerHTML\"];\nconst _hoisted_4 = {\n  key: 1\n};\nconst _hoisted_5 = {\n  key: 1,\n  class: \"visualization-container\"\n};\nconst _hoisted_6 = {\n  key: 0,\n  class: \"loading-spinner\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_font_awesome_icon = _resolveComponent(\"font-awesome-icon\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" 遮罩层 \"), $props.visible ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: \"overlay\",\n    onClick: $setup.close\n  })) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 弹出框 \"), $props.visible ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 1,\n    ref: \"popupRef\",\n    class: \"text-popup\",\n    style: _normalizeStyle($setup.popupStyle),\n    onClick: _cache[2] || (_cache[2] = _withModifiers(() => {}, [\"stop\"]))\n  }, [_createCommentVNode(\" 切换视图按钮 \"), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = _withModifiers($event => $setup.switchView('text'), [\"prevent\", \"stop\"])),\n    class: _normalizeClass({\n      active: $setup.currentView === 'text'\n    }),\n    title: \"文本视图\"\n  }, [_createVNode(_component_font_awesome_icon, {\n    icon: ['fas', 'align-left']\n  })], 2 /* CLASS */), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = _withModifiers($event => $setup.switchView('visual'), [\"prevent\", \"stop\"])),\n    class: _normalizeClass({\n      active: $setup.currentView === 'visual'\n    }),\n    title: \"可视化视图\"\n  }, [_createVNode(_component_font_awesome_icon, {\n    icon: ['fas', 'chart-bar']\n  })], 2 /* CLASS */)]), _createCommentVNode(\" 文本视图 \"), $setup.currentView === 'text' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [$setup.isTable ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: \"table-container\",\n    innerHTML: $props.content\n  }, null, 8 /* PROPS */, _hoisted_3)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"p\", null, _toDisplayString($props.content), 1 /* TEXT */)]))])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 可视化视图 \"), $setup.currentView === 'visual' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6)) : (_openBlock(), _createElementBlock(\"div\", {\n    key: 1,\n    class: _normalizeClass($props.containerClass)\n  }, null, 2 /* CLASS */))])) : _createCommentVNode(\"v-if\", true)], 4 /* STYLE */)) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_Fragment","_createCommentVNode","$props","visible","onClick","$setup","close","ref","style","_normalizeStyle","popupStyle","_cache","_withModifiers","_createElementVNode","_hoisted_1","$event","switchView","_normalizeClass","active","currentView","title","_createVNode","_component_font_awesome_icon","icon","_hoisted_2","isTable","innerHTML","content","_hoisted_3","_hoisted_4","_toDisplayString","_hoisted_5","loading","_hoisted_6","containerClass"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\TextPopup.vue"],"sourcesContent":["<template>\r\n\t<!-- 遮罩层 -->\r\n\t<div v-if=\"visible\" class=\"overlay\" @click=\"close\"></div>\r\n\r\n\t<!-- 弹出框 -->\r\n\t<div\r\n\t\tv-if=\"visible\"\r\n\t\tref=\"popupRef\"\r\n\t\tclass=\"text-popup\"\r\n\t\t:style=\"popupStyle\"\r\n\t\t@click.stop>\r\n\t\t<!-- 切换视图按钮 -->\r\n\t\t<div class=\"view-switcher\">\r\n\t\t\t<button\r\n\t\t\t\t@click.prevent.stop=\"switchView('text')\"\r\n\t\t\t\t:class=\"{ active: currentView === 'text' }\"\r\n\t\t\t\ttitle=\"文本视图\">\r\n\t\t\t\t<font-awesome-icon :icon=\"['fas', 'align-left']\" />\r\n\t\t\t</button>\r\n\r\n\t\t\t<button\r\n\t\t\t\t@click.prevent.stop=\"switchView('visual')\"\r\n\t\t\t\t:class=\"{ active: currentView === 'visual' }\"\r\n\t\t\t\ttitle=\"可视化视图\">\r\n\t\t\t\t<font-awesome-icon :icon=\"['fas', 'chart-bar']\" />\r\n\t\t\t</button>\r\n\t\t</div>\r\n\r\n\t\t<!-- 文本视图 -->\r\n\t\t<div v-if=\"currentView === 'text'\">\r\n\t\t\t<div v-if=\"isTable\" class=\"table-container\" v-html=\"content\"></div>\r\n\t\t\t<div v-else>\r\n\t\t\t\t<p>{{ content }}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- 可视化视图 -->\r\n\t\t<div v-if=\"currentView === 'visual'\" class=\"visualization-container\">\r\n\t\t\t<div v-if=\"loading\" class=\"loading-spinner\"></div>\r\n\t\t\t<div v-else :class=\"containerClass\"></div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, watch, onMounted, onUnmounted } from \"vue\";\r\n\r\n\tconst props = defineProps({\r\n\t\tvisible: Boolean, // 是否显示弹出框\r\n\t\tcontent: String, // 弹出框内容\r\n\t\tcontainerClass: String, // 图表容器类名\r\n\t\tcontainerRef: {\r\n\t\t\ttype: Object,\r\n\t\t\tdefault: () => ({ value: null }) // 默认值为 { value: null }\r\n\t\t}\r\n\t});\r\n\r\n\tconst emit = defineEmits([\"close\"]); // 定义 close 事件\r\n\r\n\tconst popupRef = ref(null); // 弹出框的引用\r\n\tconst currentView = ref(\"text\"); // 当前视图模式：text 或 visual\r\n\tconst loading = ref(false); // 可视化图表加载状态\r\n\tconst popupStyle = ref({}); // 弹出框的样式\r\n\r\n\t// 判断内容是否是表格\r\n\tconst isTable = computed(() => {\r\n\t\treturn /<table.*?>.*?<\\/table>/s.test(props.content);\r\n\t});\r\n\r\n\t// 关闭弹出框\r\n\tconst close = () => {\r\n\t\temit(\"close\");\r\n\t};\r\n\r\n\t// 切换视图\r\n\tconst switchView = async view => {\r\n\t\tcurrentView.value = view;\r\n\t\tif (view === \"visual\") {\r\n\t\t\tloading.value = true;\r\n\t\t\tawait processText(); // 调用后端处理文本并渲染图表\r\n\t\t\tloading.value = false;\r\n\t\t}\r\n\t};\r\n\r\n\t// 获取可视化 JSON 数据\r\n\tasync function processText() {\r\n\t\ttry {\r\n\t\t\tapi.post(\r\n\t\t\t\t\"process_text\",\r\n\t\t\t\t{ text: props.content.toString().trim() },\r\n\t\t\t\tdata => {\r\n\t\t\t\t\tif (data.error) {\r\n\t\t\t\t\t\tconsole.error(\"后端返回的错误:\", data.error);\r\n\t\t\t\t\t\talert(`处理文章内容时出错: ${data.message}`);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst jsonData = data.json_data;\r\n\t\t\t\t\tconsole.log(\"后端返回的数据:\", jsonData);\r\n\r\n\t\t\t\t\t// 清空之前的图表\r\n\t\t\t\t\td3.select(`.${props.containerClass}`).html(\"\");\r\n\r\n\t\t\t\t\tif (data.data_type === \"Non-Visual\") {\r\n\t\t\t\t\t\trenderNonVisualChart(`.${props.containerClass}`, data, {\r\n\t\t\t\t\t\t\tmessage: \"当前数据无法可视化\"\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trenderChart(jsonData, data.chart_classification);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"处理文章内容时出错:\", error);\r\n\t\t\talert(\"处理文章内容时出错，请稍后重试\");\r\n\t\t}\r\n\t}\r\n\r\n\t// 渲染图表\r\n\tfunction renderChart(rawJsonData, chartType) {\r\n\t\tif (!rawJsonData || typeof rawJsonData !== \"object\" || !rawJsonData.data) {\r\n\t\t\trenderNonVisualChart(`.${props.containerClass}`, rawJsonData, {\r\n\t\t\t\tmessage: \"JSON 数据无效\"\r\n\t\t\t});\r\n\t\t\tconsole.error(\"JSON 数据无效:\", rawJsonData);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst data = rawJsonData.data;\r\n\t\tconst options = rawJsonData.options || {};\r\n\r\n\t\t// 根据图表类型渲染\r\n\t\tif (chartType === \"Line Chart\") {\r\n\t\t\trenderLineChart(`.${props.containerClass}`, data, options);\r\n\t\t} else if (chartType === \"Bar Chart\") {\r\n\t\t\trenderBarChart(`.${props.containerClass}`, data, options);\r\n\t\t} else if (chartType === \"Pie Chart\") {\r\n\t\t\trenderPieChart(`.${props.containerClass}`, data, options);\r\n\t\t} else if (chartType === \"Stacked Bar Chart\") {\r\n\t\t\trenderStackedBarChart(`.${props.containerClass}`, data, options);\r\n\t\t} else {\r\n\t\t\tconsole.error(\"未知的图表类型:\", chartType);\r\n\t\t}\r\n\t}\r\n\r\n\t// 更新弹出框的位置和尺寸\r\n\tconst updatePopupPosition = () => {\r\n\t\tif (props.visible && props.containerRef && props.containerRef.value) {\r\n\t\t\tconst containerRect = props.containerRef.value.getBoundingClientRect();\r\n\t\t\tpopupStyle.value = {\r\n\t\t\t\tposition: \"absolute\",\r\n\t\t\t\ttop: `${containerRect.top + window.scrollY}px`,\r\n\t\t\t\tleft: `${containerRect.left + window.scrollX}px`,\r\n\t\t\t\twidth: `${containerRect.width}px`,\r\n\t\t\t\tmaxHeight: `${containerRect.height}px`\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n\r\n\t// 监听 containerRef 的变化\r\n\twatch(\r\n\t\t() => props.containerRef.value,\r\n\t\tnewValue => {\r\n\t\t\tif (newValue) {\r\n\t\t\t\t// 绑定事件\r\n\t\t\t\twindow.addEventListener(\"resize\", updatePopupPosition);\r\n\t\t\t\tnewValue.addEventListener(\"scroll\", updatePopupPosition);\r\n\t\t\t\t// 初始化弹出框位置\r\n\t\t\t\tupdatePopupPosition();\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\t// 组件卸载时解绑事件\r\n\tonUnmounted(() => {\r\n\t\tif (props.containerRef && props.containerRef.value) {\r\n\t\t\twindow.removeEventListener(\"resize\", updatePopupPosition);\r\n\t\t\tprops.containerRef.value.removeEventListener(\r\n\t\t\t\t\"scroll\",\r\n\t\t\t\tupdatePopupPosition\r\n\t\t\t);\r\n\t\t}\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t/* 样式保持不变 */\r\n</style>\r\n"],"mappings":";;;EAYOA,KAAK,EAAC;AAAe;;EAZ5BC,GAAA;AAAA;mBAAA;;EAAAA,GAAA;AAAA;;EAAAA,GAAA;EAqCuCD,KAAK,EAAC;;;EArC7CC,GAAA;EAsCuBD,KAAK,EAAC;;;;uBAtC7BE,mBAAA,CAAAC,SAAA,SACCC,mBAAA,SAAY,EACDC,MAAA,CAAAC,OAAO,I,cAAlBJ,mBAAA,CAAyD;IAF1DD,GAAA;IAEqBD,KAAK,EAAC,SAAS;IAAEO,OAAK,EAAEC,MAAA,CAAAC;QAF7CL,mBAAA,gBAICA,mBAAA,SAAY,EAELC,MAAA,CAAAC,OAAO,I,cADdJ,mBAAA,CAoCM;IAzCPD,GAAA;IAOES,GAAG,EAAC,UAAU;IACdV,KAAK,EAAC,YAAY;IACjBW,KAAK,EATRC,eAAA,CASUJ,MAAA,CAAAK,UAAU;IACjBN,OAAK,EAAAO,MAAA,QAAAA,MAAA,MAVRC,cAAA,CAUE,QAAW;MACXX,mBAAA,YAAe,EACfY,mBAAA,CAcM,OAdNC,UAcM,GAbLD,mBAAA,CAKS;IAJPT,OAAK,EAAAO,MAAA,QAAAA,MAAA,MAdVC,cAAA,CAAAG,MAAA,IAcyBV,MAAA,CAAAW,UAAU;IAC9BnB,KAAK,EAfVoB,eAAA;MAAAC,MAAA,EAesBb,MAAA,CAAAc,WAAW;IAAA;IAC7BC,KAAK,EAAC;MACNC,YAAA,CAAmDC,4BAAA;IAA/BC,IAAI,EAAE;EAAqB,G,kBAGhDV,mBAAA,CAKS;IAJPT,OAAK,EAAAO,MAAA,QAAAA,MAAA,MArBVC,cAAA,CAAAG,MAAA,IAqByBV,MAAA,CAAAW,UAAU;IAC9BnB,KAAK,EAtBVoB,eAAA;MAAAC,MAAA,EAsBsBb,MAAA,CAAAc,WAAW;IAAA;IAC7BC,KAAK,EAAC;MACNC,YAAA,CAAkDC,4BAAA;IAA9BC,IAAI,EAAE;EAAoB,G,oBAIhDtB,mBAAA,UAAa,EACFI,MAAA,CAAAc,WAAW,e,cAAtBpB,mBAAA,CAKM,OAlCRyB,UAAA,GA8BcnB,MAAA,CAAAoB,OAAO,I,cAAlB1B,mBAAA,CAAmE;IA9BtED,GAAA;IA8BuBD,KAAK,EAAC,iBAAiB;IAAC6B,SAAgB,EAARxB,MAAA,CAAAyB;0BA9BvDC,UAAA,M,cA+BG7B,mBAAA,CAEM,OAjCT8B,UAAA,GAgCIhB,mBAAA,CAAoB,WAAAiB,gBAAA,CAAd5B,MAAA,CAAAyB,OAAO,iB,QAhCjB1B,mBAAA,gBAoCEA,mBAAA,WAAc,EACHI,MAAA,CAAAc,WAAW,iB,cAAtBpB,mBAAA,CAGM,OAHNgC,UAGM,GAFM1B,MAAA,CAAA2B,OAAO,I,cAAlBjC,mBAAA,CAAkD,OAAlDkC,UAAkD,M,cAClDlC,mBAAA,CAA0C;IAvC7CD,GAAA;IAuCgBD,KAAK,EAvCrBoB,eAAA,CAuCuBf,MAAA,CAAAgC,cAAc;gCAvCrCjC,mBAAA,e,oBAAAA,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}