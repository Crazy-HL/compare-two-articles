{"ast":null,"code":"/**\r\n * 极简版维基百科信息框解析器\r\n * 只提取纯文本内容，去除所有HTML标签和多媒体\r\n * @param {HTMLElement|null} infoboxElement - 信息框DOM元素\r\n * @returns {Object} 简化的信息框数据结构\r\n */\nexport function parseSimpleInfobox(infoboxElement) {\n  // 极简返回值\n  const defaultResult = {\n    title: \"\",\n    type: \"none\",\n    data: {}\n  };\n\n  // 快速验证\n  if (!infoboxElement?.textContent?.trim()) {\n    return defaultResult;\n  }\n  try {\n    // 直接使用textContent避免DOM操作\n    const textContent = infoboxElement.textContent;\n\n    // 极简标题提取\n    const title = extractSimpleTitle(infoboxElement) || \"\";\n\n    // 基础类型检测\n    const type = detectSimpleType(textContent);\n\n    // 提取键值对数据\n    const data = extractSimpleData(infoboxElement);\n    return {\n      title: title.trim(),\n      type,\n      data\n    };\n  } catch (error) {\n    console.error(\"Infobox解析失败:\", error);\n    return defaultResult;\n  }\n}\n\n/* 极简辅助函数 */\nfunction extractSimpleTitle(element) {\n  // 尝试从常见位置快速获取标题\n  const quickSources = [() => element.querySelector('caption')?.textContent, () => element.querySelector('.infobox-title')?.textContent, () => element.querySelector('th[colspan=\"2\"]')?.textContent, () => {\n    const firstTh = element.querySelector('th:not(th th)');\n    return firstTh?.textContent;\n  }];\n  for (const source of quickSources) {\n    try {\n      const title = source();\n      if (title?.trim()) return title.trim();\n    } catch (e) {\n      continue;\n    }\n  }\n  return '';\n}\nfunction detectSimpleType(text) {\n  const lowerText = text.toLowerCase();\n  if (/country|nation|state/.test(lowerText)) return \"国家\";\n  if (/person|people|birth|death/.test(lowerText)) return \"人物\";\n  if (/company|business|revenue/.test(lowerText)) return \"公司\";\n  if (/film|movie|director/.test(lowerText)) return \"影视\";\n  return \"通用\";\n}\nfunction extractSimpleData(element) {\n  const data = {};\n  const rows = element.querySelectorAll('tr');\n  rows.forEach(row => {\n    try {\n      const th = row.querySelector('th');\n      const td = row.querySelector('td');\n      if (th && td) {\n        const key = cleanText(th.textContent);\n        const value = cleanText(td.textContent);\n        if (key && value) {\n          data[key] = value;\n        }\n      }\n    } catch (e) {\n      // 忽略错误行\n    }\n  });\n  return data;\n}\nfunction cleanText(text) {\n  return (text || \"\").replace(/\\[\\d+\\]/g, '') // 去除引用标记[1]\n  .replace(/[:：]\\s*$/, '') // 去除末尾冒号\n  .replace(/\\s+/g, ' ') // 合并空格\n  .replace(/[[\\]]/g, '') // 去除方括号\n  .replace(/\\(.*?\\)/g, '') // 去除括号内容\n  .trim();\n}","map":{"version":3,"names":["parseSimpleInfobox","infoboxElement","defaultResult","title","type","data","textContent","trim","extractSimpleTitle","detectSimpleType","extractSimpleData","error","console","element","quickSources","querySelector","firstTh","source","e","text","lowerText","toLowerCase","test","rows","querySelectorAll","forEach","row","th","td","key","cleanText","value","replace"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/js/wikiInfoboxParser.js"],"sourcesContent":["/**\r\n * 极简版维基百科信息框解析器\r\n * 只提取纯文本内容，去除所有HTML标签和多媒体\r\n * @param {HTMLElement|null} infoboxElement - 信息框DOM元素\r\n * @returns {Object} 简化的信息框数据结构\r\n */\r\nexport function parseSimpleInfobox(infoboxElement) {\r\n  // 极简返回值\r\n  const defaultResult = {\r\n    title: \"\",\r\n    type: \"none\",\r\n    data: {}\r\n  };\r\n\r\n  // 快速验证\r\n  if (!infoboxElement?.textContent?.trim()) {\r\n    return defaultResult;\r\n  }\r\n\r\n  try {\r\n    // 直接使用textContent避免DOM操作\r\n    const textContent = infoboxElement.textContent;\r\n    \r\n    // 极简标题提取\r\n    const title = extractSimpleTitle(infoboxElement) || \"\";\r\n\r\n    // 基础类型检测\r\n    const type = detectSimpleType(textContent);\r\n\r\n    // 提取键值对数据\r\n    const data = extractSimpleData(infoboxElement);\r\n\r\n    return {\r\n      title: title.trim(),\r\n      type,\r\n      data\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error(\"Infobox解析失败:\", error);\r\n    return defaultResult;\r\n  }\r\n}\r\n\r\n/* 极简辅助函数 */\r\nfunction extractSimpleTitle(element) {\r\n  // 尝试从常见位置快速获取标题\r\n  const quickSources = [\r\n    () => element.querySelector('caption')?.textContent,\r\n    () => element.querySelector('.infobox-title')?.textContent,\r\n    () => element.querySelector('th[colspan=\"2\"]')?.textContent,\r\n    () => {\r\n      const firstTh = element.querySelector('th:not(th th)');\r\n      return firstTh?.textContent;\r\n    }\r\n  ];\r\n\r\n  for (const source of quickSources) {\r\n    try {\r\n      const title = source();\r\n      if (title?.trim()) return title.trim();\r\n    } catch (e) {\r\n      continue;\r\n    }\r\n  }\r\n  return '';\r\n}\r\n\r\nfunction detectSimpleType(text) {\r\n  const lowerText = text.toLowerCase();\r\n  if (/country|nation|state/.test(lowerText)) return \"国家\";\r\n  if (/person|people|birth|death/.test(lowerText)) return \"人物\";\r\n  if (/company|business|revenue/.test(lowerText)) return \"公司\";\r\n  if (/film|movie|director/.test(lowerText)) return \"影视\";\r\n  return \"通用\";\r\n}\r\n\r\nfunction extractSimpleData(element) {\r\n  const data = {};\r\n  const rows = element.querySelectorAll('tr');\r\n\r\n  rows.forEach(row => {\r\n    try {\r\n      const th = row.querySelector('th');\r\n      const td = row.querySelector('td');\r\n      \r\n      if (th && td) {\r\n        const key = cleanText(th.textContent);\r\n        const value = cleanText(td.textContent);\r\n        \r\n        if (key && value) {\r\n          data[key] = value;\r\n        }\r\n      }\r\n    } catch (e) {\r\n      // 忽略错误行\r\n    }\r\n  });\r\n\r\n  return data;\r\n}\r\n\r\nfunction cleanText(text) {\r\n  return (text || \"\")\r\n    .replace(/\\[\\d+\\]/g, '')      // 去除引用标记[1]\r\n    .replace(/[:：]\\s*$/, '')     // 去除末尾冒号\r\n    .replace(/\\s+/g, ' ')         // 合并空格\r\n    .replace(/[[\\]]/g, '')        // 去除方括号\r\n    .replace(/\\(.*?\\)/g, '')      // 去除括号内容\r\n    .trim();\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,kBAAkBA,CAACC,cAAc,EAAE;EACjD;EACA,MAAMC,aAAa,GAAG;IACpBC,KAAK,EAAE,EAAE;IACTC,IAAI,EAAE,MAAM;IACZC,IAAI,EAAE,CAAC;EACT,CAAC;;EAED;EACA,IAAI,CAACJ,cAAc,EAAEK,WAAW,EAAEC,IAAI,CAAC,CAAC,EAAE;IACxC,OAAOL,aAAa;EACtB;EAEA,IAAI;IACF;IACA,MAAMI,WAAW,GAAGL,cAAc,CAACK,WAAW;;IAE9C;IACA,MAAMH,KAAK,GAAGK,kBAAkB,CAACP,cAAc,CAAC,IAAI,EAAE;;IAEtD;IACA,MAAMG,IAAI,GAAGK,gBAAgB,CAACH,WAAW,CAAC;;IAE1C;IACA,MAAMD,IAAI,GAAGK,iBAAiB,CAACT,cAAc,CAAC;IAE9C,OAAO;MACLE,KAAK,EAAEA,KAAK,CAACI,IAAI,CAAC,CAAC;MACnBH,IAAI;MACJC;IACF,CAAC;EAEH,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,OAAOT,aAAa;EACtB;AACF;;AAEA;AACA,SAASM,kBAAkBA,CAACK,OAAO,EAAE;EACnC;EACA,MAAMC,YAAY,GAAG,CACnB,MAAMD,OAAO,CAACE,aAAa,CAAC,SAAS,CAAC,EAAET,WAAW,EACnD,MAAMO,OAAO,CAACE,aAAa,CAAC,gBAAgB,CAAC,EAAET,WAAW,EAC1D,MAAMO,OAAO,CAACE,aAAa,CAAC,iBAAiB,CAAC,EAAET,WAAW,EAC3D,MAAM;IACJ,MAAMU,OAAO,GAAGH,OAAO,CAACE,aAAa,CAAC,eAAe,CAAC;IACtD,OAAOC,OAAO,EAAEV,WAAW;EAC7B,CAAC,CACF;EAED,KAAK,MAAMW,MAAM,IAAIH,YAAY,EAAE;IACjC,IAAI;MACF,MAAMX,KAAK,GAAGc,MAAM,CAAC,CAAC;MACtB,IAAId,KAAK,EAAEI,IAAI,CAAC,CAAC,EAAE,OAAOJ,KAAK,CAACI,IAAI,CAAC,CAAC;IACxC,CAAC,CAAC,OAAOW,CAAC,EAAE;MACV;IACF;EACF;EACA,OAAO,EAAE;AACX;AAEA,SAAST,gBAAgBA,CAACU,IAAI,EAAE;EAC9B,MAAMC,SAAS,GAAGD,IAAI,CAACE,WAAW,CAAC,CAAC;EACpC,IAAI,sBAAsB,CAACC,IAAI,CAACF,SAAS,CAAC,EAAE,OAAO,IAAI;EACvD,IAAI,2BAA2B,CAACE,IAAI,CAACF,SAAS,CAAC,EAAE,OAAO,IAAI;EAC5D,IAAI,0BAA0B,CAACE,IAAI,CAACF,SAAS,CAAC,EAAE,OAAO,IAAI;EAC3D,IAAI,qBAAqB,CAACE,IAAI,CAACF,SAAS,CAAC,EAAE,OAAO,IAAI;EACtD,OAAO,IAAI;AACb;AAEA,SAASV,iBAAiBA,CAACG,OAAO,EAAE;EAClC,MAAMR,IAAI,GAAG,CAAC,CAAC;EACf,MAAMkB,IAAI,GAAGV,OAAO,CAACW,gBAAgB,CAAC,IAAI,CAAC;EAE3CD,IAAI,CAACE,OAAO,CAACC,GAAG,IAAI;IAClB,IAAI;MACF,MAAMC,EAAE,GAAGD,GAAG,CAACX,aAAa,CAAC,IAAI,CAAC;MAClC,MAAMa,EAAE,GAAGF,GAAG,CAACX,aAAa,CAAC,IAAI,CAAC;MAElC,IAAIY,EAAE,IAAIC,EAAE,EAAE;QACZ,MAAMC,GAAG,GAAGC,SAAS,CAACH,EAAE,CAACrB,WAAW,CAAC;QACrC,MAAMyB,KAAK,GAAGD,SAAS,CAACF,EAAE,CAACtB,WAAW,CAAC;QAEvC,IAAIuB,GAAG,IAAIE,KAAK,EAAE;UAChB1B,IAAI,CAACwB,GAAG,CAAC,GAAGE,KAAK;QACnB;MACF;IACF,CAAC,CAAC,OAAOb,CAAC,EAAE;MACV;IAAA;EAEJ,CAAC,CAAC;EAEF,OAAOb,IAAI;AACb;AAEA,SAASyB,SAASA,CAACX,IAAI,EAAE;EACvB,OAAO,CAACA,IAAI,IAAI,EAAE,EACfa,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAM;EAAA,CAC7BA,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAK;EAAA,CAC5BA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAS;EAAA,CAC7BA,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAQ;EAAA,CAC7BA,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAM;EAAA,CAC7BzB,IAAI,CAAC,CAAC;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}