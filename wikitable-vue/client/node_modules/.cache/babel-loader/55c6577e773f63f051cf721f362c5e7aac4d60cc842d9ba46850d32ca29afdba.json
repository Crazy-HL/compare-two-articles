{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-201e19b8\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"full-chart\",\n  ref: \"chartContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\FullChart.vue"],"sourcesContent":["<template>\r\n\t<div class=\"full-chart\" ref=\"chartContainer\"></div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, watch } from \"vue\";\r\n\timport * as d3 from \"d3\";\r\n\r\n\tconst props = defineProps({\r\n\t\tfield: Array,\r\n\t\ttype: String,\r\n\t\tvisualization: String\r\n\t});\r\n\r\n\tconst chartContainer = ref(null);\r\n\r\n\tconst renderChart = () => {\r\n\t\tif (!chartContainer.value || !props.field || props.field.length === 0)\r\n\t\t\treturn;\r\n\r\n\t\t// 清空容器\r\n\t\tchartContainer.value.innerHTML = \"\";\r\n\r\n\t\t// 根据不同类型渲染图表\r\n\t\tswitch (props.visualization) {\r\n\t\t\tcase \"bar-chart\":\r\n\t\t\t\trenderBarChart();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"line-chart\":\r\n\t\t\t\trenderLineChart();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pie-chart\":\r\n\t\t\t\trenderPieChart();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\trenderTextOnly();\r\n\t\t}\r\n\t};\r\n\r\n\tconst renderBarChart = () => {\r\n\t\tconst width = 800;\r\n\t\tconst height = 500;\r\n\t\tconst margin = { top: 40, right: 40, bottom: 60, left: 60 };\r\n\r\n\t\tconst svg = d3\r\n\t\t\t.select(chartContainer.value)\r\n\t\t\t.append(\"svg\")\r\n\t\t\t.attr(\"width\", width)\r\n\t\t\t.attr(\"height\", height);\r\n\r\n\t\tconst data = props.field.map(item => ({\r\n\t\t\tlabel: item.label || item.name,\r\n\t\t\tvalue: +item.value\r\n\t\t}));\r\n\r\n\t\tconst x = d3\r\n\t\t\t.scaleBand()\r\n\t\t\t.domain(data.map(d => d.label))\r\n\t\t\t.range([margin.left, width - margin.right])\r\n\t\t\t.padding(0.2);\r\n\r\n\t\tconst y = d3\r\n\t\t\t.scaleLinear()\r\n\t\t\t.domain([0, d3.max(data, d => d.value)])\r\n\t\t\t.nice()\r\n\t\t\t.range([height - margin.bottom, margin.top]);\r\n\r\n\t\t// 添加坐标轴\r\n\t\tsvg\r\n\t\t\t.append(\"g\")\r\n\t\t\t.attr(\"class\", \"x-axis\")\r\n\t\t\t.attr(\"transform\", `translate(0,${height - margin.bottom})`)\r\n\t\t\t.call(d3.axisBottom(x))\r\n\t\t\t.selectAll(\"text\")\r\n\t\t\t.style(\"text-anchor\", \"end\")\r\n\t\t\t.attr(\"dx\", \"-.8em\")\r\n\t\t\t.attr(\"dy\", \".15em\")\r\n\t\t\t.attr(\"transform\", \"rotate(-45)\");\r\n\r\n\t\tsvg\r\n\t\t\t.append(\"g\")\r\n\t\t\t.attr(\"class\", \"y-axis\")\r\n\t\t\t.attr(\"transform\", `translate(${margin.left},0)`)\r\n\t\t\t.call(d3.axisLeft(y));\r\n\r\n\t\t// 添加网格线\r\n\t\tsvg\r\n\t\t\t.append(\"g\")\r\n\t\t\t.attr(\"class\", \"grid\")\r\n\t\t\t.attr(\"transform\", `translate(${margin.left},0)`)\r\n\t\t\t.call(\r\n\t\t\t\td3\r\n\t\t\t\t\t.axisLeft(y)\r\n\t\t\t\t\t.tickSize(-width + margin.left + margin.right)\r\n\t\t\t\t\t.tickFormat(\"\")\r\n\t\t\t);\r\n\r\n\t\t// 添加柱状图\r\n\t\tsvg\r\n\t\t\t.append(\"g\")\r\n\t\t\t.selectAll(\"rect\")\r\n\t\t\t.data(data)\r\n\t\t\t.join(\"rect\")\r\n\t\t\t.attr(\"x\", d => x(d.label))\r\n\t\t\t.attr(\"y\", d => y(d.value))\r\n\t\t\t.attr(\"width\", x.bandwidth())\r\n\t\t\t.attr(\"height\", d => y(0) - y(d.value))\r\n\t\t\t.attr(\"fill\", \"steelblue\")\r\n\t\t\t.attr(\"rx\", 4) // 圆角\r\n\t\t\t.attr(\"ry\", 4);\r\n\r\n\t\t// 添加数值标签\r\n\t\tsvg\r\n\t\t\t.append(\"g\")\r\n\t\t\t.selectAll(\"text\")\r\n\t\t\t.data(data)\r\n\t\t\t.join(\"text\")\r\n\t\t\t.attr(\"x\", d => x(d.label) + x.bandwidth() / 2)\r\n\t\t\t.attr(\"y\", d => y(d.value) - 5)\r\n\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t.text(d => d.value);\r\n\r\n\t\t// 添加标题\r\n\t\tsvg\r\n\t\t\t.append(\"text\")\r\n\t\t\t.attr(\"x\", width / 2)\r\n\t\t\t.attr(\"y\", margin.top / 2)\r\n\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t.style(\"font-size\", \"16px\")\r\n\t\t\t.style(\"font-weight\", \"bold\")\r\n\t\t\t.text(\"数据对比图表\");\r\n\r\n\t\t// 添加X轴标签\r\n\t\tsvg\r\n\t\t\t.append(\"text\")\r\n\t\t\t.attr(\"x\", width / 2)\r\n\t\t\t.attr(\"y\", height - 10)\r\n\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t.text(\"分类\");\r\n\r\n\t\t// 添加Y轴标签\r\n\t\tsvg\r\n\t\t\t.append(\"text\")\r\n\t\t\t.attr(\"transform\", \"rotate(-90)\")\r\n\t\t\t.attr(\"y\", 10)\r\n\t\t\t.attr(\"x\", -height / 2)\r\n\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t.text(\"数值\");\r\n\t};\r\n\r\n\tconst renderLineChart = () => {\r\n\t\tconst width = 800;\r\n\t\tconst height = 500;\r\n\t\tconst margin = { top: 40, right: 40, bottom: 60, left: 60 };\r\n\r\n\t\tconst svg = d3\r\n\t\t\t.select(chartContainer.value)\r\n\t\t\t.append(\"svg\")\r\n\t\t\t.attr(\"width\", width)\r\n\t\t\t.attr(\"height\", height);\r\n\r\n\t\tconst data = props.field\r\n\t\t\t.map(item => ({\r\n\t\t\t\tlabel: item.label || item.name,\r\n\t\t\t\tvalue: +item.value,\r\n\t\t\t\tdate: item.date ? new Date(item.date) : null\r\n\t\t\t}))\r\n\t\t\t.sort((a, b) => a.date - b.date);\r\n\r\n\t\tconst x = data[0].date\r\n\t\t\t? d3\r\n\t\t\t\t\t.scaleTime()\r\n\t\t\t\t\t.domain(d3.extent(data, d => d.date))\r\n\t\t\t\t\t.range([margin.left, width - margin.right])\r\n\t\t\t: d3\r\n\t\t\t\t\t.scaleBand()\r\n\t\t\t\t\t.domain(data.map(d => d.label))\r\n\t\t\t\t\t.range([margin.left, width - margin.right])\r\n\t\t\t\t\t.padding(0.2);\r\n\r\n\t\tconst y = d3\r\n\t\t\t.scaleLinear()\r\n\t\t\t.domain([0, d3.max(data, d => d.value)])\r\n\t\t\t.nice()\r\n\t\t\t.range([height - margin.bottom, margin.top]);\r\n\r\n\t\t// 添加坐标轴\r\n\t\tsvg\r\n\t\t\t.append(\"g\")\r\n\t\t\t.attr(\"class\", \"x-axis\")\r\n\t\t\t.attr(\"transform\", `translate(0,${height - margin.bottom})`)\r\n\t\t\t.call(d3.axisBottom(x));\r\n\r\n\t\tsvg\r\n\t\t\t.append(\"g\")\r\n\t\t\t.attr(\"class\", \"y-axis\")\r\n\t\t\t.attr(\"transform\", `translate(${margin.left},0)`)\r\n\t\t\t.call(d3.axisLeft(y));\r\n\r\n\t\t// 添加网格线\r\n\t\tsvg\r\n\t\t\t.append(\"g\")\r\n\t\t\t.attr(\"class\", \"grid\")\r\n\t\t\t.attr(\"transform\", `translate(${margin.left},0)`)\r\n\t\t\t.call(\r\n\t\t\t\td3\r\n\t\t\t\t\t.axisLeft(y)\r\n\t\t\t\t\t.tickSize(-width + margin.left + margin.right)\r\n\t\t\t\t\t.tickFormat(\"\")\r\n\t\t\t);\r\n\r\n\t\t// 创建折线生成器\r\n\t\tconst line = d3\r\n\t\t\t.line()\r\n\t\t\t.x(d => (data[0].date ? x(d.date) : x(d.label) + x.bandwidth() / 2))\r\n\t\t\t.y(d => y(d.value));\r\n\r\n\t\t// 添加折线\r\n\t\tsvg\r\n\t\t\t.append(\"path\")\r\n\t\t\t.datum(data)\r\n\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t.attr(\"stroke\", \"steelblue\")\r\n\t\t\t.attr(\"stroke-width\", 2)\r\n\t\t\t.attr(\"d\", line);\r\n\r\n\t\t// 添加数据点\r\n\t\tsvg\r\n\t\t\t.append(\"g\")\r\n\t\t\t.selectAll(\"circle\")\r\n\t\t\t.data(data)\r\n\t\t\t.join(\"circle\")\r\n\t\t\t.attr(\"cx\", d =>\r\n\t\t\t\tdata[0].date ? x(d.date) : x(d.label) + x.bandwidth() / 2\r\n\t\t\t)\r\n\t\t\t.attr(\"cy\", d => y(d.value))\r\n\t\t\t.attr(\"r\", 5)\r\n\t\t\t.attr(\"fill\", \"steelblue\");\r\n\r\n\t\t// 添加数值标签\r\n\t\tsvg\r\n\t\t\t.append(\"g\")\r\n\t\t\t.selectAll(\"text\")\r\n\t\t\t.data(data)\r\n\t\t\t.join(\"text\")\r\n\t\t\t.attr(\"x\", d =>\r\n\t\t\t\tdata[0].date ? x(d.date) : x(d.label) + x.bandwidth() / 2\r\n\t\t\t)\r\n\t\t\t.attr(\"y\", d => y(d.value) - 10)\r\n\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t.text(d => d.value);\r\n\r\n\t\t// 添加标题\r\n\t\tsvg\r\n\t\t\t.append(\"text\")\r\n\t\t\t.attr(\"x\", width / 2)\r\n\t\t\t.attr(\"y\", margin.top / 2)\r\n\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t.style(\"font-size\", \"16px\")\r\n\t\t\t.style(\"font-weight\", \"bold\")\r\n\t\t\t.text(\"趋势变化图表\");\r\n\r\n\t\t// 添加X轴标签\r\n\t\tsvg\r\n\t\t\t.append(\"text\")\r\n\t\t\t.attr(\"x\", width / 2)\r\n\t\t\t.attr(\"y\", height - 10)\r\n\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t.text(data[0].date ? \"时间\" : \"分类\");\r\n\r\n\t\t// 添加Y轴标签\r\n\t\tsvg\r\n\t\t\t.append(\"text\")\r\n\t\t\t.attr(\"transform\", \"rotate(-90)\")\r\n\t\t\t.attr(\"y\", 10)\r\n\t\t\t.attr(\"x\", -height / 2)\r\n\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t.text(\"数值\");\r\n\t};\r\n\r\n\tconst renderPieChart = () => {\r\n\t\tconst width = 600;\r\n\t\tconst height = 500;\r\n\t\tconst radius = Math.min(width, height) / 2 - 40;\r\n\r\n\t\tconst svg = d3\r\n\t\t\t.select(chartContainer.value)\r\n\t\t\t.append(\"svg\")\r\n\t\t\t.attr(\"width\", width)\r\n\t\t\t.attr(\"height\", height)\r\n\t\t\t.append(\"g\")\r\n\t\t\t.attr(\"transform\", `translate(${width / 2},${height / 2})`);\r\n\r\n\t\tconst data = props.field.map(item => ({\r\n\t\t\tlabel: item.label || item.name,\r\n\t\t\tvalue: +item.value\r\n\t\t}));\r\n\r\n\t\tconst color = d3\r\n\t\t\t.scaleOrdinal()\r\n\t\t\t.domain(data.map(d => d.label))\r\n\t\t\t.range(d3.schemeCategory10);\r\n\r\n\t\tconst pie = d3.pie().value(d => d.value);\r\n\r\n\t\tconst arc = d3.arc().innerRadius(0).outerRadius(radius);\r\n\r\n\t\tconst arcs = svg\r\n\t\t\t.selectAll(\"arc\")\r\n\t\t\t.data(pie(data))\r\n\t\t\t.enter()\r\n\t\t\t.append(\"g\")\r\n\t\t\t.attr(\"class\", \"arc\");\r\n\r\n\t\t// 添加扇形\r\n\t\tarcs\r\n\t\t\t.append(\"path\")\r\n\t\t\t.attr(\"d\", arc)\r\n\t\t\t.attr(\"fill\", d => color(d.data.label))\r\n\t\t\t.attr(\"stroke\", \"white\")\r\n\t\t\t.attr(\"stroke-width\", 2);\r\n\r\n\t\t// 添加标签\r\n\t\tarcs\r\n\t\t\t.append(\"text\")\r\n\t\t\t.attr(\"transform\", d => `translate(${arc.centroid(d)})`)\r\n\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t.text(d => d.data.value)\r\n\t\t\t.style(\"font-size\", \"12px\")\r\n\t\t\t.style(\"fill\", \"white\");\r\n\r\n\t\t// 添加图例\r\n\t\tconst legend = svg\r\n\t\t\t.selectAll(\".legend\")\r\n\t\t\t.data(data)\r\n\t\t\t.enter()\r\n\t\t\t.append(\"g\")\r\n\t\t\t.attr(\"class\", \"legend\")\r\n\t\t\t.attr(\r\n\t\t\t\t\"transform\",\r\n\t\t\t\t(d, i) => `translate(${radius + 30},${i * 20 - radius / 2})`\r\n\t\t\t);\r\n\r\n\t\tlegend\r\n\t\t\t.append(\"rect\")\r\n\t\t\t.attr(\"width\", 18)\r\n\t\t\t.attr(\"height\", 18)\r\n\t\t\t.attr(\"fill\", d => color(d.label));\r\n\r\n\t\tlegend\r\n\t\t\t.append(\"text\")\r\n\t\t\t.attr(\"x\", 24)\r\n\t\t\t.attr(\"y\", 9)\r\n\t\t\t.attr(\"dy\", \".35em\")\r\n\t\t\t.text(d => `${d.label}: ${d.value}`)\r\n\t\t\t.style(\"font-size\", \"12px\");\r\n\r\n\t\t// 添加标题\r\n\t\tsvg\r\n\t\t\t.append(\"text\")\r\n\t\t\t.attr(\"y\", -height / 2 + 20)\r\n\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t.style(\"font-size\", \"16px\")\r\n\t\t\t.style(\"font-weight\", \"bold\")\r\n\t\t\t.text(\"比例分布图表\");\r\n\t};\r\n\r\n\tconst renderTextOnly = () => {\r\n\t\tconst container = d3.select(chartContainer.value);\r\n\t\tcontainer.html(\"\");\r\n\r\n\t\tconst data = props.field;\r\n\r\n\t\tcontainer\r\n\t\t\t.append(\"div\")\r\n\t\t\t.style(\"font-size\", \"16px\")\r\n\t\t\t.style(\"font-weight\", \"bold\")\r\n\t\t\t.style(\"margin-bottom\", \"20px\")\r\n\t\t\t.style(\"text-align\", \"center\")\r\n\t\t\t.text(\"文本数据\");\r\n\r\n\t\tconst table = container\r\n\t\t\t.append(\"table\")\r\n\t\t\t.style(\"width\", \"100%\")\r\n\t\t\t.style(\"border-collapse\", \"collapse\");\r\n\r\n\t\tconst thead = table.append(\"thead\");\r\n\t\tconst tbody = table.append(\"tbody\");\r\n\r\n\t\tthead\r\n\t\t\t.append(\"tr\")\r\n\t\t\t.selectAll(\"th\")\r\n\t\t\t.data([\"项目\", \"值\"])\r\n\t\t\t.enter()\r\n\t\t\t.append(\"th\")\r\n\t\t\t.style(\"padding\", \"8px\")\r\n\t\t\t.style(\"border\", \"1px solid #ddd\")\r\n\t\t\t.style(\"background-color\", \"#f2f2f2\")\r\n\t\t\t.text(d => d);\r\n\r\n\t\tconst rows = tbody.selectAll(\"tr\").data(data).enter().append(\"tr\");\r\n\r\n\t\trows\r\n\t\t\t.append(\"td\")\r\n\t\t\t.style(\"padding\", \"8px\")\r\n\t\t\t.style(\"border\", \"1px solid #ddd\")\r\n\t\t\t.text(d => d.label || d.name);\r\n\r\n\t\trows\r\n\t\t\t.append(\"td\")\r\n\t\t\t.style(\"padding\", \"8px\")\r\n\t\t\t.style(\"border\", \"1px solid #ddd\")\r\n\t\t\t.text(d => d.value);\r\n\t};\r\n\r\n\tonMounted(renderChart);\r\n\twatch(() => props.field, renderChart);\r\n</script>\r\n\r\n<style scoped>\r\n\t.full-chart {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t}\r\n</style>\r\n\r\n<style>\r\n\t.full-chart .x-axis text,\r\n\t.full-chart .y-axis text {\r\n\t\tfont-size: 12px;\r\n\t}\r\n\r\n\t.full-chart .grid line {\r\n\t\tstroke: #eee;\r\n\t\tstroke-dasharray: 2, 2;\r\n\t\tshape-rendering: crispEdges;\r\n\t}\r\n\r\n\t.full-chart .grid path {\r\n\t\tstroke-width: 0;\r\n\t}\r\n\r\n\t.full-chart .arc text {\r\n\t\tpointer-events: none;\r\n\t}\r\n\r\n\t.full-chart table {\r\n\t\tmargin: 0 auto;\r\n\t\tmax-width: 80%;\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,KAAK,EAAC,YAAY;EAACC,GAAG,EAAC;;;uBAA5BC,mBAAA,CAAmD,OAAnDC,UAAmD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}