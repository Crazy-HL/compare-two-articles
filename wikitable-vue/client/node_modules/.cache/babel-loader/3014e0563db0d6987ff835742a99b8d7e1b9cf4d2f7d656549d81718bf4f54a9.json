{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-0c150cb4\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  ref: \"chartContainer\",\n  class: \"sparkline-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","_createElementBlock","_hoisted_1"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\SparklineChart.vue"],"sourcesContent":["<template>\r\n\t<div ref=\"chartContainer\" class=\"sparkline-container\"></div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, watch, computed } from \"vue\";\r\n\timport * as d3 from \"d3\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdata: {\r\n\t\t\ttype: Array,\r\n\t\t\tdefault: () => [],\r\n\t\t\tvalidator: value => {\r\n\t\t\t\tif (!Array.isArray(value)) return false;\r\n\t\t\t\treturn value.every(\r\n\t\t\t\t\titem =>\r\n\t\t\t\t\t\titem &&\r\n\t\t\t\t\t\ttypeof item.year !== \"undefined\" &&\r\n\t\t\t\t\t\ttypeof item.value !== \"undefined\"\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t},\r\n\t\twidth: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 180\r\n\t\t},\r\n\t\theight: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 80\r\n\t\t},\r\n\t\tmargin: {\r\n\t\t\ttype: Object,\r\n\t\t\tdefault: () => ({ top: 5, right: 5, bottom: 5, left: 5 })\r\n\t\t},\r\n\t\tlineColor: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: \"#4a90e2\"\r\n\t\t},\r\n\t\tdotColor: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: \"#4a90e2\"\r\n\t\t},\r\n\t\tshowTooltip: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true\r\n\t\t},\r\n\t\tshowDots: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true\r\n\t\t},\r\n\t\tcurveType: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: \"curveMonotoneX\",\r\n\t\t\tvalidator: value =>\r\n\t\t\t\t[\r\n\t\t\t\t\t\"curveLinear\",\r\n\t\t\t\t\t\"curveStep\",\r\n\t\t\t\t\t\"curveBasis\",\r\n\t\t\t\t\t\"curveCardinal\",\r\n\t\t\t\t\t\"curveMonotoneX\",\r\n\t\t\t\t\t\"curveCatmullRom\"\r\n\t\t\t\t].includes(value)\r\n\t\t}\r\n\t});\r\n\r\n\tconst chartContainer = ref(null);\r\n\tconst tooltip = ref(null);\r\n\r\n\tconst innerWidth = computed(\r\n\t\t() => props.width - props.margin.left - props.margin.right\r\n\t);\r\n\tconst innerHeight = computed(\r\n\t\t() => props.height - props.margin.top - props.margin.bottom\r\n\t);\r\n\r\n\tconst sortedData = computed(() => {\r\n\t\tif (!Array.isArray(props.data)) return [];\r\n\t\treturn [...props.data]\r\n\t\t\t.filter(item => item && !isNaN(item.year) && !isNaN(item.value))\r\n\t\t\t.sort((a, b) => a.year - b.year);\r\n\t});\r\n\r\n\tconst xScale = computed(() => {\r\n\t\tif (sortedData.value.length < 2) return null;\r\n\r\n\t\tconst years = sortedData.value.map(d => d.year);\r\n\t\treturn d3\r\n\t\t\t.scaleLinear()\r\n\t\t\t.domain(d3.extent(years))\r\n\t\t\t.range([0, innerWidth.value]);\r\n\t});\r\n\r\n\tconst yScale = computed(() => {\r\n\t\tif (sortedData.value.length === 0) return null;\r\n\r\n\t\tconst values = sortedData.value.map(d => d.value);\r\n\t\tconst minValue = d3.min(values);\r\n\t\tconst maxValue = d3.max(values);\r\n\t\tconst padding = (maxValue - minValue) * 0.1; // 10% padding\r\n\r\n\t\treturn d3\r\n\t\t\t.scaleLinear()\r\n\t\t\t.domain([minValue - padding, maxValue + padding])\r\n\t\t\t.range([innerHeight.value, 0]);\r\n\t});\r\n\r\n\tconst lineGenerator = computed(() => {\r\n\t\tif (!xScale.value || !yScale.value) return null;\r\n\r\n\t\treturn d3\r\n\t\t\t.line()\r\n\t\t\t.x(d => xScale.value(d.year))\r\n\t\t\t.y(d => yScale.value(d.value))\r\n\t\t\t.curve(d3[props.curveType]);\r\n\t});\r\n\r\n\tconst areaGenerator = computed(() => {\r\n\t\tif (!xScale.value || !yScale.value) return null;\r\n\r\n\t\treturn d3\r\n\t\t\t.area()\r\n\t\t\t.x(d => xScale.value(d.year))\r\n\t\t\t.y0(innerHeight.value)\r\n\t\t\t.y1(d => yScale.value(d.value))\r\n\t\t\t.curve(d3[props.curveType]);\r\n\t});\r\n\r\n\tconst formatValue = value => {\r\n\t\tif (value >= 1000000) return `$${(value / 1000000).toFixed(1)}M`;\r\n\t\tif (value >= 1000) return `$${(value / 1000).toFixed(1)}K`;\r\n\t\treturn value.toLocaleString();\r\n\t};\r\n\r\n\tconst initChart = () => {\r\n\t\tif (!chartContainer.value) return;\r\n\r\n\t\t// Clear previous chart\r\n\t\td3.select(chartContainer.value).selectAll(\"*\").remove();\r\n\r\n\t\t// Create SVG container\r\n\t\tconst svg = d3\r\n\t\t\t.select(chartContainer.value)\r\n\t\t\t.append(\"svg\")\r\n\t\t\t.attr(\"width\", props.width)\r\n\t\t\t.attr(\"height\", props.height)\r\n\t\t\t.attr(\"viewBox\", `0 0 ${props.width} ${props.height}`)\r\n\t\t\t.attr(\"preserveAspectRatio\", \"xMidYMid meet\");\r\n\r\n\t\t// Add clip path to prevent drawing outside the chart area\r\n\t\tsvg\r\n\t\t\t.append(\"defs\")\r\n\t\t\t.append(\"clipPath\")\r\n\t\t\t.attr(\"id\", \"chart-clip\")\r\n\t\t\t.append(\"rect\")\r\n\t\t\t.attr(\"width\", innerWidth.value)\r\n\t\t\t.attr(\"height\", innerHeight.value);\r\n\r\n\t\t// Create chart group with margins\r\n\t\tconst chart = svg\r\n\t\t\t.append(\"g\")\r\n\t\t\t.attr(\"transform\", `translate(${props.margin.left},${props.margin.top})`);\r\n\r\n\t\t// Draw area (optional)\r\n\t\tchart\r\n\t\t\t.append(\"path\")\r\n\t\t\t.attr(\"class\", \"sparkline-area\")\r\n\t\t\t.attr(\"d\", areaGenerator.value(sortedData.value))\r\n\t\t\t.attr(\"fill\", props.lineColor)\r\n\t\t\t.attr(\"fill-opacity\", 0.1)\r\n\t\t\t.attr(\"clip-path\", \"url(#chart-clip)\");\r\n\r\n\t\t// Draw line\r\n\t\tchart\r\n\t\t\t.append(\"path\")\r\n\t\t\t.attr(\"class\", \"sparkline-line\")\r\n\t\t\t.attr(\"d\", lineGenerator.value(sortedData.value))\r\n\t\t\t.attr(\"stroke\", props.lineColor)\r\n\t\t\t.attr(\"stroke-width\", 2)\r\n\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t.attr(\"clip-path\", \"url(#chart-clip)\");\r\n\r\n\t\t// Draw dots\r\n\t\tif (props.showDots) {\r\n\t\t\tchart\r\n\t\t\t\t.selectAll(\".sparkline-dot\")\r\n\t\t\t\t.data(sortedData.value)\r\n\t\t\t\t.enter()\r\n\t\t\t\t.append(\"circle\")\r\n\t\t\t\t.attr(\"class\", \"sparkline-dot\")\r\n\t\t\t\t.attr(\"cx\", d => xScale.value(d.year))\r\n\t\t\t\t.attr(\"cy\", d => yScale.value(d.value))\r\n\t\t\t\t.attr(\"r\", 3)\r\n\t\t\t\t.attr(\"fill\", props.dotColor)\r\n\t\t\t\t.attr(\"clip-path\", \"url(#chart-clip)\");\r\n\t\t}\r\n\r\n\t\t// Add tooltip container\r\n\t\tif (props.showTooltip) {\r\n\t\t\ttooltip.value = chart\r\n\t\t\t\t.append(\"g\")\r\n\t\t\t\t.attr(\"class\", \"tooltip\")\r\n\t\t\t\t.style(\"opacity\", 0)\r\n\t\t\t\t.attr(\"pointer-events\", \"none\");\r\n\r\n\t\t\ttooltip.value\r\n\t\t\t\t.append(\"rect\")\r\n\t\t\t\t.attr(\"class\", \"tooltip-box\")\r\n\t\t\t\t.attr(\"rx\", 4)\r\n\t\t\t\t.attr(\"ry\", 4);\r\n\r\n\t\t\ttooltip.value\r\n\t\t\t\t.append(\"text\")\r\n\t\t\t\t.attr(\"class\", \"tooltip-year\")\r\n\t\t\t\t.attr(\"x\", 6)\r\n\t\t\t\t.attr(\"y\", 18);\r\n\r\n\t\t\ttooltip.value\r\n\t\t\t\t.append(\"text\")\r\n\t\t\t\t.attr(\"class\", \"tooltip-value\")\r\n\t\t\t\t.attr(\"x\", 6)\r\n\t\t\t\t.attr(\"y\", 36);\r\n\r\n\t\t\t// Add invisible overlay for mouse events\r\n\t\t\tchart\r\n\t\t\t\t.append(\"rect\")\r\n\t\t\t\t.attr(\"class\", \"overlay\")\r\n\t\t\t\t.attr(\"width\", innerWidth.value)\r\n\t\t\t\t.attr(\"height\", innerHeight.value)\r\n\t\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t\t.attr(\"pointer-events\", \"all\")\r\n\t\t\t\t.on(\"mouseover\", () => tooltip.value.style(\"opacity\", 1))\r\n\t\t\t\t.on(\"mouseout\", () => tooltip.value.style(\"opacity\", 0))\r\n\t\t\t\t.on(\"mousemove\", mousemove);\r\n\r\n\t\t\t// Add vertical reference line\r\n\t\t\tconst referenceLine = chart\r\n\t\t\t\t.append(\"line\")\r\n\t\t\t\t.attr(\"class\", \"reference-line\")\r\n\t\t\t\t.attr(\"stroke\", \"#64748b\")\r\n\t\t\t\t.attr(\"stroke-width\", 1)\r\n\t\t\t\t.attr(\"stroke-dasharray\", \"2,2\")\r\n\t\t\t\t.attr(\"y1\", 0)\r\n\t\t\t\t.attr(\"y2\", innerHeight.value)\r\n\t\t\t\t.style(\"opacity\", 0);\r\n\r\n\t\t\tfunction mousemove(event) {\r\n\t\t\t\tconst [mouseX] = d3.pointer(event);\r\n\t\t\t\tconst year = xScale.value.invert(mouseX);\r\n\r\n\t\t\t\t// Find closest data point\r\n\t\t\t\tconst closest = d3.least(sortedData.value, d =>\r\n\t\t\t\t\tMath.abs(xScale.value(d.year) - mouseX)\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (!closest) return;\r\n\r\n\t\t\t\t// Position reference line\r\n\t\t\t\treferenceLine\r\n\t\t\t\t\t.attr(\"x1\", xScale.value(closest.year))\r\n\t\t\t\t\t.attr(\"x2\", xScale.value(closest.year))\r\n\t\t\t\t\t.style(\"opacity\", 1);\r\n\r\n\t\t\t\t// Update tooltip content\r\n\t\t\t\ttooltip.value.select(\".tooltip-year\").text(`Year: ${closest.year}`);\r\n\t\t\t\ttooltip.value\r\n\t\t\t\t\t.select(\".tooltip-value\")\r\n\t\t\t\t\t.text(`Value: ${formatValue(closest.value)}`);\r\n\r\n\t\t\t\t// Measure tooltip size\r\n\t\t\t\tconst tooltipText = tooltip.value.node().querySelectorAll(\"text\");\r\n\t\t\t\tconst bbox = tooltipText[0].getBBox();\r\n\t\t\t\tconst bbox2 = tooltipText[1].getBBox();\r\n\t\t\t\tconst tooltipWidth = Math.max(bbox.width, bbox2.width) + 12;\r\n\t\t\t\tconst tooltipHeight = bbox.height + bbox2.height + 16;\r\n\r\n\t\t\t\t// Position tooltip\r\n\t\t\t\tlet x = xScale.value(closest.year) + 10;\r\n\t\t\t\tlet y = yScale.value(closest.value) - tooltipHeight / 2;\r\n\r\n\t\t\t\t// Keep tooltip inside chart bounds\r\n\t\t\t\tif (x + tooltipWidth > innerWidth.value) {\r\n\t\t\t\t\tx = xScale.value(closest.year) - tooltipWidth - 10;\r\n\t\t\t\t}\r\n\t\t\t\tif (y < 0) y = 0;\r\n\t\t\t\tif (y + tooltipHeight > innerHeight.value) {\r\n\t\t\t\t\ty = innerHeight.value - tooltipHeight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Update tooltip position and size\r\n\t\t\t\ttooltip.value\r\n\t\t\t\t\t.select(\".tooltip-box\")\r\n\t\t\t\t\t.attr(\"x\", x)\r\n\t\t\t\t\t.attr(\"y\", y)\r\n\t\t\t\t\t.attr(\"width\", tooltipWidth)\r\n\t\t\t\t\t.attr(\"height\", tooltipHeight);\r\n\r\n\t\t\t\ttooltip.value\r\n\t\t\t\t\t.select(\".tooltip-year\")\r\n\t\t\t\t\t.attr(\"x\", x + 6)\r\n\t\t\t\t\t.attr(\"y\", y + 18);\r\n\r\n\t\t\t\ttooltip.value\r\n\t\t\t\t\t.select(\".tooltip-value\")\r\n\t\t\t\t\t.attr(\"x\", x + 6)\r\n\t\t\t\t\t.attr(\"y\", y + 36);\r\n\r\n\t\t\t\ttooltip.value.attr(\"transform\", `translate(0,0)`);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Watch for data changes and redraw\r\n\twatch(\r\n\t\t() => [props.data, props.width, props.height],\r\n\t\t() => {\r\n\t\t\tinitChart();\r\n\t\t},\r\n\t\t{ deep: true }\r\n\t);\r\n\r\n\t// Initialize chart on mount\r\n\tonMounted(initChart);\r\n</script>\r\n\r\n<style scoped>\r\n\t.sparkline-container {\r\n\t\tdisplay: inline-block;\r\n\t\tfont-family: system-ui, -apple-system, sans-serif;\r\n\t}\r\n\r\n\t.sparkline-container :deep(.tooltip-box) {\r\n\t\tfill: white;\r\n\t\tstroke: #e2e8f0;\r\n\t\tstroke-width: 1;\r\n\t\tfilter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));\r\n\t}\r\n\r\n\t.sparkline-container :deep(.tooltip-year) {\r\n\t\tfont-size: 12px;\r\n\t\tfont-weight: bold;\r\n\t\tfill: #334155;\r\n\t}\r\n\r\n\t.sparkline-container :deep(.tooltip-value) {\r\n\t\tfont-size: 12px;\r\n\t\tfill: #1e40af;\r\n\t\tfont-weight: 600;\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,GAAG,EAAC,gBAAgB;EAACC,KAAK,EAAC;;;uBAAhCC,mBAAA,CAA4D,OAA5DC,UAA4D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}