{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, createVNode as _createVNode, withModifiers as _withModifiers, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-ea6f3360\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"compare-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"initial-loading\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"loading-spinner\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"正在准备数据对比...\", -1 /* HOISTED */));\nconst _hoisted_5 = [_hoisted_3, _hoisted_4];\nconst _hoisted_6 = {\n  class: \"comparison-grid\"\n};\nconst _hoisted_7 = {\n  class: \"header left-column\"\n};\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"header middle-column\"\n}, \"对比属性\", -1 /* HOISTED */));\nconst _hoisted_9 = {\n  class: \"header right-column\"\n};\nconst _hoisted_10 = [\"onMouseover\", \"onClick\"];\nconst _hoisted_11 = [\"onMouseover\"];\nconst _hoisted_12 = {\n  class: \"field-name\"\n};\nconst _hoisted_13 = {\n  class: \"field-type\"\n};\nconst _hoisted_14 = {\n  class: \"icon-actions\"\n};\nconst _hoisted_15 = [\"onClick\"];\nconst _hoisted_16 = [\"onClick\"];\nconst _hoisted_17 = [\"onMouseover\", \"onClick\"];\nconst _hoisted_18 = {\n  class: \"modal-content\"\n};\nconst _hoisted_19 = {\n  class: \"chart-container\"\n};\nconst _hoisted_20 = {\n  key: 0,\n  class: \"chart-legend\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 加载状态提示 \"), $setup.isInitializing ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [..._hoisted_5])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 排序热力图开关 \"), _createCommentVNode(\" <div class=\\\"heatmap-control\\\">\\r\\n\\t\\t\\t<button @click=\\\"showSortingHeatmap = !showSortingHeatmap\\\">\\r\\n\\t\\t\\t\\t{{ showSortingHeatmap ? \\\"隐藏\\\" : \\\"显示\\\" }}排序热力图\\r\\n\\t\\t\\t</button>\\r\\n\\t\\t</div> \"), _createCommentVNode(\" 排序热力图可视化 \"), _createCommentVNode(\" <div class=\\\"sorting-heatmap\\\" v-if=\\\"showSortingHeatmap\\\">\\r\\n\\t\\t\\t<div class=\\\"heatmap-header\\\">\\r\\n\\t\\t\\t\\t<span>排序</span>\\r\\n\\t\\t\\t\\t<span>属性</span>\\r\\n\\t\\t\\t\\t<span>类型</span>\\r\\n\\t\\t\\t\\t<span>差异分数</span>\\r\\n\\t\\t\\t\\t<span>权重</span>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<div\\r\\n\\t\\t\\t\\tclass=\\\"heatmap-row\\\"\\r\\n\\t\\t\\t\\tv-for=\\\"(field, index) in sortedFieldsWithScores\\\"\\r\\n\\t\\t\\t\\t:key=\\\"field.key\\\"\\r\\n\\t\\t\\t\\t:style=\\\"{\\r\\n\\t\\t\\t\\t\\tbackgroundColor: getHeatmapColor(field.score),\\r\\n\\t\\t\\t\\t\\tborderLeft: `4px solid ${getHeatmapColor(field.score)}`\\r\\n\\t\\t\\t\\t}\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"field-rank\\\">{{ index + 1 }}</span>\\r\\n\\t\\t\\t\\t<span class=\\\"field-name\\\">{{ field.key }}</span>\\r\\n\\t\\t\\t\\t<span class=\\\"field-type\\\">{{ field.typeLabel }}</span>\\r\\n\\t\\t\\t\\t<span class=\\\"field-score\\\">{{ field.score.toFixed(1) }}</span>\\r\\n\\t\\t\\t\\t<span class=\\\"field-weight\\\">{{\\r\\n\\t\\t\\t\\t\\tgetFieldWeight(field.key).toFixed(1)\\r\\n\\t\\t\\t\\t}}</span>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div> \"), _createCommentVNode(\" 主对比表格 \"), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, _toDisplayString($setup.leftInfobox.title), 1 /* TEXT */), _hoisted_8, _createElementVNode(\"div\", _hoisted_9, _toDisplayString($setup.rightInfobox.title), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.sortedFields, field => {\n    return _openBlock(), _createElementBlock(_Fragment, {\n      key: field.key\n    }, [_createElementVNode(\"div\", {\n      class: \"cell left-column\",\n      onMouseover: $event => $setup.hoverInfobox($setup.leftInfobox, field.key, 'left'),\n      onMouseout: _cache[0] || (_cache[0] = $event => $setup.unhoverInfobox('left')),\n      onClick: $event => $setup.showFullChart($setup.leftInfobox, field)\n    }, [_createVNode($setup[\"SimpleChart\"], {\n      field: $setup.getField($setup.leftInfobox, field.key),\n      type: field.type,\n      visualization: field.visualization,\n      \"y-axis-max\": field.globalMaxValue\n    }, null, 8 /* PROPS */, [\"field\", \"type\", \"visualization\", \"y-axis-max\"])], 40 /* PROPS, NEED_HYDRATION */, _hoisted_10), _createElementVNode(\"div\", {\n      class: \"cell middle-column\",\n      onMouseover: $event => $setup.hoverBothInfoboxes(field.key),\n      onMouseout: _cache[1] || (_cache[1] = $event => $setup.unhoverBothInfoboxes())\n    }, [_createElementVNode(\"div\", _hoisted_12, _toDisplayString(field.key), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_13, _toDisplayString(field.typeLabel), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"span\", {\n      class: \"icon-btn compare\",\n      title: \"对比分析\",\n      onClick: $event => $setup.handleMiddleColumnClick(field)\n    }, \" ⚖️ \", 8 /* PROPS */, _hoisted_15), _createElementVNode(\"span\", {\n      class: \"icon-btn merge\",\n      title: \"合并图表\",\n      onClick: $event => $setup.showCombinedChart(field)\n    }, \" 📊 \", 8 /* PROPS */, _hoisted_16)])], 40 /* PROPS, NEED_HYDRATION */, _hoisted_11), _createElementVNode(\"div\", {\n      class: \"cell right-column\",\n      onMouseover: $event => $setup.hoverInfobox($setup.rightInfobox, field.key, 'right'),\n      onMouseout: _cache[2] || (_cache[2] = $event => $setup.unhoverInfobox('right')),\n      onClick: $event => $setup.showFullChart($setup.rightInfobox, field)\n    }, [_createVNode($setup[\"SimpleChart\"], {\n      field: $setup.getField($setup.rightInfobox, field.key),\n      type: field.type,\n      visualization: field.visualization,\n      \"y-axis-max\": field.globalMaxValue\n    }, null, 8 /* PROPS */, [\"field\", \"type\", \"visualization\", \"y-axis-max\"])], 40 /* PROPS, NEED_HYDRATION */, _hoisted_17)], 64 /* STABLE_FRAGMENT */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" 全屏图表模态框 \"), $setup.showFullChartModal ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 1,\n    class: \"full-chart-modal\",\n    onClick: _withModifiers($setup.closeFullChart, [\"self\"])\n  }, [_createElementVNode(\"div\", _hoisted_18, [_createElementVNode(\"button\", {\n    class: \"close-btn\",\n    onClick: $setup.closeFullChart\n  }, \"×\"), _createElementVNode(\"h3\", null, _toDisplayString($setup.currentChart.title) + \" - \" + _toDisplayString($setup.currentChart.field.key), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_19, [_createVNode($setup[\"FullChart\"], {\n    field: $setup.currentChart.data,\n    type: $setup.currentChart.field.type,\n    visualization: $setup.currentChart.field.visualization\n  }, null, 8 /* PROPS */, [\"field\", \"type\", \"visualization\"])]), $setup.currentChart.field.legend ? (_openBlock(), _createElementBlock(\"div\", _hoisted_20, _toDisplayString($setup.currentChart.field.legend), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementVNode","_hoisted_3","_hoisted_4","_createElementBlock","_hoisted_1","_createCommentVNode","$setup","isInitializing","_hoisted_2","_hoisted_5","_hoisted_6","_hoisted_7","_toDisplayString","leftInfobox","title","_hoisted_8","_hoisted_9","rightInfobox","_Fragment","_renderList","sortedFields","field","onMouseover","$event","hoverInfobox","onMouseout","_cache","unhoverInfobox","onClick","showFullChart","_createVNode","getField","type","visualization","globalMaxValue","_hoisted_10","hoverBothInfoboxes","unhoverBothInfoboxes","_hoisted_12","_hoisted_13","typeLabel","_hoisted_14","handleMiddleColumnClick","_hoisted_15","showCombinedChart","_hoisted_16","_hoisted_11","_hoisted_17","showFullChartModal","_withModifiers","closeFullChart","_hoisted_18","currentChart","_hoisted_19","data","legend","_hoisted_20"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\CompareTable.vue"],"sourcesContent":["<template>\r\n\t<div class=\"compare-container\">\r\n\t\t<!-- 加载状态提示 -->\r\n\t\t<div v-if=\"isInitializing\" class=\"initial-loading\">\r\n\t\t\t<div class=\"loading-spinner\"></div>\r\n\t\t\t<p>正在准备数据对比...</p>\r\n\t\t</div>\r\n\r\n\t\t<!-- 排序热力图开关 -->\r\n\t\t<!-- <div class=\"heatmap-control\">\r\n\t\t\t<button @click=\"showSortingHeatmap = !showSortingHeatmap\">\r\n\t\t\t\t{{ showSortingHeatmap ? \"隐藏\" : \"显示\" }}排序热力图\r\n\t\t\t</button>\r\n\t\t</div> -->\r\n\r\n\t\t<!-- 排序热力图可视化 -->\r\n\t\t<!-- <div class=\"sorting-heatmap\" v-if=\"showSortingHeatmap\">\r\n\t\t\t<div class=\"heatmap-header\">\r\n\t\t\t\t<span>排序</span>\r\n\t\t\t\t<span>属性</span>\r\n\t\t\t\t<span>类型</span>\r\n\t\t\t\t<span>差异分数</span>\r\n\t\t\t\t<span>权重</span>\r\n\t\t\t</div>\r\n\t\t\t<div\r\n\t\t\t\tclass=\"heatmap-row\"\r\n\t\t\t\tv-for=\"(field, index) in sortedFieldsWithScores\"\r\n\t\t\t\t:key=\"field.key\"\r\n\t\t\t\t:style=\"{\r\n\t\t\t\t\tbackgroundColor: getHeatmapColor(field.score),\r\n\t\t\t\t\tborderLeft: `4px solid ${getHeatmapColor(field.score)}`\r\n\t\t\t\t}\">\r\n\t\t\t\t<span class=\"field-rank\">{{ index + 1 }}</span>\r\n\t\t\t\t<span class=\"field-name\">{{ field.key }}</span>\r\n\t\t\t\t<span class=\"field-type\">{{ field.typeLabel }}</span>\r\n\t\t\t\t<span class=\"field-score\">{{ field.score.toFixed(1) }}</span>\r\n\t\t\t\t<span class=\"field-weight\">{{\r\n\t\t\t\t\tgetFieldWeight(field.key).toFixed(1)\r\n\t\t\t\t}}</span>\r\n\t\t\t</div>\r\n\t\t</div> -->\r\n\r\n\t\t<!-- 主对比表格 -->\r\n\t\t<div class=\"comparison-grid\">\r\n\t\t\t<div class=\"header left-column\">\r\n\t\t\t\t{{ leftInfobox.title }}\r\n\t\t\t</div>\r\n\t\t\t<div class=\"header middle-column\">对比属性</div>\r\n\t\t\t<div class=\"header right-column\">\r\n\t\t\t\t{{ rightInfobox.title }}\r\n\t\t\t</div>\r\n\r\n\t\t\t<template v-for=\"field in sortedFields\" :key=\"field.key\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell left-column\"\r\n\t\t\t\t\t@mouseover=\"hoverInfobox(leftInfobox, field.key, 'left')\"\r\n\t\t\t\t\t@mouseout=\"unhoverInfobox('left')\"\r\n\t\t\t\t\t@click=\"showFullChart(leftInfobox, field)\">\r\n\t\t\t\t\t<SimpleChart\r\n\t\t\t\t\t\t:field=\"getField(leftInfobox, field.key)\"\r\n\t\t\t\t\t\t:type=\"field.type\"\r\n\t\t\t\t\t\t:visualization=\"field.visualization\"\r\n\t\t\t\t\t\t:y-axis-max=\"field.globalMaxValue\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell middle-column\"\r\n\t\t\t\t\t@mouseover=\"hoverBothInfoboxes(field.key)\"\r\n\t\t\t\t\t@mouseout=\"unhoverBothInfoboxes()\">\r\n\t\t\t\t\t<div class=\"field-name\">{{ field.key }}</div>\r\n\t\t\t\t\t<div class=\"field-type\">{{ field.typeLabel }}</div>\r\n\t\t\t\t\t<div class=\"icon-actions\">\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tclass=\"icon-btn compare\"\r\n\t\t\t\t\t\t\ttitle=\"对比分析\"\r\n\t\t\t\t\t\t\t@click=\"handleMiddleColumnClick(field)\">\r\n\t\t\t\t\t\t\t⚖️\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tclass=\"icon-btn merge\"\r\n\t\t\t\t\t\t\ttitle=\"合并图表\"\r\n\t\t\t\t\t\t\t@click=\"showCombinedChart(field)\">\r\n\t\t\t\t\t\t\t📊\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell right-column\"\r\n\t\t\t\t\t@mouseover=\"hoverInfobox(rightInfobox, field.key, 'right')\"\r\n\t\t\t\t\t@mouseout=\"unhoverInfobox('right')\"\r\n\t\t\t\t\t@click=\"showFullChart(rightInfobox, field)\">\r\n\t\t\t\t\t<SimpleChart\r\n\t\t\t\t\t\t:field=\"getField(rightInfobox, field.key)\"\r\n\t\t\t\t\t\t:type=\"field.type\"\r\n\t\t\t\t\t\t:visualization=\"field.visualization\"\r\n\t\t\t\t\t\t:y-axis-max=\"field.globalMaxValue\" />\r\n\t\t\t\t</div>\r\n\t\t\t</template>\r\n\t\t</div>\r\n\r\n\t\t<!-- 全屏图表模态框 -->\r\n\t\t<div\r\n\t\t\tv-if=\"showFullChartModal\"\r\n\t\t\tclass=\"full-chart-modal\"\r\n\t\t\t@click.self=\"closeFullChart\">\r\n\t\t\t<div class=\"modal-content\">\r\n\t\t\t\t<button class=\"close-btn\" @click=\"closeFullChart\">×</button>\r\n\t\t\t\t<h3>{{ currentChart.title }} - {{ currentChart.field.key }}</h3>\r\n\t\t\t\t<div class=\"chart-container\">\r\n\t\t\t\t\t<FullChart\r\n\t\t\t\t\t\t:field=\"currentChart.data\"\r\n\t\t\t\t\t\t:type=\"currentChart.field.type\"\r\n\t\t\t\t\t\t:visualization=\"currentChart.field.visualization\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"chart-legend\" v-if=\"currentChart.field.legend\">\r\n\t\t\t\t\t{{ currentChart.field.legend }}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, onMounted, watch, onUnmounted } from \"vue\";\r\n\timport SimpleChart from \"./SimpleChart.vue\";\r\n\timport FullChart from \"./FullChart.vue\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdiv1RawData: Object,\r\n\t\tdiv3RawData: Object\r\n\t});\r\n\r\n\tconst emit = defineEmits([\"compareAttribute\"]);\r\n\r\n\t// 辅助函数: 将值安全转换为数字\r\n\tconst safeToNumber = value => {\r\n\t\tif (value === null || value === undefined) return 0;\r\n\t\tif (typeof value === \"number\") return value;\r\n\r\n\t\tif (typeof value === \"string\") {\r\n\t\t\tconst yiMatch = value.match(/(-?[\\d.]+)\\s*亿/);\r\n\t\t\tif (yiMatch) return parseFloat(yiMatch[1]) * 100000000;\r\n\r\n\t\t\tconst wanMatch = value.match(/(-?[\\d.]+)\\s*万/);\r\n\t\t\tif (wanMatch) return parseFloat(wanMatch[1]) * 10000;\r\n\r\n\t\t\tconst qianMatch = value.match(/(-?[\\d.]+)\\s*千/);\r\n\t\t\tif (qianMatch) return parseFloat(qianMatch[1]) * 1000;\r\n\r\n\t\t\tconst percentMatch = value.match(/(-?\\d+\\.?\\d*)\\s*%/);\r\n\t\t\tif (percentMatch) return parseFloat(percentMatch[1]);\r\n\r\n\t\t\tconst num = parseFloat(value.replace(/[^\\d.-]/g, \"\"));\r\n\t\t\treturn isNaN(num) ? 0 : num;\r\n\t\t}\r\n\r\n\t\tif (typeof value === \"object\") {\r\n\t\t\treturn safeToNumber(value.value || value.raw);\r\n\t\t}\r\n\t\treturn 0;\r\n\t};\r\n\r\n\t// 状态变量\r\n\tconst leftInfobox = ref({ title: \"\", type: \"\", data: {} });\r\n\tconst rightInfobox = ref({ title: \"\", type: \"\", data: {} });\r\n\tconst showFullChartModal = ref(false);\r\n\tconst currentChart = ref({\r\n\t\ttitle: \"\",\r\n\t\tfield: {},\r\n\t\tdata: []\r\n\t});\r\n\tconst showSortingHeatmap = ref(true);\r\n\tconst isInitializing = ref(true);\r\n\tconst hasAutoCompared = ref(false);\r\n\tconst leftDataLoaded = ref(false);\r\n\tconst rightDataLoaded = ref(false);\r\n\tconst sortedFieldsWithScores = ref([]);\r\n\r\n\t// 可比较字段配置\r\n\tconst COMPARABLE_FIELDS = [\r\n\t\t{\r\n\t\t\tkey: \"GDP\",\r\n\t\t\ttype: \"number\",\r\n\t\t\ttypeLabel: \"数值(美元)\",\r\n\t\t\tvisualization: \"bar-chart\",\r\n\t\t\tlegend: \"国内生产总值（单位：万亿美元）\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Population\",\r\n\t\t\ttype: \"number\",\r\n\t\t\ttypeLabel: \"数值(人)\",\r\n\t\t\tvisualization: \"bar-chart\",\r\n\t\t\tlegend: \"人口数量（单位：亿人）\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"GDP growth\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"line-chart\",\r\n\t\t\tlegend: \"GDP年增长率（%）\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Inflation (CPI)\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"pie-chart\",\r\n\t\t\tlegend: \"消费者价格指数变化\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"GDP rank\",\r\n\t\t\ttype: \"text\",\r\n\t\t\ttypeLabel: \"文本\",\r\n\t\t\tvisualization: \"text-only\",\r\n\t\t\tlegend: \"全球GDP排名\"\r\n\t\t}\r\n\t];\r\n\r\n\t// 自动对比方法\r\n\tconst tryAutoCompare = () => {\r\n\t\tif (\r\n\t\t\thasAutoCompared.value ||\r\n\t\t\t!leftDataLoaded.value ||\r\n\t\t\t!rightDataLoaded.value\r\n\t\t)\r\n\t\t\treturn;\r\n\r\n\t\tisInitializing.value = true;\r\n\t\thasAutoCompared.value = true;\r\n\r\n\t\t// 找到分数最高的字段进行自动对比\r\n\t\tif (sortedFieldsWithScores.value.length > 0) {\r\n\t\t\tconst mostSignificantField = sortedFieldsWithScores.value[0];\r\n\t\t\tif (mostSignificantField) {\r\n\t\t\t\temit(\"compareAttribute\", {\r\n\t\t\t\t\tfieldKey: mostSignificantField.key,\r\n\t\t\t\t\tleftData: getField(leftInfobox.value, mostSignificantField.key),\r\n\t\t\t\t\trightData: getField(rightInfobox.value, mostSignificantField.key),\r\n\t\t\t\t\tleftTitle: leftInfobox.value.title,\r\n\t\t\t\t\trightTitle: rightInfobox.value.title,\r\n\t\t\t\t\tfieldType: mostSignificantField.type,\r\n\t\t\t\t\tfieldLabel: mostSignificantField.typeLabel\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tisInitializing.value = false;\r\n\t};\r\n\r\n\tconst getField = (infobox, fieldKey) => {\r\n\t\tif (!infobox?.data) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tfor (const section of Object.values(infobox.data)) {\r\n\t\t\tif (section[fieldKey] !== undefined) {\r\n\t\t\t\tconst fieldData = section[fieldKey];\r\n\r\n\t\t\t\tif (Array.isArray(fieldData)) {\r\n\t\t\t\t\treturn fieldData.map(item => {\r\n\t\t\t\t\t\tif (typeof item === \"object\" && item !== null) {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t// Return object to preserve raw/value/unit etc.\r\n\t\t\t\t\t\t\t\tvalue: item.value ?? item.raw,\r\n\t\t\t\t\t\t\t\traw: item.raw,\r\n\t\t\t\t\t\t\t\tunit: item.unit,\r\n\t\t\t\t\t\t\t\tcurrency: item.currency,\r\n\t\t\t\t\t\t\t\tyear: item.year,\r\n\t\t\t\t\t\t\t\t...item // spread any other properties\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn { value: item, raw: item }; // Wrap primitive for consistency\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (typeof fieldData === \"object\" && fieldData !== null) {\r\n\t\t\t\t\treturn [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Return array of object\r\n\t\t\t\t\t\t\tvalue: fieldData.value ?? fieldData.raw,\r\n\t\t\t\t\t\t\traw: fieldData.raw,\r\n\t\t\t\t\t\t\tunit: fieldData.unit,\r\n\t\t\t\t\t\t\tcurrency: fieldData.currency,\r\n\t\t\t\t\t\t\tyear: fieldData.year,\r\n\t\t\t\t\t\t\t...fieldData\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t];\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn [{ value: fieldData, raw: fieldData }]; // Wrap primitive for consistency\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [];\r\n\t};\r\n\r\n\tconst calculateDifferenceScore = field => {\r\n\t\tconst leftValues = getField(leftInfobox.value, field.key)\r\n\t\t\t.map(v => safeToNumber(v.value ?? v.raw)) // Use safeToNumber here\r\n\t\t\t.filter(n => !isNaN(n));\r\n\r\n\t\tconst rightValues = getField(rightInfobox.value, field.key)\r\n\t\t\t.map(v => safeToNumber(v.value ?? v.raw)) // Use safeToNumber here\r\n\t\t\t.filter(n => !isNaN(n));\r\n\r\n\t\tif (leftValues.length === 0 || rightValues.length === 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tlet maxScore = 0;\r\n\t\tconst comparedPairs = [];\r\n\r\n\t\tleftValues.forEach(leftNum => {\r\n\t\t\trightValues.forEach(rightNum => {\r\n\t\t\t\tconst isOpposite =\r\n\t\t\t\t\t(leftNum > 0 && rightNum < 0) || (leftNum < 0 && rightNum > 0);\r\n\r\n\t\t\t\tconst absDiff = Math.abs(leftNum - rightNum);\r\n\t\t\t\tconst avg = (Math.abs(leftNum) + Math.abs(rightNum)) / 2;\r\n\t\t\t\tconst relativeDiff = avg > 0 ? absDiff / avg : 0;\r\n\r\n\t\t\t\tlet score;\r\n\t\t\t\tif (isOpposite) {\r\n\t\t\t\t\tscore = 90 + 10 * relativeDiff;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tscore = 10 + 40 * relativeDiff;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcomparedPairs.push({\r\n\t\t\t\t\tleftNum,\r\n\t\t\t\t\trightNum,\r\n\t\t\t\t\tisOpposite,\r\n\t\t\t\t\trelativeDiff,\r\n\t\t\t\t\tscore\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (score > maxScore) maxScore = score;\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tconst weight = field.key.toLowerCase().includes(\"gdp growth\") ? 3 : 1;\r\n\t\tconst finalScore = Math.min(100, Math.round(maxScore * weight));\r\n\r\n\t\treturn finalScore;\r\n\t};\r\n\r\n\tconst getFieldWeight = fieldKey => {\r\n\t\tconst weights = {\r\n\t\t\tGDP: 1.5,\r\n\t\t\tPopulation: 1.3,\r\n\t\t\t\"GDP growth\": 2.0,\r\n\t\t\tInflation: 1.8,\r\n\t\t\tLabor: 1.2\r\n\t\t};\r\n\r\n\t\tfor (const [key, weight] of Object.entries(weights)) {\r\n\t\t\tif (fieldKey.toLowerCase().includes(key.toLowerCase())) {\r\n\t\t\t\treturn weight;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn 1.0;\r\n\t};\r\n\r\n\tconst getHeatmapColor = score => {\r\n\t\tconst maxScore = 100;\r\n\t\tconst ratio = Math.min(score / maxScore, 1);\r\n\t\tconst hue = (1 - ratio) * 120;\r\n\t\treturn `hsl(${hue}, 80%, ${85 - ratio * 25}%)`;\r\n\t};\r\n\r\n\tconst sortedFields = computed(() => {\r\n\t\treturn sortedFieldsWithScores.value.map(field => {\r\n\t\t\tlet globalMaxValue = null;\r\n\t\t\tif (field.visualization === \"bar-chart\") {\r\n\t\t\t\t// Get raw values, then convert to numbers\r\n\t\t\t\tconst leftRawValues = getField(leftInfobox.value, field.key);\r\n\t\t\t\tconst rightRawValues = getField(rightInfobox.value, field.key);\r\n\r\n\t\t\t\tconst leftNumericValues = leftRawValues.map(item =>\r\n\t\t\t\t\tsafeToNumber(item.value ?? item.raw ?? item)\r\n\t\t\t\t);\r\n\t\t\t\tconst rightNumericValues = rightRawValues.map(item =>\r\n\t\t\t\t\tsafeToNumber(item.value ?? item.raw ?? item)\r\n\t\t\t\t);\r\n\r\n\t\t\t\tconst allValues = [...leftNumericValues, ...rightNumericValues].filter(\r\n\t\t\t\t\tv => typeof v === \"number\" && !isNaN(v)\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (allValues.length > 0) {\r\n\t\t\t\t\tglobalMaxValue = Math.max(0, ...allValues);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tglobalMaxValue = 1; // Default if no data or all non-numeric\r\n\t\t\t\t}\r\n\t\t\t\tif (globalMaxValue === 0) globalMaxValue = 1; // Avoid y-axis [0,0]\r\n\t\t\t}\r\n\t\t\treturn { ...field, globalMaxValue };\r\n\t\t});\r\n\t});\r\n\r\n\tconst comparableFields = computed(() => {\r\n\t\treturn COMPARABLE_FIELDS.filter(field => {\r\n\t\t\tconst leftVal = getField(leftInfobox.value, field.key);\r\n\t\t\tconst rightVal = getField(rightInfobox.value, field.key);\r\n\t\t\treturn leftVal.length > 0 || rightVal.length > 0;\r\n\t\t});\r\n\t});\r\n\r\n\tconst tryCalculateScores = () => {\r\n\t\tif (leftDataLoaded.value && rightDataLoaded.value) {\r\n\t\t\tisInitializing.value = true; // Show loading while calculating scores\r\n\t\t\tsortedFieldsWithScores.value = comparableFields.value\r\n\t\t\t\t.map(field => ({\r\n\t\t\t\t\t...field,\r\n\t\t\t\t\tscore: calculateDifferenceScore(field)\r\n\t\t\t\t}))\r\n\t\t\t\t.sort((a, b) => {\r\n\t\t\t\t\tif (a.type !== \"text\" && b.type === \"text\") return -1;\r\n\t\t\t\t\tif (a.type === \"text\" && b.type !== \"text\") return 1;\r\n\t\t\t\t\treturn b.score - a.score;\r\n\t\t\t\t});\r\n\r\n\t\t\t// Calculation done, now try auto compare (which might set isInitializing to false)\r\n\t\t\ttryAutoCompare();\r\n\t\t\t// If autoCompare doesn't run or finishes quickly, ensure loading is off\r\n\t\t\tif (!hasAutoCompared.value) {\r\n\t\t\t\tisInitializing.value = false;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst showFullChart = (infobox, field) => {\r\n\t\tcurrentChart.value = {\r\n\t\t\ttitle: infobox.title,\r\n\t\t\tfield: field,\r\n\t\t\tdata: getField(infobox, field.key) // Pass the raw field data\r\n\t\t};\r\n\t\tshowFullChartModal.value = true;\r\n\t};\r\n\r\n\tconst closeFullChart = () => {\r\n\t\tshowFullChartModal.value = false;\r\n\t};\r\n\r\n\tconst hoverInfobox = (infobox, fieldKey, side) => {\r\n\t\tbus.emit(`hover-${side}-infobox`, {\r\n\t\t\tfieldKey,\r\n\t\t\tinfoboxTitle: infobox.title\r\n\t\t});\r\n\t};\r\n\r\n\tconst unhoverInfobox = side => {\r\n\t\tbus.emit(`unhover-${side}-infobox`);\r\n\t};\r\n\r\n\tconst hoverBothInfoboxes = fieldKey => {\r\n\t\thoverInfobox(leftInfobox.value, fieldKey, \"left\");\r\n\t\thoverInfobox(rightInfobox.value, fieldKey, \"right\");\r\n\t};\r\n\r\n\tconst unhoverBothInfoboxes = () => {\r\n\t\tunhoverInfobox(\"left\");\r\n\t\tunhoverInfobox(\"right\");\r\n\t};\r\n\r\n\tconst handleMiddleColumnClick = field => {\r\n\t\temit(\"compareAttribute\", {\r\n\t\t\tfieldKey: field.key,\r\n\t\t\tleftData: getField(leftInfobox.value, field.key),\r\n\t\t\trightData: getField(rightInfobox.value, field.key),\r\n\t\t\tleftTitle: leftInfobox.value.title,\r\n\t\t\trightTitle: rightInfobox.value.title,\r\n\t\t\tfieldType: field.type,\r\n\t\t\tfieldLabel: field.typeLabel\r\n\t\t});\r\n\t};\r\n\r\n\tconst showCombinedChart = field => {\r\n\t\tconst leftData = getField(leftInfobox.value, field.key);\r\n\t\tconst rightData = getField(rightInfobox.value, field.key);\r\n\r\n\t\tcurrentChart.value = {\r\n\t\t\ttitle: `合并图表 - ${field.key}`,\r\n\t\t\tfield: field,\r\n\t\t\tdata: [...leftData, ...rightData] // Pass combined raw field data\r\n\t\t};\r\n\t\tshowFullChartModal.value = true;\r\n\t};\r\n\r\n\tconst processInfoboxData = data => {\r\n\t\tif (!data) {\r\n\t\t\tconsole.warn(\"接收到空Infobox数据\");\r\n\t\t\treturn { title: \"\", type: \"\", data: {} };\r\n\t\t}\r\n\t\treturn {\r\n\t\t\ttitle: data.title || \"无标题\",\r\n\t\t\ttype: data.type || \"未知类型\",\r\n\t\t\tdata: data.sections || {}\r\n\t\t};\r\n\t};\r\n\r\n\tonMounted(() => {\r\n\t\tisInitializing.value = true; // Start with loading true\r\n\t\tbus.on(\"div1_InfoboxData\", data => {\r\n\t\t\tleftInfobox.value = processInfoboxData(data);\r\n\t\t\tleftDataLoaded.value = true;\r\n\t\t\tif (rightDataLoaded.value) {\r\n\t\t\t\t// Only calculate if both are loaded\r\n\t\t\t\ttryCalculateScores();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tbus.on(\"div3_InfoboxData\", data => {\r\n\t\t\trightInfobox.value = processInfoboxData(data);\r\n\t\t\trightDataLoaded.value = true;\r\n\t\t\tif (leftDataLoaded.value) {\r\n\t\t\t\t// Only calculate if both are loaded\r\n\t\t\t\ttryCalculateScores();\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\r\n\twatch(\r\n\t\t[() => leftDataLoaded.value, () => rightDataLoaded.value],\r\n\t\t([leftLoaded, rightLoaded]) => {\r\n\t\t\tif (leftLoaded && rightLoaded) {\r\n\t\t\t\t// Scores are now calculated inside the bus.on handlers when both are ready\r\n\t\t\t\t// or if one arrives after the other.\r\n\t\t\t\t// This watch might still be useful for other initial setup if needed,\r\n\t\t\t\t// but primary score calculation is handled above.\r\n\t\t\t\t// If no auto-compare has happened and data is loaded, turn off initial loading.\r\n\t\t\t\tif (!hasAutoCompared.value && isInitializing.value) {\r\n\t\t\t\t\t// Potentially turn off initializing if not done by tryAutoCompare\r\n\t\t\t\t\t// However, tryAutoCompare or tryCalculateScores should handle this.\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tisInitializing.value = true; // If one dataset becomes unloaded, show loading\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ immediate: true } // Check initial state\r\n\t);\r\n\r\n\tonUnmounted(() => {\r\n\t\tbus.off(\"div1_InfoboxData\");\r\n\t\tbus.off(\"div3_InfoboxData\");\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.compare-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tpadding: 8px;\r\n\t\tbox-sizing: border-box;\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t.initial-loading {\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\tbottom: 0;\r\n\t\tbackground: rgba(255, 255, 255, 0.8);\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tz-index: 100;\r\n\t}\r\n\r\n\t.initial-loading p {\r\n\t\tmargin-top: 10px;\r\n\t\tfont-size: 14px;\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.loading-spinner {\r\n\t\twidth: 30px;\r\n\t\theight: 30px;\r\n\t\tborder: 3px solid #f3f3f3;\r\n\t\tborder-top: 3px solid #4caf50;\r\n\t\tborder-radius: 50%;\r\n\t\tanimation: spin 1s linear infinite;\r\n\t}\r\n\r\n\t@keyframes spin {\r\n\t\t0% {\r\n\t\t\ttransform: rotate(0deg);\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform: rotate(360deg);\r\n\t\t}\r\n\t}\r\n\r\n\t.heatmap-control {\r\n\t\tmargin-bottom: 10px;\r\n\t\ttext-align: right;\r\n\t}\r\n\r\n\t.heatmap-control button {\r\n\t\tpadding: 6px 12px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tborder-radius: 4px;\r\n\t\tcursor: pointer;\r\n\t}\r\n\r\n\t.sorting-heatmap {\r\n\t\tmargin-bottom: 20px;\r\n\t\tborder: 1px solid #eee;\r\n\t\tborder-radius: 8px;\r\n\t\toverflow: hidden;\r\n\t\tbox-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t.heatmap-header {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: 50px 2fr 1fr 1fr 1fr;\r\n\t\tpadding: 8px 12px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tfont-weight: bold;\r\n\t}\r\n\r\n\t.heatmap-row {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: 50px 2fr 1fr 1fr 1fr;\r\n\t\tpadding: 8px 12px;\r\n\t\tborder-bottom: 1px solid #eee;\r\n\t\ttransition: all 0.3s;\r\n\t}\r\n\r\n\t.heatmap-row:hover {\r\n\t\ttransform: scale(1.01);\r\n\t\tbox-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t.field-rank {\r\n\t\tfont-weight: bold;\r\n\t\tcolor: #2c3e50;\r\n\t}\r\n\r\n\t.field-name {\r\n\t\tfont-weight: bold;\r\n\t}\r\n\r\n\t.field-type {\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.field-score {\r\n\t\ttext-align: right;\r\n\t\tfont-family: monospace;\r\n\t}\r\n\r\n\t.field-weight {\r\n\t\ttext-align: right;\r\n\t\tfont-family: monospace;\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.comparison-grid {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns:\r\n\t\t\tminmax(120px, 1fr)\r\n\t\t\tminmax(80px, 100px)\r\n\t\t\tminmax(120px, 1fr);\r\n\t\twidth: 100%;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t\tborder-radius: 4px;\r\n\t\toverflow: hidden;\r\n\t\tmax-height: 500px; /* Or your desired max height */\r\n\t\toverflow-y: auto;\r\n\t}\r\n\r\n\t.header {\r\n\t\tpadding: 8px 6px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n\t\tposition: sticky;\r\n\t\ttop: 0;\r\n\t\tz-index: 1;\r\n\t\tborder-right: 1px solid #475569;\r\n\t\tmin-height: 36px;\r\n\t\tfont-size: 13px;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t}\r\n\t.header:last-child {\r\n\t\tborder-right: none;\r\n\t}\r\n\r\n\t.header.middle-column {\r\n\t\tpadding: 8px 4px;\r\n\t\tbackground: #1e293b; /* Slightly darker for middle */\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t}\r\n\r\n\t.cell {\r\n\t\tpadding: 8px;\r\n\t\theight: 110px; /* Adjust as needed */\r\n\t\tborder-bottom: 1px solid #e0e0e0;\r\n\t\tborder-right: 1px solid #e0e0e0;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center; /* Center content in cell */\r\n\t\tposition: relative;\r\n\t\tcursor: pointer;\r\n\t\ttransition: all 0.3s ease;\r\n\t\tmin-width: 0; /* For flexbox to allow shrinking */\r\n\t\toverflow: hidden; /* Prevent content overflow */\r\n\t}\r\n\t.cell:last-child {\r\n\t\t/* Last cell in a row */\r\n\t\tborder-right: none;\r\n\t}\r\n\t/* Remove bottom border for cells in the last row */\r\n\t.comparison-grid > .cell:nth-last-child(-n + 3) {\r\n\t\tborder-bottom: none;\r\n\t}\r\n\r\n\t.left-column,\r\n\t.right-column {\r\n\t\tmax-width: 100%;\r\n\t}\r\n\r\n\t.cell:hover {\r\n\t\tbackground-color: #f5f5f5;\r\n\t}\r\n\r\n\t.left-column:hover {\r\n\t\tbackground-color: #fff8e1; /* Light yellow tint */\r\n\t}\r\n\r\n\t.right-column:hover {\r\n\t\tbackground-color: #fff8e1; /* Light yellow tint */\r\n\t}\r\n\r\n\t.middle-column {\r\n\t\tposition: relative;\r\n\t\tcursor: default;\r\n\t\tbackground-color: #f8f9fa;\r\n\t\ttransition: background-color 0.2s;\r\n\t\tjustify-content: center; /* Center items in middle column */\r\n\t\talign-items: center;\r\n\t}\r\n\r\n\t.middle-column:hover {\r\n\t\tbackground-color: #e9ecef;\r\n\t}\r\n\r\n\t.middle-column .field-name {\r\n\t\t/* Target field-name specifically in middle-column */\r\n\t\tfont-weight: bold;\r\n\t\tmargin-bottom: 4px;\r\n\t\tfont-size: 12px;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t\ttext-align: center;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t.middle-column .field-type {\r\n\t\t/* Target field-type specifically in middle-column */\r\n\t\tcolor: #666;\r\n\t\tfont-size: 11px;\r\n\t\tfont-style: italic;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t\ttext-align: center;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t.icon-actions {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center; /* Space out icons */\r\n\t\tgap: 15px; /* Space between icons */\r\n\t\tmargin-top: 8px;\r\n\t}\r\n\r\n\t.icon-btn {\r\n\t\tfont-size: 16px;\r\n\t\tcursor: pointer;\r\n\t\topacity: 0.7;\r\n\t\ttransition: all 0.2s;\r\n\t}\r\n\r\n\t.icon-btn:hover {\r\n\t\topacity: 1;\r\n\t\ttransform: scale(1.2);\r\n\t}\r\n\r\n\t.icon-btn.compare:hover {\r\n\t\tcolor: #4caf50; /* Green */\r\n\t}\r\n\t.icon-btn.merge:hover {\r\n\t\tcolor: #2196f3; /* Blue */\r\n\t}\r\n\r\n\t.full-chart-modal {\r\n\t\tposition: fixed;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\tbottom: 0;\r\n\t\tbackground-color: rgba(0, 0, 0, 0.3); /* Softer backdrop */\r\n\t\tbackdrop-filter: blur(8px);\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t\tz-index: 1000;\r\n\t\tanimation: fadeIn 0.3s ease-out;\r\n\t}\r\n\t@keyframes fadeIn {\r\n\t\tfrom {\r\n\t\t\topacity: 0;\r\n\t\t}\r\n\t\tto {\r\n\t\t\topacity: 1;\r\n\t\t}\r\n\t}\r\n\r\n\t.modal-content {\r\n\t\tbackground: white;\r\n\t\tpadding: 16px; /* Reduced padding */\r\n\t\tborder-radius: 8px;\r\n\t\twidth: 85%;\r\n\t\tmax-width: 800px;\r\n\t\tmax-height: 85vh; /* Use vh for responsive height */\r\n\t\tposition: relative;\r\n\t\toverflow-y: auto; /* Enable scroll if content overflows */\r\n\t\tbox-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\r\n\t}\r\n\r\n\t.modal-content h3 {\r\n\t\tmargin-top: 0;\r\n\t\tmargin-bottom: 12px;\r\n\t\tfont-size: 18px;\r\n\t\tcolor: #333;\r\n\t}\r\n\r\n\t.chart-container {\r\n\t\theight: 60vh; /* Responsive height */\r\n\t\twidth: 100%;\r\n\t\tmargin: 16px 0;\r\n\t}\r\n\r\n\t.chart-legend {\r\n\t\tfont-size: 13px;\r\n\t\tcolor: #666;\r\n\t\ttext-align: center;\r\n\t\tmargin-top: 12px;\r\n\t\tpadding-top: 12px;\r\n\t\tborder-top: 1px solid #eee;\r\n\t}\r\n\r\n\t.close-btn {\r\n\t\tposition: absolute;\r\n\t\ttop: 8px;\r\n\t\tright: 8px;\r\n\t\tfont-size: 20px;\r\n\t\tbackground: none;\r\n\t\tborder: none;\r\n\t\tcursor: pointer;\r\n\t\tcolor: #666;\r\n\t\tpadding: 4px; /* Easier to click */\r\n\t\tline-height: 1;\r\n\t}\r\n\r\n\t.close-btn:hover {\r\n\t\tcolor: #333;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}