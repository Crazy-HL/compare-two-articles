{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted, onUnmounted, nextTick } from \"vue\";\nimport LoadingSpinner from \"./LoadingSpinner.vue\";\nimport ErrorDisplay from \"./ErrorDisplay.vue\";\nimport WikipediaContent from \"./WikipediaContent.vue\";\nimport TextPopup from \"./TextPopup.vue\";\nimport ArticleOutline from \"./ArticleOutline.vue\"; // 引入大纲组件\nimport * as d3 from \"d3\";\nimport bus from \"@/js/eventBus.js\";\nexport default {\n  __name: 'ParentComponent',\n  props: {\n    pageTitle: String,\n    divId: String,\n    selectContentClass: String\n  },\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const props = __props;\n    const pageHtml = ref(\"\"); // 文章 HTML 内容\n    const loading = ref(true); // 加载状态\n    const error = ref(\"\"); // 错误信息\n    const selectedText = ref({}); // 存储每个 div 的选中内容\n    const showPopup = ref({}); // 存储每个 div 的弹窗显示状态\n    const divRef = ref(null); // `Div1` 或 `Div3` 的 DOM 参考\n    const sections = ref({}); // 存储章节ID到内容的映射\n\n    // **获取 Wikipedia 页面**\n    const fetchWikipediaContent = async () => {\n      try {\n        const apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(props.pageTitle)}`;\n        const response = await fetch(apiUrl);\n        if (!response.ok) throw new Error(\"Failed to fetch data\");\n        const html = await response.text();\n\n        // 解析 HTML\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(html, \"text/html\");\n\n        // 收集章节内容\n        const headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\n        headings.forEach((heading, index) => {\n          const id = `heading-${index}-${props.divId}`;\n          heading.id = id;\n\n          // 收集该标题下的内容\n          let content = [];\n          let nextElement = heading.nextElementSibling;\n          while (nextElement && !nextElement.matches(\"h1, h2, h3, h4, h5, h6\")) {\n            content.push(nextElement.outerHTML);\n            nextElement = nextElement.nextElementSibling;\n          }\n          sections.value[id] = content.join(\"\");\n        });\n\n        // 动态注入 Wikipedia 样式\n        const styles = Array.from(doc.querySelectorAll('link[rel=\"stylesheet\"]'));\n        styles.forEach(link => {\n          if (!document.querySelector(`link[href=\"${link.href}\"]`)) {\n            const styleTag = document.createElement(\"link\");\n            styleTag.rel = \"stylesheet\";\n            styleTag.href = link.href;\n            document.head.appendChild(styleTag);\n          }\n        });\n\n        // 仅获取正文部分\n        const contentElement = doc.querySelector(\"body\");\n        if (!contentElement) throw new Error(\"Content not found\");\n        pageHtml.value = contentElement.innerHTML;\n\n        // 手动引入 Wikipedia CSS\n        injectWikipediaStyles();\n      } catch (err) {\n        error.value = \"Error fetching Wikipedia content: \" + err.message;\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // **手动引入 Wikipedia CSS**\n    const injectWikipediaStyles = () => {\n      const wikipediaStyles = [\"https://en.wikipedia.org/w/load.php?modules=site.styles\", \"https://en.wikipedia.org/w/load.php?modules=ext.cite.styles\", \"https://en.wikipedia.org/w/load.php?modules=ext.scribunto.styles\", \"https://en.wikipedia.org/w/load.php?modules=skins.vector.styles\"];\n      wikipediaStyles.forEach(url => {\n        if (!document.querySelector(`link[href=\"${url}\"]`)) {\n          const styleTag = document.createElement(\"link\");\n          styleTag.rel = \"stylesheet\";\n          styleTag.href = url;\n          document.head.appendChild(styleTag);\n        }\n      });\n    };\n\n    // **处理选中内容**\n\n    const handleSelection = content => {\n      console.log(`[${props.divId}] 收到选中内容`, content);\n\n      // 获取选中区域最近的标题元素\n      const getNearestHeading = () => {\n        const selection = window.getSelection();\n        if (!selection.rangeCount) return null;\n        let node = selection.getRangeAt(0).commonAncestorContainer;\n        while (node && !node.matches?.(\"h1, h2, h3, h4, h5, h6\")) {\n          node = node.parentNode;\n        }\n        return node;\n      };\n      const currentHeading = getNearestHeading();\n      if (!currentHeading) {\n        console.warn(\"未找到关联的标题元素\");\n        return;\n      }\n      const sectionId = currentHeading.id;\n      console.log(`[${props.divId}] 当前章节ID: ${sectionId}`);\n\n      // 查找关联章节\n      const linkedItem = linkedOutline.value.find(item => item.leftId === sectionId || item.rightId === sectionId);\n      if (linkedItem) {\n        const targetDiv = props.divId === \"div1\" ? \"div3\" : \"div1\";\n        const targetSectionId = linkedItem[props.divId === \"div1\" ? \"rightId\" : \"leftId\"];\n        console.log(`[${props.divId}] 找到关联章节: ${targetSectionId} → 触发 ${targetDiv}`);\n\n        // 触发关联更新\n        bus.emit(`cross-update-${targetDiv}`, {\n          sectionId: targetSectionId,\n          content: sections.value[targetSectionId] || \"未找到相关内容\"\n        });\n      }\n\n      // 显示当前弹窗\n      selectedText.value = {\n        ...selectedText.value,\n        [props.divId]: content\n      };\n      showPopup.value = {\n        ...showPopup.value,\n        [props.divId]: true\n      };\n    };\n\n    // **关闭弹出框**\n    const closePopup = () => {\n      showPopup.value[props.divId] = false; // 根据 divId 关闭弹窗\n      selectedText.value[props.divId] = \"\"; // 根据 divId 清除选中内容\n\n      // 根据 divId 清空对应的容器\n      const container = props.divId === \"div1\" ? \".chart-container1\" : \".chart-container2\";\n      d3.select(container).html(\"\");\n    };\n\n    // **更新遮罩层和弹出框的位置**\n    const updatePopupPosition = () => {\n      if (showPopup.value[props.divId] && divRef.value) {\n        const popup = divRef.value.querySelector(\".text-popup\");\n        const overlay = divRef.value.querySelector(\".overlay\");\n        if (popup && overlay) {\n          const rect = divRef.value.getBoundingClientRect();\n          const scrollTop = divRef.value.scrollTop;\n          const scrollLeft = divRef.value.scrollLeft;\n\n          // 动态调整遮罩层和弹出框的位置\n          overlay.style.top = `${scrollTop}px`;\n          overlay.style.left = `${scrollLeft}px`;\n          overlay.style.width = `${divRef.value.clientWidth}px`;\n          overlay.style.height = `${divRef.value.clientHeight}px`;\n          popup.style.top = `${rect.height / 2 + scrollTop}px`;\n          popup.style.left = `${rect.width / 2 + scrollLeft}px`;\n        }\n      }\n    };\n\n    // **组件挂载后加载 Wikipedia 内容**\n    onMounted(() => {\n      // 确保 divRef 已初始化\n      if (divRef.value) {\n        console.log(\"divRef 已绑定到 DOM 元素:\", divRef.value);\n      } else {\n        console.error(\"divRef 未绑定到 DOM 元素\");\n      }\n      fetchWikipediaContent();\n\n      // 监听父容器滚动事件\n      if (divRef.value) {\n        divRef.value.addEventListener(\"scroll\", updatePopupPosition);\n      }\n\n      // 监听来自另一个Div的联动事件\n      bus.on(`cross-highlight-${props.divId}`, _ref2 => {\n        let {\n          sectionId,\n          content\n        } = _ref2;\n        // 更新选中内容并显示弹窗\n        selectedText.value[props.divId] = content;\n        showPopup.value[props.divId] = true;\n\n        // 滚动到对应章节\n        nextTick(() => {\n          const element = document.getElementById(sectionId);\n          if (element) {\n            element.scrollIntoView({\n              behavior: \"smooth\",\n              block: \"center\"\n            });\n          }\n        });\n      });\n    });\n\n    // **组件卸载时解绑事件**\n    onUnmounted(() => {\n      // 解绑父容器滚动事件\n      if (divRef.value) {\n        divRef.value.removeEventListener(\"scroll\", updatePopupPosition);\n      }\n    });\n    const __returned__ = {\n      props,\n      pageHtml,\n      loading,\n      error,\n      selectedText,\n      showPopup,\n      divRef,\n      sections,\n      fetchWikipediaContent,\n      injectWikipediaStyles,\n      handleSelection,\n      closePopup,\n      updatePopupPosition,\n      ref,\n      onMounted,\n      onUnmounted,\n      nextTick,\n      LoadingSpinner,\n      ErrorDisplay,\n      WikipediaContent,\n      TextPopup,\n      ArticleOutline,\n      get d3() {\n        return d3;\n      },\n      get bus() {\n        return bus;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","nextTick","LoadingSpinner","ErrorDisplay","WikipediaContent","TextPopup","ArticleOutline","d3","bus","props","__props","pageHtml","loading","error","selectedText","showPopup","divRef","sections","fetchWikipediaContent","apiUrl","encodeURIComponent","pageTitle","response","fetch","ok","Error","html","text","parser","DOMParser","doc","parseFromString","headings","querySelectorAll","forEach","heading","index","id","divId","content","nextElement","nextElementSibling","matches","push","outerHTML","value","join","styles","Array","from","link","document","querySelector","href","styleTag","createElement","rel","head","appendChild","contentElement","innerHTML","injectWikipediaStyles","err","message","wikipediaStyles","url","handleSelection","console","log","getNearestHeading","selection","window","getSelection","rangeCount","node","getRangeAt","commonAncestorContainer","parentNode","currentHeading","warn","sectionId","linkedItem","linkedOutline","find","item","leftId","rightId","targetDiv","targetSectionId","emit","closePopup","container","select","updatePopupPosition","popup","overlay","rect","getBoundingClientRect","scrollTop","scrollLeft","style","top","left","width","clientWidth","height","clientHeight","addEventListener","on","_ref2","element","getElementById","scrollIntoView","behavior","block","removeEventListener"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/ParentComponent.vue"],"sourcesContent":["<template>\r\n\t<div :class=\"['div0', selectContentClass]\" :id=\"divId\" ref=\"divRef\">\r\n\t\t<h1>{{ pageTitle }}</h1>\r\n\r\n\t\t<!-- 加载动画 -->\r\n\t\t<LoadingSpinner v-if=\"loading\" />\r\n\r\n\t\t<!-- 错误信息 -->\r\n\t\t<ErrorDisplay\r\n\t\t\tv-else-if=\"error\"\r\n\t\t\t:message=\"error\"\r\n\t\t\t@retry=\"fetchWikipediaContent\" />\r\n\r\n\t\t<!-- 文章内容 -->\r\n\t\t<WikipediaContent v-else :content=\"pageHtml\" @select=\"handleSelection\" />\r\n\r\n\t\t<!-- 弹出框 -->\r\n\t\t<TextPopup\r\n\t\t\t:visible=\"showPopup[divId]\"\r\n\t\t\t:content=\"selectedText[divId]\"\r\n\t\t\t:containerClass=\"\r\n\t\t\t\tdivId === 'div1' ? 'chart-container1' : 'chart-container2'\r\n\t\t\t\"\r\n\t\t\t:containerRef=\"divRef\"\r\n\t\t\t@close=\"closePopup\" />\r\n\r\n\t\t<!-- 悬浮大纲组件 -->\r\n\t\t<ArticleOutline\r\n\t\t\t:content=\"pageHtml\"\r\n\t\t\t:divId=\"divId\"\r\n\t\t\t:linkedOutline=\"linkedOutline\" />\r\n\t\t<!-- 添加 key 属性 -->\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted, nextTick } from \"vue\";\r\n\timport LoadingSpinner from \"./LoadingSpinner.vue\";\r\n\timport ErrorDisplay from \"./ErrorDisplay.vue\";\r\n\timport WikipediaContent from \"./WikipediaContent.vue\";\r\n\timport TextPopup from \"./TextPopup.vue\";\r\n\timport ArticleOutline from \"./ArticleOutline.vue\"; // 引入大纲组件\r\n\timport * as d3 from \"d3\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\r\n\tconst props = defineProps({\r\n\t\tpageTitle: String,\r\n\t\tdivId: String,\r\n\t\tselectContentClass: String\r\n\t});\r\n\r\n\tconst pageHtml = ref(\"\"); // 文章 HTML 内容\r\n\tconst loading = ref(true); // 加载状态\r\n\tconst error = ref(\"\"); // 错误信息\r\n\tconst selectedText = ref({}); // 存储每个 div 的选中内容\r\n\tconst showPopup = ref({}); // 存储每个 div 的弹窗显示状态\r\n\tconst divRef = ref(null); // `Div1` 或 `Div3` 的 DOM 参考\r\n\tconst sections = ref({}); // 存储章节ID到内容的映射\r\n\r\n\t// **获取 Wikipedia 页面**\r\n\tconst fetchWikipediaContent = async () => {\r\n\t\ttry {\r\n\t\t\tconst apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(\r\n\t\t\t\tprops.pageTitle\r\n\t\t\t)}`;\r\n\t\t\tconst response = await fetch(apiUrl);\r\n\t\t\tif (!response.ok) throw new Error(\"Failed to fetch data\");\r\n\r\n\t\t\tconst html = await response.text();\r\n\r\n\t\t\t// 解析 HTML\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\r\n\t\t\t// 收集章节内容\r\n\t\t\tconst headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\r\n\t\t\theadings.forEach((heading, index) => {\r\n\t\t\t\tconst id = `heading-${index}-${props.divId}`;\r\n\t\t\t\theading.id = id;\r\n\r\n\t\t\t\t// 收集该标题下的内容\r\n\t\t\t\tlet content = [];\r\n\t\t\t\tlet nextElement = heading.nextElementSibling;\r\n\t\t\t\twhile (nextElement && !nextElement.matches(\"h1, h2, h3, h4, h5, h6\")) {\r\n\t\t\t\t\tcontent.push(nextElement.outerHTML);\r\n\t\t\t\t\tnextElement = nextElement.nextElementSibling;\r\n\t\t\t\t}\r\n\t\t\t\tsections.value[id] = content.join(\"\");\r\n\t\t\t});\r\n\r\n\t\t\t// 动态注入 Wikipedia 样式\r\n\t\t\tconst styles = Array.from(doc.querySelectorAll('link[rel=\"stylesheet\"]'));\r\n\t\t\tstyles.forEach(link => {\r\n\t\t\t\tif (!document.querySelector(`link[href=\"${link.href}\"]`)) {\r\n\t\t\t\t\tconst styleTag = document.createElement(\"link\");\r\n\t\t\t\t\tstyleTag.rel = \"stylesheet\";\r\n\t\t\t\t\tstyleTag.href = link.href;\r\n\t\t\t\t\tdocument.head.appendChild(styleTag);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// 仅获取正文部分\r\n\t\t\tconst contentElement = doc.querySelector(\"body\");\r\n\t\t\tif (!contentElement) throw new Error(\"Content not found\");\r\n\r\n\t\t\tpageHtml.value = contentElement.innerHTML;\r\n\r\n\t\t\t// 手动引入 Wikipedia CSS\r\n\t\t\tinjectWikipediaStyles();\r\n\t\t} catch (err) {\r\n\t\t\terror.value = \"Error fetching Wikipedia content: \" + err.message;\r\n\t\t} finally {\r\n\t\t\tloading.value = false;\r\n\t\t}\r\n\t};\r\n\r\n\t// **手动引入 Wikipedia CSS**\r\n\tconst injectWikipediaStyles = () => {\r\n\t\tconst wikipediaStyles = [\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=site.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=ext.cite.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=ext.scribunto.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=skins.vector.styles\"\r\n\t\t];\r\n\r\n\t\twikipediaStyles.forEach(url => {\r\n\t\t\tif (!document.querySelector(`link[href=\"${url}\"]`)) {\r\n\t\t\t\tconst styleTag = document.createElement(\"link\");\r\n\t\t\t\tstyleTag.rel = \"stylesheet\";\r\n\t\t\t\tstyleTag.href = url;\r\n\t\t\t\tdocument.head.appendChild(styleTag);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t// **处理选中内容**\r\n\r\n\tconst handleSelection = content => {\r\n\t\tconsole.log(`[${props.divId}] 收到选中内容`, content);\r\n\r\n\t\t// 获取选中区域最近的标题元素\r\n\t\tconst getNearestHeading = () => {\r\n\t\t\tconst selection = window.getSelection();\r\n\t\t\tif (!selection.rangeCount) return null;\r\n\r\n\t\t\tlet node = selection.getRangeAt(0).commonAncestorContainer;\r\n\t\t\twhile (node && !node.matches?.(\"h1, h2, h3, h4, h5, h6\")) {\r\n\t\t\t\tnode = node.parentNode;\r\n\t\t\t}\r\n\t\t\treturn node;\r\n\t\t};\r\n\r\n\t\tconst currentHeading = getNearestHeading();\r\n\t\tif (!currentHeading) {\r\n\t\t\tconsole.warn(\"未找到关联的标题元素\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst sectionId = currentHeading.id;\r\n\t\tconsole.log(`[${props.divId}] 当前章节ID: ${sectionId}`);\r\n\r\n\t\t// 查找关联章节\r\n\t\tconst linkedItem = linkedOutline.value.find(\r\n\t\t\titem => item.leftId === sectionId || item.rightId === sectionId\r\n\t\t);\r\n\r\n\t\tif (linkedItem) {\r\n\t\t\tconst targetDiv = props.divId === \"div1\" ? \"div3\" : \"div1\";\r\n\t\t\tconst targetSectionId =\r\n\t\t\t\tlinkedItem[props.divId === \"div1\" ? \"rightId\" : \"leftId\"];\r\n\t\t\tconsole.log(\r\n\t\t\t\t`[${props.divId}] 找到关联章节: ${targetSectionId} → 触发 ${targetDiv}`\r\n\t\t\t);\r\n\r\n\t\t\t// 触发关联更新\r\n\t\t\tbus.emit(`cross-update-${targetDiv}`, {\r\n\t\t\t\tsectionId: targetSectionId,\r\n\t\t\t\tcontent: sections.value[targetSectionId] || \"未找到相关内容\"\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// 显示当前弹窗\r\n\t\tselectedText.value = { ...selectedText.value, [props.divId]: content };\r\n\t\tshowPopup.value = { ...showPopup.value, [props.divId]: true };\r\n\t};\r\n\r\n\t// **关闭弹出框**\r\n\tconst closePopup = () => {\r\n\t\tshowPopup.value[props.divId] = false; // 根据 divId 关闭弹窗\r\n\t\tselectedText.value[props.divId] = \"\"; // 根据 divId 清除选中内容\r\n\r\n\t\t// 根据 divId 清空对应的容器\r\n\t\tconst container =\r\n\t\t\tprops.divId === \"div1\" ? \".chart-container1\" : \".chart-container2\";\r\n\t\td3.select(container).html(\"\");\r\n\t};\r\n\r\n\t// **更新遮罩层和弹出框的位置**\r\n\tconst updatePopupPosition = () => {\r\n\t\tif (showPopup.value[props.divId] && divRef.value) {\r\n\t\t\tconst popup = divRef.value.querySelector(\".text-popup\");\r\n\t\t\tconst overlay = divRef.value.querySelector(\".overlay\");\r\n\t\t\tif (popup && overlay) {\r\n\t\t\t\tconst rect = divRef.value.getBoundingClientRect();\r\n\t\t\t\tconst scrollTop = divRef.value.scrollTop;\r\n\t\t\t\tconst scrollLeft = divRef.value.scrollLeft;\r\n\r\n\t\t\t\t// 动态调整遮罩层和弹出框的位置\r\n\t\t\t\toverlay.style.top = `${scrollTop}px`;\r\n\t\t\t\toverlay.style.left = `${scrollLeft}px`;\r\n\t\t\t\toverlay.style.width = `${divRef.value.clientWidth}px`;\r\n\t\t\t\toverlay.style.height = `${divRef.value.clientHeight}px`;\r\n\r\n\t\t\t\tpopup.style.top = `${rect.height / 2 + scrollTop}px`;\r\n\t\t\t\tpopup.style.left = `${rect.width / 2 + scrollLeft}px`;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// **组件挂载后加载 Wikipedia 内容**\r\n\tonMounted(() => {\r\n\t\t// 确保 divRef 已初始化\r\n\t\tif (divRef.value) {\r\n\t\t\tconsole.log(\"divRef 已绑定到 DOM 元素:\", divRef.value);\r\n\t\t} else {\r\n\t\t\tconsole.error(\"divRef 未绑定到 DOM 元素\");\r\n\t\t}\r\n\t\tfetchWikipediaContent();\r\n\r\n\t\t// 监听父容器滚动事件\r\n\t\tif (divRef.value) {\r\n\t\t\tdivRef.value.addEventListener(\"scroll\", updatePopupPosition);\r\n\t\t}\r\n\r\n\t\t// 监听来自另一个Div的联动事件\r\n\t\tbus.on(`cross-highlight-${props.divId}`, ({ sectionId, content }) => {\r\n\t\t\t// 更新选中内容并显示弹窗\r\n\t\t\tselectedText.value[props.divId] = content;\r\n\t\t\tshowPopup.value[props.divId] = true;\r\n\r\n\t\t\t// 滚动到对应章节\r\n\t\t\tnextTick(() => {\r\n\t\t\t\tconst element = document.getElementById(sectionId);\r\n\t\t\t\tif (element) {\r\n\t\t\t\t\telement.scrollIntoView({\r\n\t\t\t\t\t\tbehavior: \"smooth\",\r\n\t\t\t\t\t\tblock: \"center\"\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n\r\n\t// **组件卸载时解绑事件**\r\n\tonUnmounted(() => {\r\n\t\t// 解绑父容器滚动事件\r\n\t\tif (divRef.value) {\r\n\t\t\tdivRef.value.removeEventListener(\"scroll\", updatePopupPosition);\r\n\t\t}\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\th1 {\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t/* 文章容器 */\r\n\t.div0 {\r\n\t\tposition: relative;\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t#div1,\r\n\t#div3 {\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t.showHtml {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\toverflow: auto;\r\n\t}\r\n\r\n\t/* 选中文本的高亮样式 */\r\n\t::selection {\r\n\t\tbackground-color: yellow;\r\n\t\tcolor: black;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}