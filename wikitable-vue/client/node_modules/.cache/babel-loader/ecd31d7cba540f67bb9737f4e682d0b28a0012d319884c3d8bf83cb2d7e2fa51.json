{"ast":null,"code":"import { ref, onMounted } from \"vue\";\nexport default {\n  __name: 'WikipediaContent',\n  props: {\n    pageTitle: String\n  },\n  emits: [\"select\", \"loaded\", \"error\"],\n  setup(__props, _ref) {\n    let {\n      expose: __expose,\n      emit: __emit\n    } = _ref;\n    __expose();\n    const props = __props;\n    const emit = __emit;\n    const pageHtml = ref(\"\"); // 文章 HTML 内容\n\n    // 获取 Wikipedia 页面\n    const fetchWikipediaContent = async () => {\n      try {\n        const apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(props.pageTitle)}`;\n        const response = await fetch(apiUrl);\n        if (!response.ok) throw new Error(\"Failed to fetch data\");\n        const html = await response.text();\n\n        // 解析 HTML\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(html, \"text/html\");\n\n        // 动态注入 Wikipedia 样式\n        const styles = Array.from(doc.querySelectorAll('link[rel=\"stylesheet\"]'));\n        styles.forEach(link => {\n          if (!document.querySelector(`link[href=\"${link.href}\"]`)) {\n            const styleTag = document.createElement(\"link\");\n            styleTag.rel = \"stylesheet\";\n            styleTag.href = link.href;\n            document.head.appendChild(styleTag);\n          }\n        });\n\n        // 仅获取正文部分\n        const contentElement = doc.querySelector(\"body\");\n        if (!contentElement) throw new Error(\"Content not found\");\n        pageHtml.value = contentElement.innerHTML;\n\n        // 手动引入 Wikipedia CSS\n        injectWikipediaStyles();\n\n        // 通知父组件加载完成\n        emit(\"loaded\");\n      } catch (err) {\n        // 通知父组件加载失败\n        emit(\"error\", \"Error fetching Wikipedia content: \" + err.message);\n      }\n    };\n\n    // 手动引入 Wikipedia CSS\n    const injectWikipediaStyles = () => {\n      const wikipediaStyles = [\"https://en.wikipedia.org/w/load.php?modules=site.styles\", \"https://en.wikipedia.org/w/load.php?modules=ext.cite.styles\", \"https://en.wikipedia.org/w/load.php?modules=ext.scribunto.styles\", \"https://en.wikipedia.org/w/load.php?modules=skins.vector.styles\"];\n      wikipediaStyles.forEach(url => {\n        if (!document.querySelector(`link[href=\"${url}\"]`)) {\n          const styleTag = document.createElement(\"link\");\n          styleTag.rel = \"stylesheet\";\n          styleTag.href = url;\n          document.head.appendChild(styleTag);\n        }\n      });\n    };\n\n    // 高亮并放大选中文字\n    const handleSelection = () => {\n      const selection = window.getSelection();\n      if (!selection.rangeCount) {\n        console.log(\"没有选中内容\");\n        return;\n      }\n      const range = selection.getRangeAt(0);\n      const selectedHtml = range.cloneContents();\n\n      // 创建临时容器\n      const tempDiv = document.createElement(\"div\");\n      tempDiv.appendChild(selectedHtml);\n\n      // 判断选中的内容是否包含表格等 HTML 元素\n      const table = tempDiv.querySelector(\"table\");\n      if (table) {\n        console.log(\"选中了表格内容\");\n        table.classList.add(\"custom-table\");\n        emit(\"select\", tempDiv.innerHTML); // 触发 select 事件\n      } else {\n        const text = selection.toString().trim();\n        if (!text) {\n          console.log(\"选中的文字为空\");\n          return;\n        }\n        console.log(\"选中的文字:\", text);\n        emit(\"select\", text); // 触发 select 事件\n      }\n    };\n\n    // 组件挂载后加载 Wikipedia 内容\n    onMounted(() => {\n      fetchWikipediaContent();\n    });\n    const __returned__ = {\n      props,\n      emit,\n      pageHtml,\n      fetchWikipediaContent,\n      injectWikipediaStyles,\n      handleSelection,\n      ref,\n      onMounted\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","props","__props","emit","__emit","pageHtml","fetchWikipediaContent","apiUrl","encodeURIComponent","pageTitle","response","fetch","ok","Error","html","text","parser","DOMParser","doc","parseFromString","styles","Array","from","querySelectorAll","forEach","link","document","querySelector","href","styleTag","createElement","rel","head","appendChild","contentElement","value","innerHTML","injectWikipediaStyles","err","message","wikipediaStyles","url","handleSelection","selection","window","getSelection","rangeCount","console","log","range","getRangeAt","selectedHtml","cloneContents","tempDiv","table","classList","add","toString","trim"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/WikipediaContent.vue"],"sourcesContent":["<template>\r\n\t<div\r\n\t\tclass=\"wikipedia-content\"\r\n\t\tv-html=\"pageHtml\"\r\n\t\t@mouseup=\"handleSelection\"></div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, defineEmits } from \"vue\";\r\n\r\n\tconst props = defineProps({\r\n\t\tpageTitle: String\r\n\t});\r\n\r\n\tconst emit = defineEmits([\"select\", \"loaded\", \"error\"]);\r\n\r\n\tconst pageHtml = ref(\"\"); // 文章 HTML 内容\r\n\r\n\t// 获取 Wikipedia 页面\r\n\tconst fetchWikipediaContent = async () => {\r\n\t\ttry {\r\n\t\t\tconst apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(\r\n\t\t\t\tprops.pageTitle\r\n\t\t\t)}`;\r\n\t\t\tconst response = await fetch(apiUrl);\r\n\t\t\tif (!response.ok) throw new Error(\"Failed to fetch data\");\r\n\r\n\t\t\tconst html = await response.text();\r\n\r\n\t\t\t// 解析 HTML\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\r\n\t\t\t// 动态注入 Wikipedia 样式\r\n\t\t\tconst styles = Array.from(doc.querySelectorAll('link[rel=\"stylesheet\"]'));\r\n\t\t\tstyles.forEach(link => {\r\n\t\t\t\tif (!document.querySelector(`link[href=\"${link.href}\"]`)) {\r\n\t\t\t\t\tconst styleTag = document.createElement(\"link\");\r\n\t\t\t\t\tstyleTag.rel = \"stylesheet\";\r\n\t\t\t\t\tstyleTag.href = link.href;\r\n\t\t\t\t\tdocument.head.appendChild(styleTag);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// 仅获取正文部分\r\n\t\t\tconst contentElement = doc.querySelector(\"body\");\r\n\t\t\tif (!contentElement) throw new Error(\"Content not found\");\r\n\r\n\t\t\tpageHtml.value = contentElement.innerHTML;\r\n\r\n\t\t\t// 手动引入 Wikipedia CSS\r\n\t\t\tinjectWikipediaStyles();\r\n\r\n\t\t\t// 通知父组件加载完成\r\n\t\t\temit(\"loaded\");\r\n\t\t} catch (err) {\r\n\t\t\t// 通知父组件加载失败\r\n\t\t\temit(\"error\", \"Error fetching Wikipedia content: \" + err.message);\r\n\t\t}\r\n\t};\r\n\r\n\t// 手动引入 Wikipedia CSS\r\n\tconst injectWikipediaStyles = () => {\r\n\t\tconst wikipediaStyles = [\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=site.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=ext.cite.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=ext.scribunto.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=skins.vector.styles\"\r\n\t\t];\r\n\r\n\t\twikipediaStyles.forEach(url => {\r\n\t\t\tif (!document.querySelector(`link[href=\"${url}\"]`)) {\r\n\t\t\t\tconst styleTag = document.createElement(\"link\");\r\n\t\t\t\tstyleTag.rel = \"stylesheet\";\r\n\t\t\t\tstyleTag.href = url;\r\n\t\t\t\tdocument.head.appendChild(styleTag);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t// 高亮并放大选中文字\r\n\tconst handleSelection = () => {\r\n\t\tconst selection = window.getSelection();\r\n\t\tif (!selection.rangeCount) {\r\n\t\t\tconsole.log(\"没有选中内容\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst range = selection.getRangeAt(0);\r\n\t\tconst selectedHtml = range.cloneContents();\r\n\r\n\t\t// 创建临时容器\r\n\t\tconst tempDiv = document.createElement(\"div\");\r\n\t\ttempDiv.appendChild(selectedHtml);\r\n\r\n\t\t// 判断选中的内容是否包含表格等 HTML 元素\r\n\t\tconst table = tempDiv.querySelector(\"table\");\r\n\t\tif (table) {\r\n\t\t\tconsole.log(\"选中了表格内容\");\r\n\t\t\ttable.classList.add(\"custom-table\");\r\n\t\t\temit(\"select\", tempDiv.innerHTML); // 触发 select 事件\r\n\t\t} else {\r\n\t\t\tconst text = selection.toString().trim();\r\n\t\t\tif (!text) {\r\n\t\t\t\tconsole.log(\"选中的文字为空\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tconsole.log(\"选中的文字:\", text);\r\n\t\t\temit(\"select\", text); // 触发 select 事件\r\n\t\t}\r\n\t};\r\n\r\n\t// 组件挂载后加载 Wikipedia 内容\r\n\tonMounted(() => {\r\n\t\tfetchWikipediaContent();\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.wikipedia-content {\r\n\t\tmax-width: 800px;\r\n\t\tmargin: 0 auto;\r\n\t\tpadding: 20px;\r\n\t\tfont-family: sans-serif;\r\n\t\tfont-size: 0.6vw;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}