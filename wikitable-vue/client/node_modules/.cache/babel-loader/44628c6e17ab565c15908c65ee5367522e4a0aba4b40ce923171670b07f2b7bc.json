{"ast":null,"code":"/**\r\n * 维基百科Infobox专业解析器\r\n * 提取结构化可对比数据，保留数值、百分比、排名等关键信息\r\n */\nexport function parseInfoboxForComparison(infoboxElement) {\n  if (!infoboxElement) return null;\n\n  // 1. 提取标题和基本信息\n  const result = {\n    title: extractTitle(infoboxElement),\n    type: detectInfoboxType(infoboxElement),\n    sections: {}\n  };\n\n  // 2. 按section分组处理数据\n  let currentSection = \"基本信息\";\n  const rows = infoboxElement.querySelectorAll('tr');\n  rows.forEach(row => {\n    // 2.1 处理section标题行\n    if (row.querySelector('th[colspan=\"2\"]')) {\n      currentSection = cleanText(row.textContent) || currentSection;\n      result.sections[currentSection] = result.sections[currentSection] || {};\n      return;\n    }\n\n    // 2.2 处理普通数据行\n    const th = row.querySelector('th');\n    const td = row.querySelector('td');\n    if (!th || !td) return;\n    const key = cleanFieldName(th.textContent);\n    const value = extractComparableValue(td);\n    if (key && value) {\n      result.sections[currentSection] = result.sections[currentSection] || {};\n      result.sections[currentSection][key] = value;\n    }\n  });\n  return result;\n}\n\n/* 核心提取函数 */\nfunction extractComparableValue(tdElement) {\n  const td = tdElement.cloneNode(true);\n\n  // 移除不需要的元素\n  ['img', 'sup', '.reference', '.mw-editsection'].forEach(selector => {\n    td.querySelectorAll(selector).forEach(el => el.remove());\n  });\n  const text = cleanText(td.textContent);\n\n  // 特殊处理包含列表的情况\n  if (td.querySelector('ul, ol')) {\n    return Array.from(td.querySelectorAll('li')).map(li => {\n      return extractValueFromText(cleanText(li.textContent));\n    });\n  }\n  return extractValueFromText(text);\n}\n\n/* 值提取逻辑 */\nfunction extractValueFromText(text) {\n  // 1. 提取百分比值 (如 \"6.8%\")\n  const percentMatch = text.match(/(\\d+\\.?\\d*)%/);\n  if (percentMatch) return {\n    value: parseFloat(percentMatch[1]),\n    unit: \"%\",\n    raw: text\n  };\n\n  // 2. 提取货币值 (如 \"19.53 万亿美元\")\n  const currencyMatch = text.match(/([\\d,\\.]+)\\s*(万?亿?美元|¥|€|£)/);\n  if (currencyMatch) {\n    return {\n      value: parseFloat(currencyMatch[1].replace(/,/g, '')),\n      unit: currencyMatch[2],\n      raw: text\n    };\n  }\n\n  // 3. 提取纯数字 (如 \"1,408,050,000\")\n  const numberMatch = text.match(/^[\\d,\\.]+$/);\n  if (numberMatch) {\n    return {\n      value: parseFloat(text.replace(/,/g, '')),\n      raw: text\n    };\n  }\n\n  // 4. 提取排名信息 (如 \"第 69 名\")\n  const rankMatch = text.match(/第\\s*([零一二三四五六七八九十百千万\\d]+)\\s*名/);\n  if (rankMatch) return {\n    rank: chineseToNumber(rankMatch[1]),\n    raw: text\n  };\n\n  // 5. 提取年份数据 (如 \"(2023)\")\n  const yearMatch = text.match(/\\((\\d{4})\\)/);\n  const year = yearMatch ? parseInt(yearMatch[1]) : null;\n\n  // 6. 默认返回处理后的文本\n  return {\n    value: text,\n    ...(year && {\n      year\n    }),\n    raw: text\n  };\n}\n\n/* 辅助函数 */\nfunction extractTitle(element) {\n  const sources = [() => element.querySelector('caption')?.textContent, () => element.querySelector('.infobox-title')?.textContent, () => element.querySelector('th[colspan=\"2\"]')?.textContent];\n  for (const source of sources) {\n    const title = cleanText(source());\n    if (title) return title;\n  }\n  return \"无标题\";\n}\nfunction detectInfoboxType(element) {\n  const classText = `${element.className} ${element.textContent}`.toLowerCase();\n  if (/country|nation|state|国家/.test(classText)) return \"国家\";\n  if (/economy|经济/.test(classText)) return \"经济\";\n  if (/person|people|人物/.test(classText)) return \"人物\";\n  if (/company|公司/.test(classText)) return \"公司\";\n  return \"其他\";\n}\nfunction cleanFieldName(text) {\n  return cleanText(text).replace(/[:：]$/, '').replace(/\\s+/g, ' ').trim();\n}\nfunction cleanText(text) {\n  return (text || \"\").replace(/\\[\\d+\\]/g, '') // 去除引用标记[1]\n  .replace(/\\s+/g, ' ') // 合并空格\n  .replace(/[[\\]]/g, '') // 去除方括号\n  .trim();\n}\n\n/* 中文数字转换 */\nfunction chineseToNumber(chinese) {\n  const map = {\n    零: 0,\n    一: 1,\n    二: 2,\n    三: 3,\n    四: 4,\n    五: 5,\n    六: 6,\n    七: 7,\n    八: 8,\n    九: 9,\n    十: 10\n  };\n  return parseInt(chinese.split('').map(c => map[c] || c).join(''));\n}","map":{"version":3,"names":["parseInfoboxForComparison","infoboxElement","result","title","extractTitle","type","detectInfoboxType","sections","currentSection","rows","querySelectorAll","forEach","row","querySelector","cleanText","textContent","th","td","key","cleanFieldName","value","extractComparableValue","tdElement","cloneNode","selector","el","remove","text","Array","from","map","li","extractValueFromText","percentMatch","match","parseFloat","unit","raw","currencyMatch","replace","numberMatch","rankMatch","rank","chineseToNumber","yearMatch","year","parseInt","element","sources","source","classText","className","toLowerCase","test","trim","chinese","零","一","二","三","四","五","六","七","八","九","十","split","c","join"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/js/wikiInfoboxParser.js"],"sourcesContent":["/**\r\n * 维基百科Infobox专业解析器\r\n * 提取结构化可对比数据，保留数值、百分比、排名等关键信息\r\n */\r\nexport function parseInfoboxForComparison(infoboxElement) {\r\n  if (!infoboxElement) return null;\r\n\r\n  // 1. 提取标题和基本信息\r\n  const result = {\r\n      title: extractTitle(infoboxElement),\r\n      type: detectInfoboxType(infoboxElement),\r\n      sections: {}\r\n  };\r\n\r\n  // 2. 按section分组处理数据\r\n  let currentSection = \"基本信息\";\r\n  const rows = infoboxElement.querySelectorAll('tr');\r\n\r\n  rows.forEach(row => {\r\n      // 2.1 处理section标题行\r\n      if (row.querySelector('th[colspan=\"2\"]')) {\r\n          currentSection = cleanText(row.textContent) || currentSection;\r\n          result.sections[currentSection] = result.sections[currentSection] || {};\r\n          return;\r\n      }\r\n\r\n      // 2.2 处理普通数据行\r\n      const th = row.querySelector('th');\r\n      const td = row.querySelector('td');\r\n      if (!th || !td) return;\r\n\r\n      const key = cleanFieldName(th.textContent);\r\n      const value = extractComparableValue(td);\r\n\r\n      if (key && value) {\r\n          result.sections[currentSection] = result.sections[currentSection] || {};\r\n          result.sections[currentSection][key] = value;\r\n      }\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\n/* 核心提取函数 */\r\nfunction extractComparableValue(tdElement) {\r\n  const td = tdElement.cloneNode(true);\r\n  \r\n  // 移除不需要的元素\r\n  ['img', 'sup', '.reference', '.mw-editsection'].forEach(selector => {\r\n      td.querySelectorAll(selector).forEach(el => el.remove());\r\n  });\r\n\r\n  const text = cleanText(td.textContent);\r\n  \r\n  // 特殊处理包含列表的情况\r\n  if (td.querySelector('ul, ol')) {\r\n      return Array.from(td.querySelectorAll('li')).map(li => {\r\n          return extractValueFromText(cleanText(li.textContent));\r\n      });\r\n  }\r\n  \r\n  return extractValueFromText(text);\r\n}\r\n\r\n/* 值提取逻辑 */\r\nfunction extractValueFromText(text) {\r\n  // 1. 提取百分比值 (如 \"6.8%\")\r\n  const percentMatch = text.match(/(\\d+\\.?\\d*)%/);\r\n  if (percentMatch) return { value: parseFloat(percentMatch[1]), unit: \"%\", raw: text };\r\n\r\n  // 2. 提取货币值 (如 \"19.53 万亿美元\")\r\n  const currencyMatch = text.match(/([\\d,\\.]+)\\s*(万?亿?美元|¥|€|£)/);\r\n  if (currencyMatch) {\r\n      return { \r\n          value: parseFloat(currencyMatch[1].replace(/,/g, '')), \r\n          unit: currencyMatch[2], \r\n          raw: text \r\n      };\r\n  }\r\n\r\n  // 3. 提取纯数字 (如 \"1,408,050,000\")\r\n  const numberMatch = text.match(/^[\\d,\\.]+$/);\r\n  if (numberMatch) {\r\n      return {\r\n          value: parseFloat(text.replace(/,/g, '')),\r\n          raw: text\r\n      };\r\n  }\r\n\r\n  // 4. 提取排名信息 (如 \"第 69 名\")\r\n  const rankMatch = text.match(/第\\s*([零一二三四五六七八九十百千万\\d]+)\\s*名/);\r\n  if (rankMatch) return { rank: chineseToNumber(rankMatch[1]), raw: text };\r\n\r\n  // 5. 提取年份数据 (如 \"(2023)\")\r\n  const yearMatch = text.match(/\\((\\d{4})\\)/);\r\n  const year = yearMatch ? parseInt(yearMatch[1]) : null;\r\n\r\n  // 6. 默认返回处理后的文本\r\n  return {\r\n      value: text,\r\n      ...(year && { year }),\r\n      raw: text\r\n  };\r\n}\r\n\r\n/* 辅助函数 */\r\nfunction extractTitle(element) {\r\n  const sources = [\r\n      () => element.querySelector('caption')?.textContent,\r\n      () => element.querySelector('.infobox-title')?.textContent,\r\n      () => element.querySelector('th[colspan=\"2\"]')?.textContent\r\n  ];\r\n  \r\n  for (const source of sources) {\r\n      const title = cleanText(source());\r\n      if (title) return title;\r\n  }\r\n  return \"无标题\";\r\n}\r\n\r\nfunction detectInfoboxType(element) {\r\n  const classText = `${element.className} ${element.textContent}`.toLowerCase();\r\n  if (/country|nation|state|国家/.test(classText)) return \"国家\";\r\n  if (/economy|经济/.test(classText)) return \"经济\";\r\n  if (/person|people|人物/.test(classText)) return \"人物\";\r\n  if (/company|公司/.test(classText)) return \"公司\";\r\n  return \"其他\";\r\n}\r\n\r\nfunction cleanFieldName(text) {\r\n  return cleanText(text)\r\n      .replace(/[:：]$/, '')\r\n      .replace(/\\s+/g, ' ')\r\n      .trim();\r\n}\r\n\r\nfunction cleanText(text) {\r\n  return (text || \"\")\r\n      .replace(/\\[\\d+\\]/g, '')      // 去除引用标记[1]\r\n      .replace(/\\s+/g, ' ')         // 合并空格\r\n      .replace(/[[\\]]/g, '')        // 去除方括号\r\n      .trim();\r\n}\r\n\r\n/* 中文数字转换 */\r\nfunction chineseToNumber(chinese) {\r\n  const map = { 零:0, 一:1, 二:2, 三:3, 四:4, 五:5, 六:6, 七:7, 八:8, 九:9, 十:10 };\r\n  return parseInt(chinese.split('').map(c => map[c] || c).join(''));\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}