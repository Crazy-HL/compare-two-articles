{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createVNode as _createVNode, normalizeClass as _normalizeClass, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-62c843dc\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = [\"id\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass(['div0', $props.selectContentClass]),\n    id: $props.divId,\n    ref: \"divRef\"\n  }, [_createElementVNode(\"h1\", null, _toDisplayString($setup.props.pageTitle), 1 /* TEXT */), $setup.loading ? (_openBlock(), _createBlock($setup[\"LoadingSpinner\"], {\n    key: 0\n  })) : $setup.error ? (_openBlock(), _createBlock($setup[\"ErrorDisplay\"], {\n    key: 1,\n    message: $setup.error,\n    onRetry: $setup.fetchWikipediaContent\n  }, null, 8 /* PROPS */, [\"message\"])) : (_openBlock(), _createBlock($setup[\"WikipediaContent\"], {\n    key: 2,\n    content: $setup.pageHtml,\n    onSelect: _ctx.handleSelection\n  }, null, 8 /* PROPS */, [\"content\", \"onSelect\"])), _createVNode($setup[\"TextPopup\"], {\n    visible: $setup.showPopup[$props.divId],\n    content: $setup.selectedText[$props.divId],\n    containerClass: $props.divId === 'div1' ? 'chart-container1' : 'chart-container2',\n    containerRef: $setup.divRef,\n    onClose: _ctx.closePopup\n  }, null, 8 /* PROPS */, [\"visible\", \"content\", \"containerClass\", \"containerRef\", \"onClose\"]), _createVNode($setup[\"ArticleOutline\"], {\n    content: $setup.pageHtml,\n    divId: $props.divId\n  }, null, 8 /* PROPS */, [\"content\", \"divId\"])], 10 /* CLASS, PROPS */, _hoisted_1);\n}","map":{"version":3,"names":["_createElementBlock","class","_normalizeClass","$props","selectContentClass","id","divId","ref","_createElementVNode","_toDisplayString","$setup","props","pageTitle","loading","_createBlock","key","error","message","onRetry","fetchWikipediaContent","content","pageHtml","onSelect","_ctx","handleSelection","_createVNode","visible","showPopup","selectedText","containerClass","containerRef","divRef","onClose","closePopup","_hoisted_1"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\ParentComponent.vue"],"sourcesContent":["<template>\r\n\t<div :class=\"['div0', selectContentClass]\" :id=\"divId\" ref=\"divRef\">\r\n\t\t<h1>{{ props.pageTitle }}</h1>\r\n\r\n\t\t<LoadingSpinner v-if=\"loading\" />\r\n\r\n\t\t<ErrorDisplay\r\n\t\t\tv-else-if=\"error\"\r\n\t\t\t:message=\"error\"\r\n\t\t\t@retry=\"fetchWikipediaContent\" />\r\n\r\n\t\t<WikipediaContent v-else :content=\"pageHtml\" @select=\"handleSelection\" />\r\n\r\n\t\t<TextPopup\r\n\t\t\t:visible=\"showPopup[divId]\"\r\n\t\t\t:content=\"selectedText[divId]\"\r\n\t\t\t:containerClass=\"\r\n\t\t\t\tdivId === 'div1' ? 'chart-container1' : 'chart-container2'\r\n\t\t\t\"\r\n\t\t\t:containerRef=\"divRef\"\r\n\t\t\t@close=\"closePopup\" />\r\n\r\n\t\t<ArticleOutline :content=\"pageHtml\" :divId=\"divId\" />\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted, nextTick } from \"vue\";\r\n\timport LoadingSpinner from \"./LoadingSpinner.vue\";\r\n\timport ErrorDisplay from \"./ErrorDisplay.vue\";\r\n\timport WikipediaContent from \"./WikipediaContent.vue\";\r\n\timport TextPopup from \"./TextPopup.vue\";\r\n\timport ArticleOutline from \"./ArticleOutline.vue\";\r\n\timport * as d3 from \"d3\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\timport { parseInfoboxForComparison } from \"@/js/wikiInfoboxParser\";\r\n\r\n\tconst props = defineProps({\r\n\t\tpageTitle: String,\r\n\t\tdivId: String,\r\n\t\tselectContentClass: String,\r\n\t\tlinkedOutline: Array\r\n\t});\r\n\r\n\tconst pageHtml = ref(\"\");\r\n\tconst loading = ref(true);\r\n\tconst error = ref(\"\");\r\n\tconst selectedText = ref({});\r\n\tconst showPopup = ref({});\r\n\tconst divRef = ref(null);\r\n\tconst highlightTimeouts = ref([]);\r\n\r\n\t// 获取维基百科内容\r\n\tconst fetchWikipediaContent = async () => {\r\n\t\ttry {\r\n\t\t\tconst apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(\r\n\t\t\t\tprops.pageTitle\r\n\t\t\t)}`;\r\n\t\t\tconst response = await fetch(apiUrl);\r\n\t\t\tif (!response.ok) throw new Error(\"Failed to fetch data\");\r\n\r\n\t\t\tconst html = await response.text();\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\r\n\t\t\t// 提取并解析infobox\r\n\t\t\tconst infobox = doc.querySelector(\".infobox, .sidebar, .toccolours\");\r\n\t\t\tconst comparisonData = parseInfoboxForComparison(infobox);\r\n\t\t\tconst sidebar = doc.querySelector(\".sidebar\");\r\n\t\t\tif (sidebar) sidebar.remove();\r\n\r\n\t\t\t// 发送Infobox数据\r\n\t\t\tbus.emit(`${props.divId}_InfoboxData`, comparisonData);\r\n\t\t\tconsole.log(`发送 ${props.divId} Infobox数据:`, comparisonData);\r\n\r\n\t\t\t// 为标题添加唯一ID\r\n\t\t\tconst headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\r\n\t\t\theadings.forEach((heading, index) => {\r\n\t\t\t\tconst uniqueId = `heading-${index}-${props.divId}`;\r\n\t\t\t\theading.id = uniqueId;\r\n\t\t\t});\r\n\r\n\t\t\t// 为表格添加类名\r\n\t\t\tconst tables = doc.querySelectorAll(\"table\");\r\n\t\t\ttables.forEach(table => {\r\n\t\t\t\ttable.classList.add(\"custom-table\");\r\n\t\t\t});\r\n\r\n\t\t\t// 动态注入维基百科样式\r\n\t\t\tconst styles = Array.from(doc.querySelectorAll('link[rel=\"stylesheet\"]'));\r\n\t\t\tstyles.forEach(link => {\r\n\t\t\t\tif (!document.querySelector(`link[href=\"${link.href}\"]`)) {\r\n\t\t\t\t\tconst styleTag = document.createElement(\"link\");\r\n\t\t\t\t\tstyleTag.rel = \"stylesheet\";\r\n\t\t\t\t\tstyleTag.href = link.href;\r\n\t\t\t\t\tdocument.head.appendChild(styleTag);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// 获取正文内容\r\n\t\t\tconst contentElement = doc.querySelector(\"body\");\r\n\t\t\tif (!contentElement) throw new Error(\"Content not found\");\r\n\r\n\t\t\tpageHtml.value = contentElement.innerHTML;\r\n\t\t\tinjectWikipediaStyles();\r\n\t\t} catch (err) {\r\n\t\t\terror.value = \"Error fetching Wikipedia content: \" + err.message;\r\n\t\t\tconsole.error(\"获取维基百科内容失败:\", err);\r\n\t\t} finally {\r\n\t\t\tloading.value = false;\r\n\t\t}\r\n\t};\r\n\r\n\t// 注入维基百科样式\r\n\tconst injectWikipediaStyles = () => {\r\n\t\tconst wikipediaStyles = [\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=site.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=ext.cite.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=ext.scribunto.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=skins.vector.styles\"\r\n\t\t];\r\n\r\n\t\twikipediaStyles.forEach(url => {\r\n\t\t\tif (!document.querySelector(`link[href=\"${url}\"]`)) {\r\n\t\t\t\tconst styleTag = document.createElement(\"link\");\r\n\t\t\t\tstyleTag.rel = \"stylesheet\";\r\n\t\t\t\tstyleTag.href = url;\r\n\t\t\t\tdocument.head.appendChild(styleTag);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t// 处理Infobox高亮\r\n\tconst handleHighlightInfobox = ({\r\n\t\tfieldKey,\r\n\t\tinfoboxTitle,\r\n\t\texactMatch,\r\n\t\tmatchRules\r\n\t}) => {\r\n\t\tif (props.pageTitle !== infoboxTitle) return;\r\n\r\n\t\tconst infobox = divRef.value.querySelector(\r\n\t\t\t\".infobox, .sidebar, .toccolours\"\r\n\t\t);\r\n\t\tif (!infobox) return;\r\n\r\n\t\t// 清除旧高亮和超时\r\n\t\tclearInfoboxHighlights();\r\n\r\n\t\t// 准备搜索关键词\r\n\t\tconst searchPatterns = prepareSearchPatterns(\r\n\t\t\tfieldKey,\r\n\t\t\tmatchRules,\r\n\t\t\texactMatch\r\n\t\t);\r\n\r\n\t\t// 执行高亮\r\n\t\thighlightMatchingRows(infobox, searchPatterns, exactMatch);\r\n\t};\r\n\r\n\t// 准备搜索模式\r\n\tconst prepareSearchPatterns = (fieldKey, matchRules, exactMatch) => {\r\n\t\tconst patterns = [];\r\n\r\n\t\t// 添加包含规则\r\n\t\tif (matchRules?.include?.length) {\r\n\t\t\tpatterns.push(...matchRules.include);\r\n\t\t} else {\r\n\t\t\t// 默认包含字段名本身\r\n\t\t\tpatterns.push(fieldKey);\r\n\r\n\t\t\t// 常见变体\r\n\t\t\tpatterns.push(\r\n\t\t\t\tfieldKey + \":\",\r\n\t\t\t\tfieldKey + \" (\",\r\n\t\t\t\tfieldKey.replace(/\\s*\\(.*?\\)\\s*/g, \"\") // 移除括号内容\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// 精确匹配时添加更多变体\r\n\t\tif (exactMatch) {\r\n\t\t\tpatterns.push(\r\n\t\t\t\tfieldKey.split(\"(\")[0].trim(), // 取括号前内容\r\n\t\t\t\tfieldKey.split(/[\\s,;-]/)[0] // 取第一个单词\r\n\t\t\t);\r\n\r\n\t\t\t// 处理GDP特殊案例\r\n\t\t\tif (fieldKey === \"GDP\") {\r\n\t\t\t\tpatterns.push(\"Gross domestic product\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 去重\r\n\t\tconst uniquePatterns = [...new Set(patterns.filter(p => p))];\r\n\r\n\t\tconsole.log(\"生成的搜索模式:\", {\r\n\t\t\tfieldKey,\r\n\t\t\texactMatch,\r\n\t\t\tpatterns: uniquePatterns,\r\n\t\t\texclude: matchRules?.exclude || []\r\n\t\t});\r\n\r\n\t\treturn {\r\n\t\t\tinclude: uniquePatterns,\r\n\t\t\texclude: matchRules?.exclude || []\r\n\t\t};\r\n\t};\r\n\r\n\t// 高亮匹配行\r\n\tconst highlightMatchingRows = (infobox, searchPatterns, exactMatch) => {\r\n\t\tlet foundExactMatch = false;\r\n\r\n\t\tinfobox.querySelectorAll(\"tr\").forEach(row => {\r\n\t\t\tconst th = row.querySelector(\"th\");\r\n\t\t\tif (!th) return;\r\n\r\n\t\t\tconst rowText = th.textContent.trim();\r\n\t\t\tconst normalizedRowText = rowText.toLowerCase().replace(/[^a-z0-9]/g, \"\");\r\n\r\n\t\t\t// 检查排除规则\r\n\t\t\tconst isExcluded = searchPatterns.exclude.some(excludeTerm => {\r\n\t\t\t\treturn normalizedRowText.includes(excludeTerm.toLowerCase());\r\n\t\t\t});\r\n\t\t\tif (isExcluded) return;\r\n\r\n\t\t\t// 检查包含规则\r\n\t\t\tconst isMatch = searchPatterns.include.some(pattern => {\r\n\t\t\t\tconst normalizedPattern = pattern\r\n\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t.replace(/[^a-z0-9]/g, \"\");\r\n\r\n\t\t\t\tif (exactMatch) {\r\n\t\t\t\t\t// 精确匹配要求更高\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\tnormalizedRowText === normalizedPattern ||\r\n\t\t\t\t\t\trowText.startsWith(pattern + \" \") ||\r\n\t\t\t\t\t\trowText.startsWith(pattern + \":\") ||\r\n\t\t\t\t\t\trowText.startsWith(pattern + \"(\") ||\r\n\t\t\t\t\t\trowText === pattern\r\n\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// 非精确匹配更宽松\r\n\t\t\t\t\treturn normalizedRowText.includes(normalizedPattern);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (isMatch) {\r\n\t\t\t\tif (exactMatch) foundExactMatch = true;\r\n\t\t\t\thighlightRow(row, exactMatch ? \"exact\" : \"partial\");\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// 如果找到精确匹配，清除所有部分匹配\r\n\t\tif (foundExactMatch) {\r\n\t\t\tinfobox.querySelectorAll(\".infobox-highlight-partial\").forEach(row => {\r\n\t\t\t\trow.classList.remove(\"infobox-highlight-partial\");\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t// 高亮单行\r\n\tconst highlightRow = (row, highlightType) => {\r\n\t\tconst highlightClass =\r\n\t\t\thighlightType === \"exact\"\r\n\t\t\t\t? \"infobox-highlight-exact\"\r\n\t\t\t\t: \"infobox-highlight-partial\";\r\n\r\n\t\trow.classList.add(highlightClass);\r\n\r\n\t\t// 自动滚动到视图\r\n\t\tif (highlightType === \"exact\") {\r\n\t\t\trow.scrollIntoView({ behavior: \"smooth\", block: \"nearest\" });\r\n\t\t}\r\n\r\n\t\t// 设置自动取消高亮\r\n\t\tconst timeout = setTimeout(\r\n\t\t\t() => {\r\n\t\t\t\trow.classList.remove(highlightClass);\r\n\t\t\t},\r\n\t\t\thighlightType === \"exact\" ? 3000 : 1500\r\n\t\t);\r\n\r\n\t\t// 存储timeout以便清理\r\n\t\thighlightTimeouts.value.push(timeout);\r\n\t};\r\n\r\n\t// 清除所有高亮\r\n\tconst clearInfoboxHighlights = () => {\r\n\t\t// 清除所有超时\r\n\t\thighlightTimeouts.value.forEach(timeout => clearTimeout(timeout));\r\n\t\thighlightTimeouts.value = [];\r\n\r\n\t\t// 清除所有高亮类\r\n\t\tconst infobox = divRef.value.querySelector(\r\n\t\t\t\".infobox, .sidebar, .toccolours\"\r\n\t\t);\r\n\t\tif (infobox) {\r\n\t\t\tinfobox\r\n\t\t\t\t.querySelectorAll(\r\n\t\t\t\t\t\".infobox-highlight-exact, .infobox-highlight-partial\"\r\n\t\t\t\t)\r\n\t\t\t\t.forEach(row => {\r\n\t\t\t\t\trow.classList.remove(\r\n\t\t\t\t\t\t\"infobox-highlight-exact\",\r\n\t\t\t\t\t\t\"infobox-highlight-partial\"\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t// 处理Infobox悬停\r\n\tconst handleHoverInfobox = ({ fieldKey, infoboxTitle }) => {\r\n\t\tif (props.pageTitle !== infoboxTitle) return;\r\n\r\n\t\tconst infobox = divRef.value.querySelector(\r\n\t\t\t\".infobox, .sidebar, .toccolours\"\r\n\t\t);\r\n\t\tif (!infobox) return;\r\n\r\n\t\t// 清除旧悬停\r\n\t\tinfobox.querySelectorAll(\".infobox-hover\").forEach(row => {\r\n\t\t\trow.classList.remove(\"infobox-hover\");\r\n\t\t});\r\n\r\n\t\t// 添加新悬停\r\n\t\tconst normalizedFieldKey = fieldKey.toLowerCase().replace(/[^a-z0-9]/g, \"\");\r\n\r\n\t\tinfobox.querySelectorAll(\"tr\").forEach(row => {\r\n\t\t\tconst th = row.querySelector(\"th\");\r\n\t\t\tif (th) {\r\n\t\t\t\tconst normalizedText = th.textContent\r\n\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t.replace(/[^a-z0-9]/g, \"\");\r\n\r\n\t\t\t\tif (normalizedText.includes(normalizedFieldKey)) {\r\n\t\t\t\t\trow.classList.add(\"infobox-hover\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t// 处理Infobox悬停结束\r\n\tconst handleUnhoverInfobox = () => {\r\n\t\tconst infobox = divRef.value.querySelector(\r\n\t\t\t\".infobox, .sidebar, .toccolours\"\r\n\t\t);\r\n\t\tif (infobox) {\r\n\t\t\tinfobox.querySelectorAll(\".infobox-hover\").forEach(row => {\r\n\t\t\t\trow.classList.remove(\"infobox-hover\");\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t// 组件挂载\r\n\tonMounted(() => {\r\n\t\tconsole.log(`挂载 ${props.divId} 组件`);\r\n\t\tfetchWikipediaContent();\r\n\r\n\t\tif (divRef.value) {\r\n\t\t\tdivRef.value.addEventListener(\"scroll\", updatePopupPosition);\r\n\t\t}\r\n\r\n\t\tconst highlightEvent = `highlight-${\r\n\t\t\tprops.divId === \"div1\" ? \"left\" : \"right\"\r\n\t\t}-infobox`;\r\n\t\tconst hoverEvent = `hover-${\r\n\t\t\tprops.divId === \"div1\" ? \"left\" : \"right\"\r\n\t\t}-infobox`;\r\n\t\tconst unhoverEvent = `unhover-${\r\n\t\t\tprops.divId === \"div1\" ? \"left\" : \"right\"\r\n\t\t}-infobox`;\r\n\r\n\t\tbus.on(highlightEvent, handleHighlightInfobox);\r\n\t\tbus.on(hoverEvent, handleHoverInfobox);\r\n\t\tbus.on(unhoverEvent, handleUnhoverInfobox);\r\n\r\n\t\tbus.on(`${props.divId}Event`, ({ content, sourceId }) => {\r\n\t\t\tconsole.log(`接收到 ${props.divId} 事件`);\r\n\t\t\tselectedText.value[props.divId] = content;\r\n\t\t\tshowPopup.value[props.divId] = true;\r\n\t\t\tnextTick(() => {\r\n\t\t\t\tupdatePopupPosition();\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n\r\n\t// 组件卸载\r\n\tonUnmounted(() => {\r\n\t\tconsole.log(`卸载 ${props.divId} 组件`);\r\n\t\tif (divRef.value) {\r\n\t\t\tdivRef.value.removeEventListener(\"scroll\", updatePopupPosition);\r\n\t\t}\r\n\r\n\t\tclearInfoboxHighlights();\r\n\r\n\t\tconst highlightEvent = `highlight-${\r\n\t\t\tprops.divId === \"div1\" ? \"left\" : \"right\"\r\n\t\t}-infobox`;\r\n\t\tconst hoverEvent = `hover-${\r\n\t\t\tprops.divId === \"div1\" ? \"left\" : \"right\"\r\n\t\t}-infobox`;\r\n\t\tconst unhoverEvent = `unhover-${\r\n\t\t\tprops.divId === \"div1\" ? \"left\" : \"right\"\r\n\t\t}-infobox`;\r\n\r\n\t\tbus.off(highlightEvent, handleHighlightInfobox);\r\n\t\tbus.off(hoverEvent, handleHoverInfobox);\r\n\t\tbus.off(unhoverEvent, handleUnhoverInfobox);\r\n\t\tbus.off(`${props.divId}Event`);\r\n\t});\r\n\r\n\t// 以下是原有方法保持不变...\r\n\t// extractLinkedChapterContent, handleSelection, handleSelectionWithSourceId,\r\n\t// closePopup, updatePopupPosition 等方法保持不变\r\n</script>\r\n\r\n<style scoped>\r\n\t/* 原有样式保持不变 */\r\n</style>\r\n\r\n<style>\r\n\t/* 全局高亮样式 */\r\n\t.infobox-highlight-exact th,\r\n\t.infobox-highlight-exact td,\r\n\t.sidebar-highlight-exact th,\r\n\t.sidebar-highlight-exact td,\r\n\t.toccolours-highlight-exact th,\r\n\t.toccolours-highlight-exact td {\r\n\t\tbackground-color: #fffacd !important;\r\n\t\tbox-shadow: 0 0 0 2px #ffeb3b !important;\r\n\t\tposition: relative;\r\n\t\tz-index: 1;\r\n\t}\r\n\r\n\t.infobox-highlight-partial th,\r\n\t.infobox-highlight-partial td,\r\n\t.sidebar-highlight-partial th,\r\n\t.sidebar-highlight-partial td,\r\n\t.toccolours-highlight-partial th,\r\n\t.toccolours-highlight-partial td {\r\n\t\tbackground-color: #f5f5f5 !important;\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t.infobox-hover th,\r\n\t.infobox-hover td,\r\n\t.sidebar-hover th,\r\n\t.sidebar-hover td,\r\n\t.toccolours-hover th,\r\n\t.toccolours-hover td {\r\n\t\tbackground-color: #e3f2fd !important;\r\n\t}\r\n\r\n\t/* 添加箭头标记精确匹配 */\r\n\t.infobox-highlight-exact td:first-child::after {\r\n\t\tcontent: \"→\";\r\n\t\tcolor: #ff5722;\r\n\t\tfont-weight: bold;\r\n\t\tmargin-left: 5px;\r\n\t\tanimation: blink 1s infinite;\r\n\t}\r\n\r\n\t@keyframes blink {\r\n\t\t0%,\r\n\t\t100% {\r\n\t\t\topacity: 1;\r\n\t\t}\r\n\t\t50% {\r\n\t\t\topacity: 0.5;\r\n\t\t}\r\n\t}\r\n</style>\r\n"],"mappings":";;mBAAA;;uBACCA,mBAAA,CAsBM;IAtBAC,KAAK,EADZC,eAAA,UACuBC,MAAA,CAAAC,kBAAkB;IAAIC,EAAE,EAAEF,MAAA,CAAAG,KAAK;IAAEC,GAAG,EAAC;MAC1DC,mBAAA,CAA8B,YAAAC,gBAAA,CAAvBC,MAAA,CAAAC,KAAK,CAACC,SAAS,kBAEAF,MAAA,CAAAG,OAAO,I,cAA7BC,YAAA,CAAiCJ,MAAA;IAJnCK,GAAA;EAAA,MAOcL,MAAA,CAAAM,KAAK,I,cADjBF,YAAA,CAGkCJ,MAAA;IATpCK,GAAA;IAQIE,OAAO,EAAEP,MAAA,CAAAM,KAAK;IACdE,OAAK,EAAER,MAAA,CAAAS;yDAETL,YAAA,CAAyEJ,MAAA;IAX3EK,GAAA;IAW4BK,OAAO,EAAEV,MAAA,CAAAW,QAAQ;IAAGC,QAAM,EAAEC,IAAA,CAAAC;qDAEtDC,YAAA,CAOuBf,MAAA;IANrBgB,OAAO,EAAEhB,MAAA,CAAAiB,SAAS,CAACxB,MAAA,CAAAG,KAAK;IACxBc,OAAO,EAAEV,MAAA,CAAAkB,YAAY,CAACzB,MAAA,CAAAG,KAAK;IAC3BuB,cAAc,EAAQ1B,MAAA,CAAAG,KAAK;IAG3BwB,YAAY,EAAEpB,MAAA,CAAAqB,MAAM;IACpBC,OAAK,EAAET,IAAA,CAAAU;gGAETR,YAAA,CAAqDf,MAAA;IAApCU,OAAO,EAAEV,MAAA,CAAAW,QAAQ;IAAGf,KAAK,EAAEH,MAAA,CAAAG;yEAtB9C4B,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}