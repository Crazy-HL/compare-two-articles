{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-201e19b8\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"full-chart-container\"\n};\nconst _hoisted_2 = {\n  ref: \"chartContainer\",\n  class: \"full-chart\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"no-data-message\"\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", null, \"无数据可显示\", -1 /* HOISTED */));\nconst _hoisted_5 = [_hoisted_4];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [!_ctx.hasData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [..._hoisted_5])) : _createCommentVNode(\"v-if\", true)], 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["class","ref","key","_createElementVNode","_hoisted_4","_createElementBlock","_hoisted_1","_hoisted_2","_ctx","hasData","_hoisted_3","_hoisted_5","_createCommentVNode"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\FullChart.vue"],"sourcesContent":["<template>\r\n\t<div class=\"full-chart-container\">\r\n\t\t<div ref=\"chartContainer\" class=\"full-chart\">\r\n\t\t\t<div v-if=\"!hasData\" class=\"no-data-message\">\r\n\t\t\t\t<span>无数据可显示</span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, onMounted, watch, onUnmounted } from \"vue\";\r\n\timport * as d3 from \"d3\";\r\n\r\n\tconst props = defineProps({\r\n\t  data: {\r\n\t    type: Object,\r\n\t    default: () => ({\r\n\t      type: \"line\",\r\n\t      data: []\r\n\t    }),\r\n\t    validator: value => {\r\n\t      return value && ['line', 'bar'].includes(value.type) &&\r\n\t             Array.isArray(value.data);\r\n\t    }\r\n\t  },\r\n\t  compareData: {\r\n\t    type: Array,\r\n\t    default: () => [],\r\n\t    validator: value => Array.isArray(value)\r\n\t  },\r\n\t  title: {\r\n\t    type: String,\r\n\t    default: \"\"\r\n\t  },\r\n\t  side: {\r\n\t    type: String,\r\n\t    default: \"left\",\r\n\t    validator: value => ['left', 'right'].includes(value)\r\n\t  }\r\n\t});\r\n\r\n\tconst chartContainer = ref(null);\r\n\tconst color = computed(() => props.side === \"left\" ? \"#4a90e2\" : \"#ef4444\");\r\n\tconst highlightColor = \"#FFD700\";\r\n\tconst hasData = computed(() => {\r\n\t  return props.data?.data?.length > 0 &&\r\n\t         props.data.data.every(item => item && !isNaN(item.year) && !isNaN(item.value));\r\n\t});\r\n\r\n\tconst formatValue = (value) => {\r\n\t  if (value >= 1000000) return `$${(value / 1000000).toFixed(1)}M`;\r\n\t  if (value >= 1000) return `$${(value / 1000).toFixed(1)}K`;\r\n\t  return value.toLocaleString();\r\n\t};\r\n\r\n\tconst getCommonYears = (data1, data2) => {\r\n\t  const years1 = new Set(data1.map(d => d.year));\r\n\t  const years2 = new Set(data2.map(d => d.year));\r\n\t  return [...years1].filter(year => years2.has(year)));\r\n\t};\r\n\r\n\tconst drawBarChart = (svg, data, x, y, width, height) => {\r\n\t  svg.selectAll(\".bar\")\r\n\t    .data(data)\r\n\t    .enter()\r\n\t    .append(\"rect\")\r\n\t    .attr(\"class\", \"bar\")\r\n\t    .attr(\"x\", d => x(d.year.toString()))\r\n\t    .attr(\"width\", x.bandwidth())\r\n\t    .attr(\"y\", d => y(d.value))\r\n\t    .attr(\"height\", d => height - y(d.value))\r\n\t    .attr(\"fill\", color.value)\r\n\t    .attr(\"rx\", 2)\r\n\t    .attr(\"ry\", 2);\r\n\r\n\t  svg.selectAll(\".bar-label\")\r\n\t    .data(data)\r\n\t    .enter()\r\n\t    .append(\"text\")\r\n\t    .attr(\"class\", \"bar-label\")\r\n\t    .attr(\"x\", d => x(d.year.toString()) + x.bandwidth() / 2)\r\n\t    .attr(\"y\", d => y(d.value) - 5)\r\n\t    .attr(\"text-anchor\", \"middle\")\r\n\t    .text(d => formatValue(d.value))\r\n\t    .attr(\"font-size\", \"12px\")\r\n\t    .attr(\"fill\", \"#64748b\")\r\n\t    .style(\"visibility\", d => (height - y(d.value) > 20 ? \"visible\" : \"hidden\"));\r\n\t};\r\n\r\n\tconst drawLineChart = (svg, data, x, y) => {\r\n\t  const line = d3.line()\r\n\t    .x(d => x(d.year))\r\n\t    .y(d => y(d.value))\r\n\t    .curve(d3.curveMonotoneX);\r\n\r\n\t  svg.append(\"path\")\r\n\t    .datum(data)\r\n\t    .attr(\"fill\", \"none\")\r\n\t    .attr(\"stroke\", color.value)\r\n\t    .attr(\"stroke-width\", 3)\r\n\t    .attr(\"d\", line);\r\n\r\n\t  svg.selectAll(\".dot\")\r\n\t    .data(data)\r\n\t    .enter()\r\n\t    .append(\"circle\")\r\n\t    .attr(\"class\", \"dot\")\r\n\t    .attr(\"cx\", d => x(d.year))\r\n\t    .attr(\"cy\", d => y(d.value))\r\n\t    .attr(\"r\", 6)\r\n\t    .attr(\"fill\", color.value)\r\n\t    .attr(\"stroke\", \"white\")\r\n\t    .attr(\"stroke-width\", 2);\r\n\r\n\t  if (props.compareData && props.compareData.length > 0) {\r\n\t    const validCompareData = props.compareData.filter(\r\n\t      item => item && !isNaN(item.year) && !isNaN(item.value)\r\n\t    );\r\n\r\n\t    if (validCompareData.length > 0) {\r\n\t      const commonYears = getCommonYears(data, validCompareData);\r\n\r\n\t      commonYears.forEach(year => {\r\n\t        const points = data.filter(d => d.year === year);\r\n\t        points.forEach(point => {\r\n\t          svg.append(\"circle\")\r\n\t            .attr(\"cx\", x(point.year))\r\n\t            .attr(\"cy\", y(point.value))\r\n\t            .attr(\"r\", 8)\r\n\t            .attr(\"fill\", highlightColor)\r\n\t            .attr(\"stroke\", \"#FF8C00\")\r\n\t            .attr(\"stroke-width\", 2)\r\n\t            .attr(\"class\", \"highlight-point\");\r\n\t        });\r\n\t      });\r\n\t    }\r\n\t  }\r\n\r\n\t  svg.selectAll(\".text\")\r\n\t    .data(data)\r\n\t    .enter()\r\n\t    .append(\"text\")\r\n\t    .attr(\"x\", d => x(d.year))\r\n\t    .attr(\"y\", d => y(d.value) - 12)\r\n\t    .text(d => formatValue(d.value))\r\n\t    .attr(\"font-size\", \"12px\")\r\n\t    .attr(\"text-anchor\", \"middle\")\r\n\t    .attr(\"fill\", color.value);\r\n\t};\r\n\r\n\tconst drawChart = () => {\r\n\t  if (!chartContainer.value || !hasData.value) {\r\n\t    d3.select(chartContainer.value).selectAll(\"*\").remove();\r\n\t    return;\r\n\t  }\r\n\r\n\t  try {\r\n\t    d3.select(chartContainer.value).selectAll(\"*\").remove();\r\n\r\n\t    const containerWidth = chartContainer.value.clientWidth;\r\n\t    const containerHeight = chartContainer.value.clientHeight;\r\n\t    const margin = {\r\n\t      top: Math.min(30, containerHeight * 0.1),\r\n\t      right: Math.min(30, containerWidth * 0.05),\r\n\t      bottom: Math.min(50, containerHeight * 0.15),\r\n\t      left: Math.min(50, containerWidth * 0.1)\r\n\t    };\r\n\r\n\t    const width = containerWidth - margin.left - margin.right;\r\n\t    const height = containerHeight - margin.top - margin.bottom;\r\n\r\n\t    const svg = d3.select(chartContainer.value)\r\n\t      .append(\"svg\")\r\n\t      .attr(\"width\", \"100%\")\r\n\t      .attr(\"height\", \"100%\")\r\n\t      .attr(\"viewBox\", `0 0 ${containerWidth} ${containerHeight}`)\r\n\t      .append(\"g\")\r\n\t      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n\t    const validData = props.data.data\r\n\t      .filter(item => item && !isNaN(item.year) && !isNaN(item.value))\r\n\t      .sort((a, b) => a.year - b.year);\r\n\r\n\t    if (validData.length === 0) return;\r\n\r\n\t    const x = props.data.type === \"bar\"\r\n\t      ? d3.scaleBand()\r\n\t          .domain(validData.map(d => d.year.toString()))\r\n\t          .range([0, width])\r\n\t          .padding(0.2)\r\n\t      : d3.scaleLinear()\r\n\t          .domain(d3.extent(validData, d => d.year))\r\n\t          .range([0, width]);\r\n\r\n\t    const y = d3.scaleLinear()\r\n\t      .domain([0, d3.max(validData, d => d.value) * 1.1])\r\n\t      .range([height, 0]);\r\n\r\n\t    svg.append(\"g\")\r\n\t      .attr(\"class\", \"grid\")\r\n\t      .call(d3.axisLeft(y).tickSize(-width).tickFormat(\"\"))\r\n\t      .selectAll(\"line\")\r\n\t      .attr(\"stroke\", \"#e2e8f0\")\r\n\t      .attr(\"stroke-dasharray\", \"2,2\");\r\n\r\n\t    svg.append(\"g\")\r\n\t      .attr(\"transform\", `translate(0,${height})`)\r\n\t      .call(props.data.type === \"bar\"\r\n\t        ? d3.axisBottom(x)\r\n\t        : d3.axisBottom(x).tickFormat(d3.format(\"d\")));\r\n\r\n\t    svg.append(\"g\")\r\n\t      .call(d3.axisLeft(y));\r\n\r\n\t    svg.append(\"text\")\r\n\t      .attr(\"transform\", `translate(${width/2},${height + margin.bottom * 0.7})`)\r\n\t      .style(\"text-anchor\", \"middle\")\r\n\t      .style(\"font-size\", \"12px\")\r\n\t      .text(\"年份\");\r\n\r\n\t    svg.append(\"text\")\r\n\t      .attr(\"transform\", \"rotate(-90)\")\r\n\t      .attr(\"y\", 0 - margin.left * 0.7)\r\n\t      .attr(\"x\", 0 - height/2)\r\n\t      .attr(\"dy\", \"1em\")\r\n\t      .style(\"text-anchor\", \"middle\")\r\n\t      .style(\"font-size\", \"12px\")\r\n\t      .text(\"数值\");\r\n\r\n\t    svg.append(\"text\")\r\n\t      .attr(\"x\", width/2)\r\n\t      .attr(\"y\", 0 - margin.top/2)\r\n\t      .attr(\"text-anchor\", \"middle\")\r\n\t      .style(\"font-size\", \"16px\")\r\n\t      .style(\"font-weight\", \"bold\")\r\n\t      .text(props.title);\r\n\r\n\t    if (props.data.type === \"bar\") {\r\n\t      drawBarChart(svg, validData, x, y, width, height);\r\n\t    } else {\r\n\t      drawLineChart(svg, validData, x, y);\r\n\t    }\r\n\t  } catch (error) {\r\n\t    console.error(\"图表渲染错误:\", error);\r\n\t  }\r\n\t};\r\n\r\n\twatch(() => [props.data, props.compareData, props.title], () => {\r\n\t  if (chartContainer.value) {\r\n\t    setTimeout(drawChart, 50);\r\n\t  }\r\n\t}, { deep: true });\r\n\r\n\tonMounted(() => {\r\n\t  setTimeout(drawChart, 100);\r\n\t  window.addEventListener(\"resize\", drawChart);\r\n\t});\r\n\r\n\tonUnmounted(() => {\r\n\t  window.removeEventListener(\"resize\", drawChart);\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.full-chart-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t\tpadding: 20px;\r\n\t\tbox-sizing: border-box;\r\n\t}\r\n\r\n\t.full-chart {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tmax-width: 900px;\r\n\t\tmax-height: 600px;\r\n\t\tposition: relative;\r\n\t\tbackground: white;\r\n\t\tborder-radius: 8px;\r\n\t\tbox-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t}\r\n\r\n\t.no-data-message {\r\n\t\tposition: absolute;\r\n\t\ttop: 50%;\r\n\t\tleft: 50%;\r\n\t\ttransform: translate(-50%, -50%);\r\n\t\ttext-align: center;\r\n\t\tcolor: #94a3b8;\r\n\t}\r\n\r\n\t.no-data-message span {\r\n\t\tdisplay: inline-block;\r\n\t\tpadding: 10px 20px;\r\n\t\tbackground: #f8f9fa;\r\n\t\tborder-radius: 4px;\r\n\t}\r\n\r\n\t.full-chart :deep(.highlight-point) {\r\n\t\tanimation: pulse 1.5s infinite ease-in-out;\r\n\t}\r\n\r\n\t@keyframes pulse {\r\n\t\t0% {\r\n\t\t\tr: 6;\r\n\t\t\topacity: 1;\r\n\t\t}\r\n\t\t50% {\r\n\t\t\tr: 8;\r\n\t\t\topacity: 0.8;\r\n\t\t}\r\n\t\t100% {\r\n\t\t\tr: 6;\r\n\t\t\topacity: 1;\r\n\t\t}\r\n\t}\r\n\r\n\t.full-chart :deep(.bar) {\r\n\t\ttransition: all 0.3s ease;\r\n\t}\r\n\r\n\t.full-chart :deep(.bar-label) {\r\n\t\tfont-family: system-ui, -apple-system, sans-serif;\r\n\t\tpointer-events: none;\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,KAAK,EAAC;AAAsB;;EAC3BC,GAAG,EAAC,gBAAgB;EAACD,KAAK,EAAC;;;EAFlCE,GAAA;EAGwBF,KAAK,EAAC;;gEAC1BG,mBAAA,CAAmB,cAAb,QAAM;oBAAZC,UAAmB,C;;uBAHtBC,mBAAA,CAMM,OANNC,UAMM,GALLH,mBAAA,CAIM,OAJNI,UAIM,G,CAHOC,IAAA,CAAAC,OAAO,I,cAAnBJ,mBAAA,CAEM,OAFNK,UAEM,EALT,IAAAC,UAAA,MAAAC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}