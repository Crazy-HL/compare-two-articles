{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-3099e432\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  ref: \"chartContainer\",\n  class: \"combined-line-chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","_createElementBlock","_hoisted_1"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\charts\\CombinedLineChart.vue"],"sourcesContent":["<template>\r\n\t<div ref=\"chartContainer\" class=\"combined-line-chart\"></div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, watch, onBeforeUnmount } from \"vue\";\r\n\timport * as echarts from \"echarts\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdata: {\r\n\t\t\ttype: Array,\r\n\t\t\trequired: true,\r\n\t\t\tvalidator: value =>\r\n\t\t\t\tvalue.every(\r\n\t\t\t\t\titem =>\r\n\t\t\t\t\t\titem.hasOwnProperty(\"source\") &&\r\n\t\t\t\t\t\titem.hasOwnProperty(\"year\") &&\r\n\t\t\t\t\t\titem.hasOwnProperty(\"value\")\r\n\t\t\t\t)\r\n\t\t}\r\n\t});\r\n\r\n\tconst chartContainer = ref(null);\r\n\tlet chartInstance = null;\r\n\r\n\t// 处理原始数据 -> 转换为ECharts需要的格式\r\n\tconst processChartData = () => {\r\n\t\t// 1. 获取所有唯一且排序后的年份\r\n\t\tconst allYears = [...new Set(props.data.map(item => item.year))].sort(\r\n\t\t\t(a, b) => a - b\r\n\t\t);\r\n\r\n\t\t// 2. 获取所有数据源\r\n\t\tconst dataSources = [...new Set(props.data.map(item => item.source))];\r\n\r\n\t\t// 3. 为每个数据源创建数据系列\r\n\t\tconst series = dataSources.map((source, index) => {\r\n\t\t\t// 获取该数据源的所有数据点\r\n\t\t\tconst sourceData = props.data.filter(item => item.source === source);\r\n\r\n\t\t\t// 创建按年份对齐的数据点\r\n\t\t\tconst dataPoints = allYears.map(year => {\r\n\t\t\t\tconst point = sourceData.find(item => item.year === year);\r\n\t\t\t\treturn point ? point.value : null;\r\n\t\t\t});\r\n\r\n\t\t\treturn {\r\n\t\t\t\tname: source,\r\n\t\t\t\ttype: \"line\",\r\n\t\t\t\tdata: dataPoints,\r\n\t\t\t\tsymbol: \"circle\",\r\n\t\t\t\tsymbolSize: 10,\r\n\t\t\t\tlineStyle: {\r\n\t\t\t\t\twidth: 3\r\n\t\t\t\t},\r\n\t\t\t\titemStyle: {\r\n\t\t\t\t\tcolor: index === 0 ? \"#4e79a7\" : \"#e15759\" // 固定颜色分配\r\n\t\t\t\t},\r\n\t\t\t\tlabel: {\r\n\t\t\t\t\tshow: true,\r\n\t\t\t\t\tformatter: \"{c}%\",\r\n\t\t\t\t\tposition: \"top\"\r\n\t\t\t\t},\r\n\t\t\t\temphasis: {\r\n\t\t\t\t\tfocus: \"series\",\r\n\t\t\t\t\titemStyle: {\r\n\t\t\t\t\t\tborderWidth: 2,\r\n\t\t\t\t\t\tborderColor: \"#fff\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\treturn {\r\n\t\t\tyears: allYears,\r\n\t\t\tseries\r\n\t\t};\r\n\t};\r\n\r\n\t// 初始化图表\r\n\tconst initChart = () => {\r\n\t\tif (!chartContainer.value) return;\r\n\r\n\t\t// 销毁旧实例\r\n\t\tif (chartInstance) {\r\n\t\t\tchartInstance.dispose();\r\n\t\t}\r\n\r\n\t\t// 创建新实例\r\n\t\tchartInstance = echarts.init(chartContainer.value);\r\n\r\n\t\t// 处理数据\r\n\t\tconst { years, series } = processChartData();\r\n\r\n\t\t// 计算Y轴范围（最小值向下取整，最大值向上取整）\r\n\t\tconst allValues = props.data.map(item => item.value);\r\n\t\tconst yMin = Math.floor(Math.min(...allValues)) - 0.5;\r\n\t\tconst yMax = Math.ceil(Math.max(...allValues)) + 0.5;\r\n\r\n\t\t// 配置项\r\n\t\tconst option = {\r\n\t\t\ttooltip: {\r\n\t\t\t\ttrigger: \"axis\",\r\n\t\t\t\tformatter: params => {\r\n\t\t\t\t\treturn params\r\n\t\t\t\t\t\t.filter(param => param.value != null)\r\n\t\t\t\t\t\t.map(param => {\r\n\t\t\t\t\t\t\treturn `${param.seriesName}<br/>${param.name}: ${param.value}%`;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.join(\"<br/>\");\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tlegend: {\r\n\t\t\t\tdata: series.map(s => s.name),\r\n\t\t\t\tbottom: 0\r\n\t\t\t},\r\n\t\t\tgrid: {\r\n\t\t\t\ttop: \"12%\",\r\n\t\t\t\tleft: \"3%\",\r\n\t\t\t\tright: \"4%\",\r\n\t\t\t\tbottom: \"15%\",\r\n\t\t\t\tcontainLabel: true\r\n\t\t\t},\r\n\t\t\txAxis: {\r\n\t\t\t\ttype: \"category\",\r\n\t\t\t\tdata: years,\r\n\t\t\t\taxisLabel: {\r\n\t\t\t\t\tformatter: value => value // 显示完整年份\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tyAxis: {\r\n\t\t\t\ttype: \"value\",\r\n\t\t\t\tmin: yMin,\r\n\t\t\t\tmax: yMax,\r\n\t\t\t\taxisLabel: {\r\n\t\t\t\t\tformatter: \"{value}%\"\r\n\t\t\t\t},\r\n\t\t\t\tsplitLine: {\r\n\t\t\t\t\tshow: true,\r\n\t\t\t\t\tlineStyle: {\r\n\t\t\t\t\t\ttype: \"dashed\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tseries\r\n\t\t};\r\n\r\n\t\t// 设置配置项\r\n\t\tchartInstance.setOption(option);\r\n\r\n\t\t// 响应式调整\r\n\t\twindow.addEventListener(\"resize\", handleResize);\r\n\t};\r\n\r\n\t// 窗口大小变化处理\r\n\tconst handleResize = () => {\r\n\t\tchartInstance?.resize();\r\n\t};\r\n\r\n\t// 生命周期\r\n\tonMounted(() => {\r\n\t\tinitChart();\r\n\t});\r\n\r\n\tonBeforeUnmount(() => {\r\n\t\tif (chartInstance) {\r\n\t\t\tchartInstance.dispose();\r\n\t\t\twindow.removeEventListener(\"resize\", handleResize);\r\n\t\t}\r\n\t});\r\n\r\n\t// 监听数据变化\r\n\twatch(\r\n\t\t() => props.data,\r\n\t\t() => {\r\n\t\t\tinitChart();\r\n\t\t},\r\n\t\t{ deep: true }\r\n\t);\r\n</script>\r\n\r\n<style scoped>\r\n\t.combined-line-chart {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tmin-height: 400px;\r\n\t\tbackground-color: #fff;\r\n\t\tborder-radius: 4px;\r\n\t\tbox-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,GAAG,EAAC,gBAAgB;EAACC,KAAK,EAAC;;;uBAAhCC,mBAAA,CAA4D,OAA5DC,UAA4D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}