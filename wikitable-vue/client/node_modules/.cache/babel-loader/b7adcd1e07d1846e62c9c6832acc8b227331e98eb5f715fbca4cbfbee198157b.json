{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed, onMounted, watch, onUnmounted } from \"vue\";\nimport SimpleChart from \"./SimpleChart.vue\";\nimport FullChart from \"./FullChart.vue\";\nimport bus from \"@/js/eventBus.js\";\nexport default {\n  __name: 'CompareTable',\n  props: {\n    div1RawData: Object,\n    div3RawData: Object\n  },\n  emits: [\"compareAttribute\"],\n  setup(__props, _ref) {\n    let {\n      expose: __expose,\n      emit: __emit\n    } = _ref;\n    __expose();\n    const props = __props;\n    const emit = __emit;\n\n    // 辅助函数: 将值安全转换为数字\n    const safeToNumber = value => {\n      if (value === null || value === undefined) return 0;\n      if (typeof value === \"number\") return value;\n      if (typeof value === \"string\") {\n        const yiMatch = value.match(/(-?[\\d.]+)\\s*亿/);\n        if (yiMatch) return parseFloat(yiMatch[1]) * 100000000;\n        const wanMatch = value.match(/(-?[\\d.]+)\\s*万/);\n        if (wanMatch) return parseFloat(wanMatch[1]) * 10000;\n        const qianMatch = value.match(/(-?[\\d.]+)\\s*千/);\n        if (qianMatch) return parseFloat(qianMatch[1]) * 1000;\n        const percentMatch = value.match(/(-?\\d+\\.?\\d*)\\s*%/);\n        if (percentMatch) return parseFloat(percentMatch[1]);\n        const num = parseFloat(value.replace(/[^\\d.-]/g, \"\"));\n        return isNaN(num) ? 0 : num;\n      }\n      if (typeof value === \"object\") {\n        return safeToNumber(value.value || value.raw);\n      }\n      return 0;\n    };\n\n    // 状态变量\n    const leftInfobox = ref({\n      title: \"\",\n      type: \"\",\n      data: {}\n    });\n    const rightInfobox = ref({\n      title: \"\",\n      type: \"\",\n      data: {}\n    });\n    const showFullChartModal = ref(false);\n    const currentChart = ref({\n      title: \"\",\n      field: {},\n      data: []\n    });\n    const showSortingHeatmap = ref(true);\n    const isInitializing = ref(true);\n    const hasAutoCompared = ref(false);\n    const leftDataLoaded = ref(false);\n    const rightDataLoaded = ref(false);\n    const sortedFieldsWithScores = ref([]);\n\n    // 可比较字段配置\n    const COMPARABLE_FIELDS = [{\n      key: \"GDP\",\n      type: \"number\",\n      typeLabel: \"数值(美元)\",\n      visualization: \"bar-chart\",\n      legend: \"国内生产总值（单位：万亿美元）\"\n    }, {\n      key: \"Population\",\n      type: \"number\",\n      typeLabel: \"数值(人)\",\n      visualization: \"bar-chart\",\n      legend: \"人口数量（单位：亿人）\"\n    }, {\n      key: \"GDP growth\",\n      type: \"percentage\",\n      typeLabel: \"百分比(%)\",\n      visualization: \"line-chart\",\n      legend: \"GDP年增长率（%）\"\n    }, {\n      key: \"Inflation (CPI)\",\n      type: \"percentage\",\n      typeLabel: \"百分比(%)\",\n      visualization: \"pie-chart\",\n      legend: \"消费者价格指数变化\"\n    }, {\n      key: \"GDP rank\",\n      type: \"text\",\n      typeLabel: \"文本\",\n      visualization: \"text-only\",\n      legend: \"全球GDP排名\"\n    }];\n\n    // 自动对比方法\n    const tryAutoCompare = () => {\n      if (hasAutoCompared.value || !leftDataLoaded.value || !rightDataLoaded.value) return;\n      isInitializing.value = true;\n      hasAutoCompared.value = true;\n\n      // 找到分数最高的字段进行自动对比\n      if (sortedFieldsWithScores.value.length > 0) {\n        const mostSignificantField = sortedFieldsWithScores.value[0];\n        if (mostSignificantField) {\n          emit(\"compareAttribute\", {\n            fieldKey: mostSignificantField.key,\n            leftData: getField(leftInfobox.value, mostSignificantField.key),\n            rightData: getField(rightInfobox.value, mostSignificantField.key),\n            leftTitle: leftInfobox.value.title,\n            rightTitle: rightInfobox.value.title,\n            fieldType: mostSignificantField.type,\n            fieldLabel: mostSignificantField.typeLabel\n          });\n        }\n      }\n      isInitializing.value = false;\n    };\n    const getField = (infobox, fieldKey) => {\n      if (!infobox?.data) {\n        return [];\n      }\n      for (const section of Object.values(infobox.data)) {\n        if (section[fieldKey] !== undefined) {\n          const fieldData = section[fieldKey];\n          if (Array.isArray(fieldData)) {\n            return fieldData.map(item => {\n              if (typeof item === \"object\" && item !== null) {\n                return {\n                  // Return object to preserve raw/value/unit etc.\n                  value: item.value ?? item.raw,\n                  raw: item.raw,\n                  unit: item.unit,\n                  currency: item.currency,\n                  year: item.year,\n                  ...item // spread any other properties\n                };\n              }\n              return {\n                value: item,\n                raw: item\n              }; // Wrap primitive for consistency\n            });\n          }\n          if (typeof fieldData === \"object\" && fieldData !== null) {\n            return [{\n              // Return array of object\n              value: fieldData.value ?? fieldData.raw,\n              raw: fieldData.raw,\n              unit: fieldData.unit,\n              currency: fieldData.currency,\n              year: fieldData.year,\n              ...fieldData\n            }];\n          }\n          return [{\n            value: fieldData,\n            raw: fieldData\n          }]; // Wrap primitive for consistency\n        }\n      }\n      return [];\n    };\n    const calculateDifferenceScore = field => {\n      const leftValues = getField(leftInfobox.value, field.key).map(v => safeToNumber(v.value ?? v.raw)) // Use safeToNumber here\n      .filter(n => !isNaN(n));\n      const rightValues = getField(rightInfobox.value, field.key).map(v => safeToNumber(v.value ?? v.raw)) // Use safeToNumber here\n      .filter(n => !isNaN(n));\n      if (leftValues.length === 0 || rightValues.length === 0) {\n        return 0;\n      }\n      let maxScore = 0;\n      const comparedPairs = [];\n      leftValues.forEach(leftNum => {\n        rightValues.forEach(rightNum => {\n          const isOpposite = leftNum > 0 && rightNum < 0 || leftNum < 0 && rightNum > 0;\n          const absDiff = Math.abs(leftNum - rightNum);\n          const avg = (Math.abs(leftNum) + Math.abs(rightNum)) / 2;\n          const relativeDiff = avg > 0 ? absDiff / avg : 0;\n          let score;\n          if (isOpposite) {\n            score = 90 + 10 * relativeDiff;\n          } else {\n            score = 10 + 40 * relativeDiff;\n          }\n          comparedPairs.push({\n            leftNum,\n            rightNum,\n            isOpposite,\n            relativeDiff,\n            score\n          });\n          if (score > maxScore) maxScore = score;\n        });\n      });\n      const weight = field.key.toLowerCase().includes(\"gdp growth\") ? 3 : 1;\n      const finalScore = Math.min(100, Math.round(maxScore * weight));\n      return finalScore;\n    };\n    const getFieldWeight = fieldKey => {\n      const weights = {\n        GDP: 1.5,\n        Population: 1.3,\n        \"GDP growth\": 2.0,\n        Inflation: 1.8,\n        Labor: 1.2\n      };\n      for (const [key, weight] of Object.entries(weights)) {\n        if (fieldKey.toLowerCase().includes(key.toLowerCase())) {\n          return weight;\n        }\n      }\n      return 1.0;\n    };\n    const getHeatmapColor = score => {\n      const maxScore = 100;\n      const ratio = Math.min(score / maxScore, 1);\n      const hue = (1 - ratio) * 120;\n      return `hsl(${hue}, 80%, ${85 - ratio * 25}%)`;\n    };\n    const sortedFields = computed(() => {\n      return sortedFieldsWithScores.value.map(field => {\n        let globalMaxValue = null;\n        if (field.visualization === \"bar-chart\") {\n          // Get raw values, then convert to numbers\n          const leftRawValues = getField(leftInfobox.value, field.key);\n          const rightRawValues = getField(rightInfobox.value, field.key);\n          const leftNumericValues = leftRawValues.map(item => safeToNumber(item.value ?? item.raw ?? item));\n          const rightNumericValues = rightRawValues.map(item => safeToNumber(item.value ?? item.raw ?? item));\n          const allValues = [...leftNumericValues, ...rightNumericValues].filter(v => typeof v === \"number\" && !isNaN(v));\n          if (allValues.length > 0) {\n            globalMaxValue = Math.max(0, ...allValues);\n          } else {\n            globalMaxValue = 1; // Default if no data or all non-numeric\n          }\n          if (globalMaxValue === 0) globalMaxValue = 1; // Avoid y-axis [0,0]\n        }\n        return {\n          ...field,\n          globalMaxValue\n        };\n      });\n    });\n    const comparableFields = computed(() => {\n      return COMPARABLE_FIELDS.filter(field => {\n        const leftVal = getField(leftInfobox.value, field.key);\n        const rightVal = getField(rightInfobox.value, field.key);\n        return leftVal.length > 0 || rightVal.length > 0;\n      });\n    });\n    const tryCalculateScores = () => {\n      if (leftDataLoaded.value && rightDataLoaded.value) {\n        isInitializing.value = true; // Show loading while calculating scores\n        sortedFieldsWithScores.value = comparableFields.value.map(field => ({\n          ...field,\n          score: calculateDifferenceScore(field)\n        })).sort((a, b) => {\n          if (a.type !== \"text\" && b.type === \"text\") return -1;\n          if (a.type === \"text\" && b.type !== \"text\") return 1;\n          return b.score - a.score;\n        });\n\n        // Calculation done, now try auto compare (which might set isInitializing to false)\n        tryAutoCompare();\n        // If autoCompare doesn't run or finishes quickly, ensure loading is off\n        if (!hasAutoCompared.value) {\n          isInitializing.value = false;\n        }\n      }\n    };\n    const showFullChart = (infobox, field) => {\n      currentChart.value = {\n        title: infobox.title,\n        field: field,\n        data: getField(infobox, field.key) // Pass the raw field data\n      };\n      showFullChartModal.value = true;\n    };\n    const closeFullChart = () => {\n      showFullChartModal.value = false;\n    };\n    const hoverInfobox = (infobox, fieldKey, side) => {\n      bus.emit(`hover-${side}-infobox`, {\n        fieldKey,\n        infoboxTitle: infobox.title\n      });\n    };\n    const unhoverInfobox = side => {\n      bus.emit(`unhover-${side}-infobox`);\n    };\n    const hoverBothInfoboxes = fieldKey => {\n      hoverInfobox(leftInfobox.value, fieldKey, \"left\");\n      hoverInfobox(rightInfobox.value, fieldKey, \"right\");\n    };\n    const unhoverBothInfoboxes = () => {\n      unhoverInfobox(\"left\");\n      unhoverInfobox(\"right\");\n    };\n    const handleMiddleColumnClick = field => {\n      emit(\"compareAttribute\", {\n        fieldKey: field.key,\n        leftData: getField(leftInfobox.value, field.key),\n        rightData: getField(rightInfobox.value, field.key),\n        leftTitle: leftInfobox.value.title,\n        rightTitle: rightInfobox.value.title,\n        fieldType: field.type,\n        fieldLabel: field.typeLabel\n      });\n    };\n    const showCombinedChart = field => {\n      const leftData = getField(leftInfobox.value, field.key);\n      const rightData = getField(rightInfobox.value, field.key);\n      currentChart.value = {\n        title: `合并图表 - ${field.key}`,\n        field: field,\n        data: [...leftData, ...rightData] // Pass combined raw field data\n      };\n      showFullChartModal.value = true;\n    };\n    const processInfoboxData = data => {\n      if (!data) {\n        console.warn(\"接收到空Infobox数据\");\n        return {\n          title: \"\",\n          type: \"\",\n          data: {}\n        };\n      }\n      return {\n        title: data.title || \"无标题\",\n        type: data.type || \"未知类型\",\n        data: data.sections || {}\n      };\n    };\n    onMounted(() => {\n      isInitializing.value = true; // Start with loading true\n      bus.on(\"div1_InfoboxData\", data => {\n        leftInfobox.value = processInfoboxData(data);\n        leftDataLoaded.value = true;\n        if (rightDataLoaded.value) {\n          // Only calculate if both are loaded\n          tryCalculateScores();\n        }\n      });\n      bus.on(\"div3_InfoboxData\", data => {\n        rightInfobox.value = processInfoboxData(data);\n        rightDataLoaded.value = true;\n        if (leftDataLoaded.value) {\n          // Only calculate if both are loaded\n          tryCalculateScores();\n        }\n      });\n    });\n    watch([() => leftDataLoaded.value, () => rightDataLoaded.value], _ref2 => {\n      let [leftLoaded, rightLoaded] = _ref2;\n      if (leftLoaded && rightLoaded) {\n        // Scores are now calculated inside the bus.on handlers when both are ready\n        // or if one arrives after the other.\n        // This watch might still be useful for other initial setup if needed,\n        // but primary score calculation is handled above.\n        // If no auto-compare has happened and data is loaded, turn off initial loading.\n        if (!hasAutoCompared.value && isInitializing.value) {\n          // Potentially turn off initializing if not done by tryAutoCompare\n          // However, tryAutoCompare or tryCalculateScores should handle this.\n        }\n      } else {\n        isInitializing.value = true; // If one dataset becomes unloaded, show loading\n      }\n    }, {\n      immediate: true\n    } // Check initial state\n    );\n    onUnmounted(() => {\n      bus.off(\"div1_InfoboxData\");\n      bus.off(\"div3_InfoboxData\");\n    });\n    const __returned__ = {\n      props,\n      emit,\n      safeToNumber,\n      leftInfobox,\n      rightInfobox,\n      showFullChartModal,\n      currentChart,\n      showSortingHeatmap,\n      isInitializing,\n      hasAutoCompared,\n      leftDataLoaded,\n      rightDataLoaded,\n      sortedFieldsWithScores,\n      COMPARABLE_FIELDS,\n      tryAutoCompare,\n      getField,\n      calculateDifferenceScore,\n      getFieldWeight,\n      getHeatmapColor,\n      sortedFields,\n      comparableFields,\n      tryCalculateScores,\n      showFullChart,\n      closeFullChart,\n      hoverInfobox,\n      unhoverInfobox,\n      hoverBothInfoboxes,\n      unhoverBothInfoboxes,\n      handleMiddleColumnClick,\n      showCombinedChart,\n      processInfoboxData,\n      ref,\n      computed,\n      onMounted,\n      watch,\n      onUnmounted,\n      SimpleChart,\n      FullChart,\n      get bus() {\n        return bus;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","watch","onUnmounted","SimpleChart","FullChart","bus","props","__props","emit","__emit","safeToNumber","value","undefined","yiMatch","match","parseFloat","wanMatch","qianMatch","percentMatch","num","replace","isNaN","raw","leftInfobox","title","type","data","rightInfobox","showFullChartModal","currentChart","field","showSortingHeatmap","isInitializing","hasAutoCompared","leftDataLoaded","rightDataLoaded","sortedFieldsWithScores","COMPARABLE_FIELDS","key","typeLabel","visualization","legend","tryAutoCompare","length","mostSignificantField","fieldKey","leftData","getField","rightData","leftTitle","rightTitle","fieldType","fieldLabel","infobox","section","Object","values","fieldData","Array","isArray","map","item","unit","currency","year","calculateDifferenceScore","leftValues","v","filter","n","rightValues","maxScore","comparedPairs","forEach","leftNum","rightNum","isOpposite","absDiff","Math","abs","avg","relativeDiff","score","push","weight","toLowerCase","includes","finalScore","min","round","getFieldWeight","weights","GDP","Population","Inflation","Labor","entries","getHeatmapColor","ratio","hue","sortedFields","globalMaxValue","leftRawValues","rightRawValues","leftNumericValues","rightNumericValues","allValues","max","comparableFields","leftVal","rightVal","tryCalculateScores","sort","a","b","showFullChart","closeFullChart","hoverInfobox","side","infoboxTitle","unhoverInfobox","hoverBothInfoboxes","unhoverBothInfoboxes","handleMiddleColumnClick","showCombinedChart","processInfoboxData","console","warn","sections","on","_ref2","leftLoaded","rightLoaded","immediate","off"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/CompareTable.vue"],"sourcesContent":["<template>\r\n\t<div class=\"compare-container\">\r\n\t\t<!-- 加载状态提示 -->\r\n\t\t<div v-if=\"isInitializing\" class=\"initial-loading\">\r\n\t\t\t<div class=\"loading-spinner\"></div>\r\n\t\t\t<p>正在准备数据对比...</p>\r\n\t\t</div>\r\n\r\n\t\t<!-- 排序热力图开关 -->\r\n\t\t<!-- <div class=\"heatmap-control\">\r\n\t\t\t<button @click=\"showSortingHeatmap = !showSortingHeatmap\">\r\n\t\t\t\t{{ showSortingHeatmap ? \"隐藏\" : \"显示\" }}排序热力图\r\n\t\t\t</button>\r\n\t\t</div> -->\r\n\r\n\t\t<!-- 排序热力图可视化 -->\r\n\t\t<!-- <div class=\"sorting-heatmap\" v-if=\"showSortingHeatmap\">\r\n\t\t\t<div class=\"heatmap-header\">\r\n\t\t\t\t<span>排序</span>\r\n\t\t\t\t<span>属性</span>\r\n\t\t\t\t<span>类型</span>\r\n\t\t\t\t<span>差异分数</span>\r\n\t\t\t\t<span>权重</span>\r\n\t\t\t</div>\r\n\t\t\t<div\r\n\t\t\t\tclass=\"heatmap-row\"\r\n\t\t\t\tv-for=\"(field, index) in sortedFieldsWithScores\"\r\n\t\t\t\t:key=\"field.key\"\r\n\t\t\t\t:style=\"{\r\n\t\t\t\t\tbackgroundColor: getHeatmapColor(field.score),\r\n\t\t\t\t\tborderLeft: `4px solid ${getHeatmapColor(field.score)}`\r\n\t\t\t\t}\">\r\n\t\t\t\t<span class=\"field-rank\">{{ index + 1 }}</span>\r\n\t\t\t\t<span class=\"field-name\">{{ field.key }}</span>\r\n\t\t\t\t<span class=\"field-type\">{{ field.typeLabel }}</span>\r\n\t\t\t\t<span class=\"field-score\">{{ field.score.toFixed(1) }}</span>\r\n\t\t\t\t<span class=\"field-weight\">{{\r\n\t\t\t\t\tgetFieldWeight(field.key).toFixed(1)\r\n\t\t\t\t}}</span>\r\n\t\t\t</div>\r\n\t\t</div> -->\r\n\r\n\t\t<!-- 主对比表格 -->\r\n\t\t<div class=\"comparison-grid\">\r\n\t\t\t<div class=\"header left-column\">\r\n\t\t\t\t{{ leftInfobox.title }}\r\n\t\t\t</div>\r\n\t\t\t<div class=\"header middle-column\">对比属性</div>\r\n\t\t\t<div class=\"header right-column\">\r\n\t\t\t\t{{ rightInfobox.title }}\r\n\t\t\t</div>\r\n\r\n\t\t\t<template v-for=\"field in sortedFields\" :key=\"field.key\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell left-column\"\r\n\t\t\t\t\t@mouseover=\"hoverInfobox(leftInfobox, field.key, 'left')\"\r\n\t\t\t\t\t@mouseout=\"unhoverInfobox('left')\"\r\n\t\t\t\t\t@click=\"showFullChart(leftInfobox, field)\">\r\n\t\t\t\t\t<SimpleChart\r\n\t\t\t\t\t\t:field=\"getField(leftInfobox, field.key)\"\r\n\t\t\t\t\t\t:type=\"field.type\"\r\n\t\t\t\t\t\t:visualization=\"field.visualization\"\r\n\t\t\t\t\t\t:y-axis-max=\"field.globalMaxValue\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell middle-column\"\r\n\t\t\t\t\t@mouseover=\"hoverBothInfoboxes(field.key)\"\r\n\t\t\t\t\t@mouseout=\"unhoverBothInfoboxes()\">\r\n\t\t\t\t\t<div class=\"field-name\">{{ field.key }}</div>\r\n\t\t\t\t\t<div class=\"field-type\">{{ field.typeLabel }}</div>\r\n\t\t\t\t\t<div class=\"icon-actions\">\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tclass=\"icon-btn compare\"\r\n\t\t\t\t\t\t\ttitle=\"对比分析\"\r\n\t\t\t\t\t\t\t@click=\"handleMiddleColumnClick(field)\">\r\n\t\t\t\t\t\t\t⚖️\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tclass=\"icon-btn merge\"\r\n\t\t\t\t\t\t\ttitle=\"合并图表\"\r\n\t\t\t\t\t\t\t@click=\"showCombinedChart(field)\">\r\n\t\t\t\t\t\t\t📊\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell right-column\"\r\n\t\t\t\t\t@mouseover=\"hoverInfobox(rightInfobox, field.key, 'right')\"\r\n\t\t\t\t\t@mouseout=\"unhoverInfobox('right')\"\r\n\t\t\t\t\t@click=\"showFullChart(rightInfobox, field)\">\r\n\t\t\t\t\t<SimpleChart\r\n\t\t\t\t\t\t:field=\"getField(rightInfobox, field.key)\"\r\n\t\t\t\t\t\t:type=\"field.type\"\r\n\t\t\t\t\t\t:visualization=\"field.visualization\"\r\n\t\t\t\t\t\t:y-axis-max=\"field.globalMaxValue\" />\r\n\t\t\t\t</div>\r\n\t\t\t</template>\r\n\t\t</div>\r\n\r\n\t\t<!-- 全屏图表模态框 -->\r\n\t\t<div\r\n\t\t\tv-if=\"showFullChartModal\"\r\n\t\t\tclass=\"full-chart-modal\"\r\n\t\t\t@click.self=\"closeFullChart\">\r\n\t\t\t<div class=\"modal-content\">\r\n\t\t\t\t<button class=\"close-btn\" @click=\"closeFullChart\">×</button>\r\n\t\t\t\t<h3>{{ currentChart.title }} - {{ currentChart.field.key }}</h3>\r\n\t\t\t\t<div class=\"chart-container\">\r\n\t\t\t\t\t<FullChart\r\n\t\t\t\t\t\t:field=\"currentChart.data\"\r\n\t\t\t\t\t\t:type=\"currentChart.field.type\"\r\n\t\t\t\t\t\t:visualization=\"currentChart.field.visualization\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"chart-legend\" v-if=\"currentChart.field.legend\">\r\n\t\t\t\t\t{{ currentChart.field.legend }}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, onMounted, watch, onUnmounted } from \"vue\";\r\n\timport SimpleChart from \"./SimpleChart.vue\";\r\n\timport FullChart from \"./FullChart.vue\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdiv1RawData: Object,\r\n\t\tdiv3RawData: Object\r\n\t});\r\n\r\n\tconst emit = defineEmits([\"compareAttribute\"]);\r\n\r\n\t// 辅助函数: 将值安全转换为数字\r\n\tconst safeToNumber = value => {\r\n\t\tif (value === null || value === undefined) return 0;\r\n\t\tif (typeof value === \"number\") return value;\r\n\r\n\t\tif (typeof value === \"string\") {\r\n\t\t\tconst yiMatch = value.match(/(-?[\\d.]+)\\s*亿/);\r\n\t\t\tif (yiMatch) return parseFloat(yiMatch[1]) * 100000000;\r\n\r\n\t\t\tconst wanMatch = value.match(/(-?[\\d.]+)\\s*万/);\r\n\t\t\tif (wanMatch) return parseFloat(wanMatch[1]) * 10000;\r\n\r\n\t\t\tconst qianMatch = value.match(/(-?[\\d.]+)\\s*千/);\r\n\t\t\tif (qianMatch) return parseFloat(qianMatch[1]) * 1000;\r\n\r\n\t\t\tconst percentMatch = value.match(/(-?\\d+\\.?\\d*)\\s*%/);\r\n\t\t\tif (percentMatch) return parseFloat(percentMatch[1]);\r\n\r\n\t\t\tconst num = parseFloat(value.replace(/[^\\d.-]/g, \"\"));\r\n\t\t\treturn isNaN(num) ? 0 : num;\r\n\t\t}\r\n\r\n\t\tif (typeof value === \"object\") {\r\n\t\t\treturn safeToNumber(value.value || value.raw);\r\n\t\t}\r\n\t\treturn 0;\r\n\t};\r\n\r\n\t// 状态变量\r\n\tconst leftInfobox = ref({ title: \"\", type: \"\", data: {} });\r\n\tconst rightInfobox = ref({ title: \"\", type: \"\", data: {} });\r\n\tconst showFullChartModal = ref(false);\r\n\tconst currentChart = ref({\r\n\t\ttitle: \"\",\r\n\t\tfield: {},\r\n\t\tdata: []\r\n\t});\r\n\tconst showSortingHeatmap = ref(true);\r\n\tconst isInitializing = ref(true);\r\n\tconst hasAutoCompared = ref(false);\r\n\tconst leftDataLoaded = ref(false);\r\n\tconst rightDataLoaded = ref(false);\r\n\tconst sortedFieldsWithScores = ref([]);\r\n\r\n\t// 可比较字段配置\r\n\tconst COMPARABLE_FIELDS = [\r\n\t\t{\r\n\t\t\tkey: \"GDP\",\r\n\t\t\ttype: \"number\",\r\n\t\t\ttypeLabel: \"数值(美元)\",\r\n\t\t\tvisualization: \"bar-chart\",\r\n\t\t\tlegend: \"国内生产总值（单位：万亿美元）\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Population\",\r\n\t\t\ttype: \"number\",\r\n\t\t\ttypeLabel: \"数值(人)\",\r\n\t\t\tvisualization: \"bar-chart\",\r\n\t\t\tlegend: \"人口数量（单位：亿人）\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"GDP growth\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"line-chart\",\r\n\t\t\tlegend: \"GDP年增长率（%）\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Inflation (CPI)\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"pie-chart\",\r\n\t\t\tlegend: \"消费者价格指数变化\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"GDP rank\",\r\n\t\t\ttype: \"text\",\r\n\t\t\ttypeLabel: \"文本\",\r\n\t\t\tvisualization: \"text-only\",\r\n\t\t\tlegend: \"全球GDP排名\"\r\n\t\t}\r\n\t];\r\n\r\n\t// 自动对比方法\r\n\tconst tryAutoCompare = () => {\r\n\t\tif (\r\n\t\t\thasAutoCompared.value ||\r\n\t\t\t!leftDataLoaded.value ||\r\n\t\t\t!rightDataLoaded.value\r\n\t\t)\r\n\t\t\treturn;\r\n\r\n\t\tisInitializing.value = true;\r\n\t\thasAutoCompared.value = true;\r\n\r\n\t\t// 找到分数最高的字段进行自动对比\r\n\t\tif (sortedFieldsWithScores.value.length > 0) {\r\n\t\t\tconst mostSignificantField = sortedFieldsWithScores.value[0];\r\n\t\t\tif (mostSignificantField) {\r\n\t\t\t\temit(\"compareAttribute\", {\r\n\t\t\t\t\tfieldKey: mostSignificantField.key,\r\n\t\t\t\t\tleftData: getField(leftInfobox.value, mostSignificantField.key),\r\n\t\t\t\t\trightData: getField(rightInfobox.value, mostSignificantField.key),\r\n\t\t\t\t\tleftTitle: leftInfobox.value.title,\r\n\t\t\t\t\trightTitle: rightInfobox.value.title,\r\n\t\t\t\t\tfieldType: mostSignificantField.type,\r\n\t\t\t\t\tfieldLabel: mostSignificantField.typeLabel\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tisInitializing.value = false;\r\n\t};\r\n\r\n\tconst getField = (infobox, fieldKey) => {\r\n\t\tif (!infobox?.data) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tfor (const section of Object.values(infobox.data)) {\r\n\t\t\tif (section[fieldKey] !== undefined) {\r\n\t\t\t\tconst fieldData = section[fieldKey];\r\n\r\n\t\t\t\tif (Array.isArray(fieldData)) {\r\n\t\t\t\t\treturn fieldData.map(item => {\r\n\t\t\t\t\t\tif (typeof item === \"object\" && item !== null) {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t// Return object to preserve raw/value/unit etc.\r\n\t\t\t\t\t\t\t\tvalue: item.value ?? item.raw,\r\n\t\t\t\t\t\t\t\traw: item.raw,\r\n\t\t\t\t\t\t\t\tunit: item.unit,\r\n\t\t\t\t\t\t\t\tcurrency: item.currency,\r\n\t\t\t\t\t\t\t\tyear: item.year,\r\n\t\t\t\t\t\t\t\t...item // spread any other properties\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn { value: item, raw: item }; // Wrap primitive for consistency\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (typeof fieldData === \"object\" && fieldData !== null) {\r\n\t\t\t\t\treturn [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Return array of object\r\n\t\t\t\t\t\t\tvalue: fieldData.value ?? fieldData.raw,\r\n\t\t\t\t\t\t\traw: fieldData.raw,\r\n\t\t\t\t\t\t\tunit: fieldData.unit,\r\n\t\t\t\t\t\t\tcurrency: fieldData.currency,\r\n\t\t\t\t\t\t\tyear: fieldData.year,\r\n\t\t\t\t\t\t\t...fieldData\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t];\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn [{ value: fieldData, raw: fieldData }]; // Wrap primitive for consistency\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [];\r\n\t};\r\n\r\n\tconst calculateDifferenceScore = field => {\r\n\t\tconst leftValues = getField(leftInfobox.value, field.key)\r\n\t\t\t.map(v => safeToNumber(v.value ?? v.raw)) // Use safeToNumber here\r\n\t\t\t.filter(n => !isNaN(n));\r\n\r\n\t\tconst rightValues = getField(rightInfobox.value, field.key)\r\n\t\t\t.map(v => safeToNumber(v.value ?? v.raw)) // Use safeToNumber here\r\n\t\t\t.filter(n => !isNaN(n));\r\n\r\n\t\tif (leftValues.length === 0 || rightValues.length === 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tlet maxScore = 0;\r\n\t\tconst comparedPairs = [];\r\n\r\n\t\tleftValues.forEach(leftNum => {\r\n\t\t\trightValues.forEach(rightNum => {\r\n\t\t\t\tconst isOpposite =\r\n\t\t\t\t\t(leftNum > 0 && rightNum < 0) || (leftNum < 0 && rightNum > 0);\r\n\r\n\t\t\t\tconst absDiff = Math.abs(leftNum - rightNum);\r\n\t\t\t\tconst avg = (Math.abs(leftNum) + Math.abs(rightNum)) / 2;\r\n\t\t\t\tconst relativeDiff = avg > 0 ? absDiff / avg : 0;\r\n\r\n\t\t\t\tlet score;\r\n\t\t\t\tif (isOpposite) {\r\n\t\t\t\t\tscore = 90 + 10 * relativeDiff;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tscore = 10 + 40 * relativeDiff;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcomparedPairs.push({\r\n\t\t\t\t\tleftNum,\r\n\t\t\t\t\trightNum,\r\n\t\t\t\t\tisOpposite,\r\n\t\t\t\t\trelativeDiff,\r\n\t\t\t\t\tscore\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (score > maxScore) maxScore = score;\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tconst weight = field.key.toLowerCase().includes(\"gdp growth\") ? 3 : 1;\r\n\t\tconst finalScore = Math.min(100, Math.round(maxScore * weight));\r\n\r\n\t\treturn finalScore;\r\n\t};\r\n\r\n\tconst getFieldWeight = fieldKey => {\r\n\t\tconst weights = {\r\n\t\t\tGDP: 1.5,\r\n\t\t\tPopulation: 1.3,\r\n\t\t\t\"GDP growth\": 2.0,\r\n\t\t\tInflation: 1.8,\r\n\t\t\tLabor: 1.2\r\n\t\t};\r\n\r\n\t\tfor (const [key, weight] of Object.entries(weights)) {\r\n\t\t\tif (fieldKey.toLowerCase().includes(key.toLowerCase())) {\r\n\t\t\t\treturn weight;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn 1.0;\r\n\t};\r\n\r\n\tconst getHeatmapColor = score => {\r\n\t\tconst maxScore = 100;\r\n\t\tconst ratio = Math.min(score / maxScore, 1);\r\n\t\tconst hue = (1 - ratio) * 120;\r\n\t\treturn `hsl(${hue}, 80%, ${85 - ratio * 25}%)`;\r\n\t};\r\n\r\n\tconst sortedFields = computed(() => {\r\n\t\treturn sortedFieldsWithScores.value.map(field => {\r\n\t\t\tlet globalMaxValue = null;\r\n\t\t\tif (field.visualization === \"bar-chart\") {\r\n\t\t\t\t// Get raw values, then convert to numbers\r\n\t\t\t\tconst leftRawValues = getField(leftInfobox.value, field.key);\r\n\t\t\t\tconst rightRawValues = getField(rightInfobox.value, field.key);\r\n\r\n\t\t\t\tconst leftNumericValues = leftRawValues.map(item =>\r\n\t\t\t\t\tsafeToNumber(item.value ?? item.raw ?? item)\r\n\t\t\t\t);\r\n\t\t\t\tconst rightNumericValues = rightRawValues.map(item =>\r\n\t\t\t\t\tsafeToNumber(item.value ?? item.raw ?? item)\r\n\t\t\t\t);\r\n\r\n\t\t\t\tconst allValues = [...leftNumericValues, ...rightNumericValues].filter(\r\n\t\t\t\t\tv => typeof v === \"number\" && !isNaN(v)\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (allValues.length > 0) {\r\n\t\t\t\t\tglobalMaxValue = Math.max(0, ...allValues);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tglobalMaxValue = 1; // Default if no data or all non-numeric\r\n\t\t\t\t}\r\n\t\t\t\tif (globalMaxValue === 0) globalMaxValue = 1; // Avoid y-axis [0,0]\r\n\t\t\t}\r\n\t\t\treturn { ...field, globalMaxValue };\r\n\t\t});\r\n\t});\r\n\r\n\tconst comparableFields = computed(() => {\r\n\t\treturn COMPARABLE_FIELDS.filter(field => {\r\n\t\t\tconst leftVal = getField(leftInfobox.value, field.key);\r\n\t\t\tconst rightVal = getField(rightInfobox.value, field.key);\r\n\t\t\treturn leftVal.length > 0 || rightVal.length > 0;\r\n\t\t});\r\n\t});\r\n\r\n\tconst tryCalculateScores = () => {\r\n\t\tif (leftDataLoaded.value && rightDataLoaded.value) {\r\n\t\t\tisInitializing.value = true; // Show loading while calculating scores\r\n\t\t\tsortedFieldsWithScores.value = comparableFields.value\r\n\t\t\t\t.map(field => ({\r\n\t\t\t\t\t...field,\r\n\t\t\t\t\tscore: calculateDifferenceScore(field)\r\n\t\t\t\t}))\r\n\t\t\t\t.sort((a, b) => {\r\n\t\t\t\t\tif (a.type !== \"text\" && b.type === \"text\") return -1;\r\n\t\t\t\t\tif (a.type === \"text\" && b.type !== \"text\") return 1;\r\n\t\t\t\t\treturn b.score - a.score;\r\n\t\t\t\t});\r\n\r\n\t\t\t// Calculation done, now try auto compare (which might set isInitializing to false)\r\n\t\t\ttryAutoCompare();\r\n\t\t\t// If autoCompare doesn't run or finishes quickly, ensure loading is off\r\n\t\t\tif (!hasAutoCompared.value) {\r\n\t\t\t\tisInitializing.value = false;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst showFullChart = (infobox, field) => {\r\n\t\tcurrentChart.value = {\r\n\t\t\ttitle: infobox.title,\r\n\t\t\tfield: field,\r\n\t\t\tdata: getField(infobox, field.key) // Pass the raw field data\r\n\t\t};\r\n\t\tshowFullChartModal.value = true;\r\n\t};\r\n\r\n\tconst closeFullChart = () => {\r\n\t\tshowFullChartModal.value = false;\r\n\t};\r\n\r\n\tconst hoverInfobox = (infobox, fieldKey, side) => {\r\n\t\tbus.emit(`hover-${side}-infobox`, {\r\n\t\t\tfieldKey,\r\n\t\t\tinfoboxTitle: infobox.title\r\n\t\t});\r\n\t};\r\n\r\n\tconst unhoverInfobox = side => {\r\n\t\tbus.emit(`unhover-${side}-infobox`);\r\n\t};\r\n\r\n\tconst hoverBothInfoboxes = fieldKey => {\r\n\t\thoverInfobox(leftInfobox.value, fieldKey, \"left\");\r\n\t\thoverInfobox(rightInfobox.value, fieldKey, \"right\");\r\n\t};\r\n\r\n\tconst unhoverBothInfoboxes = () => {\r\n\t\tunhoverInfobox(\"left\");\r\n\t\tunhoverInfobox(\"right\");\r\n\t};\r\n\r\n\tconst handleMiddleColumnClick = field => {\r\n\t\temit(\"compareAttribute\", {\r\n\t\t\tfieldKey: field.key,\r\n\t\t\tleftData: getField(leftInfobox.value, field.key),\r\n\t\t\trightData: getField(rightInfobox.value, field.key),\r\n\t\t\tleftTitle: leftInfobox.value.title,\r\n\t\t\trightTitle: rightInfobox.value.title,\r\n\t\t\tfieldType: field.type,\r\n\t\t\tfieldLabel: field.typeLabel\r\n\t\t});\r\n\t};\r\n\r\n\tconst showCombinedChart = field => {\r\n\t\tconst leftData = getField(leftInfobox.value, field.key);\r\n\t\tconst rightData = getField(rightInfobox.value, field.key);\r\n\r\n\t\tcurrentChart.value = {\r\n\t\t\ttitle: `合并图表 - ${field.key}`,\r\n\t\t\tfield: field,\r\n\t\t\tdata: [...leftData, ...rightData] // Pass combined raw field data\r\n\t\t};\r\n\t\tshowFullChartModal.value = true;\r\n\t};\r\n\r\n\tconst processInfoboxData = data => {\r\n\t\tif (!data) {\r\n\t\t\tconsole.warn(\"接收到空Infobox数据\");\r\n\t\t\treturn { title: \"\", type: \"\", data: {} };\r\n\t\t}\r\n\t\treturn {\r\n\t\t\ttitle: data.title || \"无标题\",\r\n\t\t\ttype: data.type || \"未知类型\",\r\n\t\t\tdata: data.sections || {}\r\n\t\t};\r\n\t};\r\n\r\n\tonMounted(() => {\r\n\t\tisInitializing.value = true; // Start with loading true\r\n\t\tbus.on(\"div1_InfoboxData\", data => {\r\n\t\t\tleftInfobox.value = processInfoboxData(data);\r\n\t\t\tleftDataLoaded.value = true;\r\n\t\t\tif (rightDataLoaded.value) {\r\n\t\t\t\t// Only calculate if both are loaded\r\n\t\t\t\ttryCalculateScores();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tbus.on(\"div3_InfoboxData\", data => {\r\n\t\t\trightInfobox.value = processInfoboxData(data);\r\n\t\t\trightDataLoaded.value = true;\r\n\t\t\tif (leftDataLoaded.value) {\r\n\t\t\t\t// Only calculate if both are loaded\r\n\t\t\t\ttryCalculateScores();\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\r\n\twatch(\r\n\t\t[() => leftDataLoaded.value, () => rightDataLoaded.value],\r\n\t\t([leftLoaded, rightLoaded]) => {\r\n\t\t\tif (leftLoaded && rightLoaded) {\r\n\t\t\t\t// Scores are now calculated inside the bus.on handlers when both are ready\r\n\t\t\t\t// or if one arrives after the other.\r\n\t\t\t\t// This watch might still be useful for other initial setup if needed,\r\n\t\t\t\t// but primary score calculation is handled above.\r\n\t\t\t\t// If no auto-compare has happened and data is loaded, turn off initial loading.\r\n\t\t\t\tif (!hasAutoCompared.value && isInitializing.value) {\r\n\t\t\t\t\t// Potentially turn off initializing if not done by tryAutoCompare\r\n\t\t\t\t\t// However, tryAutoCompare or tryCalculateScores should handle this.\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tisInitializing.value = true; // If one dataset becomes unloaded, show loading\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ immediate: true } // Check initial state\r\n\t);\r\n\r\n\tonUnmounted(() => {\r\n\t\tbus.off(\"div1_InfoboxData\");\r\n\t\tbus.off(\"div3_InfoboxData\");\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.compare-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tpadding: 8px;\r\n\t\tbox-sizing: border-box;\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t.initial-loading {\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\tbottom: 0;\r\n\t\tbackground: rgba(255, 255, 255, 0.8);\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tz-index: 100;\r\n\t}\r\n\r\n\t.initial-loading p {\r\n\t\tmargin-top: 10px;\r\n\t\tfont-size: 14px;\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.loading-spinner {\r\n\t\twidth: 30px;\r\n\t\theight: 30px;\r\n\t\tborder: 3px solid #f3f3f3;\r\n\t\tborder-top: 3px solid #4caf50;\r\n\t\tborder-radius: 50%;\r\n\t\tanimation: spin 1s linear infinite;\r\n\t}\r\n\r\n\t@keyframes spin {\r\n\t\t0% {\r\n\t\t\ttransform: rotate(0deg);\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform: rotate(360deg);\r\n\t\t}\r\n\t}\r\n\r\n\t.heatmap-control {\r\n\t\tmargin-bottom: 10px;\r\n\t\ttext-align: right;\r\n\t}\r\n\r\n\t.heatmap-control button {\r\n\t\tpadding: 6px 12px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tborder-radius: 4px;\r\n\t\tcursor: pointer;\r\n\t}\r\n\r\n\t.sorting-heatmap {\r\n\t\tmargin-bottom: 20px;\r\n\t\tborder: 1px solid #eee;\r\n\t\tborder-radius: 8px;\r\n\t\toverflow: hidden;\r\n\t\tbox-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t.heatmap-header {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: 50px 2fr 1fr 1fr 1fr;\r\n\t\tpadding: 8px 12px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tfont-weight: bold;\r\n\t}\r\n\r\n\t.heatmap-row {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: 50px 2fr 1fr 1fr 1fr;\r\n\t\tpadding: 8px 12px;\r\n\t\tborder-bottom: 1px solid #eee;\r\n\t\ttransition: all 0.3s;\r\n\t}\r\n\r\n\t.heatmap-row:hover {\r\n\t\ttransform: scale(1.01);\r\n\t\tbox-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t.field-rank {\r\n\t\tfont-weight: bold;\r\n\t\tcolor: #2c3e50;\r\n\t}\r\n\r\n\t.field-name {\r\n\t\tfont-weight: bold;\r\n\t}\r\n\r\n\t.field-type {\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.field-score {\r\n\t\ttext-align: right;\r\n\t\tfont-family: monospace;\r\n\t}\r\n\r\n\t.field-weight {\r\n\t\ttext-align: right;\r\n\t\tfont-family: monospace;\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.comparison-grid {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns:\r\n\t\t\tminmax(120px, 1fr)\r\n\t\t\tminmax(80px, 100px)\r\n\t\t\tminmax(120px, 1fr);\r\n\t\twidth: 100%;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t\tborder-radius: 4px;\r\n\t\toverflow: hidden;\r\n\t\tmax-height: 500px; /* Or your desired max height */\r\n\t\toverflow-y: auto;\r\n\t}\r\n\r\n\t.header {\r\n\t\tpadding: 8px 6px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n\t\tposition: sticky;\r\n\t\ttop: 0;\r\n\t\tz-index: 1;\r\n\t\tborder-right: 1px solid #475569;\r\n\t\tmin-height: 36px;\r\n\t\tfont-size: 13px;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t}\r\n\t.header:last-child {\r\n\t\tborder-right: none;\r\n\t}\r\n\r\n\t.header.middle-column {\r\n\t\tpadding: 8px 4px;\r\n\t\tbackground: #1e293b; /* Slightly darker for middle */\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t}\r\n\r\n\t.cell {\r\n\t\tpadding: 8px;\r\n\t\theight: 110px; /* Adjust as needed */\r\n\t\tborder-bottom: 1px solid #e0e0e0;\r\n\t\tborder-right: 1px solid #e0e0e0;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center; /* Center content in cell */\r\n\t\tposition: relative;\r\n\t\tcursor: pointer;\r\n\t\ttransition: all 0.3s ease;\r\n\t\tmin-width: 0; /* For flexbox to allow shrinking */\r\n\t\toverflow: hidden; /* Prevent content overflow */\r\n\t}\r\n\t.cell:last-child {\r\n\t\t/* Last cell in a row */\r\n\t\tborder-right: none;\r\n\t}\r\n\t/* Remove bottom border for cells in the last row */\r\n\t.comparison-grid > .cell:nth-last-child(-n + 3) {\r\n\t\tborder-bottom: none;\r\n\t}\r\n\r\n\t.left-column,\r\n\t.right-column {\r\n\t\tmax-width: 100%;\r\n\t}\r\n\r\n\t.cell:hover {\r\n\t\tbackground-color: #f5f5f5;\r\n\t}\r\n\r\n\t.left-column:hover {\r\n\t\tbackground-color: #fff8e1; /* Light yellow tint */\r\n\t}\r\n\r\n\t.right-column:hover {\r\n\t\tbackground-color: #fff8e1; /* Light yellow tint */\r\n\t}\r\n\r\n\t.middle-column {\r\n\t\tposition: relative;\r\n\t\tcursor: default;\r\n\t\tbackground-color: #f8f9fa;\r\n\t\ttransition: background-color 0.2s;\r\n\t\tjustify-content: center; /* Center items in middle column */\r\n\t\talign-items: center;\r\n\t}\r\n\r\n\t.middle-column:hover {\r\n\t\tbackground-color: #e9ecef;\r\n\t}\r\n\r\n\t.middle-column .field-name {\r\n\t\t/* Target field-name specifically in middle-column */\r\n\t\tfont-weight: bold;\r\n\t\tmargin-bottom: 4px;\r\n\t\tfont-size: 12px;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t\ttext-align: center;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t.middle-column .field-type {\r\n\t\t/* Target field-type specifically in middle-column */\r\n\t\tcolor: #666;\r\n\t\tfont-size: 11px;\r\n\t\tfont-style: italic;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t\ttext-align: center;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t.icon-actions {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center; /* Space out icons */\r\n\t\tgap: 15px; /* Space between icons */\r\n\t\tmargin-top: 8px;\r\n\t}\r\n\r\n\t.icon-btn {\r\n\t\tfont-size: 16px;\r\n\t\tcursor: pointer;\r\n\t\topacity: 0.7;\r\n\t\ttransition: all 0.2s;\r\n\t}\r\n\r\n\t.icon-btn:hover {\r\n\t\topacity: 1;\r\n\t\ttransform: scale(1.2);\r\n\t}\r\n\r\n\t.icon-btn.compare:hover {\r\n\t\tcolor: #4caf50; /* Green */\r\n\t}\r\n\t.icon-btn.merge:hover {\r\n\t\tcolor: #2196f3; /* Blue */\r\n\t}\r\n\r\n\t.full-chart-modal {\r\n\t\tposition: fixed;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\tbottom: 0;\r\n\t\tbackground-color: rgba(0, 0, 0, 0.3); /* Softer backdrop */\r\n\t\tbackdrop-filter: blur(8px);\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t\tz-index: 1000;\r\n\t\tanimation: fadeIn 0.3s ease-out;\r\n\t}\r\n\t@keyframes fadeIn {\r\n\t\tfrom {\r\n\t\t\topacity: 0;\r\n\t\t}\r\n\t\tto {\r\n\t\t\topacity: 1;\r\n\t\t}\r\n\t}\r\n\r\n\t.modal-content {\r\n\t\tbackground: white;\r\n\t\tpadding: 16px; /* Reduced padding */\r\n\t\tborder-radius: 8px;\r\n\t\twidth: 85%;\r\n\t\tmax-width: 800px;\r\n\t\tmax-height: 85vh; /* Use vh for responsive height */\r\n\t\tposition: relative;\r\n\t\toverflow-y: auto; /* Enable scroll if content overflows */\r\n\t\tbox-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\r\n\t}\r\n\r\n\t.modal-content h3 {\r\n\t\tmargin-top: 0;\r\n\t\tmargin-bottom: 12px;\r\n\t\tfont-size: 18px;\r\n\t\tcolor: #333;\r\n\t}\r\n\r\n\t.chart-container {\r\n\t\theight: 60vh; /* Responsive height */\r\n\t\twidth: 100%;\r\n\t\tmargin: 16px 0;\r\n\t}\r\n\r\n\t.chart-legend {\r\n\t\tfont-size: 13px;\r\n\t\tcolor: #666;\r\n\t\ttext-align: center;\r\n\t\tmargin-top: 12px;\r\n\t\tpadding-top: 12px;\r\n\t\tborder-top: 1px solid #eee;\r\n\t}\r\n\r\n\t.close-btn {\r\n\t\tposition: absolute;\r\n\t\ttop: 8px;\r\n\t\tright: 8px;\r\n\t\tfont-size: 20px;\r\n\t\tbackground: none;\r\n\t\tborder: none;\r\n\t\tcursor: pointer;\r\n\t\tcolor: #666;\r\n\t\tpadding: 4px; /* Easier to click */\r\n\t\tline-height: 1;\r\n\t}\r\n\r\n\t.close-btn:hover {\r\n\t\tcolor: #333;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}