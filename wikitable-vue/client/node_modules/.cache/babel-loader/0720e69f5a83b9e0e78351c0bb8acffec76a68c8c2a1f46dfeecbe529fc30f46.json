{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * 维基百科Infobox专业解析器 - 适配图表组件版\r\n */\nexport function parseInfoboxForComparison(infoboxElement) {\n  if (!infoboxElement) return null;\n  const result = {\n    title: extractTitle(infoboxElement),\n    type: detectInfoboxType(infoboxElement),\n    timeSeriesData: {} // 改为适合SparklineChart的格式\n  };\n  const rows = infoboxElement.querySelectorAll('tr');\n  let currentYear = new Date().getFullYear();\n  rows.forEach(row => {\n    const th = row.querySelector('th');\n    const td = row.querySelector('td');\n    if (!th || !td) return;\n    const key = cleanFieldName(th.textContent);\n    const value = extractStructuredValue(td, currentYear);\n    if (key && value) {\n      if (!result.timeSeriesData[key]) {\n        result.timeSeriesData[key] = [];\n      }\n      if (Array.isArray(value)) {\n        result.timeSeriesData[key].push(...value);\n      } else {\n        result.timeSeriesData[key].push(value);\n      }\n    }\n  });\n  return result;\n}\nfunction extractStructuredValue(tdElement, baseYear) {\n  const td = tdElement.cloneNode(true);\n  cleanElement(td);\n\n  // 处理列表数据\n  if (td.querySelector('ul, ol')) {\n    return Array.from(td.querySelectorAll('li')).map((li, i) => {\n      return parseValueItem(li.textContent, baseYear - i);\n    });\n  }\n\n  // 处理单条数据\n  return parseValueItem(td.textContent, baseYear);\n}\nfunction parseValueItem(text, year) {\n  const cleanText = text.replace(/\\[\\d+\\]/g, '').trim();\n\n  // 1. 百分比数据 (GDP增长等)\n  const percentMatch = cleanText.match(/(\\d+\\.?\\d*)%/);\n  if (percentMatch) {\n    return {\n      year: year,\n      value: parseFloat(percentMatch[1]),\n      unit: \"%\",\n      name: cleanText.replace(percentMatch[0], '').trim() || \"数值\",\n      type: \"percentage\"\n    };\n  }\n\n  // 2. 货币数据 (GDP等)\n  const currencyMatch = cleanText.match(/([\\d,\\.]+)\\s*(万?亿?美元|¥|€|£)/);\n  if (currencyMatch) {\n    return {\n      year: year,\n      value: parseFloat(currencyMatch[1].replace(/,/g, '')),\n      unit: currencyMatch[2],\n      name: cleanText.replace(currencyMatch[0], '').trim() || \"数值\",\n      type: \"currency\"\n    };\n  }\n\n  // 3. 纯数字数据 (人口等)\n  const numberMatch = cleanText.match(/^[\\d,\\.]+$/);\n  if (numberMatch) {\n    return {\n      year: year,\n      value: parseFloat(cleanText.replace(/,/g, '')),\n      name: \"数值\",\n      type: \"number\"\n    };\n  }\n\n  // 4. 默认文本数据\n  return {\n    year: year,\n    value: cleanText,\n    name: cleanText,\n    type: \"text\"\n  };\n}\n\n// 其他辅助函数保持不变...","map":{"version":3,"names":["parseInfoboxForComparison","infoboxElement","result","title","extractTitle","type","detectInfoboxType","timeSeriesData","rows","querySelectorAll","currentYear","Date","getFullYear","forEach","row","th","querySelector","td","key","cleanFieldName","textContent","value","extractStructuredValue","Array","isArray","push","tdElement","baseYear","cloneNode","cleanElement","from","map","li","i","parseValueItem","text","year","cleanText","replace","trim","percentMatch","match","parseFloat","unit","name","currencyMatch","numberMatch"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/js/wikiInfoboxParser.js"],"sourcesContent":["/**\r\n * 维基百科Infobox专业解析器 - 适配图表组件版\r\n */\r\nexport function parseInfoboxForComparison(infoboxElement) {\r\n    if (!infoboxElement) return null;\r\n  \r\n    const result = {\r\n      title: extractTitle(infoboxElement),\r\n      type: detectInfoboxType(infoboxElement),\r\n      timeSeriesData: {} // 改为适合SparklineChart的格式\r\n    };\r\n  \r\n    const rows = infoboxElement.querySelectorAll('tr');\r\n    let currentYear = new Date().getFullYear();\r\n  \r\n    rows.forEach(row => {\r\n      const th = row.querySelector('th');\r\n      const td = row.querySelector('td');\r\n      if (!th || !td) return;\r\n  \r\n      const key = cleanFieldName(th.textContent);\r\n      const value = extractStructuredValue(td, currentYear);\r\n  \r\n      if (key && value) {\r\n        if (!result.timeSeriesData[key]) {\r\n          result.timeSeriesData[key] = [];\r\n        }\r\n        \r\n        if (Array.isArray(value)) {\r\n          result.timeSeriesData[key].push(...value);\r\n        } else {\r\n          result.timeSeriesData[key].push(value);\r\n        }\r\n      }\r\n    });\r\n  \r\n    return result;\r\n  }\r\n  \r\n  function extractStructuredValue(tdElement, baseYear) {\r\n    const td = tdElement.cloneNode(true);\r\n    cleanElement(td);\r\n  \r\n    // 处理列表数据\r\n    if (td.querySelector('ul, ol')) {\r\n      return Array.from(td.querySelectorAll('li')).map((li, i) => {\r\n        return parseValueItem(li.textContent, baseYear - i);\r\n      });\r\n    }\r\n  \r\n    // 处理单条数据\r\n    return parseValueItem(td.textContent, baseYear);\r\n  }\r\n  \r\n  function parseValueItem(text, year) {\r\n    const cleanText = text.replace(/\\[\\d+\\]/g, '').trim();\r\n    \r\n    // 1. 百分比数据 (GDP增长等)\r\n    const percentMatch = cleanText.match(/(\\d+\\.?\\d*)%/);\r\n    if (percentMatch) {\r\n      return {\r\n        year: year,\r\n        value: parseFloat(percentMatch[1]),\r\n        unit: \"%\",\r\n        name: cleanText.replace(percentMatch[0], '').trim() || \"数值\",\r\n        type: \"percentage\"\r\n      };\r\n    }\r\n  \r\n    // 2. 货币数据 (GDP等)\r\n    const currencyMatch = cleanText.match(/([\\d,\\.]+)\\s*(万?亿?美元|¥|€|£)/);\r\n    if (currencyMatch) {\r\n      return {\r\n        year: year,\r\n        value: parseFloat(currencyMatch[1].replace(/,/g, '')),\r\n        unit: currencyMatch[2],\r\n        name: cleanText.replace(currencyMatch[0], '').trim() || \"数值\",\r\n        type: \"currency\"\r\n      };\r\n    }\r\n  \r\n    // 3. 纯数字数据 (人口等)\r\n    const numberMatch = cleanText.match(/^[\\d,\\.]+$/);\r\n    if (numberMatch) {\r\n      return {\r\n        year: year,\r\n        value: parseFloat(cleanText.replace(/,/g, '')),\r\n        name: \"数值\",\r\n        type: \"number\"\r\n      };\r\n    }\r\n  \r\n    // 4. 默认文本数据\r\n    return {\r\n      year: year,\r\n      value: cleanText,\r\n      name: cleanText,\r\n      type: \"text\"\r\n    };\r\n  }\r\n  \r\n  // 其他辅助函数保持不变..."],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}