{"ast":null,"code":"/**\r\n * 维基百科Infobox专业解析器 - 完整版\r\n * 提取结构化可对比数据，优化数值提取和类型识别\r\n */\nexport function parseInfoboxForComparison(infoboxElement) {\n  if (!infoboxElement) return null;\n\n  // 1. 提取标题和基本信息\n  const result = {\n    title: extractTitle(infoboxElement),\n    type: detectInfoboxType(infoboxElement),\n    sections: {}\n  };\n\n  // 2. 按section分组处理数据\n  let currentSection = \"基本信息\";\n  const rows = infoboxElement.querySelectorAll('tr');\n  rows.forEach(row => {\n    // 2.1 处理section标题行\n    if (row.classList.contains('infobox-header') || row.querySelector('th.infobox-header[colspan=\"2\"]')) {\n      currentSection = cleanText(row.textContent) || currentSection;\n      result.sections[currentSection] = result.sections[currentSection] || {};\n      return;\n    }\n\n    // 2.2 处理普通数据行\n    const th = row.querySelector('th.infobox-label');\n    const td = row.querySelector('td.infobox-data');\n    if (!th || !td) return;\n    const key = cleanFieldName(th.textContent);\n    const value = extractEnhancedValue(td);\n    if (key && value) {\n      result.sections[currentSection] = result.sections[currentSection] || {};\n      result.sections[currentSection][key] = value;\n    }\n  });\n  return result;\n}\n\n/* 增强版值提取函数 */\nfunction extractEnhancedValue(tdElement) {\n  const td = tdElement.cloneNode(true);\n\n  // 移除不需要的元素\n  ['img', 'sup', '.reference', '.mw-editsection', 'abbr', 'style'].forEach(selector => {\n    td.querySelectorAll(selector).forEach(el => el.remove());\n  });\n  const text = cleanText(td.textContent);\n\n  // 特殊处理包含列表的情况\n  if (td.querySelector('ul, ol')) {\n    return Array.from(td.querySelectorAll('li')).map(li => {\n      return extractValueFromText(cleanText(li.textContent));\n    });\n  }\n  return extractValueFromText(text);\n}\n\n/* 增强版值提取逻辑 */\nfunction extractValueFromText(text) {\n  // 0. 原始文本\n  const raw = text;\n\n  // 1. 提取百分比值 (如 \"6.8%\")\n  const percentMatch = text.match(/(\\d+\\.?\\d*)%/);\n  if (percentMatch) {\n    return {\n      value: parseFloat(percentMatch[1]),\n      unit: \"%\",\n      type: \"percentage\",\n      raw,\n      extracted: true\n    };\n  }\n\n  // 2. 增强货币值提取 (支持多种货币和单位)\n  const currencyMatch = text.match(/([\\$¥€£])\\s*([\\d,.]+)\\s*(万?亿?[美元]?|million|billion|trillion)?/i);\n  if (currencyMatch) {\n    const currency = currencyMatch[1];\n    let value = parseFloat(currencyMatch[2].replace(/,/g, ''));\n    const unit = currencyMatch[3] ? currencyMatch[3].toLowerCase() : '';\n\n    // 处理单位换算\n    if (unit.includes('million') || unit.includes('万')) value *= 1e6;\n    if (unit.includes('billion') || unit.includes('亿')) value *= 1e9;\n    if (unit.includes('trillion') || unit.includes('万亿')) value *= 1e12;\n    return {\n      value,\n      currency,\n      unit: unit || currency,\n      type: \"currency\",\n      raw,\n      extracted: true\n    };\n  }\n\n  // 3. 增强纯数字提取 (支持千分位分隔符)\n  const numberMatch = text.match(/(^|[\\s(])([\\d,.]+)(?=[\\s)])/);\n  if (numberMatch) {\n    const numStr = numberMatch[2].replace(/,/g, '');\n    const numValue = parseFloat(numStr);\n    if (!isNaN(numValue)) {\n      return {\n        value: numValue,\n        type: \"number\",\n        raw,\n        extracted: true\n      };\n    }\n  }\n\n  // 4. 增强排名信息提取 (支持多种格式)\n  const rankMatch = text.match(/(第\\s*([零一二三四五六七八九十百千万\\d]+)\\s*名|rank\\s*(\\d+)|(\\d+)(?:st|nd|rd|th)\\s*place)/i);\n  if (rankMatch) {\n    const rankValue = rankMatch[2] ? chineseToNumber(rankMatch[2]) : rankMatch[3] ? parseInt(rankMatch[3]) : parseInt(rankMatch[4]);\n    return {\n      rank: rankValue,\n      type: \"rank\",\n      raw,\n      extracted: true\n    };\n  }\n\n  // 5. 提取年份数据 (如 \"(2023)\" 或 \"as of 2023\")\n  const yearMatch = text.match(/(?:\\(|as of\\s)(\\d{4})\\)?/i);\n  const year = yearMatch ? parseInt(yearMatch[1]) : null;\n\n  // 6. 提取日期范围 (如 \"1 April - 31 March\")\n  const dateRangeMatch = text.match(/(\\d{1,2}\\s+[A-Za-z]+\\s*[-–]\\s*\\d{1,2}\\s+[A-Za-z]+)/i);\n  if (dateRangeMatch) {\n    return {\n      value: dateRangeMatch[1],\n      type: \"date_range\",\n      raw,\n      extracted: true\n    };\n  }\n\n  // 7. 默认返回处理后的文本\n  return {\n    value: text,\n    ...(year && {\n      year\n    }),\n    type: \"text\",\n    raw,\n    extracted: false\n  };\n}\n\n/* 辅助函数 */\nfunction extractTitle(element) {\n  const sources = [() => element.querySelector('caption')?.textContent, () => element.querySelector('.infobox-title')?.textContent, () => element.querySelector('th[colspan=\"2\"]')?.textContent];\n  for (const source of sources) {\n    const title = cleanText(source());\n    if (title) return title;\n  }\n  return \"无标题\";\n}\nfunction detectInfoboxType(element) {\n  const classText = `${element.className} ${element.textContent}`.toLowerCase();\n  if (/country|nation|state|国家/.test(classText)) return \"国家\";\n  if (/economy|经济/.test(classText)) return \"经济\";\n  if (/person|people|人物/.test(classText)) return \"人物\";\n  if (/company|公司/.test(classText)) return \"公司\";\n  return \"其他\";\n}\nfunction cleanFieldName(text) {\n  return cleanText(text).replace(/[:：]$/, '').replace(/\\s+/g, ' ').trim();\n}\nfunction cleanText(text) {\n  return (text || \"\").replace(/\\[\\d+\\]/g, '') // 去除引用标记[1]\n  .replace(/\\s+/g, ' ') // 合并空格\n  .replace(/[[\\]]/g, '') // 去除方括号\n  .trim();\n}\n\n/* 中文数字转换 - 增强版 */\nfunction chineseToNumber(chinese) {\n  const map = {\n    零: 0,\n    一: 1,\n    二: 2,\n    三: 3,\n    四: 4,\n    五: 5,\n    六: 6,\n    七: 7,\n    八: 8,\n    九: 9,\n    十: 10,\n    百: 100,\n    千: 1000,\n    万: 10000,\n    亿: 1e8\n  };\n  let total = 0;\n  let current = 0;\n  for (let i = 0; i < chinese.length; i++) {\n    const char = chinese[i];\n    if (map[char] < 10) {\n      current = map[char];\n    } else {\n      if (current === 0) current = 1;\n      total += current * map[char];\n      current = 0;\n    }\n  }\n  return total + current;\n}","map":{"version":3,"names":["parseInfoboxForComparison","infoboxElement","result","title","extractTitle","type","detectInfoboxType","sections","currentSection","rows","querySelectorAll","forEach","row","classList","contains","querySelector","cleanText","textContent","th","td","key","cleanFieldName","value","extractEnhancedValue","tdElement","cloneNode","selector","el","remove","text","Array","from","map","li","extractValueFromText","raw","percentMatch","match","parseFloat","unit","extracted","currencyMatch","currency","replace","toLowerCase","includes","numberMatch","numStr","numValue","isNaN","rankMatch","rankValue","chineseToNumber","parseInt","rank","yearMatch","year","dateRangeMatch","element","sources","source","classText","className","test","trim","chinese","零","一","二","三","四","五","六","七","八","九","十","百","千","万","亿","total","current","i","length","char"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/js/wikiInfoboxParser.js"],"sourcesContent":["/**\r\n * 维基百科Infobox专业解析器 - 完整版\r\n * 提取结构化可对比数据，优化数值提取和类型识别\r\n */\r\nexport function parseInfoboxForComparison(infoboxElement) {\r\n    if (!infoboxElement) return null;\r\n  \r\n    // 1. 提取标题和基本信息\r\n    const result = {\r\n      title: extractTitle(infoboxElement),\r\n      type: detectInfoboxType(infoboxElement),\r\n      sections: {}\r\n    };\r\n  \r\n    // 2. 按section分组处理数据\r\n    let currentSection = \"基本信息\";\r\n    const rows = infoboxElement.querySelectorAll('tr');\r\n  \r\n    rows.forEach(row => {\r\n      // 2.1 处理section标题行\r\n      if (row.classList.contains('infobox-header') || \r\n          row.querySelector('th.infobox-header[colspan=\"2\"]')) {\r\n        currentSection = cleanText(row.textContent) || currentSection;\r\n        result.sections[currentSection] = result.sections[currentSection] || {};\r\n        return;\r\n      }\r\n  \r\n      // 2.2 处理普通数据行\r\n      const th = row.querySelector('th.infobox-label');\r\n      const td = row.querySelector('td.infobox-data');\r\n      if (!th || !td) return;\r\n  \r\n      const key = cleanFieldName(th.textContent);\r\n      const value = extractEnhancedValue(td);\r\n  \r\n      if (key && value) {\r\n        result.sections[currentSection] = result.sections[currentSection] || {};\r\n        result.sections[currentSection][key] = value;\r\n      }\r\n    });\r\n  \r\n    return result;\r\n  }\r\n  \r\n  /* 增强版值提取函数 */\r\n  function extractEnhancedValue(tdElement) {\r\n    const td = tdElement.cloneNode(true);\r\n    \r\n    // 移除不需要的元素\r\n    ['img', 'sup', '.reference', '.mw-editsection', 'abbr', 'style'].forEach(selector => {\r\n      td.querySelectorAll(selector).forEach(el => el.remove());\r\n    });\r\n  \r\n    const text = cleanText(td.textContent);\r\n    \r\n    // 特殊处理包含列表的情况\r\n    if (td.querySelector('ul, ol')) {\r\n      return Array.from(td.querySelectorAll('li')).map(li => {\r\n        return extractValueFromText(cleanText(li.textContent));\r\n      });\r\n    }\r\n    \r\n    return extractValueFromText(text);\r\n  }\r\n  \r\n  /* 增强版值提取逻辑 */\r\n  function extractValueFromText(text) {\r\n    // 0. 原始文本\r\n    const raw = text;\r\n    \r\n    // 1. 提取百分比值 (如 \"6.8%\")\r\n    const percentMatch = text.match(/(\\d+\\.?\\d*)%/);\r\n    if (percentMatch) {\r\n      return {\r\n        value: parseFloat(percentMatch[1]),\r\n        unit: \"%\",\r\n        type: \"percentage\",\r\n        raw,\r\n        extracted: true\r\n      };\r\n    }\r\n  \r\n    // 2. 增强货币值提取 (支持多种货币和单位)\r\n    const currencyMatch = text.match(/([\\$¥€£])\\s*([\\d,.]+)\\s*(万?亿?[美元]?|million|billion|trillion)?/i);\r\n    if (currencyMatch) {\r\n      const currency = currencyMatch[1];\r\n      let value = parseFloat(currencyMatch[2].replace(/,/g, ''));\r\n      const unit = currencyMatch[3] ? currencyMatch[3].toLowerCase() : '';\r\n      \r\n      // 处理单位换算\r\n      if (unit.includes('million') || unit.includes('万')) value *= 1e6;\r\n      if (unit.includes('billion') || unit.includes('亿')) value *= 1e9;\r\n      if (unit.includes('trillion') || unit.includes('万亿')) value *= 1e12;\r\n      \r\n      return {\r\n        value,\r\n        currency,\r\n        unit: unit || currency,\r\n        type: \"currency\",\r\n        raw,\r\n        extracted: true\r\n      };\r\n    }\r\n  \r\n    // 3. 增强纯数字提取 (支持千分位分隔符)\r\n    const numberMatch = text.match(/(^|[\\s(])([\\d,.]+)(?=[\\s)])/);\r\n    if (numberMatch) {\r\n      const numStr = numberMatch[2].replace(/,/g, '');\r\n      const numValue = parseFloat(numStr);\r\n      if (!isNaN(numValue)) {\r\n        return {\r\n          value: numValue,\r\n          type: \"number\",\r\n          raw,\r\n          extracted: true\r\n        };\r\n      }\r\n    }\r\n  \r\n    // 4. 增强排名信息提取 (支持多种格式)\r\n    const rankMatch = text.match(/(第\\s*([零一二三四五六七八九十百千万\\d]+)\\s*名|rank\\s*(\\d+)|(\\d+)(?:st|nd|rd|th)\\s*place)/i);\r\n    if (rankMatch) {\r\n      const rankValue = rankMatch[2] ? chineseToNumber(rankMatch[2]) : \r\n                       rankMatch[3] ? parseInt(rankMatch[3]) : \r\n                       parseInt(rankMatch[4]);\r\n      return {\r\n        rank: rankValue,\r\n        type: \"rank\",\r\n        raw,\r\n        extracted: true\r\n      };\r\n    }\r\n  \r\n    // 5. 提取年份数据 (如 \"(2023)\" 或 \"as of 2023\")\r\n    const yearMatch = text.match(/(?:\\(|as of\\s)(\\d{4})\\)?/i);\r\n    const year = yearMatch ? parseInt(yearMatch[1]) : null;\r\n  \r\n    // 6. 提取日期范围 (如 \"1 April - 31 March\")\r\n    const dateRangeMatch = text.match(/(\\d{1,2}\\s+[A-Za-z]+\\s*[-–]\\s*\\d{1,2}\\s+[A-Za-z]+)/i);\r\n    if (dateRangeMatch) {\r\n      return {\r\n        value: dateRangeMatch[1],\r\n        type: \"date_range\",\r\n        raw,\r\n        extracted: true\r\n      };\r\n    }\r\n  \r\n    // 7. 默认返回处理后的文本\r\n    return {\r\n      value: text,\r\n      ...(year && { year }),\r\n      type: \"text\",\r\n      raw,\r\n      extracted: false\r\n    };\r\n  }\r\n  \r\n  /* 辅助函数 */\r\n  function extractTitle(element) {\r\n    const sources = [\r\n      () => element.querySelector('caption')?.textContent,\r\n      () => element.querySelector('.infobox-title')?.textContent,\r\n      () => element.querySelector('th[colspan=\"2\"]')?.textContent\r\n    ];\r\n    \r\n    for (const source of sources) {\r\n      const title = cleanText(source());\r\n      if (title) return title;\r\n    }\r\n    return \"无标题\";\r\n  }\r\n  \r\n  function detectInfoboxType(element) {\r\n    const classText = `${element.className} ${element.textContent}`.toLowerCase();\r\n    if (/country|nation|state|国家/.test(classText)) return \"国家\";\r\n    if (/economy|经济/.test(classText)) return \"经济\";\r\n    if (/person|people|人物/.test(classText)) return \"人物\";\r\n    if (/company|公司/.test(classText)) return \"公司\";\r\n    return \"其他\";\r\n  }\r\n  \r\n  function cleanFieldName(text) {\r\n    return cleanText(text)\r\n      .replace(/[:：]$/, '')\r\n      .replace(/\\s+/g, ' ')\r\n      .trim();\r\n  }\r\n  \r\n  function cleanText(text) {\r\n    return (text || \"\")\r\n      .replace(/\\[\\d+\\]/g, '')      // 去除引用标记[1]\r\n      .replace(/\\s+/g, ' ')         // 合并空格\r\n      .replace(/[[\\]]/g, '')        // 去除方括号\r\n      .trim();\r\n  }\r\n  \r\n  /* 中文数字转换 - 增强版 */\r\n  function chineseToNumber(chinese) {\r\n    const map = { \r\n      零:0, 一:1, 二:2, 三:3, 四:4, 五:5, 六:6, 七:7, 八:8, 九:9, \r\n      十:10, 百:100, 千:1000, 万:10000, 亿:1e8\r\n    };\r\n    \r\n    let total = 0;\r\n    let current = 0;\r\n    \r\n    for (let i = 0; i < chinese.length; i++) {\r\n      const char = chinese[i];\r\n      if (map[char] < 10) {\r\n        current = map[char];\r\n      } else {\r\n        if (current === 0) current = 1;\r\n        total += current * map[char];\r\n        current = 0;\r\n      }\r\n    }\r\n    \r\n    return total + current;\r\n  }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}