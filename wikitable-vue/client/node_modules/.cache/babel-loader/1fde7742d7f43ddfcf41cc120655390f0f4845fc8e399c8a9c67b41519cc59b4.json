{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-4d83b437\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  ref: \"chartEl\",\n  class: \"line-chart\"\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","_createElementBlock","_hoisted_1"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\charts\\LineChart.vue"],"sourcesContent":["<template>\r\n\t<div ref=\"chartEl\" class=\"line-chart\"></div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, watch, onBeforeUnmount, computed } from \"vue\";\r\n\timport * as echarts from \"echarts\";\r\n\r\n\tconst props = defineProps({\r\n\t  data: {\r\n\t    type: [Array, Object],\r\n\t    default: () => []\r\n\t  },\r\n\t  isCombined: {\r\n\t    type: Boolean,\r\n\t    default: false\r\n\t  },\r\n\t  sources: {\r\n\t    type: Array,\r\n\t    default: () => []\r\n\t  },\r\n\t  showTrend: {\r\n\t    type: Boolean,\r\n\t    default: false\r\n\t  }\r\n\t});\r\n\r\n\tconst chartEl = ref(null);\r\n\tlet chartInstance = null;\r\n\r\n\tconst colorPalette = [\"#4e79a7\", \"#e15759\", \"#76b7b2\", \"#f28e2b\", \"#59a14f\"];\r\n\r\n\tconst formatNumber = value => {\r\n\t  const num = Number(value);\r\n\t  return isNaN(num) ? \"0%\" : num.toFixed(2) + \"%\";\r\n\t};\r\n\r\n\tconst formatYear = year => {\r\n\t  if (!year) return \"\";\r\n\t  return year < 100 ? 2000 + year : year;\r\n\t};\r\n\r\n\tconst processedData = computed(() => {\r\n\t  if (!props.isCombined || !Array.isArray(props.data)) return props.data;\r\n\r\n\t  const validSources = props.sources?.length > 0\r\n\t    ? props.sources\r\n\t    : [...new Set(props.data.map(item => item?.source))].filter(Boolean);\r\n\r\n\t  const allYears = [...new Set(props.data.map(item =>\r\n\t    formatYear(item.year)\r\n\t  )].filter(Boolean).sort((a, b) => a - b);\r\n\r\n\t  const seriesData = validSources.map((source, index) => {\r\n\t    const sourceData = props.data.filter(item => item?.source === source);\r\n\t    return {\r\n\t      name: source,\r\n\t      data: allYears.map(year => {\r\n\t        const point = sourceData.find(item =>\r\n\t          formatYear(item.year) === year\r\n\t        );\r\n\t        return point ? point.value : null;\r\n\t      }),\r\n\t      color: colorPalette[index % colorPalette.length]\r\n\t    };\r\n\t  });\r\n\r\n\t  return {\r\n\t    series: seriesData,\r\n\t    categories: allYears\r\n\t  };\r\n\t});\r\n\r\n\tconst initChart = () => {\r\n\t  if (!chartEl.value) return;\r\n\r\n\t  if (chartInstance) chartInstance.dispose();\r\n\t  chartInstance = echarts.init(chartEl.value);\r\n\r\n\t  const baseOption = {\r\n\t    tooltip: {\r\n\t      trigger: \"axis\",\r\n\t      formatter: params => {\r\n\t        return params\r\n\t          .filter(param => param.value != null)\r\n\t          .map(param => {\r\n\t            const year = formatYear(param.name);\r\n\t            return `${param.seriesName}<br/>${year}: ${formatNumber(param.value)}`;\r\n\t          })\r\n\t          .join(\"<br/>\");\r\n\t      }\r\n\t    },\r\n\t    legend: {\r\n\t      show: props.isCombined,\r\n\t      data: props.isCombined\r\n\t        ? processedData.value.series.map(s => s.name)\r\n\t        : []\r\n\t    },\r\n\t    grid: {\r\n\t      top: props.isCombined ? \"20%\" : \"15%\",\r\n\t      left: \"3%\",\r\n\t      right: \"4%\",\r\n\t      bottom: \"3%\",\r\n\t      containLabel: true\r\n\t    },\r\n\t    xAxis: {\r\n\t      type: \"category\",\r\n\t      axisLabel: {\r\n\t        interval: 0,\r\n\t        rotate: 0,\r\n\t        formatter: (value) => formatYear(value)\r\n\t      }\r\n\t    },\r\n\t    yAxis: {\r\n\t      type: \"value\",\r\n\t      axisLabel: {\r\n\t        formatter: \"{value}%\"\r\n\t      }\r\n\t    }\r\n\t  };\r\n\r\n\t  if (props.isCombined) {\r\n\t    const option = {\r\n\t      ...baseOption,\r\n\t      xAxis: {\r\n\t        ...baseOption.xAxis,\r\n\t        data: processedData.value.categories\r\n\t      },\r\n\t      yAxis: {\r\n\t        ...baseOption.yAxis,\r\n\t        min: value => Math.max(0, value.min - 1)\r\n\t      },\r\n\t      series: processedData.value.series.map(series => ({\r\n\t        name: series.name,\r\n\t        data: series.data,\r\n\t        type: \"line\",\r\n\t        symbol: \"circle\",\r\n\t        symbolSize: 10,\r\n\t        lineStyle: {\r\n\t          width: 3,\r\n\t          color: series.color\r\n\t        },\r\n\t        itemStyle: {\r\n\t          color: series.color\r\n\t        },\r\n\t        label: {\r\n\t          show: true,\r\n\t          formatter: formatNumber,\r\n\t          color: \"#333\"\r\n\t        },\r\n\t        emphasis: {\r\n\t          itemStyle: {\r\n\t            borderWidth: 2,\r\n\t            borderColor: \"#fff\"\r\n\t          }\r\n\t        }\r\n\t      }))\r\n\t    };\r\n\t    chartInstance.setOption(option);\r\n\t  } else {\r\n\t    const option = {\r\n\t      ...baseOption,\r\n\t      xAxis: {\r\n\t        ...baseOption.xAxis,\r\n\t        data: props.data.map(item => item.year)\r\n\t      },\r\n\t      series: [\r\n\t        {\r\n\t          name: \"数据\",\r\n\t          data: props.data.map(item => ({\r\n\t            value: item.value,\r\n\t            year: item.year\r\n\t          })),\r\n\t          type: \"line\",\r\n\t          symbol: \"circle\",\r\n\t          symbolSize: 10,\r\n\t          lineStyle: {\r\n\t            width: 3,\r\n\t            color: colorPalette[0]\r\n\t          },\r\n\t          label: {\r\n\t            show: true,\r\n\t            formatter: formatNumber\r\n\t          }\r\n\t        }\r\n\t      ]\r\n\t    };\r\n\t    chartInstance.setOption(option);\r\n\t  }\r\n\r\n\t  window.addEventListener(\"resize\", handleResize);\r\n\t};\r\n\r\n\tconst handleResize = () => chartInstance?.resize();\r\n\r\n\tonMounted(initChart);\r\n\tonBeforeUnmount(() => {\r\n\t  if (chartInstance) {\r\n\t    chartInstance.dispose();\r\n\t    window.removeEventListener(\"resize\", handleResize);\r\n\t  }\r\n\t});\r\n\r\n\twatch(\r\n\t  () => [props.data, props.isCombined, props.sources],\r\n\t  () => initChart(),\r\n\t  { deep: true }\r\n\t);\r\n</script>\r\n\r\n<style scoped>\r\n\t.line-chart {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tmin-height: 400px;\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,GAAG,EAAC,SAAS;EAACC,KAAK,EAAC;;;uBAAzBC,mBAAA,CAA4C,OAA5CC,UAA4C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}