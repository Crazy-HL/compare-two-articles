{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, vModelText as _vModelText, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-2e821d1e\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"main-container\"\n};\nconst _hoisted_2 = {\n  class: \"chat-container\"\n};\nconst _hoisted_3 = {\n  class: \"chat-history\"\n};\nconst _hoisted_4 = {\n  class: \"message-content\"\n};\nconst _hoisted_5 = [\"innerHTML\"];\nconst _hoisted_6 = {\n  key: 0,\n  class: \"message-meta\"\n};\nconst _hoisted_7 = {\n  key: 0,\n  class: \"loading-indicator\"\n};\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"loading-spinner\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_9 = {\n  class: \"vis-container\"\n};\nconst _hoisted_10 = {\n  class: \"input\"\n};\nconst _hoisted_11 = {\n  class: \"input-container\"\n};\nconst _hoisted_12 = [\"disabled\"];\nconst _hoisted_13 = {\n  class: \"button-container\"\n};\nconst _hoisted_14 = [\"disabled\"];\nexport function render(_ctx, _cache) {\n  const _component_CompareTable = _resolveComponent(\"CompareTable\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.chatHistory, (message, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass(['message', message.role, {\n        error: message.error\n      }])\n    }, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"strong\", null, _toDisplayString(message.role === \"user\" ? \"用户\" : \"GPT\") + \":\", 1 /* TEXT */), _createElementVNode(\"p\", {\n      innerHTML: message.content\n    }, null, 8 /* PROPS */, _hoisted_5), message.timestamp ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, _toDisplayString(message.timestamp), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)])], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */)), _ctx.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [_hoisted_8, _createTextVNode(\" 正在处理中... \")])) : _createCommentVNode(\"v-if\", true)])]), _createElementVNode(\"div\", _hoisted_9, [_createVNode(_component_CompareTable, {\n    class: \"compare-table\",\n    \"div1-raw-data\": _ctx.div1RawData,\n    \"div3-raw-data\": _ctx.div3RawData,\n    onCompareAttribute: _ctx.handleAttributeComparison\n  }, null, 8 /* PROPS */, [\"div1-raw-data\", \"div3-raw-data\", \"onCompareAttribute\"])]), _createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"div\", _hoisted_11, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.userQuestion = $event),\n    rows: \"2\",\n    placeholder: \"请输入你想问的问题...\",\n    disabled: _ctx.isLoading\n  }, null, 8 /* PROPS */, _hoisted_12), [[_vModelText, _ctx.userQuestion]]), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = function () {\n      return _ctx.askQuestion && _ctx.askQuestion(...arguments);\n    }),\n    disabled: _ctx.isLoading\n  }, _toDisplayString(_ctx.isLoading ? \"处理中...\" : \"发送\"), 9 /* TEXT, PROPS */, _hoisted_14)])])])]);\n}","map":{"version":3,"names":["class","key","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_Fragment","_renderList","_ctx","chatHistory","message","index","_normalizeClass","role","error","_hoisted_4","_toDisplayString","innerHTML","content","_hoisted_5","timestamp","_hoisted_6","_createCommentVNode","isLoading","_hoisted_7","_hoisted_8","_createTextVNode","_hoisted_9","_createVNode","_component_CompareTable","div1RawData","div3RawData","onCompareAttribute","handleAttributeComparison","_hoisted_10","_hoisted_11","_cache","$event","userQuestion","rows","placeholder","disabled","_hoisted_12","_hoisted_13","onClick","askQuestion","arguments","_hoisted_14"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\Div2.vue"],"sourcesContent":["<template>\r\n\t<div class=\"main-container\">\r\n\t\t<div class=\"chat-container\">\r\n\t\t\t<div class=\"chat-history\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tv-for=\"(message, index) in chatHistory\"\r\n\t\t\t\t\t:key=\"index\"\r\n\t\t\t\t\t:class=\"['message', message.role, { error: message.error }]\">\r\n\t\t\t\t\t<div class=\"message-content\">\r\n\t\t\t\t\t\t<strong>{{ message.role === \"user\" ? \"用户\" : \"GPT\" }}:</strong>\r\n\t\t\t\t\t\t<p v-html=\"message.content\"></p>\r\n\t\t\t\t\t\t<div class=\"message-meta\" v-if=\"message.timestamp\">\r\n\t\t\t\t\t\t\t{{ message.timestamp }}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div v-if=\"isLoading\" class=\"loading-indicator\">\r\n\t\t\t\t\t<div class=\"loading-spinner\"></div>\r\n\t\t\t\t\t正在处理中...\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"vis-container\">\r\n\t\t\t<CompareTable\r\n\t\t\t\tclass=\"compare-table\"\r\n\t\t\t\t:div1-raw-data=\"div1RawData\"\r\n\t\t\t\t:div3-raw-data=\"div3RawData\"\r\n\t\t\t\t@compareAttribute=\"handleAttributeComparison\" />\r\n\t\t</div>\r\n\t\t<div class=\"input\">\r\n\t\t\t<div class=\"input-container\">\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tv-model=\"userQuestion\"\r\n\t\t\t\t\trows=\"2\"\r\n\t\t\t\t\tplaceholder=\"请输入你想问的问题...\"\r\n\t\t\t\t\t:disabled=\"isLoading\"></textarea>\r\n\t\t\t\t<div class=\"button-container\">\r\n\t\t\t\t\t<button @click=\"askQuestion\" :disabled=\"isLoading\">\r\n\t\t\t\t\t\t{{ isLoading ? \"处理中...\" : \"发送\" }}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted, watch, nextTick } from \"vue\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\timport CompareTable from \"@/components/compoents_base/CompareTable.vue\";\r\n\r\n\t// 定义默认的可比较字段（作为后备）\r\n\tconst DEFAULT_COMPARABLE_FIELDS = [\r\n\t  {\r\n\t    key: \"GDP\",\r\n\t    type: \"number\",\r\n\t    typeLabel: \"数值(美元)\",\r\n\t    visualization: \"bar-chart\",\r\n\t    legend: \"国内生产总值\"\r\n\t  },\r\n\t  {\r\n\t    key: \"Population\",\r\n\t    type: \"number\",\r\n\t    typeLabel: \"数值(人)\",\r\n\t    visualization: \"bar-chart\",\r\n\t    legend: \"人口数量\"\r\n\t  },\r\n\t  // 其他默认字段...\r\n\t];\r\n\r\n\t// 状态变量\r\n\tconst userQuestion = ref(\"\");\r\n\tconst chatHistory = ref([]);\r\n\tconst div1RawData = ref(null);\r\n\tconst div3RawData = ref(null);\r\n\tconst isLoading = ref(false);\r\n\tconst previousAnalysis = ref(\"\");\r\n\tconst currentComparisonContext = ref(null);\r\n\tconst leftInfobox = ref(null);\r\n\tconst rightInfobox = ref(null);\r\n\tconst comparableFields = ref([...DEFAULT_COMPARABLE_FIELDS]); // 使用默认字段初始化\r\n\r\n\t// 加载聊天历史\r\n\tconst loadChatHistory = () => {\r\n\t  const saved = localStorage.getItem(\"chatHistory\");\r\n\t  if (saved) {\r\n\t    try {\r\n\t      chatHistory.value = JSON.parse(saved);\r\n\t    } catch (e) {\r\n\t      console.error(\"加载聊天记录失败:\", e);\r\n\t    }\r\n\t  }\r\n\t};\r\n\r\n\t// 保存聊天历史\r\n\twatch(chatHistory, (newVal) => {\r\n\t  localStorage.setItem(\"chatHistory\", JSON.stringify(newVal));\r\n\t}, { deep: true });\r\n\r\n\t// 滚动到底部\r\n\tconst scrollToBottom = () => {\r\n\t  nextTick(() => {\r\n\t    const container = document.querySelector(\".chat-history\");\r\n\t    if (container) container.scrollTop = container.scrollHeight;\r\n\t  });\r\n\t};\r\n\r\n\t// 事件处理函数\r\n\tconst handleDiv1Event = (data) => {\r\n\t  div1RawData.value = data.content;\r\n\t  if (data.infobox) leftInfobox.value = data.infobox;\r\n\t};\r\n\r\n\tconst handleDiv3Event = (data) => {\r\n\t  div3RawData.value = data.content;\r\n\t  if (data.infobox) rightInfobox.value = data.infobox;\r\n\t};\r\n\r\n\t// 初始化\r\n\tonMounted(() => {\r\n\t  loadChatHistory();\r\n\t  bus.on(\"div1_Event\", handleDiv1Event);\r\n\t  bus.on(\"div3_Event\", handleDiv3Event);\r\n\t  bus.on(\"div1_InfoboxData\", (data) => {\r\n\t    leftInfobox.value = data;\r\n\t    updateComparableFields();\r\n\t  });\r\n\t  bus.on(\"div3_InfoboxData\", (data) => {\r\n\t    rightInfobox.value = data;\r\n\t    updateComparableFields();\r\n\t  });\r\n\t});\r\n\r\n\t// 清理\r\n\tonUnmounted(() => {\r\n\t  bus.off(\"div1_Event\", handleDiv1Event);\r\n\t  bus.off(\"div3_Event\", handleDiv3Event);\r\n\t  bus.off(\"div1_InfoboxData\");\r\n\t  bus.off(\"div3_InfoboxData\");\r\n\t});\r\n\r\n\t// 更新可比较字段（基于实际数据）\r\n\tconst updateComparableFields = () => {\r\n\t  if (leftInfobox.value && rightInfobox.value) {\r\n\t    const availableFields = [];\r\n\t    // 检查哪些字段在两个Infobox中都存在\r\n\t    DEFAULT_COMPARABLE_FIELDS.forEach(field => {\r\n\t      if (getFieldData(leftInfobox.value, field.key) &&\r\n\t          getFieldData(rightInfobox.value, field.key)) {\r\n\t        availableFields.push(field);\r\n\t      }\r\n\t    });\r\n\t    comparableFields.value = availableFields.length > 0\r\n\t      ? availableFields\r\n\t      : [...DEFAULT_COMPARABLE_FIELDS];\r\n\t  }\r\n\t};\r\n\r\n\t// 从Infobox中获取字段数据\r\n\tconst getFieldData = (infobox, fieldKey) => {\r\n\t  if (!infobox?.sections) return null;\r\n\t  for (const section of Object.values(infobox.sections)) {\r\n\t    if (section[fieldKey] !== undefined) return section[fieldKey];\r\n\t  }\r\n\t  return null;\r\n\t};\r\n\r\n\t// 格式化分析结果\r\n\tconst formatAnalysisResult = (text) => {\r\n\t  if (!text) return \"\";\r\n\t  return text\r\n\t    .replace(/### (.*)/g, \"<h3>$1</h3>\")\r\n\t    .replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\")\r\n\t    .replace(/\\n/g, \"<br>\")\r\n\t    .replace(/(?:^|\\n)(\\d+\\.\\s+.*)/g, \"<li>$1</li>\")\r\n\t    .replace(/(?:^|\\n)-\\s+(.*)/g, \"<li>$1</li>\")\r\n\t    .replace(/(<li>.*<\\/li>)/gs, \"<ul>$1</ul>\");\r\n\t};\r\n\r\n\t// 处理属性对比\r\n\tconst handleAttributeComparison = async (params) => {\r\n\t  const { fieldKey, leftData, rightData, leftTitle, rightTitle, fieldType } = params;\r\n\r\n\t  if (!leftData || !rightData) {\r\n\t    addErrorMessage(\"请先选择要对比的数据\");\r\n\t    return;\r\n\t  }\r\n\r\n\t  isLoading.value = true;\r\n\t  addLoadingMessage(`正在对比分析<strong>${fieldKey}</strong>属性...`);\r\n\r\n\t  try {\r\n\t    // 准备对比数据\r\n\t    currentComparisonContext.value = {\r\n\t      ...params,\r\n\t      leftInfobox: leftInfobox.value,\r\n\t      rightInfobox: rightInfobox.value,\r\n\t      allFields: comparableFields.value\r\n\t    };\r\n\r\n\t    const response = await api.post(\"compare_attributes\", {\r\n\t      chartData: {\r\n\t        ...currentComparisonContext.value,\r\n\t        allFields: comparableFields.value.map(field => ({\r\n\t          key: field.key,\r\n\t          type: field.type,\r\n\t          leftValue: getFieldData(leftInfobox.value, field.key),\r\n\t          rightValue: getFieldData(rightInfobox.value, field.key)\r\n\t        }))\r\n\t      },\r\n\t      chartType: \"comparison\"\r\n\t    });\r\n\r\n\t    if (response?.analysis) {\r\n\t      previousAnalysis.value = response.analysis;\r\n\t      addAssistantMessage(formatAnalysisResult(response.analysis));\r\n\t    } else {\r\n\t      throw new Error(\"无效的响应格式\");\r\n\t    }\r\n\t  } catch (error) {\r\n\t    console.error(\"对比分析失败:\", error);\r\n\t    addErrorMessage(`对比分析失败: ${error.message || \"未知错误\"}`);\r\n\t  } finally {\r\n\t    isLoading.value = false;\r\n\t    scrollToBottom();\r\n\t  }\r\n\t};\r\n\r\n\t// 处理用户提问\r\n\tconst askQuestion = async () => {\r\n\t  const question = userQuestion.value.trim();\r\n\t  if (!question) {\r\n\t    addErrorMessage(\"问题不能为空\");\r\n\t    return;\r\n\t  }\r\n\r\n\t  addUserMessage(question);\r\n\t  userQuestion.value = \"\";\r\n\t  isLoading.value = true;\r\n\r\n\t  try {\r\n\t    if (isAnalysisRequest(question) {\r\n\t      await handleAnalysisRequest(question);\r\n\t    } else {\r\n\t      await handleNormalQuestion(question);\r\n\t    }\r\n\t  } catch (error) {\r\n\t    console.error(\"请求失败:\", error);\r\n\t    addErrorMessage(`请求失败: ${error.message || \"未知错误\"}`);\r\n\t  } finally {\r\n\t    isLoading.value = false;\r\n\t    scrollToBottom();\r\n\t  }\r\n\t};\r\n\r\n\t// 判断是否是分析请求\r\n\tconst isAnalysisRequest = (question) => {\r\n\t  return currentComparisonContext.value &&\r\n\t    [/原因/, /为什么/, /分析/, /结合/].some(regex => regex.test(question));\r\n\t};\r\n\r\n\t// 处理分析请求\r\n\tconst handleAnalysisRequest = async (question) => {\r\n\t  if (!currentComparisonContext.value) {\r\n\t    throw new Error(\"没有找到之前的对比数据\");\r\n\t  }\r\n\r\n\t  const response = await api.post(\"compare_attributes\", {\r\n\t    chartData: {\r\n\t      leftData: currentComparisonContext.value.leftInfobox,\r\n\t      rightData: currentComparisonContext.value.rightInfobox,\r\n\t      leftTitle: currentComparisonContext.value.leftTitle,\r\n\t      rightTitle: currentComparisonContext.value.rightTitle,\r\n\t      fieldKey: question,\r\n\t      allFields: comparableFields.value.map(field => ({\r\n\t        key: field.key,\r\n\t        type: field.type,\r\n\t        leftValue: getFieldData(currentComparisonContext.value.leftInfobox, field.key),\r\n\t        rightValue: getFieldData(currentComparisonContext.value.rightInfobox, field.key)\r\n\t      })),\r\n\t      previousConclusion: previousAnalysis.value\r\n\t    },\r\n\t    chartType: \"comparison\",\r\n\t    analysisRequest: true\r\n\t  });\r\n\r\n\t  addAssistantMessage(formatAnalysisResult(response.analysis));\r\n\t};\r\n\r\n\t// 处理普通提问\r\n\tconst handleNormalQuestion = async (question) => {\r\n\t  if (!leftInfobox.value || !rightInfobox.value) {\r\n\t    throw new Error(\"请先加载两个Infobox的数据\");\r\n\t  }\r\n\r\n\t  const response = await api.post(\"gpt_ask\", {\r\n\t    question,\r\n\t    leftInfobox: leftInfobox.value,\r\n\t    rightInfobox: rightInfobox.value\r\n\t  });\r\n\r\n\t  addAssistantMessage(formatAnalysisResult(response.answer));\r\n\t};\r\n\r\n\t// 消息辅助函数\r\n\tconst addUserMessage = (content) => {\r\n\t  chatHistory.value.push({\r\n\t    role: \"user\",\r\n\t    content,\r\n\t    timestamp: new Date().toLocaleString()\r\n\t  });\r\n\t};\r\n\r\n\tconst addAssistantMessage = (content) => {\r\n\t  chatHistory.value.push({\r\n\t    role: \"assistant\",\r\n\t    content,\r\n\t    timestamp: new Date().toLocaleString()\r\n\t  });\r\n\t};\r\n\r\n\tconst addErrorMessage = (message) => {\r\n\t  chatHistory.value.push({\r\n\t    role: \"assistant\",\r\n\t    content: message,\r\n\t    timestamp: new Date().toLocaleString(),\r\n\t    error: true\r\n\t  });\r\n\t};\r\n\r\n\tconst addLoadingMessage = (content) => {\r\n\t  chatHistory.value.push({\r\n\t    role: \"assistant\",\r\n\t    content,\r\n\t    timestamp: new Date().toLocaleString()\r\n\t  });\r\n\t};\r\n</script>\r\n\r\n<style scoped>\r\n\t.main-container {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\twidth: 100%;\r\n\t\theight: 100vh;\r\n\t\tmargin: 0 auto;\r\n\t\tpadding: 5px;\r\n\t\tbackground-color: #f5f5f5;\r\n\t}\r\n\r\n\t.chat-container {\r\n\t\tflex: 0 0 20%;\r\n\t\tmin-height: 200px;\r\n\t\tmax-height: 30vh;\r\n\t\tbackground-color: #ffffff;\r\n\t\tpadding: 20px;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t\tmargin-bottom: 10px;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\toverflow: hidden;\r\n\t}\r\n\r\n\t.chat-history {\r\n\t\tflex: 1;\r\n\t\toverflow-y: auto;\r\n\t\tpadding: 10px;\r\n\t\tbackground-color: #fafafa;\r\n\t\tborder-radius: 8px;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t\tmargin-bottom: 20px;\r\n\t\tscroll-behavior: smooth;\r\n\t}\r\n\r\n\t.input {\r\n\t\tflex: 0.3;\r\n\t}\r\n\r\n\t.message {\r\n\t\tmargin-bottom: 15px;\r\n\t}\r\n\r\n\t.message-content {\r\n\t\tpadding: 12px;\r\n\t\tborder-radius: 8px;\r\n\t\tbackground-color: #f0f0f0;\r\n\t\tline-height: 1.5;\r\n\t}\r\n\r\n\t.message.user .message-content {\r\n\t\tbackground-color: #e3f2fd;\r\n\t\ttext-align: right;\r\n\t}\r\n\r\n\t.message.assistant .message-content {\r\n\t\tbackground-color: #f5f5f5;\r\n\t\ttext-align: left;\r\n\t}\r\n\r\n\t.message.error .message-content {\r\n\t\tbackground-color: #ffebee;\r\n\t\tborder-left: 3px solid #f44336;\r\n\t}\r\n\r\n\t.message-meta {\r\n\t\tfont-size: 12px;\r\n\t\tcolor: #999;\r\n\t\tmargin-top: 4px;\r\n\t}\r\n\r\n\t.loading-indicator {\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tgap: 8px;\r\n\t\tpadding: 10px;\r\n\t\tbackground: rgba(255, 255, 255, 0.8);\r\n\t\tposition: sticky;\r\n\t\tbottom: 0;\r\n\t}\r\n\r\n\t.loading-spinner {\r\n\t\twidth: 16px;\r\n\t\theight: 16px;\r\n\t\tborder: 2px solid #f3f3f3;\r\n\t\tborder-top: 2px solid #4caf50;\r\n\t\tborder-radius: 50%;\r\n\t\tanimation: spin 1s linear infinite;\r\n\t}\r\n\r\n\t@keyframes spin {\r\n\t\t0% {\r\n\t\t\ttransform: rotate(0deg);\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform: rotate(360deg);\r\n\t\t}\r\n\t}\r\n\r\n\t.vis-container {\r\n\t\tflex: 1.2;\r\n\t\tpadding: 8px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 8px;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t\tbox-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n\t\tmin-width: 320px;\r\n\t}\r\n\r\n\t.compare-table {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t}\r\n\r\n\t.input-container {\r\n\t\tdisplay: flex;\r\n\t\tflex: 2;\r\n\t\tflex-direction: column;\r\n\t\tgap: 10px;\r\n\t}\r\n\r\n\ttextarea {\r\n\t\twidth: 100%;\r\n\t\theight: 80px;\r\n\t\tresize: none;\r\n\t\tpadding: 12px;\r\n\t\tfont-size: 14px;\r\n\t\tborder: 1px solid #ddd;\r\n\t\tborder-radius: 8px;\r\n\t\tbackground-color: #fafafa;\r\n\t\ttransition: border-color 0.3s ease;\r\n\t}\r\n\r\n\ttextarea:disabled {\r\n\t\tbackground-color: #eee;\r\n\t\tcursor: not-allowed;\r\n\t}\r\n\r\n\ttextarea:focus {\r\n\t\toutline: none;\r\n\t\tborder-color: #4caf50;\r\n\t}\r\n\r\n\t.button-container {\r\n\t\tdisplay: flex;\r\n\t\tflex: 0.2;\r\n\t\tjustify-content: space-between;\r\n\t\tgap: 10px;\r\n\t}\r\n\r\n\tbutton {\r\n\t\tflex: 1;\r\n\t\tpadding: 10px 20px;\r\n\t\tbackground-color: #4caf50;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tborder-radius: 8px;\r\n\t\tcursor: pointer;\r\n\t\tfont-size: 14px;\r\n\t\ttransition: all 0.3s ease;\r\n\t}\r\n\r\n\tbutton:hover:not(:disabled) {\r\n\t\tbackground-color: #45a049;\r\n\t\ttransform: translateY(-1px);\r\n\t}\r\n\r\n\tbutton:active:not(:disabled) {\r\n\t\ttransform: translateY(0);\r\n\t}\r\n\r\n\tbutton:disabled {\r\n\t\tbackground-color: #cccccc;\r\n\t\tcursor: not-allowed;\r\n\t\ttransform: none;\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,KAAK,EAAC;AAAgB;;EACrBA,KAAK,EAAC;AAAgB;;EACrBA,KAAK,EAAC;AAAc;;EAKlBA,KAAK,EAAC;AAAiB;mBARjC;;EAAAC,GAAA;EAWWD,KAAK,EAAC;;;EAXjBC,GAAA;EAgB0BD,KAAK,EAAC;;gEAC3BE,mBAAA,CAAmC;EAA9BF,KAAK,EAAC;AAAiB;;EAM1BA,KAAK,EAAC;AAAe;;EAOrBA,KAAK,EAAC;AAAO;;EACZA,KAAK,EAAC;AAAiB;oBA/B/B;;EAqCSA,KAAK,EAAC;AAAkB;oBArCjC;;;uBACCG,mBAAA,CA2CM,OA3CNC,UA2CM,GA1CLF,mBAAA,CAmBM,OAnBNG,UAmBM,GAlBLH,mBAAA,CAiBM,OAjBNI,UAiBM,I,kBAhBLH,mBAAA,CAWMI,SAAA,QAfVC,WAAA,CAKgCC,IAAA,CAAAC,WAAW,EAL3C,CAKaC,OAAO,EAAEC,KAAK;yBADvBT,mBAAA,CAWM;MATJF,GAAG,EAAEW,KAAK;MACVZ,KAAK,EAPXa,eAAA,aAOyBF,OAAO,CAACG,IAAI;QAAAC,KAAA,EAAWJ,OAAO,CAACI;MAAK;QACxDb,mBAAA,CAMM,OANNc,UAMM,GALLd,mBAAA,CAA8D,gBAAAe,gBAAA,CAAnDN,OAAO,CAACG,IAAI,8BAA6B,GAAC,iBACrDZ,mBAAA,CAAgC;MAA7BgB,SAAwB,EAAhBP,OAAO,CAACQ;4BAVzBC,UAAA,GAWsCT,OAAO,CAACU,SAAS,I,cAAjDlB,mBAAA,CAEM,OAFNmB,UAEM,EAAAL,gBAAA,CADFN,OAAO,CAACU,SAAS,oBAZ3BE,mBAAA,e;kCAgBed,IAAA,CAAAe,SAAS,I,cAApBrB,mBAAA,CAGM,OAHNsB,UAGM,GAFLC,UAAmC,EAjBxCC,gBAAA,CAiBwC,YAEpC,E,KAnBJJ,mBAAA,e,KAuBErB,mBAAA,CAMM,OANN0B,UAMM,GALLC,YAAA,CAIiDC,uBAAA;IAHhD9B,KAAK,EAAC,eAAe;IACpB,eAAa,EAAES,IAAA,CAAAsB,WAAW;IAC1B,eAAa,EAAEtB,IAAA,CAAAuB,WAAW;IAC1BC,kBAAgB,EAAExB,IAAA,CAAAyB;uFAErBhC,mBAAA,CAaM,OAbNiC,WAaM,GAZLjC,mBAAA,CAWM,OAXNkC,WAWM,G,gBAVLlC,mBAAA,CAIkC;IApCtC,uBAAAmC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAiCc7B,IAAA,CAAA8B,YAAY,GAAAD,MAAA;IACrBE,IAAI,EAAC,GAAG;IACRC,WAAW,EAAC,cAAc;IACzBC,QAAQ,EAAEjC,IAAA,CAAAe;0BApChBmB,WAAA,I,cAiCclC,IAAA,CAAA8B,YAAY,E,GAItBrC,mBAAA,CAIM,OAJN0C,WAIM,GAHL1C,mBAAA,CAES;IAFA2C,OAAK,EAAAR,MAAA,QAAAA,MAAA;MAAA,OAAE5B,IAAA,CAAAqC,WAAA,IAAArC,IAAA,CAAAqC,WAAA,IAAAC,SAAA,CAAW;IAAA;IAAGL,QAAQ,EAAEjC,IAAA,CAAAe;sBACpCf,IAAA,CAAAe,SAAS,0CAvClBwB,WAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}