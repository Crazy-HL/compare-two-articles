{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed, watch } from \"vue\";\nimport SparklineChart from \"./SparklineChart.vue\";\nexport default {\n  __name: 'CompareTable',\n  props: {\n    div1RawData: String,\n    div3RawData: String\n  },\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const props = __props;\n\n    // 标准化表格数据\n    const processedTable1 = ref({\n      title: \"表格1\",\n      rows: [],\n      columns: []\n    });\n    const processedTable2 = ref({\n      title: \"表格2\",\n      rows: [],\n      columns: []\n    });\n\n    // 计算属性\n    const hasData = computed(() => {\n      return props.div1RawData && props.div3RawData && processedTable1.value.columns.length > 0 && processedTable2.value.columns.length > 0;\n    });\n    const commonAttributes = computed(() => {\n      const attrs1 = processedTable1.value.rows || [];\n      const attrs2 = processedTable2.value.rows || [];\n      return attrs1.filter(attr => attrs2.includes(attr) && (hasDataForAttribute(processedTable1.value, attr) || hasDataForAttribute(processedTable2.value, attr)));\n    });\n\n    // 监听数据变化\n    watch(() => props.div1RawData, html => {\n      if (html) {\n        processedTable1.value = parseTableToStandardJSON(html, \"表格1\");\n        if (props.div3RawData) sendToBackend();\n      }\n    }, {\n      immediate: true\n    });\n    watch(() => props.div3RawData, html => {\n      if (html) {\n        processedTable2.value = parseTableToStandardJSON(html, \"表格2\");\n        if (props.div1RawData) sendToBackend();\n      }\n    }, {\n      immediate: true\n    });\n\n    /**\r\n     * 通用表格解析方法\r\n     */\n    function parseTableToStandardJSON(html) {\n      let defaultTitle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"未命名表格\";\n      const result = {\n        title: extractTitleFromHTML(html) || defaultTitle,\n        rows: [],\n        columns: [],\n        // 新增：存储按年份变化的数据\n        timeSeriesData: {}\n      };\n      try {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(html, \"text/html\");\n        const table = doc.querySelector(\"table\");\n        if (!table) return result;\n\n        // 提取表头\n        const headerCells = table.querySelector(\"tr\")?.children || [];\n        result.rows = Array.from(headerCells).map(cell => {\n          return cell.textContent.replace(/[\\n†*]/g, \"\").trim().replace(/\\s+/g, \" \");\n        });\n\n        // 检查是否有Year列\n        const yearColumnIndex = result.rows.findIndex(header => header.toLowerCase() === \"year\");\n        const hasYearColumn = yearColumnIndex !== -1;\n\n        // 提取数据行\n        const dataRows = Array.from(table.querySelectorAll(\"tr:not(:first-child)\"));\n        dataRows.forEach(row => {\n          const cells = Array.from(row.children);\n          if (cells.length === 0) return;\n          const recordName = cells[0].textContent.trim();\n          const recordData = {};\n          result.rows.forEach((header, index) => {\n            if (index < cells.length) {\n              let value = cells[index].textContent.trim();\n              recordData[header] = smartValueConversion(value);\n            }\n          });\n          result.columns.push({\n            name: recordName,\n            data: recordData\n          });\n\n          // 如果有Year列，收集时间序列数据\n          if (hasYearColumn && recordData.Year) {\n            const year = recordData.Year;\n\n            // 遍历所有属性\n            result.rows.forEach(header => {\n              // 跳过Year列和非数值属性\n              if (header === \"Year\" || typeof recordData[header] !== \"number\") {\n                return;\n              }\n\n              // 初始化时间序列数据结构\n              if (!result.timeSeriesData[header]) {\n                result.timeSeriesData[header] = [];\n              }\n\n              // 添加数据点\n              result.timeSeriesData[header].push({\n                year: year,\n                value: recordData[header],\n                // 可选：添加其他元数据\n                recordName: recordName\n              });\n            });\n          }\n        });\n\n        // 对每个属性的时间序列数据按年份排序\n        if (hasYearColumn) {\n          Object.keys(result.timeSeriesData).forEach(attr => {\n            result.timeSeriesData[attr].sort((a, b) => a.year - b.year);\n          });\n        }\n        console.log(\"解析后的表格数据:\", result);\n        return result;\n      } catch (error) {\n        console.error(\"表格解析错误:\", error);\n        return result;\n      }\n    }\n\n    /**\r\n     * 智能值类型转换\r\n     */\n    function smartValueConversion(rawValue) {\n      // 处理空值和特殊占位符\n      if (!rawValue || [\"-\", \"—\", \"N/A\"].includes(rawValue)) return null;\n\n      // 百分比值处理（如 \".472\"）\n      if (/^\\.\\d+$/.test(rawValue)) return parseFloat(rawValue);\n\n      // 常规数字处理（支持千分位逗号）\n      const numericValue = parseFloat(rawValue.replace(/[^\\d.-]/g, \"\"));\n      if (!isNaN(numericValue)) return numericValue;\n\n      // 日期格式检测\n      if (/(\\d{4}-\\d{2}-\\d{2})|(\\d{2}\\/\\d{2}\\/\\d{4})/.test(rawValue)) {\n        return rawValue; // 保持日期字符串原样\n      }\n\n      // 布尔值检测\n      if ([\"true\", \"false\"].includes(rawValue.toLowerCase())) {\n        return rawValue.toLowerCase() === \"true\";\n      }\n\n      // 其他情况返回字符串\n      return rawValue;\n    }\n\n    /**\r\n     * 从HTML中提取可能的表格标题\r\n     */\n    function extractTitleFromHTML(html) {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(html, \"text/html\");\n      return doc.querySelector(\"h1, h2, h3, h4, caption\")?.textContent.trim() || null;\n    }\n\n    /**\r\n     * 通用属性描述生成（无硬编码）\r\n     */\n    function getAttributeDescription(attr) {\n      // 单位/类型自动识别\n      const hints = {\n        // 根据后缀推测\n        \"%\": \"百分比数据\",\n        Rate: \"比率\",\n        Amount: \"数量\",\n        Total: \"总计\",\n        Count: \"计数\",\n        Date: \"日期\",\n        Time: \"时间\",\n        // 根据前缀推测\n        Avg_: \"平均值 \",\n        Max_: \"最大值 \",\n        Min_: \"最小值 \",\n        // 常见缩写模式\n        Qty: \"数量\",\n        Amt: \"金额\",\n        Pct: \"百分比\"\n      };\n\n      // 查找匹配的提示\n      for (const [key, hint] of Object.entries(hints)) {\n        if (attr.includes(key)) {\n          return hint.startsWith(\" \") ? `${attr}${hint}` : `${hint} (${attr})`;\n        }\n      }\n\n      // 默认返回属性名本身\n      return attr;\n    }\n\n    // 数据检查方法\n    function hasDataForAttribute(table, attr) {\n      return table.columns.some(col => col.data[attr] !== undefined && col.data[attr] !== null && typeof col.data[attr] === \"number\");\n    }\n\n    // 可视化数据准备\n    function getSparklineData(table, attr) {\n      return {\n        values: table.columns.map(col => col.data[attr]).filter(v => typeof v === \"number\"),\n        labels: table.columns.map(col => col.name)\n      };\n    }\n\n    // 统计计算方法\n    function getAverage(table, attr) {\n      const values = table.columns.map(col => col.data[attr]).filter(v => typeof v === \"number\");\n      return values.length ? (values.reduce((a, b) => a + b, 0) / values.length).toFixed(2) : \"N/A\";\n    }\n    function getMax(table, attr) {\n      const values = table.columns.map(col => col.data[attr]).filter(v => typeof v === \"number\");\n      return values.length ? Math.max(...values).toFixed(2) : \"N/A\";\n    }\n\n    // 后端通信\n    async function sendToBackend() {\n      try {\n        const response = await api.post(\"table_attributes\", {\n          table1: processedTable1.value,\n          table2: processedTable2.value\n        });\n        console.log(\"分析结果:\", response);\n      } catch (error) {\n        console.error(\"API请求失败:\", error);\n      }\n    }\n    const __returned__ = {\n      props,\n      processedTable1,\n      processedTable2,\n      hasData,\n      commonAttributes,\n      parseTableToStandardJSON,\n      smartValueConversion,\n      extractTitleFromHTML,\n      getAttributeDescription,\n      hasDataForAttribute,\n      getSparklineData,\n      getAverage,\n      getMax,\n      sendToBackend,\n      ref,\n      computed,\n      watch,\n      SparklineChart\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","watch","SparklineChart","props","__props","processedTable1","title","rows","columns","processedTable2","hasData","div1RawData","div3RawData","value","length","commonAttributes","attrs1","attrs2","filter","attr","includes","hasDataForAttribute","html","parseTableToStandardJSON","sendToBackend","immediate","defaultTitle","arguments","undefined","result","extractTitleFromHTML","timeSeriesData","parser","DOMParser","doc","parseFromString","table","querySelector","headerCells","children","Array","from","map","cell","textContent","replace","trim","yearColumnIndex","findIndex","header","toLowerCase","hasYearColumn","dataRows","querySelectorAll","forEach","row","cells","recordName","recordData","index","smartValueConversion","push","name","data","Year","year","Object","keys","sort","a","b","console","log","error","rawValue","test","parseFloat","numericValue","isNaN","getAttributeDescription","hints","Rate","Amount","Total","Count","Date","Time","Avg_","Max_","Min_","Qty","Amt","Pct","key","hint","entries","startsWith","some","col","getSparklineData","values","v","labels","getAverage","reduce","toFixed","getMax","Math","max","response","api","post","table1","table2"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/CompareTable.vue"],"sourcesContent":["<template>\r\n\t<div class=\"compare-container\">\r\n\t\t<div v-if=\"hasData\" class=\"table-grid\">\r\n\t\t\t<!-- 表头 -->\r\n\t\t\t<div class=\"header left-column\">{{ processedTable1.title }}</div>\r\n\t\t\t<div class=\"header middle-column\">对比属性</div>\r\n\t\t\t<div class=\"header right-column\">{{ processedTable2.title }}</div>\r\n\r\n\t\t\t<!-- 数据行 -->\r\n\t\t\t<template v-for=\"attr in commonAttributes\" :key=\"attr\">\r\n\t\t\t\t<div class=\"cell left-column\">\r\n\t\t\t\t\t<template v-if=\"hasDataForAttribute(processedTable1, attr)\">\r\n\t\t\t\t\t\t<SparklineChart :data=\"getSparklineData(processedTable1, attr)\" />\r\n\t\t\t\t\t\t<div class=\"stats-summary\">\r\n\t\t\t\t\t\t\t平均: {{ getAverage(processedTable1, attr) }} | 最大:\r\n\t\t\t\t\t\t\t{{ getMax(processedTable1, attr) }}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</template>\r\n\t\t\t\t\t<div v-else class=\"no-data\">无数据</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div class=\"cell middle-column\">\r\n\t\t\t\t\t<div class=\"attribute-name\">{{ attr }}</div>\r\n\t\t\t\t\t<div class=\"attribute-desc\">{{ getAttributeDescription(attr) }}</div>\r\n\t\t\t\t\t<div class=\"original-field\">字段名: {{ attr }}</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div class=\"cell right-column\">\r\n\t\t\t\t\t<template v-if=\"hasDataForAttribute(processedTable2, attr)\">\r\n\t\t\t\t\t\t<SparklineChart :data=\"getSparklineData(processedTable2, attr)\" />\r\n\t\t\t\t\t\t<div class=\"stats-summary\">\r\n\t\t\t\t\t\t\t平均: {{ getAverage(processedTable2, attr) }} | 最大:\r\n\t\t\t\t\t\t\t{{ getMax(processedTable2, attr) }}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</template>\r\n\t\t\t\t\t<div v-else class=\"no-data\">无数据</div>\r\n\t\t\t\t</div>\r\n\t\t\t</template>\r\n\t\t</div>\r\n\t\t<div v-else class=\"empty-state\">\r\n\t\t\t<div>请先从左/右侧选择两个表格进行对比</div>\r\n\t\t\t<div class=\"format-tip\">支持任意HTML表格格式，自动识别数据结构</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, watch } from \"vue\";\r\n\timport SparklineChart from \"./SparklineChart.vue\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdiv1RawData: String,\r\n\t\tdiv3RawData: String\r\n\t});\r\n\r\n\t// 标准化表格数据\r\n\tconst processedTable1 = ref({ title: \"表格1\", rows: [], columns: [] });\r\n\tconst processedTable2 = ref({ title: \"表格2\", rows: [], columns: [] });\r\n\r\n\t// 计算属性\r\n\tconst hasData = computed(() => {\r\n\t\treturn (\r\n\t\t\tprops.div1RawData &&\r\n\t\t\tprops.div3RawData &&\r\n\t\t\tprocessedTable1.value.columns.length > 0 &&\r\n\t\t\tprocessedTable2.value.columns.length > 0\r\n\t\t);\r\n\t});\r\n\r\n\tconst commonAttributes = computed(() => {\r\n\t\tconst attrs1 = processedTable1.value.rows || [];\r\n\t\tconst attrs2 = processedTable2.value.rows || [];\r\n\t\treturn attrs1.filter(\r\n\t\t\tattr =>\r\n\t\t\t\tattrs2.includes(attr) &&\r\n\t\t\t\t(hasDataForAttribute(processedTable1.value, attr) ||\r\n\t\t\t\t\thasDataForAttribute(processedTable2.value, attr))\r\n\t\t);\r\n\t});\r\n\r\n\t// 监听数据变化\r\n\twatch(\r\n\t\t() => props.div1RawData,\r\n\t\thtml => {\r\n\t\t\tif (html) {\r\n\t\t\t\tprocessedTable1.value = parseTableToStandardJSON(html, \"表格1\");\r\n\t\t\t\tif (props.div3RawData) sendToBackend();\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\twatch(\r\n\t\t() => props.div3RawData,\r\n\t\thtml => {\r\n\t\t\tif (html) {\r\n\t\t\t\tprocessedTable2.value = parseTableToStandardJSON(html, \"表格2\");\r\n\t\t\t\tif (props.div1RawData) sendToBackend();\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\t/**\r\n\t * 通用表格解析方法\r\n\t */\r\n\tfunction parseTableToStandardJSON(html, defaultTitle = \"未命名表格\") {\r\n\t\tconst result = {\r\n\t\t\ttitle: extractTitleFromHTML(html) || defaultTitle,\r\n\t\t\trows: [],\r\n\t\t\tcolumns: [],\r\n\t\t\t// 新增：存储按年份变化的数据\r\n\t\t\ttimeSeriesData: {}\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\t\tconst table = doc.querySelector(\"table\");\r\n\t\t\tif (!table) return result;\r\n\r\n\t\t\t// 提取表头\r\n\t\t\tconst headerCells = table.querySelector(\"tr\")?.children || [];\r\n\t\t\tresult.rows = Array.from(headerCells).map(cell => {\r\n\t\t\t\treturn cell.textContent\r\n\t\t\t\t\t.replace(/[\\n†*]/g, \"\")\r\n\t\t\t\t\t.trim()\r\n\t\t\t\t\t.replace(/\\s+/g, \" \");\r\n\t\t\t});\r\n\r\n\t\t\t// 检查是否有Year列\r\n\t\t\tconst yearColumnIndex = result.rows.findIndex(\r\n\t\t\t\theader => header.toLowerCase() === \"year\"\r\n\t\t\t);\r\n\t\t\tconst hasYearColumn = yearColumnIndex !== -1;\r\n\r\n\t\t\t// 提取数据行\r\n\t\t\tconst dataRows = Array.from(\r\n\t\t\t\ttable.querySelectorAll(\"tr:not(:first-child)\")\r\n\t\t\t);\r\n\t\t\tdataRows.forEach(row => {\r\n\t\t\t\tconst cells = Array.from(row.children);\r\n\t\t\t\tif (cells.length === 0) return;\r\n\r\n\t\t\t\tconst recordName = cells[0].textContent.trim();\r\n\t\t\t\tconst recordData = {};\r\n\r\n\t\t\t\tresult.rows.forEach((header, index) => {\r\n\t\t\t\t\tif (index < cells.length) {\r\n\t\t\t\t\t\tlet value = cells[index].textContent.trim();\r\n\t\t\t\t\t\trecordData[header] = smartValueConversion(value);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tresult.columns.push({\r\n\t\t\t\t\tname: recordName,\r\n\t\t\t\t\tdata: recordData\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// 如果有Year列，收集时间序列数据\r\n\t\t\t\tif (hasYearColumn && recordData.Year) {\r\n\t\t\t\t\tconst year = recordData.Year;\r\n\r\n\t\t\t\t\t// 遍历所有属性\r\n\t\t\t\t\tresult.rows.forEach(header => {\r\n\t\t\t\t\t\t// 跳过Year列和非数值属性\r\n\t\t\t\t\t\tif (header === \"Year\" || typeof recordData[header] !== \"number\") {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// 初始化时间序列数据结构\r\n\t\t\t\t\t\tif (!result.timeSeriesData[header]) {\r\n\t\t\t\t\t\t\tresult.timeSeriesData[header] = [];\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// 添加数据点\r\n\t\t\t\t\t\tresult.timeSeriesData[header].push({\r\n\t\t\t\t\t\t\tyear: year,\r\n\t\t\t\t\t\t\tvalue: recordData[header],\r\n\t\t\t\t\t\t\t// 可选：添加其他元数据\r\n\t\t\t\t\t\t\trecordName: recordName\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// 对每个属性的时间序列数据按年份排序\r\n\t\t\tif (hasYearColumn) {\r\n\t\t\t\tObject.keys(result.timeSeriesData).forEach(attr => {\r\n\t\t\t\t\tresult.timeSeriesData[attr].sort((a, b) => a.year - b.year);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tconsole.log(\"解析后的表格数据:\", result);\r\n\t\t\treturn result;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"表格解析错误:\", error);\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 智能值类型转换\r\n\t */\r\n\tfunction smartValueConversion(rawValue) {\r\n\t\t// 处理空值和特殊占位符\r\n\t\tif (!rawValue || [\"-\", \"—\", \"N/A\"].includes(rawValue)) return null;\r\n\r\n\t\t// 百分比值处理（如 \".472\"）\r\n\t\tif (/^\\.\\d+$/.test(rawValue)) return parseFloat(rawValue);\r\n\r\n\t\t// 常规数字处理（支持千分位逗号）\r\n\t\tconst numericValue = parseFloat(rawValue.replace(/[^\\d.-]/g, \"\"));\r\n\t\tif (!isNaN(numericValue)) return numericValue;\r\n\r\n\t\t// 日期格式检测\r\n\t\tif (/(\\d{4}-\\d{2}-\\d{2})|(\\d{2}\\/\\d{2}\\/\\d{4})/.test(rawValue)) {\r\n\t\t\treturn rawValue; // 保持日期字符串原样\r\n\t\t}\r\n\r\n\t\t// 布尔值检测\r\n\t\tif ([\"true\", \"false\"].includes(rawValue.toLowerCase())) {\r\n\t\t\treturn rawValue.toLowerCase() === \"true\";\r\n\t\t}\r\n\r\n\t\t// 其他情况返回字符串\r\n\t\treturn rawValue;\r\n\t}\r\n\r\n\t/**\r\n\t * 从HTML中提取可能的表格标题\r\n\t */\r\n\tfunction extractTitleFromHTML(html) {\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\treturn (\r\n\t\t\tdoc.querySelector(\"h1, h2, h3, h4, caption\")?.textContent.trim() || null\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * 通用属性描述生成（无硬编码）\r\n\t */\r\n\tfunction getAttributeDescription(attr) {\r\n\t\t// 单位/类型自动识别\r\n\t\tconst hints = {\r\n\t\t\t// 根据后缀推测\r\n\t\t\t\"%\": \"百分比数据\",\r\n\t\t\tRate: \"比率\",\r\n\t\t\tAmount: \"数量\",\r\n\t\t\tTotal: \"总计\",\r\n\t\t\tCount: \"计数\",\r\n\t\t\tDate: \"日期\",\r\n\t\t\tTime: \"时间\",\r\n\r\n\t\t\t// 根据前缀推测\r\n\t\t\tAvg_: \"平均值 \",\r\n\t\t\tMax_: \"最大值 \",\r\n\t\t\tMin_: \"最小值 \",\r\n\r\n\t\t\t// 常见缩写模式\r\n\t\t\tQty: \"数量\",\r\n\t\t\tAmt: \"金额\",\r\n\t\t\tPct: \"百分比\"\r\n\t\t};\r\n\r\n\t\t// 查找匹配的提示\r\n\t\tfor (const [key, hint] of Object.entries(hints)) {\r\n\t\t\tif (attr.includes(key)) {\r\n\t\t\t\treturn hint.startsWith(\" \") ? `${attr}${hint}` : `${hint} (${attr})`;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 默认返回属性名本身\r\n\t\treturn attr;\r\n\t}\r\n\r\n\t// 数据检查方法\r\n\tfunction hasDataForAttribute(table, attr) {\r\n\t\treturn table.columns.some(\r\n\t\t\tcol =>\r\n\t\t\t\tcol.data[attr] !== undefined &&\r\n\t\t\t\tcol.data[attr] !== null &&\r\n\t\t\t\ttypeof col.data[attr] === \"number\"\r\n\t\t);\r\n\t}\r\n\r\n\t// 可视化数据准备\r\n\tfunction getSparklineData(table, attr) {\r\n\t\treturn {\r\n\t\t\tvalues: table.columns\r\n\t\t\t\t.map(col => col.data[attr])\r\n\t\t\t\t.filter(v => typeof v === \"number\"),\r\n\t\t\tlabels: table.columns.map(col => col.name)\r\n\t\t};\r\n\t}\r\n\r\n\t// 统计计算方法\r\n\tfunction getAverage(table, attr) {\r\n\t\tconst values = table.columns\r\n\t\t\t.map(col => col.data[attr])\r\n\t\t\t.filter(v => typeof v === \"number\");\r\n\t\treturn values.length\r\n\t\t\t? (values.reduce((a, b) => a + b, 0) / values.length).toFixed(2)\r\n\t\t\t: \"N/A\";\r\n\t}\r\n\r\n\tfunction getMax(table, attr) {\r\n\t\tconst values = table.columns\r\n\t\t\t.map(col => col.data[attr])\r\n\t\t\t.filter(v => typeof v === \"number\");\r\n\t\treturn values.length ? Math.max(...values).toFixed(2) : \"N/A\";\r\n\t}\r\n\r\n\t// 后端通信\r\n\tasync function sendToBackend() {\r\n\t\ttry {\r\n\t\t\tconst response = await api.post(\"table_attributes\", {\r\n\t\t\t\ttable1: processedTable1.value,\r\n\t\t\t\ttable2: processedTable2.value\r\n\t\t\t});\r\n\t\t\tconsole.log(\"分析结果:\", response);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"API请求失败:\", error);\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style scoped>\r\n\t.compare-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tfont-family: system-ui, -apple-system, sans-serif;\r\n\t}\r\n\r\n\t.table-grid {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: 1fr 1fr 1fr;\r\n\t\tgap: 1px;\r\n\t\tbackground: #e0e0e0;\r\n\t\tflex: 1;\r\n\t\toverflow-y: auto;\r\n\t}\r\n\r\n\t.header {\r\n\t\tpadding: 12px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n\t\tposition: sticky;\r\n\t\ttop: 0;\r\n\t\tz-index: 1;\r\n\t}\r\n\r\n\t.cell {\r\n\t\tpadding: 16px;\r\n\t\tbackground: white;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tmin-height: 120px;\r\n\t\tborder-bottom: 1px solid #f0f0f0;\r\n\t}\r\n\r\n\t.left-column {\r\n\t\tborder-right: 1px solid #e0e0e0;\r\n\t}\r\n\r\n\t.right-column {\r\n\t\tborder-left: 1px solid #e0e0e0;\r\n\t}\r\n\r\n\t.attribute-name {\r\n\t\tfont-weight: 600;\r\n\t\tmargin-bottom: 4px;\r\n\t\tcolor: #2c3e50;\r\n\t\tfont-size: 1.1em;\r\n\t}\r\n\r\n\t.attribute-desc {\r\n\t\tfont-size: 0.9em;\r\n\t\tcolor: #3498db;\r\n\t\tmargin-bottom: 6px;\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t.original-field {\r\n\t\tfont-size: 0.7em;\r\n\t\tcolor: #95a5a6;\r\n\t\tfont-family: monospace;\r\n\t\tmargin-top: 4px;\r\n\t}\r\n\r\n\t.stats-summary {\r\n\t\tmargin-top: 8px;\r\n\t\tfont-size: 0.85em;\r\n\t\tcolor: #34495e;\r\n\t\ttext-align: center;\r\n\t\tline-height: 1.5;\r\n\t}\r\n\r\n\t.no-data {\r\n\t\tcolor: #95a5a6;\r\n\t\tfont-style: italic;\r\n\t\tfont-size: 0.9em;\r\n\t}\r\n\r\n\t.empty-state {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\theight: 100%;\r\n\t\tcolor: #7f8c8d;\r\n\t\tgap: 12px;\r\n\t}\r\n\r\n\t.format-tip {\r\n\t\tfont-size: 0.9em;\r\n\t\tcolor: #bdc3c7;\r\n\t\tmax-width: 300px;\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t/* 滚动条样式 */\r\n\t.table-grid::-webkit-scrollbar {\r\n\t\twidth: 8px;\r\n\t}\r\n\r\n\t.table-grid::-webkit-scrollbar-thumb {\r\n\t\tbackground: #95a5a6;\r\n\t\tborder-radius: 4px;\r\n\t}\r\n\r\n\t.table-grid::-webkit-scrollbar-track {\r\n\t\tbackground: #ecf0f1;\r\n\t}\r\n\r\n\t/* 响应式调整 */\r\n\t@media (max-width: 768px) {\r\n\t\t.table-grid {\r\n\t\t\tgrid-template-columns: 1fr;\r\n\t\t}\r\n\r\n\t\t.header {\r\n\t\t\tdisplay: none;\r\n\t\t}\r\n\r\n\t\t.cell {\r\n\t\t\tmin-height: auto;\r\n\t\t\tpadding: 12px;\r\n\t\t}\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}