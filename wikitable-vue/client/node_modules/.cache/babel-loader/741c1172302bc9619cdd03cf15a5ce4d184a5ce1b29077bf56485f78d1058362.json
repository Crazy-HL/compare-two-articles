{"ast":null,"code":"import { ref, watch, onMounted, onUnmounted } from \"vue\";\nimport eventBus from \"@/js/eventBus.js\";\nexport default {\n  __name: 'ArticleOutline',\n  props: {\n    content: String,\n    // 文章 HTML\n    divId: String // \"div1\" 或 \"div3\"\n  },\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const props = __props;\n    const isVisible = ref(false);\n    const outline = ref([]);\n    const buttonStyle = ref({});\n    const outlineStyle = ref({});\n    const linkedOutline = ref([]); // 共享的关联章节数据\n\n    // **切换大纲的显示**\n    const toggleOutline = () => {\n      isVisible.value = !isVisible.value;\n    };\n\n    // **解析文章，提取 h1-h6 标题**\n    const extractOutline = (content, containerId) => {\n      if (!content) return [];\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(content, \"text/html\");\n      const headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\n      return Array.from(headings).map((heading, index) => {\n        const level = parseInt(heading.tagName.substring(1));\n        const id = `heading-${index}-${containerId}`;\n        heading.id = id;\n        return {\n          id,\n          text: heading.textContent,\n          level\n        };\n      });\n    };\n\n    // **动态生成关联关系**    结合 标准化处理 + 编辑距离 + 关键词匹配\n    // const normalizeText = text => text.trim().toLowerCase();\n\n    // const levenshteinDistance = (a, b) => {\n    // \tconst dp = Array(a.length + 1)\n    // \t\t.fill(null)\n    // \t\t.map(() => Array(b.length + 1).fill(0));\n\n    // \tfor (let i = 0; i <= a.length; i++) dp[i][0] = i;\n    // \tfor (let j = 0; j <= b.length; j++) dp[0][j] = j;\n\n    // \tfor (let i = 1; i <= a.length; i++) {\n    // \t\tfor (let j = 1; j <= b.length; j++) {\n    // \t\t\tconst cost = a[i - 1] === b[j - 1] ? 0 : 1;\n    // \t\t\tdp[i][j] = Math.min(\n    // \t\t\t\tdp[i - 1][j] + 1,\n    // \t\t\t\tdp[i][j - 1] + 1,\n    // \t\t\t\tdp[i - 1][j - 1] + cost\n    // \t\t\t);\n    // \t\t}\n    // \t}\n    // \treturn dp[a.length][b.length];\n    // };\n\n    // const hasCommonWords = (text1, text2) => {\n    // \tconst words1 = new Set(text1.split(/\\s+/));\n    // \tconst words2 = new Set(text2.split(/\\s+/));\n    // \tconst commonWords = [...words1].filter(word => words2.has(word));\n    // \treturn commonWords.length > 0;\n    // };\n\n    // const isSimilar = (text1, text2, threshold = 3) => {\n    // \treturn (\n    // \t\tlevenshteinDistance(text1, text2) <= threshold ||\n    // \t\thasCommonWords(text1, text2)\n    // \t);\n    // };\n\n    // const generateLinkedOutline = (outline1, outline2) => {\n    // \tconst linked = [];\n    // \toutline1.forEach(item1 => {\n    // \t\toutline2.forEach(item2 => {\n    // \t\t\tif (isSimilar(normalizeText(item1.text), normalizeText(item2.text))) {\n    // \t\t\t\tlinked.push({ leftId: item1.id, rightId: item2.id });\n    // \t\t\t}\n    // \t\t});\n    // \t});\n    // \treturn linked;\n    // };\n\n    const generateLinkedOutline = (outline1, outline2) => {\n      api.post(\"outline_match\", {\n        outline1,\n        outline2\n      }, response => {\n        console.log(\"大纲接口返回数据:\", response); // 调试日志\n\n        // 清理 match_result 字符串，移除 ```json 和 ``` 以及换行符\n        let cleanedResult = response.match_result;\n\n        // 移除 \"```json\" 和结尾的 \"```\" 部分，并清理多余的换行符\n        cleanedResult = cleanedResult.replace(/^```json\\s*\\n/, \"\").replace(/\\n```$/, \"\");\n\n        // 去除多余的换行符，确保字符串格式正确\n        cleanedResult = cleanedResult.replace(/\\n/g, \"\");\n\n        // 解析清理后的 JSON 数据\n        try {\n          const parsedData = JSON.parse(cleanedResult);\n          const linkedPairs = parsedData.pairs || [];\n\n          // 更新 linkedOutline 数据\n          linkedOutline.value = Array.isArray(linkedPairs) ? linkedPairs : [];\n          console.log(\"解析后的数据:\", linkedOutline.value); // 调试日志\n        } catch (error) {\n          console.error(\"解析 match_result 时发生错误:\", error);\n        }\n      }, error => {\n        // 处理错误\n        console.error(\"失败:\", error);\n      });\n    };\n\n    // **监听 content 变化，更新大纲**\n    watch(() => props.content, newContent => {\n      outline.value = extractOutline(newContent, props.divId);\n\n      // 提取另一个容器的大纲数据\n      const otherContainerId = props.divId === \"div1\" ? \"div3\" : \"div1\";\n      const otherContainer = document.getElementById(otherContainerId);\n      if (otherContainer) {\n        const otherContent = otherContainer.innerHTML;\n        const otherOutline = extractOutline(otherContent, otherContainerId);\n        const newLinkedOutline = generateLinkedOutline(outline.value, otherOutline);\n        linkedOutline.value = newLinkedOutline;\n\n        // 通过 eventBus 通知另一个大纲组件\n        eventBus.emit(\"update-linked-outline\", newLinkedOutline);\n      }\n    }, {\n      immediate: true\n    });\n\n    // **监听 eventBus，确保两边大纲同步**\n    eventBus.on(\"update-linked-outline\", newLinkedOutline => {\n      linkedOutline.value = newLinkedOutline;\n    });\n\n    // **检查是否存在关联章节**\n    // const isLinked = item =>\n    // \tlinkedOutline.value.some(\n    // \t\tlinked => linked.leftId === item.id || linked.rightId === item.id\n    // \t);\n\n    // **检查是否存在关联章节**\n    const isLinked = item => {\n      // 确保 linkedOutline.value 是一个数组\n      if (!Array.isArray(linkedOutline.value)) {\n        linkedOutline.value = []; // 如果不是数组，初始化为空数组\n      }\n      return linkedOutline.value.some(linked => linked.leftId === item.id || linked.rightId === item.id);\n    };\n\n    // **滚动到章节**\n    const scrollToChapter = id => {\n      // 跳转到当前文章的章节\n      const element = document.getElementById(id);\n      if (element) element.scrollIntoView({\n        behavior: \"smooth\"\n      });\n\n      // 找到关联章节并跳转\n      const linkedItem = linkedOutline.value.find(linked => linked.leftId === id || linked.rightId === id);\n      if (linkedItem) {\n        const targetId = linkedItem.leftId === id ? linkedItem.rightId : linkedItem.leftId;\n        eventBus.emit(\"scroll-to-chapter\", targetId);\n      }\n    };\n\n    // **监听 eventBus，确保两个组件同步跳转**\n    eventBus.on(\"scroll-to-chapter\", targetId => {\n      const targetElement = document.getElementById(targetId);\n      if (targetElement) targetElement.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    });\n\n    // **更新按钮和大纲的相对位置**\n    const updatePosition = () => {\n      const isDiv1 = props.divId === \"div1\";\n      buttonStyle.value = {\n        position: \"absolute\",\n        top: \"10px\",\n        [isDiv1 ? \"right\" : \"left\"]: \"10px\"\n      };\n      outlineStyle.value = {\n        position: \"absolute\",\n        top: \"50px\",\n        [isDiv1 ? \"right\" : \"left\"]: \"10px\",\n        width: \"260px\",\n        maxHeight: \"80vh\",\n        overflowY: \"auto\",\n        zIndex: \"1000\",\n        background: \"white\",\n        borderRadius: \"8px\",\n        boxShadow: \"0 4px 12px rgba(0, 0, 0, 0.15)\",\n        padding: \"15px\"\n      };\n    };\n\n    // **窗口滚动时更新大纲位置**\n    const handleScroll = () => {\n      const referenceElement = document.getElementById(props.divId);\n      if (!referenceElement) return;\n      const scrollY = referenceElement.scrollTop;\n      buttonStyle.value.top = `${scrollY + 10}px`;\n      outlineStyle.value.top = `${scrollY + 50}px`;\n    };\n\n    // **初始化**\n    onMounted(() => {\n      outline.value = extractOutline(props.content, props.divId);\n      updatePosition();\n      const referenceElement = document.getElementById(props.divId);\n      if (referenceElement) referenceElement.addEventListener(\"scroll\", handleScroll);\n    });\n\n    // **组件销毁时移除事件**\n    onUnmounted(() => {\n      const referenceElement = document.getElementById(props.divId);\n      if (referenceElement) referenceElement.removeEventListener(\"scroll\", handleScroll);\n      eventBus.off(\"update-linked-outline\");\n      eventBus.off(\"scroll-to-chapter\");\n    });\n    const __returned__ = {\n      props,\n      isVisible,\n      outline,\n      buttonStyle,\n      outlineStyle,\n      linkedOutline,\n      toggleOutline,\n      extractOutline,\n      generateLinkedOutline,\n      isLinked,\n      scrollToChapter,\n      updatePosition,\n      handleScroll,\n      ref,\n      watch,\n      onMounted,\n      onUnmounted,\n      get eventBus() {\n        return eventBus;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","onMounted","onUnmounted","eventBus","props","__props","isVisible","outline","buttonStyle","outlineStyle","linkedOutline","toggleOutline","value","extractOutline","content","containerId","parser","DOMParser","doc","parseFromString","headings","querySelectorAll","Array","from","map","heading","index","level","parseInt","tagName","substring","id","text","textContent","generateLinkedOutline","outline1","outline2","api","post","response","console","log","cleanedResult","match_result","replace","parsedData","JSON","parse","linkedPairs","pairs","isArray","error","newContent","divId","otherContainerId","otherContainer","document","getElementById","otherContent","innerHTML","otherOutline","newLinkedOutline","emit","immediate","on","isLinked","item","some","linked","leftId","rightId","scrollToChapter","element","scrollIntoView","behavior","linkedItem","find","targetId","targetElement","updatePosition","isDiv1","position","top","width","maxHeight","overflowY","zIndex","background","borderRadius","boxShadow","padding","handleScroll","referenceElement","scrollY","scrollTop","addEventListener","removeEventListener","off"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/ArticleOutline.vue"],"sourcesContent":["<template>\r\n\t<!-- 大纲切换按钮 -->\r\n\t<button @click=\"toggleOutline\" class=\"toggle-btn\" :style=\"buttonStyle\">\r\n\t\t<svg v-if=\"!isVisible\" class=\"icon\" viewBox=\"0 0 24 24\">\r\n\t\t\t<path\r\n\t\t\t\tfill=\"currentColor\"\r\n\t\t\t\td=\"M3 6h18v2H3V6zm0 5h18v2H3v-2zm0 5h18v2H3v-2z\"></path>\r\n\t\t</svg>\r\n\t\t<svg v-else class=\"icon close\" viewBox=\"0 0 24 24\">\r\n\t\t\t<path fill=\"currentColor\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n\t\t</svg>\r\n\t</button>\r\n\r\n\t<!-- 大纲内容 -->\r\n\t<div v-if=\"isVisible\" class=\"outline-container\" :style=\"outlineStyle\">\r\n\t\t<div class=\"outline\">\r\n\t\t\t<ul>\r\n\t\t\t\t<li\r\n\t\t\t\t\tv-for=\"(item, index) in outline\"\r\n\t\t\t\t\t:key=\"item.id\"\r\n\t\t\t\t\t:class=\"{ highlight: isLinked(item), linked: isLinked(item) }\"\r\n\t\t\t\t\t:style=\"{ paddingLeft: `${(item.level - 1) * 15}px` }\">\r\n\t\t\t\t\t<a :href=\"'#' + item.id\" @click.prevent=\"scrollToChapter(item.id)\">{{\r\n\t\t\t\t\t\titem.text\r\n\t\t\t\t\t}}</a>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, watch, onMounted, onUnmounted } from \"vue\";\r\n\timport eventBus from \"@/js/eventBus.js\";\r\n\r\n\tconst props = defineProps({\r\n\t\tcontent: String, // 文章 HTML\r\n\t\tdivId: String // \"div1\" 或 \"div3\"\r\n\t});\r\n\r\n\tconst isVisible = ref(false);\r\n\tconst outline = ref([]);\r\n\tconst buttonStyle = ref({});\r\n\tconst outlineStyle = ref({});\r\n\tconst linkedOutline = ref([]); // 共享的关联章节数据\r\n\r\n\t// **切换大纲的显示**\r\n\tconst toggleOutline = () => {\r\n\t\tisVisible.value = !isVisible.value;\r\n\t};\r\n\r\n\t// **解析文章，提取 h1-h6 标题**\r\n\tconst extractOutline = (content, containerId) => {\r\n\t\tif (!content) return [];\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst doc = parser.parseFromString(content, \"text/html\");\r\n\t\tconst headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\r\n\r\n\t\treturn Array.from(headings).map((heading, index) => {\r\n\t\t\tconst level = parseInt(heading.tagName.substring(1));\r\n\t\t\tconst id = `heading-${index}-${containerId}`;\r\n\t\t\theading.id = id;\r\n\t\t\treturn { id, text: heading.textContent, level };\r\n\t\t});\r\n\t};\r\n\r\n\t// **动态生成关联关系**    结合 标准化处理 + 编辑距离 + 关键词匹配\r\n\t// const normalizeText = text => text.trim().toLowerCase();\r\n\r\n\t// const levenshteinDistance = (a, b) => {\r\n\t// \tconst dp = Array(a.length + 1)\r\n\t// \t\t.fill(null)\r\n\t// \t\t.map(() => Array(b.length + 1).fill(0));\r\n\r\n\t// \tfor (let i = 0; i <= a.length; i++) dp[i][0] = i;\r\n\t// \tfor (let j = 0; j <= b.length; j++) dp[0][j] = j;\r\n\r\n\t// \tfor (let i = 1; i <= a.length; i++) {\r\n\t// \t\tfor (let j = 1; j <= b.length; j++) {\r\n\t// \t\t\tconst cost = a[i - 1] === b[j - 1] ? 0 : 1;\r\n\t// \t\t\tdp[i][j] = Math.min(\r\n\t// \t\t\t\tdp[i - 1][j] + 1,\r\n\t// \t\t\t\tdp[i][j - 1] + 1,\r\n\t// \t\t\t\tdp[i - 1][j - 1] + cost\r\n\t// \t\t\t);\r\n\t// \t\t}\r\n\t// \t}\r\n\t// \treturn dp[a.length][b.length];\r\n\t// };\r\n\r\n\t// const hasCommonWords = (text1, text2) => {\r\n\t// \tconst words1 = new Set(text1.split(/\\s+/));\r\n\t// \tconst words2 = new Set(text2.split(/\\s+/));\r\n\t// \tconst commonWords = [...words1].filter(word => words2.has(word));\r\n\t// \treturn commonWords.length > 0;\r\n\t// };\r\n\r\n\t// const isSimilar = (text1, text2, threshold = 3) => {\r\n\t// \treturn (\r\n\t// \t\tlevenshteinDistance(text1, text2) <= threshold ||\r\n\t// \t\thasCommonWords(text1, text2)\r\n\t// \t);\r\n\t// };\r\n\r\n\t// const generateLinkedOutline = (outline1, outline2) => {\r\n\t// \tconst linked = [];\r\n\t// \toutline1.forEach(item1 => {\r\n\t// \t\toutline2.forEach(item2 => {\r\n\t// \t\t\tif (isSimilar(normalizeText(item1.text), normalizeText(item2.text))) {\r\n\t// \t\t\t\tlinked.push({ leftId: item1.id, rightId: item2.id });\r\n\t// \t\t\t}\r\n\t// \t\t});\r\n\t// \t});\r\n\t// \treturn linked;\r\n\t// };\r\n\r\n\tconst generateLinkedOutline = (outline1, outline2) => {\r\n\t\tapi.post(\r\n\t\t\t\"outline_match\",\r\n\t\t\t{ outline1, outline2 },\r\n\t\t\tresponse => {\r\n\t\t\t\tconsole.log(\"大纲接口返回数据:\", response); // 调试日志\r\n\r\n\t\t\t\t// 清理 match_result 字符串，移除 ```json 和 ``` 以及换行符\r\n\t\t\t\tlet cleanedResult = response.match_result;\r\n\r\n\t\t\t\t// 移除 \"```json\" 和结尾的 \"```\" 部分，并清理多余的换行符\r\n\t\t\t\tcleanedResult = cleanedResult\r\n\t\t\t\t\t.replace(/^```json\\s*\\n/, \"\")\r\n\t\t\t\t\t.replace(/\\n```$/, \"\");\r\n\r\n\t\t\t\t// 去除多余的换行符，确保字符串格式正确\r\n\t\t\t\tcleanedResult = cleanedResult.replace(/\\n/g, \"\");\r\n\r\n\t\t\t\t// 解析清理后的 JSON 数据\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst parsedData = JSON.parse(cleanedResult);\r\n\t\t\t\t\tconst linkedPairs = parsedData.pairs || [];\r\n\r\n\t\t\t\t\t// 更新 linkedOutline 数据\r\n\t\t\t\t\tlinkedOutline.value = Array.isArray(linkedPairs) ? linkedPairs : [];\r\n\t\t\t\t\tconsole.log(\"解析后的数据:\", linkedOutline.value); // 调试日志\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tconsole.error(\"解析 match_result 时发生错误:\", error);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\terror => {\r\n\t\t\t\t// 处理错误\r\n\t\t\t\tconsole.error(\"失败:\", error);\r\n\t\t\t}\r\n\t\t);\r\n\t};\r\n\r\n\t// **监听 content 变化，更新大纲**\r\n\twatch(\r\n\t\t() => props.content,\r\n\t\tnewContent => {\r\n\t\t\toutline.value = extractOutline(newContent, props.divId);\r\n\r\n\t\t\t// 提取另一个容器的大纲数据\r\n\t\t\tconst otherContainerId = props.divId === \"div1\" ? \"div3\" : \"div1\";\r\n\t\t\tconst otherContainer = document.getElementById(otherContainerId);\r\n\t\t\tif (otherContainer) {\r\n\t\t\t\tconst otherContent = otherContainer.innerHTML;\r\n\t\t\t\tconst otherOutline = extractOutline(otherContent, otherContainerId);\r\n\t\t\t\tconst newLinkedOutline = generateLinkedOutline(\r\n\t\t\t\t\toutline.value,\r\n\t\t\t\t\totherOutline\r\n\t\t\t\t);\r\n\t\t\t\tlinkedOutline.value = newLinkedOutline;\r\n\r\n\t\t\t\t// 通过 eventBus 通知另一个大纲组件\r\n\t\t\t\teventBus.emit(\"update-linked-outline\", newLinkedOutline);\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\t// **监听 eventBus，确保两边大纲同步**\r\n\teventBus.on(\"update-linked-outline\", newLinkedOutline => {\r\n\t\tlinkedOutline.value = newLinkedOutline;\r\n\t});\r\n\r\n\t// **检查是否存在关联章节**\r\n\t// const isLinked = item =>\r\n\t// \tlinkedOutline.value.some(\r\n\t// \t\tlinked => linked.leftId === item.id || linked.rightId === item.id\r\n\t// \t);\r\n\r\n\t// **检查是否存在关联章节**\r\n\tconst isLinked = item => {\r\n\t\t// 确保 linkedOutline.value 是一个数组\r\n\t\tif (!Array.isArray(linkedOutline.value)) {\r\n\t\t\tlinkedOutline.value = []; // 如果不是数组，初始化为空数组\r\n\t\t}\r\n\r\n\t\treturn linkedOutline.value.some(\r\n\t\t\tlinked => linked.leftId === item.id || linked.rightId === item.id\r\n\t\t);\r\n\t};\r\n\r\n\t// **滚动到章节**\r\n\tconst scrollToChapter = id => {\r\n\t\t// 跳转到当前文章的章节\r\n\t\tconst element = document.getElementById(id);\r\n\t\tif (element) element.scrollIntoView({ behavior: \"smooth\" });\r\n\r\n\t\t// 找到关联章节并跳转\r\n\t\tconst linkedItem = linkedOutline.value.find(\r\n\t\t\tlinked => linked.leftId === id || linked.rightId === id\r\n\t\t);\r\n\t\tif (linkedItem) {\r\n\t\t\tconst targetId =\r\n\t\t\t\tlinkedItem.leftId === id ? linkedItem.rightId : linkedItem.leftId;\r\n\t\t\teventBus.emit(\"scroll-to-chapter\", targetId);\r\n\t\t}\r\n\t};\r\n\r\n\t// **监听 eventBus，确保两个组件同步跳转**\r\n\teventBus.on(\"scroll-to-chapter\", targetId => {\r\n\t\tconst targetElement = document.getElementById(targetId);\r\n\t\tif (targetElement) targetElement.scrollIntoView({ behavior: \"smooth\" });\r\n\t});\r\n\r\n\t// **更新按钮和大纲的相对位置**\r\n\tconst updatePosition = () => {\r\n\t\tconst isDiv1 = props.divId === \"div1\";\r\n\t\tbuttonStyle.value = {\r\n\t\t\tposition: \"absolute\",\r\n\t\t\ttop: \"10px\",\r\n\t\t\t[isDiv1 ? \"right\" : \"left\"]: \"10px\"\r\n\t\t};\r\n\t\toutlineStyle.value = {\r\n\t\t\tposition: \"absolute\",\r\n\t\t\ttop: \"50px\",\r\n\t\t\t[isDiv1 ? \"right\" : \"left\"]: \"10px\",\r\n\t\t\twidth: \"260px\",\r\n\t\t\tmaxHeight: \"80vh\",\r\n\t\t\toverflowY: \"auto\",\r\n\t\t\tzIndex: \"1000\",\r\n\t\t\tbackground: \"white\",\r\n\t\t\tborderRadius: \"8px\",\r\n\t\t\tboxShadow: \"0 4px 12px rgba(0, 0, 0, 0.15)\",\r\n\t\t\tpadding: \"15px\"\r\n\t\t};\r\n\t};\r\n\r\n\t// **窗口滚动时更新大纲位置**\r\n\tconst handleScroll = () => {\r\n\t\tconst referenceElement = document.getElementById(props.divId);\r\n\t\tif (!referenceElement) return;\r\n\r\n\t\tconst scrollY = referenceElement.scrollTop;\r\n\t\tbuttonStyle.value.top = `${scrollY + 10}px`;\r\n\t\toutlineStyle.value.top = `${scrollY + 50}px`;\r\n\t};\r\n\r\n\t// **初始化**\r\n\tonMounted(() => {\r\n\t\toutline.value = extractOutline(props.content, props.divId);\r\n\t\tupdatePosition();\r\n\t\tconst referenceElement = document.getElementById(props.divId);\r\n\t\tif (referenceElement)\r\n\t\t\treferenceElement.addEventListener(\"scroll\", handleScroll);\r\n\t});\r\n\r\n\t// **组件销毁时移除事件**\r\n\tonUnmounted(() => {\r\n\t\tconst referenceElement = document.getElementById(props.divId);\r\n\t\tif (referenceElement)\r\n\t\t\treferenceElement.removeEventListener(\"scroll\", handleScroll);\r\n\t\teventBus.off(\"update-linked-outline\");\r\n\t\teventBus.off(\"scroll-to-chapter\");\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t/* **按钮样式** */\r\n\t.toggle-btn {\r\n\t\tpadding: 10px;\r\n\t\tborder-radius: 50%;\r\n\t\tcursor: pointer;\r\n\t\tz-index: 2000;\r\n\t\tbackground-color: #0077b6;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\twidth: 36px;\r\n\t\theight: 36px;\r\n\t\tbox-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n\t\ttransition: all 0.3s ease-in-out;\r\n\t}\r\n\r\n\t/* **大纲样式** */\r\n\t.outline-container {\r\n\t\tbackground: white;\r\n\t\tborder-radius: 8px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n\t\tpadding: 15px;\r\n\t\tmax-height: 80vh;\r\n\t\toverflow-y: auto;\r\n\t\twidth: 260px;\r\n\t\ttransition: all 0.3s ease-in-out;\r\n\t}\r\n\r\n\t.outline ul {\r\n\t\tlist-style-type: none;\r\n\t\tpadding-left: 0;\r\n\t}\r\n\r\n\t.outline li {\r\n\t\tmargin-bottom: 8px;\r\n\t\tfont-size: 14px;\r\n\t\ttransition: padding-left 0.2s ease-in-out;\r\n\t}\r\n\r\n\t/* **高亮和关联章节样式** */\r\n\t.outline li.highlight a {\r\n\t\tbackground-color: #ffff00;\r\n\t\tborder-radius: 5px;\r\n\t}\r\n\r\n\t.outline li.linked a {\r\n\t\tfont-weight: bold;\r\n\t\tcolor: #0077b6;\r\n\t}\r\n\r\n\t.outline li a {\r\n\t\ttext-decoration: none;\r\n\t\tcolor: #0077b6;\r\n\t}\r\n\r\n\t.outline li a:hover {\r\n\t\ttext-decoration: underline;\r\n\t\tcolor: #005f8a;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}