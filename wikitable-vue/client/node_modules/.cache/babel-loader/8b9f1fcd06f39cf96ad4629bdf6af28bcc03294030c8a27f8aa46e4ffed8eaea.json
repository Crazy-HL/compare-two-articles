{"ast":null,"code":"import { ref, onMounted, onUnmounted, nextTick } from \"vue\";\nimport LoadingSpinner from \"./LoadingSpinner.vue\";\nimport ErrorDisplay from \"./ErrorDisplay.vue\";\nimport WikipediaContent from \"./WikipediaContent.vue\";\nimport TextPopup from \"./TextPopup.vue\";\nimport ArticleOutline from \"./ArticleOutline.vue\"; // 引入大纲组件\nimport * as d3 from \"d3\";\nimport bus from \"@/js/eventBus.js\";\nexport default {\n  __name: 'ParentComponent',\n  props: {\n    pageTitle: String,\n    divId: String,\n    selectContentClass: String,\n    linkedOutline: Array\n  },\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const props = __props;\n    const pageHtml = ref(\"\"); // 文章 HTML 内容\n    const loading = ref(true); // 加载状态\n    const error = ref(\"\"); // 错误信息\n    const selectedText = ref({}); // 存储每个 div 的选中内容\n    const showPopup = ref({}); // 存储每个 div 的弹窗显示状态\n    const divRef = ref(null); // `Div1` 或 `Div3` 的 DOM 参考\n\n    // **获取 Wikipedia 页面**\n    const fetchWikipediaContent = async () => {\n      try {\n        const apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(props.pageTitle)}`;\n        const response = await fetch(apiUrl);\n        if (!response.ok) throw new Error(\"Failed to fetch data\");\n        const html = await response.text();\n\n        // 解析 HTML\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(html, \"text/html\");\n\n        // **给所有 h1-h6 添加唯一 ID**\n        const headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\n        headings.forEach((heading, index) => {\n          const uniqueId = `heading-${index}-${props.divId}`;\n          heading.id = uniqueId;\n        });\n\n        // **给所有表格添加类名 custom-table**\n        const tables = doc.querySelectorAll(\"table\");\n        tables.forEach(table => {\n          table.classList.add(\"custom-table\");\n        });\n\n        // 动态注入 Wikipedia 样式\n        const styles = Array.from(doc.querySelectorAll('link[rel=\"stylesheet\"]'));\n        styles.forEach(link => {\n          if (!document.querySelector(`link[href=\"${link.href}\"]`)) {\n            const styleTag = document.createElement(\"link\");\n            styleTag.rel = \"stylesheet\";\n            styleTag.href = link.href;\n            document.head.appendChild(styleTag);\n          }\n        });\n\n        // 仅获取正文部分\n        const contentElement = doc.querySelector(\"body\");\n        if (!contentElement) throw new Error(\"Content not found\");\n        pageHtml.value = contentElement.innerHTML;\n\n        // 手动引入 Wikipedia CSS\n        injectWikipediaStyles();\n      } catch (err) {\n        error.value = \"Error fetching Wikipedia content: \" + err.message;\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // **手动引入 Wikipedia CSS**\n    const injectWikipediaStyles = () => {\n      const wikipediaStyles = [\"https://en.wikipedia.org/w/load.php?modules=site.styles\", \"https://en.wikipedia.org/w/load.php?modules=ext.cite.styles\", \"https://en.wikipedia.org/w/load.php?modules=ext.scribunto.styles\", \"https://en.wikipedia.org/w/load.php?modules=skins.vector.styles\"];\n      wikipediaStyles.forEach(url => {\n        if (!document.querySelector(`link[href=\"${url}\"]`)) {\n          const styleTag = document.createElement(\"link\");\n          styleTag.rel = \"stylesheet\";\n          styleTag.href = url;\n          document.head.appendChild(styleTag);\n        }\n      });\n    };\n\n    // **处理选中内容**\n    const extractLinkedChapterContent = (sourceId, sourceContainerId) => {\n      console.log(\"Extracting linked chapter content for:\", sourceId); // 调试日志\n\n      // 检查 linkedOutline 是否存在\n      if (!props.linkedOutline) {\n        console.error(\"LinkedOutline is undefined!\");\n        return {\n          linkedItem: null,\n          chapterContent: \"\"\n        };\n      }\n\n      // 找到关联章节的 ID\n      const linkedItem = props.linkedOutline.find(linked => linked.leftId === sourceId || linked.rightId === sourceId);\n      if (!linkedItem) {\n        console.log(\"No linked chapter found for sourceId:\", sourceId); // 调试日志\n        return {\n          linkedItem: null,\n          chapterContent: \"\"\n        };\n      }\n\n      // 确定目标容器和目标章节 ID\n      const targetContainerId = sourceContainerId === \"div1\" ? \"div3\" : \"div1\";\n      const targetId = sourceContainerId === \"div1\" ? linkedItem.rightId : linkedItem.leftId;\n\n      // 提取目标章节的整个内容\n      const targetContainer = document.getElementById(targetContainerId);\n      if (!targetContainer) return {\n        linkedItem: null,\n        chapterContent: \"\"\n      };\n      const targetElement = targetContainer.querySelector(`#${targetId}`);\n      if (!targetElement) return {\n        linkedItem: null,\n        chapterContent: \"\"\n      };\n\n      // 提取从当前标题到下一个同级标题之前的所有内容\n      let chapterContent = \"\";\n      let currentNode = targetElement;\n      while (currentNode) {\n        // 如果遇到下一个同级标题，停止提取\n        if (currentNode !== targetElement && currentNode.nodeType === Node.ELEMENT_NODE && /^h[1-6]$/i.test(currentNode.tagName)) {\n          break;\n        }\n\n        // 将内容添加到章节内容中\n        if (currentNode.nodeType === Node.ELEMENT_NODE || currentNode.nodeType === Node.TEXT_NODE) {\n          chapterContent += currentNode.outerHTML || currentNode.textContent;\n        }\n        currentNode = currentNode.nextSibling;\n      }\n      console.log(\"Extracted content:\", chapterContent); // 调试日志\n      return {\n        linkedItem,\n        chapterContent\n      };\n    };\n    // **处理选中内容**\n    const handleSelection = content => {\n      // 检查选择的内容是否为表格\n      const isTable = /<table.*?>.*?<\\/table>/s.test(content);\n      // console.log(\"Is table:\", isTable); // 调试日志\n\n      // 获取选中的元素\n      const selection = window.getSelection();\n      if (!selection || selection.rangeCount === 0) {\n        console.error(\"No selection found!\"); // 调试日志\n        return;\n      }\n\n      // 获取选中的范围\n      const range = selection.getRangeAt(0);\n\n      // 获取选择范围内的所有元素\n      const selectedNodes = range.cloneContents().childNodes;\n      console.log(\"Selected nodes:\", selectedNodes); // 调试日志\n\n      // 遍历选择范围内的所有元素，找到第一个标题元素\n      let sourceId = undefined;\n      for (const node of selectedNodes) {\n        if (node.nodeType === Node.ELEMENT_NODE && /^h[1-6]$/i.test(node.tagName)) {\n          sourceId = node.id;\n          break;\n        }\n      }\n\n      // 如果未找到标题元素，尝试从选中范围的起始位置向上查找\n      if (!sourceId) {\n        let startElement = range.startContainer;\n        while (startElement && !/^h[1-6]$/i.test(startElement.tagName)) {\n          startElement = startElement.parentElement;\n        }\n        sourceId = startElement ? startElement.id : undefined;\n      }\n      console.log(\"Extracted source ID:\", sourceId); // 调试日志\n      // 核心修改：确保始终触发主事件\n      bus.emit(`${props.divId}Event`, {\n        content,\n        sourceId,\n        isTable,\n        from: props.divId,\n        timestamp: Date.now()\n      });\n\n      // 如果没有找到标题元素，直接弹出所选内容\n      if (!sourceId) {\n        console.log(\"No heading element found, showing selected content only.\"); // 调试日志\n        selectedText.value[props.divId] = content;\n        showPopup.value[props.divId] = true;\n\n        // 确保弹窗位置更新\n        nextTick(() => {\n          updatePopupPosition();\n        });\n        return;\n      }\n\n      // 调用 handleSelectionWithSourceId 方法\n      handleSelectionWithSourceId(content, sourceId, isTable);\n    };\n    const handleSelectionWithSourceId = (content, sourceId, isTable) => {\n      console.log(\"Selected content:\", content); // 调试日志\n      console.log(\"Source ID:\", sourceId); // 调试日志\n      console.log(\"Is table:\", isTable); // 调试日志\n\n      // 存储选中内容\n      selectedText.value[props.divId] = content;\n      showPopup.value[props.divId] = true;\n\n      // 如果是表格，检查是否有关联章节\n      if (isTable) {\n        // 提取关联章节的整个内容和 linkedItem\n        const {\n          linkedItem,\n          chapterContent\n        } = extractLinkedChapterContent(sourceId, props.divId);\n        console.log(\"Linked chapter content:\", chapterContent); // 调试日志\n\n        // 如果有关联章节内容\n        if (linkedItem && chapterContent) {\n          // 通知另一个容器弹出关联章节内容\n          const otherContainerId = props.divId === \"div1\" ? \"div3\" : \"div1\";\n          const targetId = props.divId === \"div1\" ? linkedItem.rightId : linkedItem.leftId;\n\n          // 先滚动到关联章节\n          const targetElement = document.getElementById(targetId);\n          if (targetElement) {\n            targetElement.scrollIntoView({\n              behavior: \"smooth\"\n            });\n          }\n\n          // 再弹出关联章节内容\n          bus.emit(`${otherContainerId}Event`, {\n            content: chapterContent,\n            // 传递关联章节内容\n            sourceId: sourceId\n          });\n        } else {\n          console.log(\"No linked chapter found, skipping auto-popup.\"); // 调试日志\n        }\n      }\n\n      // 确保弹窗位置更新\n      nextTick(() => {\n        updatePopupPosition();\n      });\n    };\n\n    // **关闭弹出框**\n    const closePopup = () => {\n      showPopup.value[props.divId] = false; // 根据 divId 关闭弹窗\n      selectedText.value[props.divId] = \"\"; // 根据 divId 清除选中内容\n\n      // 根据 divId 清空对应的容器\n      const container = props.divId === \"div1\" ? \".chart-container1\" : \".chart-container2\";\n      d3.select(container).html(\"\");\n    };\n\n    // **更新遮罩层和弹出框的位置**\n    const updatePopupPosition = () => {\n      if (showPopup.value[props.divId] && divRef.value) {\n        const popup = divRef.value.querySelector(\".text-popup\");\n        const overlay = divRef.value.querySelector(\".overlay\");\n        if (popup && overlay) {\n          const rect = divRef.value.getBoundingClientRect();\n          const scrollTop = divRef.value.scrollTop;\n          const scrollLeft = divRef.value.scrollLeft;\n\n          // 动态调整遮罩层和弹出框的位置\n          overlay.style.top = `${scrollTop}px`;\n          overlay.style.left = `${scrollLeft}px`;\n          overlay.style.width = `${divRef.value.clientWidth}px`;\n          overlay.style.height = `${divRef.value.clientHeight}px`;\n          popup.style.top = `${rect.height / 2 + scrollTop}px`;\n          popup.style.left = `${rect.width / 2 + scrollLeft}px`;\n        }\n      }\n    };\n\n    // **组件挂载后加载 Wikipedia 内容**\n    onMounted(() => {\n      // 确保 divRef 已初始化\n      if (divRef.value) {\n        console.log(\"divRef 已绑定到 DOM 元素:\", divRef.value);\n      } else {\n        console.error(\"divRef 未绑定到 DOM 元素\");\n      }\n      fetchWikipediaContent();\n\n      // 监听父容器滚动事件\n      if (divRef.value) {\n        divRef.value.addEventListener(\"scroll\", updatePopupPosition);\n      }\n      // 监听另一个容器的事件\n      bus.on(`${props.divId}Event`, _ref2 => {\n        let {\n          content,\n          sourceId\n        } = _ref2;\n        console.log(\"Received event:\", content, sourceId); // 调试日志\n\n        // 存储关联章节内容\n        selectedText.value[props.divId] = content;\n        showPopup.value[props.divId] = true;\n\n        // 确保弹窗位置更新\n        nextTick(() => {\n          updatePopupPosition();\n        });\n      });\n    });\n\n    // **组件卸载时解绑事件**\n    onUnmounted(() => {\n      // 解绑父容器滚动事件\n      if (divRef.value) {\n        divRef.value.removeEventListener(\"scroll\", updatePopupPosition);\n      }\n      bus.off(`${props.divId}Event`);\n    });\n    const __returned__ = {\n      props,\n      pageHtml,\n      loading,\n      error,\n      selectedText,\n      showPopup,\n      divRef,\n      fetchWikipediaContent,\n      injectWikipediaStyles,\n      extractLinkedChapterContent,\n      handleSelection,\n      handleSelectionWithSourceId,\n      closePopup,\n      updatePopupPosition,\n      ref,\n      onMounted,\n      onUnmounted,\n      nextTick,\n      LoadingSpinner,\n      ErrorDisplay,\n      WikipediaContent,\n      TextPopup,\n      ArticleOutline,\n      get d3() {\n        return d3;\n      },\n      get bus() {\n        return bus;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","nextTick","LoadingSpinner","ErrorDisplay","WikipediaContent","TextPopup","ArticleOutline","d3","bus","props","__props","pageHtml","loading","error","selectedText","showPopup","divRef","fetchWikipediaContent","apiUrl","encodeURIComponent","pageTitle","response","fetch","ok","Error","html","text","parser","DOMParser","doc","parseFromString","headings","querySelectorAll","forEach","heading","index","uniqueId","divId","id","tables","table","classList","add","styles","Array","from","link","document","querySelector","href","styleTag","createElement","rel","head","appendChild","contentElement","value","innerHTML","injectWikipediaStyles","err","message","wikipediaStyles","url","extractLinkedChapterContent","sourceId","sourceContainerId","console","log","linkedOutline","linkedItem","chapterContent","find","linked","leftId","rightId","targetContainerId","targetId","targetContainer","getElementById","targetElement","currentNode","nodeType","Node","ELEMENT_NODE","test","tagName","TEXT_NODE","outerHTML","textContent","nextSibling","handleSelection","content","isTable","selection","window","getSelection","rangeCount","range","getRangeAt","selectedNodes","cloneContents","childNodes","undefined","node","startElement","startContainer","parentElement","emit","timestamp","Date","now","updatePopupPosition","handleSelectionWithSourceId","otherContainerId","scrollIntoView","behavior","closePopup","container","select","popup","overlay","rect","getBoundingClientRect","scrollTop","scrollLeft","style","top","left","width","clientWidth","height","clientHeight","addEventListener","on","_ref2","removeEventListener","off"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/ParentComponent.vue"],"sourcesContent":["<template>\r\n\t<div :class=\"['div0', selectContentClass]\" :id=\"divId\" ref=\"divRef\">\r\n\t\t<h1>{{ pageTitle }}</h1>\r\n\r\n\t\t<!-- 加载动画 -->\r\n\t\t<LoadingSpinner v-if=\"loading\" />\r\n\r\n\t\t<!-- 错误信息 -->\r\n\t\t<ErrorDisplay\r\n\t\t\tv-else-if=\"error\"\r\n\t\t\t:message=\"error\"\r\n\t\t\t@retry=\"fetchWikipediaContent\" />\r\n\r\n\t\t<!-- 文章内容 -->\r\n\t\t<WikipediaContent v-else :content=\"pageHtml\" @select=\"handleSelection\" />\r\n\r\n\t\t<!-- 弹出框 -->\r\n\t\t<TextPopup\r\n\t\t\t:visible=\"showPopup[divId]\"\r\n\t\t\t:content=\"selectedText[divId]\"\r\n\t\t\t:containerClass=\"\r\n\t\t\t\tdivId === 'div1' ? 'chart-container1' : 'chart-container2'\r\n\t\t\t\"\r\n\t\t\t:containerRef=\"divRef\"\r\n\t\t\t@close=\"closePopup\" />\r\n\r\n\t\t<!-- 悬浮大纲组件 -->\r\n\t\t<ArticleOutline :content=\"pageHtml\" :divId=\"divId\" />\r\n\t\t<!-- 添加 key 属性 -->\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted, nextTick } from \"vue\";\r\n\timport LoadingSpinner from \"./LoadingSpinner.vue\";\r\n\timport ErrorDisplay from \"./ErrorDisplay.vue\";\r\n\timport WikipediaContent from \"./WikipediaContent.vue\";\r\n\timport TextPopup from \"./TextPopup.vue\";\r\n\timport ArticleOutline from \"./ArticleOutline.vue\"; // 引入大纲组件\r\n\timport * as d3 from \"d3\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\r\n\tconst props = defineProps({\r\n\t\tpageTitle: String,\r\n\t\tdivId: String,\r\n\t\tselectContentClass: String,\r\n\t\tlinkedOutline: Array\r\n\t});\r\n\r\n\tconst pageHtml = ref(\"\"); // 文章 HTML 内容\r\n\tconst loading = ref(true); // 加载状态\r\n\tconst error = ref(\"\"); // 错误信息\r\n\tconst selectedText = ref({}); // 存储每个 div 的选中内容\r\n\tconst showPopup = ref({}); // 存储每个 div 的弹窗显示状态\r\n\tconst divRef = ref(null); // `Div1` 或 `Div3` 的 DOM 参考\r\n\r\n\t// **获取 Wikipedia 页面**\r\n\tconst fetchWikipediaContent = async () => {\r\n\t\ttry {\r\n\t\t\tconst apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(\r\n\t\t\t\tprops.pageTitle\r\n\t\t\t)}`;\r\n\t\t\tconst response = await fetch(apiUrl);\r\n\t\t\tif (!response.ok) throw new Error(\"Failed to fetch data\");\r\n\r\n\t\t\tconst html = await response.text();\r\n\r\n\t\t\t// 解析 HTML\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\r\n\t\t\t// **给所有 h1-h6 添加唯一 ID**\r\n\t\t\tconst headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\r\n\t\t\theadings.forEach((heading, index) => {\r\n\t\t\t\tconst uniqueId = `heading-${index}-${props.divId}`;\r\n\t\t\t\theading.id = uniqueId;\r\n\t\t\t});\r\n\r\n\t\t\t// **给所有表格添加类名 custom-table**\r\n\t\t\tconst tables = doc.querySelectorAll(\"table\");\r\n\t\t\ttables.forEach(table => {\r\n\t\t\t\ttable.classList.add(\"custom-table\");\r\n\t\t\t});\r\n\r\n\t\t\t// 动态注入 Wikipedia 样式\r\n\t\t\tconst styles = Array.from(doc.querySelectorAll('link[rel=\"stylesheet\"]'));\r\n\t\t\tstyles.forEach(link => {\r\n\t\t\t\tif (!document.querySelector(`link[href=\"${link.href}\"]`)) {\r\n\t\t\t\t\tconst styleTag = document.createElement(\"link\");\r\n\t\t\t\t\tstyleTag.rel = \"stylesheet\";\r\n\t\t\t\t\tstyleTag.href = link.href;\r\n\t\t\t\t\tdocument.head.appendChild(styleTag);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// 仅获取正文部分\r\n\t\t\tconst contentElement = doc.querySelector(\"body\");\r\n\t\t\tif (!contentElement) throw new Error(\"Content not found\");\r\n\r\n\t\t\tpageHtml.value = contentElement.innerHTML;\r\n\r\n\t\t\t// 手动引入 Wikipedia CSS\r\n\t\t\tinjectWikipediaStyles();\r\n\t\t} catch (err) {\r\n\t\t\terror.value = \"Error fetching Wikipedia content: \" + err.message;\r\n\t\t} finally {\r\n\t\t\tloading.value = false;\r\n\t\t}\r\n\t};\r\n\r\n\t// **手动引入 Wikipedia CSS**\r\n\tconst injectWikipediaStyles = () => {\r\n\t\tconst wikipediaStyles = [\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=site.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=ext.cite.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=ext.scribunto.styles\",\r\n\t\t\t\"https://en.wikipedia.org/w/load.php?modules=skins.vector.styles\"\r\n\t\t];\r\n\r\n\t\twikipediaStyles.forEach(url => {\r\n\t\t\tif (!document.querySelector(`link[href=\"${url}\"]`)) {\r\n\t\t\t\tconst styleTag = document.createElement(\"link\");\r\n\t\t\t\tstyleTag.rel = \"stylesheet\";\r\n\t\t\t\tstyleTag.href = url;\r\n\t\t\t\tdocument.head.appendChild(styleTag);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t// **处理选中内容**\r\n\tconst extractLinkedChapterContent = (sourceId, sourceContainerId) => {\r\n\t\tconsole.log(\"Extracting linked chapter content for:\", sourceId); // 调试日志\r\n\r\n\t\t// 检查 linkedOutline 是否存在\r\n\t\tif (!props.linkedOutline) {\r\n\t\t\tconsole.error(\"LinkedOutline is undefined!\");\r\n\t\t\treturn { linkedItem: null, chapterContent: \"\" };\r\n\t\t}\r\n\r\n\t\t// 找到关联章节的 ID\r\n\t\tconst linkedItem = props.linkedOutline.find(\r\n\t\t\tlinked => linked.leftId === sourceId || linked.rightId === sourceId\r\n\t\t);\r\n\t\tif (!linkedItem) {\r\n\t\t\tconsole.log(\"No linked chapter found for sourceId:\", sourceId); // 调试日志\r\n\t\t\treturn { linkedItem: null, chapterContent: \"\" };\r\n\t\t}\r\n\r\n\t\t// 确定目标容器和目标章节 ID\r\n\t\tconst targetContainerId = sourceContainerId === \"div1\" ? \"div3\" : \"div1\";\r\n\t\tconst targetId =\r\n\t\t\tsourceContainerId === \"div1\" ? linkedItem.rightId : linkedItem.leftId;\r\n\r\n\t\t// 提取目标章节的整个内容\r\n\t\tconst targetContainer = document.getElementById(targetContainerId);\r\n\t\tif (!targetContainer) return { linkedItem: null, chapterContent: \"\" };\r\n\r\n\t\tconst targetElement = targetContainer.querySelector(`#${targetId}`);\r\n\t\tif (!targetElement) return { linkedItem: null, chapterContent: \"\" };\r\n\r\n\t\t// 提取从当前标题到下一个同级标题之前的所有内容\r\n\t\tlet chapterContent = \"\";\r\n\t\tlet currentNode = targetElement;\r\n\r\n\t\twhile (currentNode) {\r\n\t\t\t// 如果遇到下一个同级标题，停止提取\r\n\t\t\tif (\r\n\t\t\t\tcurrentNode !== targetElement &&\r\n\t\t\t\tcurrentNode.nodeType === Node.ELEMENT_NODE &&\r\n\t\t\t\t/^h[1-6]$/i.test(currentNode.tagName)\r\n\t\t\t) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// 将内容添加到章节内容中\r\n\t\t\tif (\r\n\t\t\t\tcurrentNode.nodeType === Node.ELEMENT_NODE ||\r\n\t\t\t\tcurrentNode.nodeType === Node.TEXT_NODE\r\n\t\t\t) {\r\n\t\t\t\tchapterContent += currentNode.outerHTML || currentNode.textContent;\r\n\t\t\t}\r\n\r\n\t\t\tcurrentNode = currentNode.nextSibling;\r\n\t\t}\r\n\r\n\t\tconsole.log(\"Extracted content:\", chapterContent); // 调试日志\r\n\t\treturn { linkedItem, chapterContent };\r\n\t};\r\n\t// **处理选中内容**\r\n\tconst handleSelection = content => {\r\n\t\t// 检查选择的内容是否为表格\r\n\t\tconst isTable = /<table.*?>.*?<\\/table>/s.test(content);\r\n\t\t// console.log(\"Is table:\", isTable); // 调试日志\r\n\r\n\t\t// 获取选中的元素\r\n\t\tconst selection = window.getSelection();\r\n\t\tif (!selection || selection.rangeCount === 0) {\r\n\t\t\tconsole.error(\"No selection found!\"); // 调试日志\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 获取选中的范围\r\n\t\tconst range = selection.getRangeAt(0);\r\n\r\n\t\t// 获取选择范围内的所有元素\r\n\t\tconst selectedNodes = range.cloneContents().childNodes;\r\n\t\tconsole.log(\"Selected nodes:\", selectedNodes); // 调试日志\r\n\r\n\t\t// 遍历选择范围内的所有元素，找到第一个标题元素\r\n\t\tlet sourceId = undefined;\r\n\t\tfor (const node of selectedNodes) {\r\n\t\t\tif (\r\n\t\t\t\tnode.nodeType === Node.ELEMENT_NODE &&\r\n\t\t\t\t/^h[1-6]$/i.test(node.tagName)\r\n\t\t\t) {\r\n\t\t\t\tsourceId = node.id;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 如果未找到标题元素，尝试从选中范围的起始位置向上查找\r\n\t\tif (!sourceId) {\r\n\t\t\tlet startElement = range.startContainer;\r\n\t\t\twhile (startElement && !/^h[1-6]$/i.test(startElement.tagName)) {\r\n\t\t\t\tstartElement = startElement.parentElement;\r\n\t\t\t}\r\n\t\t\tsourceId = startElement ? startElement.id : undefined;\r\n\t\t}\r\n\r\n\t\tconsole.log(\"Extracted source ID:\", sourceId); // 调试日志\r\n\t\t// 核心修改：确保始终触发主事件\r\n\t\tbus.emit(`${props.divId}Event`, {\r\n\t\t\tcontent,\r\n\t\t\tsourceId,\r\n\t\t\tisTable,\r\n\t\t\tfrom: props.divId,\r\n\t\t\ttimestamp: Date.now()\r\n\t\t});\r\n\r\n\t\t// 如果没有找到标题元素，直接弹出所选内容\r\n\t\tif (!sourceId) {\r\n\t\t\tconsole.log(\"No heading element found, showing selected content only.\"); // 调试日志\r\n\t\t\tselectedText.value[props.divId] = content;\r\n\t\t\tshowPopup.value[props.divId] = true;\r\n\r\n\t\t\t// 确保弹窗位置更新\r\n\t\t\tnextTick(() => {\r\n\t\t\t\tupdatePopupPosition();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 调用 handleSelectionWithSourceId 方法\r\n\t\thandleSelectionWithSourceId(content, sourceId, isTable);\r\n\t};\r\n\r\n\tconst handleSelectionWithSourceId = (content, sourceId, isTable) => {\r\n\t\tconsole.log(\"Selected content:\", content); // 调试日志\r\n\t\tconsole.log(\"Source ID:\", sourceId); // 调试日志\r\n\t\tconsole.log(\"Is table:\", isTable); // 调试日志\r\n\r\n\t\t// 存储选中内容\r\n\t\tselectedText.value[props.divId] = content;\r\n\t\tshowPopup.value[props.divId] = true;\r\n\r\n\t\t// 如果是表格，检查是否有关联章节\r\n\t\tif (isTable) {\r\n\t\t\t// 提取关联章节的整个内容和 linkedItem\r\n\t\t\tconst { linkedItem, chapterContent } = extractLinkedChapterContent(\r\n\t\t\t\tsourceId,\r\n\t\t\t\tprops.divId\r\n\t\t\t);\r\n\t\t\tconsole.log(\"Linked chapter content:\", chapterContent); // 调试日志\r\n\r\n\t\t\t// 如果有关联章节内容\r\n\t\t\tif (linkedItem && chapterContent) {\r\n\t\t\t\t// 通知另一个容器弹出关联章节内容\r\n\t\t\t\tconst otherContainerId = props.divId === \"div1\" ? \"div3\" : \"div1\";\r\n\t\t\t\tconst targetId =\r\n\t\t\t\t\tprops.divId === \"div1\" ? linkedItem.rightId : linkedItem.leftId;\r\n\r\n\t\t\t\t// 先滚动到关联章节\r\n\t\t\t\tconst targetElement = document.getElementById(targetId);\r\n\t\t\t\tif (targetElement) {\r\n\t\t\t\t\ttargetElement.scrollIntoView({ behavior: \"smooth\" });\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 再弹出关联章节内容\r\n\t\t\t\tbus.emit(`${otherContainerId}Event`, {\r\n\t\t\t\t\tcontent: chapterContent, // 传递关联章节内容\r\n\t\t\t\t\tsourceId: sourceId\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(\"No linked chapter found, skipping auto-popup.\"); // 调试日志\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 确保弹窗位置更新\r\n\t\tnextTick(() => {\r\n\t\t\tupdatePopupPosition();\r\n\t\t});\r\n\t};\r\n\r\n\t// **关闭弹出框**\r\n\tconst closePopup = () => {\r\n\t\tshowPopup.value[props.divId] = false; // 根据 divId 关闭弹窗\r\n\t\tselectedText.value[props.divId] = \"\"; // 根据 divId 清除选中内容\r\n\r\n\t\t// 根据 divId 清空对应的容器\r\n\t\tconst container =\r\n\t\t\tprops.divId === \"div1\" ? \".chart-container1\" : \".chart-container2\";\r\n\t\td3.select(container).html(\"\");\r\n\t};\r\n\r\n\t// **更新遮罩层和弹出框的位置**\r\n\tconst updatePopupPosition = () => {\r\n\t\tif (showPopup.value[props.divId] && divRef.value) {\r\n\t\t\tconst popup = divRef.value.querySelector(\".text-popup\");\r\n\t\t\tconst overlay = divRef.value.querySelector(\".overlay\");\r\n\t\t\tif (popup && overlay) {\r\n\t\t\t\tconst rect = divRef.value.getBoundingClientRect();\r\n\t\t\t\tconst scrollTop = divRef.value.scrollTop;\r\n\t\t\t\tconst scrollLeft = divRef.value.scrollLeft;\r\n\r\n\t\t\t\t// 动态调整遮罩层和弹出框的位置\r\n\t\t\t\toverlay.style.top = `${scrollTop}px`;\r\n\t\t\t\toverlay.style.left = `${scrollLeft}px`;\r\n\t\t\t\toverlay.style.width = `${divRef.value.clientWidth}px`;\r\n\t\t\t\toverlay.style.height = `${divRef.value.clientHeight}px`;\r\n\r\n\t\t\t\tpopup.style.top = `${rect.height / 2 + scrollTop}px`;\r\n\t\t\t\tpopup.style.left = `${rect.width / 2 + scrollLeft}px`;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// **组件挂载后加载 Wikipedia 内容**\r\n\tonMounted(() => {\r\n\t\t// 确保 divRef 已初始化\r\n\t\tif (divRef.value) {\r\n\t\t\tconsole.log(\"divRef 已绑定到 DOM 元素:\", divRef.value);\r\n\t\t} else {\r\n\t\t\tconsole.error(\"divRef 未绑定到 DOM 元素\");\r\n\t\t}\r\n\t\tfetchWikipediaContent();\r\n\r\n\t\t// 监听父容器滚动事件\r\n\t\tif (divRef.value) {\r\n\t\t\tdivRef.value.addEventListener(\"scroll\", updatePopupPosition);\r\n\t\t}\r\n\t\t// 监听另一个容器的事件\r\n\t\tbus.on(`${props.divId}Event`, ({ content, sourceId }) => {\r\n\t\t\tconsole.log(\"Received event:\", content, sourceId); // 调试日志\r\n\r\n\t\t\t// 存储关联章节内容\r\n\t\t\tselectedText.value[props.divId] = content;\r\n\t\t\tshowPopup.value[props.divId] = true;\r\n\r\n\t\t\t// 确保弹窗位置更新\r\n\t\t\tnextTick(() => {\r\n\t\t\t\tupdatePopupPosition();\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n\r\n\t// **组件卸载时解绑事件**\r\n\tonUnmounted(() => {\r\n\t\t// 解绑父容器滚动事件\r\n\t\tif (divRef.value) {\r\n\t\t\tdivRef.value.removeEventListener(\"scroll\", updatePopupPosition);\r\n\t\t}\r\n\t\tbus.off(`${props.divId}Event`);\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\th1 {\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t/* 文章容器 */\r\n\t.div0 {\r\n\t\tposition: relative;\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t#div1,\r\n\t#div3 {\r\n\t\twidth: 55%;\r\n\t\tmax-width: 100%;\r\n\t\tmax-height: 100%;\r\n\t\toverflow: auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t.showHtml {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\toverflow: auto;\r\n\t}\r\n\r\n\t/* 选中文本的高亮样式 */\r\n\t::selection {\r\n\t\tbackground-color: yellow;\r\n\t\tcolor: black;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}