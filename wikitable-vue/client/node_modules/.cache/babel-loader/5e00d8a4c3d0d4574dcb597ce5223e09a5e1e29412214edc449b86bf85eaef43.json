{"ast":null,"code":"import { ref, onMounted, onUnmounted, nextTick } from \"vue\";\nimport LoadingSpinner from \"./LoadingSpinner.vue\";\nimport ErrorDisplay from \"./ErrorDisplay.vue\";\nimport WikipediaContent from \"./WikipediaContent.vue\";\nimport TextPopup from \"./TextPopup.vue\";\nimport ArticleOutline from \"./ArticleOutline.vue\"; // 引入大纲组件\nimport * as d3 from \"d3\";\nimport bus from \"@/js/eventBus.js\";\nexport default {\n  __name: 'ParentComponent',\n  props: {\n    pageTitle: String,\n    divId: String,\n    selectContentClass: String\n  },\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const props = __props;\n    const pageHtml = ref(\"\"); // 文章 HTML 内容\n    const loading = ref(true); // 加载状态\n    const error = ref(\"\"); // 错误信息\n    const selectedText = ref(\"\"); // 选中的文本内容\n    const relatedSection = ref(\"\"); // 选中表格时的关联章节\n    const showPopup = ref(false); // 控制弹窗显示\n    const popupType = ref(\"\"); // 记录弹出框类型（文本 or 关联章节）\n    const divRef = ref(null); // `Div1` 或 `Div3` 的 DOM 参考\n\n    // **获取 Wikipedia 页面**\n    const fetchWikipediaContent = async () => {\n      try {\n        const apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(props.pageTitle)}`;\n        const response = await fetch(apiUrl);\n        if (!response.ok) throw new Error(\"Failed to fetch data\");\n        const html = await response.text();\n\n        // 解析 HTML\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(html, \"text/html\");\n\n        // **给所有 h1-h6 添加唯一 ID**\n        const headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\n        headings.forEach((heading, index) => {\n          heading.id = `heading-${index}-${props.divId}`;\n        });\n\n        // **给所有表格添加类名**\n        const tables = doc.querySelectorAll(\"table\");\n        tables.forEach(table => {\n          table.classList.add(\"custom-table\");\n        });\n\n        // 仅获取正文部分\n        const contentElement = doc.querySelector(\"body\");\n        if (!contentElement) throw new Error(\"Content not found\");\n        pageHtml.value = contentElement.innerHTML;\n      } catch (err) {\n        error.value = \"Error fetching Wikipedia content: \" + err.message;\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // **处理选中内容**\n    const handleSelection = () => {\n      const selection = window.getSelection();\n      if (!selection.rangeCount) return;\n      const range = selection.getRangeAt(0);\n      const containerElement = range.commonAncestorContainer;\n\n      // **检查是否选中的是表格**\n      const selectedTable = containerElement.closest ? containerElement.closest(\"table\") : null;\n      if (selectedTable) {\n        // **获取关联章节**\n        const linkedChapterContent = extractLinkedChapterContent(selectedTable);\n        relatedSection.value = linkedChapterContent;\n        selectedText.value = \"\"; // 清空普通文本\n\n        // 显示表格关联章节弹窗\n        popupType.value = \"table\";\n        showPopup.value = true;\n        nextTick(updatePopupPosition);\n        return;\n      }\n\n      // **普通文本选中**\n      const text = selection.toString().trim();\n      if (text) {\n        selectedText.value = text;\n        relatedSection.value = \"\"; // 清空表格关联章节\n\n        // 显示普通文本弹窗\n        popupType.value = \"text\";\n        showPopup.value = true;\n        nextTick(updatePopupPosition);\n      } else {\n        showPopup.value = false;\n      }\n    };\n\n    // **提取表格的关联章节**\n    const extractLinkedChapterContent = selectedTable => {\n      let heading = selectedTable.previousElementSibling;\n\n      // 向上查找最近的 h1-h6 标题\n      while (heading && !/^H[1-6]$/.test(heading.tagName)) {\n        heading = heading.previousElementSibling;\n      }\n      return heading ? heading.textContent : \"未找到关联章节\";\n    };\n\n    // **关闭弹出框**\n    const closePopup = () => {\n      showPopup.value = false;\n      selectedText.value = \"\";\n      relatedSection.value = \"\";\n    };\n\n    // **更新弹出框位置**\n    const updatePopupPosition = () => {\n      if (showPopup.value && divRef.value) {\n        const popup = divRef.value.querySelector(\".text-popup\");\n        const rect = divRef.value.getBoundingClientRect();\n        if (popup) {\n          popup.style.top = `${rect.height / 2}px`;\n          popup.style.left = `${rect.width / 2}px`;\n        }\n      }\n    };\n\n    // **组件挂载后加载 Wikipedia 内容**\n    onMounted(() => {\n      fetchWikipediaContent();\n      document.addEventListener(\"mouseup\", handleSelection);\n    });\n\n    // **组件卸载时解绑事件**\n    onUnmounted(() => {\n      document.removeEventListener(\"mouseup\", handleSelection);\n    });\n    const __returned__ = {\n      props,\n      pageHtml,\n      loading,\n      error,\n      selectedText,\n      relatedSection,\n      showPopup,\n      popupType,\n      divRef,\n      fetchWikipediaContent,\n      handleSelection,\n      extractLinkedChapterContent,\n      closePopup,\n      updatePopupPosition,\n      ref,\n      onMounted,\n      onUnmounted,\n      nextTick,\n      LoadingSpinner,\n      ErrorDisplay,\n      WikipediaContent,\n      TextPopup,\n      ArticleOutline,\n      get d3() {\n        return d3;\n      },\n      get bus() {\n        return bus;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","nextTick","LoadingSpinner","ErrorDisplay","WikipediaContent","TextPopup","ArticleOutline","d3","bus","props","__props","pageHtml","loading","error","selectedText","relatedSection","showPopup","popupType","divRef","fetchWikipediaContent","apiUrl","encodeURIComponent","pageTitle","response","fetch","ok","Error","html","text","parser","DOMParser","doc","parseFromString","headings","querySelectorAll","forEach","heading","index","id","divId","tables","table","classList","add","contentElement","querySelector","value","innerHTML","err","message","handleSelection","selection","window","getSelection","rangeCount","range","getRangeAt","containerElement","commonAncestorContainer","selectedTable","closest","linkedChapterContent","extractLinkedChapterContent","updatePopupPosition","toString","trim","previousElementSibling","test","tagName","textContent","closePopup","popup","rect","getBoundingClientRect","style","top","height","left","width","document","addEventListener","removeEventListener"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/ParentComponent.vue"],"sourcesContent":["<script setup>\r\n\timport { ref, onMounted, onUnmounted, nextTick } from \"vue\";\r\n\timport LoadingSpinner from \"./LoadingSpinner.vue\";\r\n\timport ErrorDisplay from \"./ErrorDisplay.vue\";\r\n\timport WikipediaContent from \"./WikipediaContent.vue\";\r\n\timport TextPopup from \"./TextPopup.vue\";\r\n\timport ArticleOutline from \"./ArticleOutline.vue\"; // 引入大纲组件\r\n\timport * as d3 from \"d3\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\r\n\tconst props = defineProps({\r\n\t\tpageTitle: String,\r\n\t\tdivId: String,\r\n\t\tselectContentClass: String\r\n\t});\r\n\r\n\tconst pageHtml = ref(\"\"); // 文章 HTML 内容\r\n\tconst loading = ref(true); // 加载状态\r\n\tconst error = ref(\"\"); // 错误信息\r\n\tconst selectedText = ref(\"\"); // 选中的文本内容\r\n\tconst relatedSection = ref(\"\"); // 选中表格时的关联章节\r\n\tconst showPopup = ref(false); // 控制弹窗显示\r\n\tconst popupType = ref(\"\"); // 记录弹出框类型（文本 or 关联章节）\r\n\tconst divRef = ref(null); // `Div1` 或 `Div3` 的 DOM 参考\r\n\r\n\t// **获取 Wikipedia 页面**\r\n\tconst fetchWikipediaContent = async () => {\r\n\t\ttry {\r\n\t\t\tconst apiUrl = `https://en.wikipedia.org/api/rest_v1/page/html/${encodeURIComponent(\r\n\t\t\t\tprops.pageTitle\r\n\t\t\t)}`;\r\n\t\t\tconst response = await fetch(apiUrl);\r\n\t\t\tif (!response.ok) throw new Error(\"Failed to fetch data\");\r\n\r\n\t\t\tconst html = await response.text();\r\n\r\n\t\t\t// 解析 HTML\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\r\n\t\t\t// **给所有 h1-h6 添加唯一 ID**\r\n\t\t\tconst headings = doc.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");\r\n\t\t\theadings.forEach((heading, index) => {\r\n\t\t\t\theading.id = `heading-${index}-${props.divId}`;\r\n\t\t\t});\r\n\r\n\t\t\t// **给所有表格添加类名**\r\n\t\t\tconst tables = doc.querySelectorAll(\"table\");\r\n\t\t\ttables.forEach(table => {\r\n\t\t\t\ttable.classList.add(\"custom-table\");\r\n\t\t\t});\r\n\r\n\t\t\t// 仅获取正文部分\r\n\t\t\tconst contentElement = doc.querySelector(\"body\");\r\n\t\t\tif (!contentElement) throw new Error(\"Content not found\");\r\n\r\n\t\t\tpageHtml.value = contentElement.innerHTML;\r\n\t\t} catch (err) {\r\n\t\t\terror.value = \"Error fetching Wikipedia content: \" + err.message;\r\n\t\t} finally {\r\n\t\t\tloading.value = false;\r\n\t\t}\r\n\t};\r\n\r\n\t// **处理选中内容**\r\n\tconst handleSelection = () => {\r\n\t\tconst selection = window.getSelection();\r\n\t\tif (!selection.rangeCount) return;\r\n\r\n\t\tconst range = selection.getRangeAt(0);\r\n\t\tconst containerElement = range.commonAncestorContainer;\r\n\r\n\t\t// **检查是否选中的是表格**\r\n\t\tconst selectedTable = containerElement.closest\r\n\t\t\t? containerElement.closest(\"table\")\r\n\t\t\t: null;\r\n\t\tif (selectedTable) {\r\n\t\t\t// **获取关联章节**\r\n\t\t\tconst linkedChapterContent = extractLinkedChapterContent(selectedTable);\r\n\t\t\trelatedSection.value = linkedChapterContent;\r\n\t\t\tselectedText.value = \"\"; // 清空普通文本\r\n\r\n\t\t\t// 显示表格关联章节弹窗\r\n\t\t\tpopupType.value = \"table\";\r\n\t\t\tshowPopup.value = true;\r\n\t\t\tnextTick(updatePopupPosition);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// **普通文本选中**\r\n\t\tconst text = selection.toString().trim();\r\n\t\tif (text) {\r\n\t\t\tselectedText.value = text;\r\n\t\t\trelatedSection.value = \"\"; // 清空表格关联章节\r\n\r\n\t\t\t// 显示普通文本弹窗\r\n\t\t\tpopupType.value = \"text\";\r\n\t\t\tshowPopup.value = true;\r\n\t\t\tnextTick(updatePopupPosition);\r\n\t\t} else {\r\n\t\t\tshowPopup.value = false;\r\n\t\t}\r\n\t};\r\n\r\n\t// **提取表格的关联章节**\r\n\tconst extractLinkedChapterContent = selectedTable => {\r\n\t\tlet heading = selectedTable.previousElementSibling;\r\n\r\n\t\t// 向上查找最近的 h1-h6 标题\r\n\t\twhile (heading && !/^H[1-6]$/.test(heading.tagName)) {\r\n\t\t\theading = heading.previousElementSibling;\r\n\t\t}\r\n\r\n\t\treturn heading ? heading.textContent : \"未找到关联章节\";\r\n\t};\r\n\r\n\t// **关闭弹出框**\r\n\tconst closePopup = () => {\r\n\t\tshowPopup.value = false;\r\n\t\tselectedText.value = \"\";\r\n\t\trelatedSection.value = \"\";\r\n\t};\r\n\r\n\t// **更新弹出框位置**\r\n\tconst updatePopupPosition = () => {\r\n\t\tif (showPopup.value && divRef.value) {\r\n\t\t\tconst popup = divRef.value.querySelector(\".text-popup\");\r\n\t\t\tconst rect = divRef.value.getBoundingClientRect();\r\n\t\t\tif (popup) {\r\n\t\t\t\tpopup.style.top = `${rect.height / 2}px`;\r\n\t\t\t\tpopup.style.left = `${rect.width / 2}px`;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// **组件挂载后加载 Wikipedia 内容**\r\n\tonMounted(() => {\r\n\t\tfetchWikipediaContent();\r\n\t\tdocument.addEventListener(\"mouseup\", handleSelection);\r\n\t});\r\n\r\n\t// **组件卸载时解绑事件**\r\n\tonUnmounted(() => {\r\n\t\tdocument.removeEventListener(\"mouseup\", handleSelection);\r\n\t});\r\n</script>\r\n\r\n<template>\r\n\t<div ref=\"divRef\" v-html=\"pageHtml\"></div>\r\n\r\n\t<!-- **弹出框** -->\r\n\t<TextPopup\r\n\t\tv-if=\"showPopup\"\r\n\t\t:content=\"popupType === 'text' ? selectedText : relatedSection\"\r\n\t\t@close=\"closePopup\" />\r\n</template>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}