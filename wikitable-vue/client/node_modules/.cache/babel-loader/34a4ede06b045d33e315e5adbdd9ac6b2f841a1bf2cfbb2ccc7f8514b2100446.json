{"ast":null,"code":"import { renderSlot as _renderSlot, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-ea6f3360\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"data-processor\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_renderSlot(_ctx.$slots, \"default\", {\n    processedData: {\n      table1: $setup.processedTable1,\n      table2: $setup.processedTable2\n    }\n  }, undefined, true)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_renderSlot","_ctx","$slots","processedData","$setup","processedTable1","processedTable2"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\CompareTable.vue"],"sourcesContent":["<template>\r\n\t<div class=\"data-processor\">\r\n\t\t<slot\r\n\t\t\t:processedData=\"{\r\n\t\t\t\ttable1: processedTable1,\r\n\t\t\t\ttable2: processedTable2\r\n\t\t\t}\"></slot>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, watch, computed } from \"vue\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdiv1RawData: String,\r\n\t\tdiv3RawData: String\r\n\t});\r\n\r\n\t// 标准化表格数据输出\r\n\tconst processedTable1 = ref({ title: \"表格1\", rows: [], columns: [] });\r\n\tconst processedTable2 = ref({ title: \"表格2\", rows: [], columns: [] });\r\n\r\n\t// 监听数据变化\r\n\twatch(\r\n\t\t() => [props.div1RawData, props.div3RawData],\r\n\t\t() => {\r\n\t\t\tif (props.div1RawData) {\r\n\t\t\t\tprocessedTable1.value = parseTableToStandardJSON(\r\n\t\t\t\t\tprops.div1RawData,\r\n\t\t\t\t\t\"表格1\"\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tif (props.div3RawData) {\r\n\t\t\t\tprocessedTable2.value = parseTableToStandardJSON(\r\n\t\t\t\t\tprops.div3RawData,\r\n\t\t\t\t\t\"表格2\"\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\t/**\r\n\t * 通用表格解析方法\r\n\t * 输出标准格式：\r\n\t * {\r\n\t *   title: string,\r\n\t *   rows: [属性名1, 属性名2...],\r\n\t *   columns: [\r\n\t *     { name: \"记录名\", data: { 属性1: 值, 属性2: 值... }},\r\n\t *     ...\r\n\t *   ]\r\n\t * }\r\n\t */\r\n\tfunction parseTableToStandardJSON(html, defaultTitle = \"未命名表格\") {\r\n\t\tconst result = {\r\n\t\t\ttitle: extractTitleFromHTML(html) || defaultTitle,\r\n\t\t\trows: [],\r\n\t\t\tcolumns: []\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\t\tconst table = doc.querySelector(\"table\");\r\n\t\t\tif (!table) return result;\r\n\r\n\t\t\t// 提取表头（兼容th/td混用）\r\n\t\t\tconst headerCells = table.querySelector(\"tr\")?.children || [];\r\n\t\t\tresult.rows = Array.from(headerCells).map(cell => {\r\n\t\t\t\treturn cell.textContent\r\n\t\t\t\t\t.replace(/[\\n†*]/g, \"\")\r\n\t\t\t\t\t.trim()\r\n\t\t\t\t\t.replace(/\\s+/g, \" \");\r\n\t\t\t});\r\n\r\n\t\t\t// 提取数据行\r\n\t\t\tconst dataRows = Array.from(\r\n\t\t\t\ttable.querySelectorAll(\"tr:not(:first-child)\")\r\n\t\t\t);\r\n\t\t\tdataRows.forEach(row => {\r\n\t\t\t\tconst cells = Array.from(row.children);\r\n\t\t\t\tif (cells.length === 0) return;\r\n\r\n\t\t\t\tconst recordName = cells[0].textContent.trim();\r\n\t\t\t\tconst recordData = {};\r\n\r\n\t\t\t\tresult.rows.forEach((header, index) => {\r\n\t\t\t\t\tif (index < cells.length) {\r\n\t\t\t\t\t\trecordData[header] = smartValueConversion(\r\n\t\t\t\t\t\t\tcells[index].textContent.trim()\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tresult.columns.push({\r\n\t\t\t\t\tname: recordName,\r\n\t\t\t\t\tdata: recordData\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\treturn result;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"表格解析错误:\", error);\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\n\t// 智能值类型转换\r\n\tfunction smartValueConversion(rawValue) {\r\n\t\tif (!rawValue || [\"-\", \"—\", \"N/A\"].includes(rawValue)) return null;\r\n\t\tif (/^\\.\\d+$/.test(rawValue)) return parseFloat(rawValue);\r\n\t\tconst numericValue = parseFloat(rawValue.replace(/[^\\d.-]/g, \"\"));\r\n\t\treturn isNaN(numericValue) ? rawValue : numericValue;\r\n\t}\r\n\r\n\t// 从HTML提取标题\r\n\tfunction extractTitleFromHTML(html) {\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\treturn (\r\n\t\t\tdoc.querySelector(\"h1, h2, h3, h4, caption\")?.textContent.trim() || null\r\n\t\t);\r\n\t}\r\n</script>\r\n\r\n<style scoped>\r\n\t.data-processor {\r\n\t\tdisplay: contents; /* 不影响父容器布局 */\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,KAAK,EAAC;AAAgB;;uBAA3BC,mBAAA,CAMM,OANNC,UAMM,GALLC,WAAA,CAIWC,IAAA,CAAAC,MAAA;IAHTC,aAAa;cAAiBC,MAAA,CAAAC,eAAe;cAAeD,MAAA,CAAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}