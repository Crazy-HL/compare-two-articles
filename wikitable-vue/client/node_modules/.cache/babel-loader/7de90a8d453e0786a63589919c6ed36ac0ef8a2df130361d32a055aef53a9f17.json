{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * 维基百科Infobox解析器 - 改进版\r\n * 提取属性数据并规范化数值类型\r\n */\nexport function parseInfobox(infoboxHtml) {\n  if (!infoboxHtml) return [];\n\n  // 创建虚拟DOM元素来解析HTML\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(infoboxHtml, 'text/html');\n  const infobox = doc.querySelector('.infobox');\n  if (!infobox) return [];\n  const result = [];\n  let currentSection = '基本信息';\n\n  // 遍历所有行\n  const rows = infobox.querySelectorAll('tr');\n  rows.forEach(row => {\n    // 处理section标题行\n    if (row.querySelector('th[colspan=\"2\"]')) {\n      currentSection = cleanText(row.textContent) || currentSection;\n      return;\n    }\n\n    // 处理普通数据行\n    const th = row.querySelector('th');\n    const td = row.querySelector('td');\n    if (!th || !td) return;\n    const key = cleanFieldName(th.textContent);\n    const value = extractValue(td);\n    if (key && value !== null) {\n      result.push({\n        section: currentSection,\n        key: key,\n        value: value\n      });\n    }\n  });\n  return result;\n}\n\n/**\r\n * 从单元格提取值\r\n */\nfunction extractValue(tdElement) {\n  // 克隆元素以避免修改原始DOM\n  const td = tdElement.cloneNode(true);\n\n  // 移除不需要的元素\n  ['img', 'sup', '.reference', '.mw-editsection', 'abbr'].forEach(selector => {\n    td.querySelectorAll(selector).forEach(el => el.remove());\n  });\n\n  // 处理列表类型数据\n  if (td.querySelector('ul, ol')) {\n    return Array.from(td.querySelectorAll('li')).map(li => {\n      return extractValueFromText(cleanText(li.textContent));\n    });\n  }\n\n  // 处理普通文本\n  const text = cleanText(td.textContent);\n  return extractValueFromText(text);\n}\n\n/**\r\n * 从文本中提取规范化值\r\n */\nfunction extractValueFromText(text) {\n  // 1. 尝试提取数值+单位组合\n  const valueWithUnit = extractValueWithUnit(text);\n  if (valueWithUnit) return valueWithUnit;\n\n  // 2. 尝试提取纯数值\n  const numericValue = extractNumericValue(text);\n  if (numericValue !== null) return numericValue;\n\n  // 3. 尝试提取排名\n  const rank = extractRank(text);\n  if (rank !== null) return rank;\n\n  // 4. 默认返回清理后的文本\n  return text;\n}\n\n/**\r\n * 提取带单位的数值\r\n */\nfunction extractValueWithUnit(text) {\n  // 百分比 (6.8%)\n  const percentMatch = text.match(/(\\d+\\.?\\d*)%/);\n  if (percentMatch) return parseFloat(percentMatch[1]);\n\n  // 货币值 ($4.19 trillion, ¥429,501)\n  const currencyMatch = text.match(/(\\$|¥|€|£)?\\s*([\\d,\\.]+)\\s*(万|亿|万亿|trillion|billion|million)?/);\n  if (currencyMatch) {\n    let value = parseFloat(currencyMatch[2].replace(/,/g, ''));\n\n    // 处理中文单位\n    if (currencyMatch[3] === '万') value *= 1e4;\n    if (currencyMatch[3] === '亿') value *= 1e8;\n    if (currencyMatch[3] === '万亿') value *= 1e12;\n\n    // 处理英文单位\n    if (currencyMatch[3] === 'million') value *= 1e6;\n    if (currencyMatch[3] === 'billion') value *= 1e9;\n    if (currencyMatch[3] === 'trillion') value *= 1e12;\n    return value;\n  }\n  return null;\n}\n\n/**\r\n * 提取纯数值\r\n */\nfunction extractNumericValue(text) {\n  // 简单数字 (123,456.78)\n  const simpleNumber = text.match(/^[\\d,\\.]+$/);\n  if (simpleNumber) return parseFloat(text.replace(/,/g, ''));\n\n  // 包含数字的文本 (如 \"1 April - 31 March\")\n  const numberInText = text.match(/(\\d+)/);\n  if (numberInText) return parseInt(numberInText[1]);\n  return null;\n}\n\n/**\r\n * 提取排名信息\r\n */\nfunction extractRank(text) {\n  // 中文排名 (第5名)\n  const chineseRank = text.match(/第\\s*([零一二三四五六七八九十百千万\\d]+)\\s*名/);\n  if (chineseRank) return chineseToNumber(chineseRank[1]);\n\n  // 英文排名 (5th)\n  const englishRank = text.match(/(\\d+)(?:th|st|nd|rd)/);\n  if (englishRank) return parseInt(englishRank[1]);\n  return null;\n}\n\n/**\r\n * 清理字段名\r\n */\nfunction cleanFieldName(text) {\n  return cleanText(text).replace(/[:：]$/, '').replace(/\\s+/g, ' ').trim();\n}\n\n/**\r\n * 清理文本\r\n */\nfunction cleanText(text) {\n  return (text || \"\").replace(/\\[\\d+\\]/g, '') // 去除引用标记[1]\n  .replace(/\\s+/g, ' ') // 合并空格\n  .replace(/[[\\]]/g, '') // 去除方括号\n  .replace(/\\(.*\\)/g, '') // 去除括号内容\n  .trim();\n}\n\n/**\r\n * 中文数字转阿拉伯数字\r\n */\nfunction chineseToNumber(chinese) {\n  const map = {\n    零: 0,\n    一: 1,\n    二: 2,\n    三: 3,\n    四: 4,\n    五: 5,\n    六: 6,\n    七: 7,\n    八: 8,\n    九: 9,\n    十: 10,\n    百: 100,\n    千: 1000,\n    万: 10000\n  };\n  if (/^\\d+$/.test(chinese)) return parseInt(chinese);\n  let result = 0;\n  let temp = 0;\n  for (let i = 0; i < chinese.length; i++) {\n    const char = chinese[i];\n    if (map[char] < 10) {\n      temp = map[char];\n    } else {\n      result += temp * map[char];\n      temp = 0;\n    }\n  }\n  return result + temp;\n}","map":{"version":3,"names":["parseInfobox","infoboxHtml","parser","DOMParser","doc","parseFromString","infobox","querySelector","result","currentSection","rows","querySelectorAll","forEach","row","cleanText","textContent","th","td","key","cleanFieldName","value","extractValue","push","section","tdElement","cloneNode","selector","el","remove","Array","from","map","li","extractValueFromText","text","valueWithUnit","extractValueWithUnit","numericValue","extractNumericValue","rank","extractRank","percentMatch","match","parseFloat","currencyMatch","replace","simpleNumber","numberInText","parseInt","chineseRank","chineseToNumber","englishRank","trim","chinese","零","一","二","三","四","五","六","七","八","九","十","百","千","万","test","temp","i","length","char"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/js/wikiInfoboxParser.js"],"sourcesContent":["/**\r\n * 维基百科Infobox解析器 - 改进版\r\n * 提取属性数据并规范化数值类型\r\n */\r\nexport function parseInfobox(infoboxHtml) {\r\n    if (!infoboxHtml) return [];\r\n    \r\n    // 创建虚拟DOM元素来解析HTML\r\n    const parser = new DOMParser();\r\n    const doc = parser.parseFromString(infoboxHtml, 'text/html');\r\n    const infobox = doc.querySelector('.infobox');\r\n    \r\n    if (!infobox) return [];\r\n    \r\n    const result = [];\r\n    let currentSection = '基本信息';\r\n    \r\n    // 遍历所有行\r\n    const rows = infobox.querySelectorAll('tr');\r\n    rows.forEach(row => {\r\n        // 处理section标题行\r\n        if (row.querySelector('th[colspan=\"2\"]')) {\r\n            currentSection = cleanText(row.textContent) || currentSection;\r\n            return;\r\n        }\r\n        \r\n        // 处理普通数据行\r\n        const th = row.querySelector('th');\r\n        const td = row.querySelector('td');\r\n        if (!th || !td) return;\r\n        \r\n        const key = cleanFieldName(th.textContent);\r\n        const value = extractValue(td);\r\n        \r\n        if (key && value !== null) {\r\n            result.push({\r\n                section: currentSection,\r\n                key: key,\r\n                value: value\r\n            });\r\n        }\r\n    });\r\n    \r\n    return result;\r\n}\r\n\r\n/**\r\n * 从单元格提取值\r\n */\r\nfunction extractValue(tdElement) {\r\n    // 克隆元素以避免修改原始DOM\r\n    const td = tdElement.cloneNode(true);\r\n    \r\n    // 移除不需要的元素\r\n    ['img', 'sup', '.reference', '.mw-editsection', 'abbr'].forEach(selector => {\r\n        td.querySelectorAll(selector).forEach(el => el.remove());\r\n    });\r\n    \r\n    // 处理列表类型数据\r\n    if (td.querySelector('ul, ol')) {\r\n        return Array.from(td.querySelectorAll('li')).map(li => {\r\n            return extractValueFromText(cleanText(li.textContent));\r\n        });\r\n    }\r\n    \r\n    // 处理普通文本\r\n    const text = cleanText(td.textContent);\r\n    return extractValueFromText(text);\r\n}\r\n\r\n/**\r\n * 从文本中提取规范化值\r\n */\r\nfunction extractValueFromText(text) {\r\n    // 1. 尝试提取数值+单位组合\r\n    const valueWithUnit = extractValueWithUnit(text);\r\n    if (valueWithUnit) return valueWithUnit;\r\n    \r\n    // 2. 尝试提取纯数值\r\n    const numericValue = extractNumericValue(text);\r\n    if (numericValue !== null) return numericValue;\r\n    \r\n    // 3. 尝试提取排名\r\n    const rank = extractRank(text);\r\n    if (rank !== null) return rank;\r\n    \r\n    // 4. 默认返回清理后的文本\r\n    return text;\r\n}\r\n\r\n/**\r\n * 提取带单位的数值\r\n */\r\nfunction extractValueWithUnit(text) {\r\n    // 百分比 (6.8%)\r\n    const percentMatch = text.match(/(\\d+\\.?\\d*)%/);\r\n    if (percentMatch) return parseFloat(percentMatch[1]);\r\n    \r\n    // 货币值 ($4.19 trillion, ¥429,501)\r\n    const currencyMatch = text.match(/(\\$|¥|€|£)?\\s*([\\d,\\.]+)\\s*(万|亿|万亿|trillion|billion|million)?/);\r\n    if (currencyMatch) {\r\n        let value = parseFloat(currencyMatch[2].replace(/,/g, ''));\r\n        \r\n        // 处理中文单位\r\n        if (currencyMatch[3] === '万') value *= 1e4;\r\n        if (currencyMatch[3] === '亿') value *= 1e8;\r\n        if (currencyMatch[3] === '万亿') value *= 1e12;\r\n        \r\n        // 处理英文单位\r\n        if (currencyMatch[3] === 'million') value *= 1e6;\r\n        if (currencyMatch[3] === 'billion') value *= 1e9;\r\n        if (currencyMatch[3] === 'trillion') value *= 1e12;\r\n        \r\n        return value;\r\n    }\r\n    \r\n    return null;\r\n}\r\n\r\n/**\r\n * 提取纯数值\r\n */\r\nfunction extractNumericValue(text) {\r\n    // 简单数字 (123,456.78)\r\n    const simpleNumber = text.match(/^[\\d,\\.]+$/);\r\n    if (simpleNumber) return parseFloat(text.replace(/,/g, ''));\r\n    \r\n    // 包含数字的文本 (如 \"1 April - 31 March\")\r\n    const numberInText = text.match(/(\\d+)/);\r\n    if (numberInText) return parseInt(numberInText[1]);\r\n    \r\n    return null;\r\n}\r\n\r\n/**\r\n * 提取排名信息\r\n */\r\nfunction extractRank(text) {\r\n    // 中文排名 (第5名)\r\n    const chineseRank = text.match(/第\\s*([零一二三四五六七八九十百千万\\d]+)\\s*名/);\r\n    if (chineseRank) return chineseToNumber(chineseRank[1]);\r\n    \r\n    // 英文排名 (5th)\r\n    const englishRank = text.match(/(\\d+)(?:th|st|nd|rd)/);\r\n    if (englishRank) return parseInt(englishRank[1]);\r\n    \r\n    return null;\r\n}\r\n\r\n/**\r\n * 清理字段名\r\n */\r\nfunction cleanFieldName(text) {\r\n    return cleanText(text)\r\n        .replace(/[:：]$/, '')\r\n        .replace(/\\s+/g, ' ')\r\n        .trim();\r\n}\r\n\r\n/**\r\n * 清理文本\r\n */\r\nfunction cleanText(text) {\r\n    return (text || \"\")\r\n        .replace(/\\[\\d+\\]/g, '')      // 去除引用标记[1]\r\n        .replace(/\\s+/g, ' ')         // 合并空格\r\n        .replace(/[[\\]]/g, '')        // 去除方括号\r\n        .replace(/\\(.*\\)/g, '')       // 去除括号内容\r\n        .trim();\r\n}\r\n\r\n/**\r\n * 中文数字转阿拉伯数字\r\n */\r\nfunction chineseToNumber(chinese) {\r\n    const map = { \r\n        零:0, 一:1, 二:2, 三:3, 四:4, 五:5, \r\n        六:6, 七:7, 八:8, 九:9, 十:10,\r\n        百:100, 千:1000, 万:10000\r\n    };\r\n    \r\n    if (/^\\d+$/.test(chinese)) return parseInt(chinese);\r\n    \r\n    let result = 0;\r\n    let temp = 0;\r\n    \r\n    for (let i = 0; i < chinese.length; i++) {\r\n        const char = chinese[i];\r\n        if (map[char] < 10) {\r\n            temp = map[char];\r\n        } else {\r\n            result += temp * map[char];\r\n            temp = 0;\r\n        }\r\n    }\r\n    \r\n    return result + temp;\r\n}"],"mappings":";AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,YAAYA,CAACC,WAAW,EAAE;EACtC,IAAI,CAACA,WAAW,EAAE,OAAO,EAAE;;EAE3B;EACA,MAAMC,MAAM,GAAG,IAAIC,SAAS,CAAC,CAAC;EAC9B,MAAMC,GAAG,GAAGF,MAAM,CAACG,eAAe,CAACJ,WAAW,EAAE,WAAW,CAAC;EAC5D,MAAMK,OAAO,GAAGF,GAAG,CAACG,aAAa,CAAC,UAAU,CAAC;EAE7C,IAAI,CAACD,OAAO,EAAE,OAAO,EAAE;EAEvB,MAAME,MAAM,GAAG,EAAE;EACjB,IAAIC,cAAc,GAAG,MAAM;;EAE3B;EACA,MAAMC,IAAI,GAAGJ,OAAO,CAACK,gBAAgB,CAAC,IAAI,CAAC;EAC3CD,IAAI,CAACE,OAAO,CAACC,GAAG,IAAI;IAChB;IACA,IAAIA,GAAG,CAACN,aAAa,CAAC,iBAAiB,CAAC,EAAE;MACtCE,cAAc,GAAGK,SAAS,CAACD,GAAG,CAACE,WAAW,CAAC,IAAIN,cAAc;MAC7D;IACJ;;IAEA;IACA,MAAMO,EAAE,GAAGH,GAAG,CAACN,aAAa,CAAC,IAAI,CAAC;IAClC,MAAMU,EAAE,GAAGJ,GAAG,CAACN,aAAa,CAAC,IAAI,CAAC;IAClC,IAAI,CAACS,EAAE,IAAI,CAACC,EAAE,EAAE;IAEhB,MAAMC,GAAG,GAAGC,cAAc,CAACH,EAAE,CAACD,WAAW,CAAC;IAC1C,MAAMK,KAAK,GAAGC,YAAY,CAACJ,EAAE,CAAC;IAE9B,IAAIC,GAAG,IAAIE,KAAK,KAAK,IAAI,EAAE;MACvBZ,MAAM,CAACc,IAAI,CAAC;QACRC,OAAO,EAAEd,cAAc;QACvBS,GAAG,EAAEA,GAAG;QACRE,KAAK,EAAEA;MACX,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;EAEF,OAAOZ,MAAM;AACjB;;AAEA;AACA;AACA;AACA,SAASa,YAAYA,CAACG,SAAS,EAAE;EAC7B;EACA,MAAMP,EAAE,GAAGO,SAAS,CAACC,SAAS,CAAC,IAAI,CAAC;;EAEpC;EACA,CAAC,KAAK,EAAE,KAAK,EAAE,YAAY,EAAE,iBAAiB,EAAE,MAAM,CAAC,CAACb,OAAO,CAACc,QAAQ,IAAI;IACxET,EAAE,CAACN,gBAAgB,CAACe,QAAQ,CAAC,CAACd,OAAO,CAACe,EAAE,IAAIA,EAAE,CAACC,MAAM,CAAC,CAAC,CAAC;EAC5D,CAAC,CAAC;;EAEF;EACA,IAAIX,EAAE,CAACV,aAAa,CAAC,QAAQ,CAAC,EAAE;IAC5B,OAAOsB,KAAK,CAACC,IAAI,CAACb,EAAE,CAACN,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAACoB,GAAG,CAACC,EAAE,IAAI;MACnD,OAAOC,oBAAoB,CAACnB,SAAS,CAACkB,EAAE,CAACjB,WAAW,CAAC,CAAC;IAC1D,CAAC,CAAC;EACN;;EAEA;EACA,MAAMmB,IAAI,GAAGpB,SAAS,CAACG,EAAE,CAACF,WAAW,CAAC;EACtC,OAAOkB,oBAAoB,CAACC,IAAI,CAAC;AACrC;;AAEA;AACA;AACA;AACA,SAASD,oBAAoBA,CAACC,IAAI,EAAE;EAChC;EACA,MAAMC,aAAa,GAAGC,oBAAoB,CAACF,IAAI,CAAC;EAChD,IAAIC,aAAa,EAAE,OAAOA,aAAa;;EAEvC;EACA,MAAME,YAAY,GAAGC,mBAAmB,CAACJ,IAAI,CAAC;EAC9C,IAAIG,YAAY,KAAK,IAAI,EAAE,OAAOA,YAAY;;EAE9C;EACA,MAAME,IAAI,GAAGC,WAAW,CAACN,IAAI,CAAC;EAC9B,IAAIK,IAAI,KAAK,IAAI,EAAE,OAAOA,IAAI;;EAE9B;EACA,OAAOL,IAAI;AACf;;AAEA;AACA;AACA;AACA,SAASE,oBAAoBA,CAACF,IAAI,EAAE;EAChC;EACA,MAAMO,YAAY,GAAGP,IAAI,CAACQ,KAAK,CAAC,cAAc,CAAC;EAC/C,IAAID,YAAY,EAAE,OAAOE,UAAU,CAACF,YAAY,CAAC,CAAC,CAAC,CAAC;;EAEpD;EACA,MAAMG,aAAa,GAAGV,IAAI,CAACQ,KAAK,CAAC,+DAA+D,CAAC;EACjG,IAAIE,aAAa,EAAE;IACf,IAAIxB,KAAK,GAAGuB,UAAU,CAACC,aAAa,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;;IAE1D;IACA,IAAID,aAAa,CAAC,CAAC,CAAC,KAAK,GAAG,EAAExB,KAAK,IAAI,GAAG;IAC1C,IAAIwB,aAAa,CAAC,CAAC,CAAC,KAAK,GAAG,EAAExB,KAAK,IAAI,GAAG;IAC1C,IAAIwB,aAAa,CAAC,CAAC,CAAC,KAAK,IAAI,EAAExB,KAAK,IAAI,IAAI;;IAE5C;IACA,IAAIwB,aAAa,CAAC,CAAC,CAAC,KAAK,SAAS,EAAExB,KAAK,IAAI,GAAG;IAChD,IAAIwB,aAAa,CAAC,CAAC,CAAC,KAAK,SAAS,EAAExB,KAAK,IAAI,GAAG;IAChD,IAAIwB,aAAa,CAAC,CAAC,CAAC,KAAK,UAAU,EAAExB,KAAK,IAAI,IAAI;IAElD,OAAOA,KAAK;EAChB;EAEA,OAAO,IAAI;AACf;;AAEA;AACA;AACA;AACA,SAASkB,mBAAmBA,CAACJ,IAAI,EAAE;EAC/B;EACA,MAAMY,YAAY,GAAGZ,IAAI,CAACQ,KAAK,CAAC,YAAY,CAAC;EAC7C,IAAII,YAAY,EAAE,OAAOH,UAAU,CAACT,IAAI,CAACW,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;;EAE3D;EACA,MAAME,YAAY,GAAGb,IAAI,CAACQ,KAAK,CAAC,OAAO,CAAC;EACxC,IAAIK,YAAY,EAAE,OAAOC,QAAQ,CAACD,YAAY,CAAC,CAAC,CAAC,CAAC;EAElD,OAAO,IAAI;AACf;;AAEA;AACA;AACA;AACA,SAASP,WAAWA,CAACN,IAAI,EAAE;EACvB;EACA,MAAMe,WAAW,GAAGf,IAAI,CAACQ,KAAK,CAAC,+BAA+B,CAAC;EAC/D,IAAIO,WAAW,EAAE,OAAOC,eAAe,CAACD,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEvD;EACA,MAAME,WAAW,GAAGjB,IAAI,CAACQ,KAAK,CAAC,sBAAsB,CAAC;EACtD,IAAIS,WAAW,EAAE,OAAOH,QAAQ,CAACG,WAAW,CAAC,CAAC,CAAC,CAAC;EAEhD,OAAO,IAAI;AACf;;AAEA;AACA;AACA;AACA,SAAShC,cAAcA,CAACe,IAAI,EAAE;EAC1B,OAAOpB,SAAS,CAACoB,IAAI,CAAC,CACjBW,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CACpBA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CACpBO,IAAI,CAAC,CAAC;AACf;;AAEA;AACA;AACA;AACA,SAAStC,SAASA,CAACoB,IAAI,EAAE;EACrB,OAAO,CAACA,IAAI,IAAI,EAAE,EACbW,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAM;EAAA,CAC7BA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAS;EAAA,CAC7BA,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAQ;EAAA,CAC7BA,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAO;EAAA,CAC7BO,IAAI,CAAC,CAAC;AACf;;AAEA;AACA;AACA;AACA,SAASF,eAAeA,CAACG,OAAO,EAAE;EAC9B,MAAMtB,GAAG,GAAG;IACRuB,CAAC,EAAC,CAAC;IAAEC,CAAC,EAAC,CAAC;IAAEC,CAAC,EAAC,CAAC;IAAEC,CAAC,EAAC,CAAC;IAAEC,CAAC,EAAC,CAAC;IAAEC,CAAC,EAAC,CAAC;IAC5BC,CAAC,EAAC,CAAC;IAAEC,CAAC,EAAC,CAAC;IAAEC,CAAC,EAAC,CAAC;IAAEC,CAAC,EAAC,CAAC;IAAEC,CAAC,EAAC,EAAE;IACxBC,CAAC,EAAC,GAAG;IAAEC,CAAC,EAAC,IAAI;IAAEC,CAAC,EAAC;EACrB,CAAC;EAED,IAAI,OAAO,CAACC,IAAI,CAACf,OAAO,CAAC,EAAE,OAAOL,QAAQ,CAACK,OAAO,CAAC;EAEnD,IAAI7C,MAAM,GAAG,CAAC;EACd,IAAI6D,IAAI,GAAG,CAAC;EAEZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,OAAO,CAACkB,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,MAAME,IAAI,GAAGnB,OAAO,CAACiB,CAAC,CAAC;IACvB,IAAIvC,GAAG,CAACyC,IAAI,CAAC,GAAG,EAAE,EAAE;MAChBH,IAAI,GAAGtC,GAAG,CAACyC,IAAI,CAAC;IACpB,CAAC,MAAM;MACHhE,MAAM,IAAI6D,IAAI,GAAGtC,GAAG,CAACyC,IAAI,CAAC;MAC1BH,IAAI,GAAG,CAAC;IACZ;EACJ;EAEA,OAAO7D,MAAM,GAAG6D,IAAI;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}