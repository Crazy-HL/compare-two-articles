{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, Fragment as _Fragment, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-a89cbc96\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"simple-chart\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"text-tooltip\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"d3-chart-container\",\n  ref: \"pieContainer\"\n};\nconst _hoisted_4 = {\n  key: 1,\n  class: \"no-data\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"d3-chart-container\",\n  ref: \"barContainer\"\n};\nconst _hoisted_6 = {\n  key: 1,\n  class: \"no-data\"\n};\nconst _hoisted_7 = {\n  key: 0,\n  class: \"d3-chart-container\",\n  ref: \"lineContainer\"\n};\nconst _hoisted_8 = {\n  key: 1,\n  class: \"no-data\"\n};\nconst _hoisted_9 = {\n  key: 0,\n  class: \"text-tooltip\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 文本显示 \"), $props.visualization === 'text-only' ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 0\n  }, [_createElementVNode(\"div\", {\n    class: \"simple-text\",\n    onClick: _cache[0] || (_cache[0] = function () {\n      return $setup.handleTextClick && $setup.handleTextClick(...arguments);\n    }),\n    onMouseenter: _cache[1] || (_cache[1] = function () {\n      return $setup.handleTextHover && $setup.handleTextHover(...arguments);\n    }),\n    onMouseleave: _cache[2] || (_cache[2] = function () {\n      return $setup.resetHover && $setup.resetHover(...arguments);\n    })\n  }, _toDisplayString($setup.formatSimpleText($setup.processedField)), 33 /* TEXT, NEED_HYDRATION */), $setup.isTextHovered ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, \"点击查看详情\")) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */)) : $props.visualization === 'pie-chart' ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" 饼图 (D3实现) \"), $setup.hasData && $setup.isValidPieData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, null, 512 /* NEED_PATCH */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, \"-\"))], 64 /* STABLE_FRAGMENT */)) : $props.visualization === 'bar-chart' ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 2\n  }, [_createCommentVNode(\" 柱状图 (D3实现) \"), $setup.hasData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, null, 512 /* NEED_PATCH */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_6, \"-\"))], 64 /* STABLE_FRAGMENT */)) : $props.visualization === 'line-chart' ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 3\n  }, [_createCommentVNode(\" 折线图 (D3实现) \"), $setup.hasData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, null, 512 /* NEED_PATCH */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_8, \"-\"))], 64 /* STABLE_FRAGMENT */)) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 4\n  }, [_createCommentVNode(\" 默认显示 \"), _createElementVNode(\"div\", {\n    class: \"simple-text\",\n    onClick: _cache[3] || (_cache[3] = function () {\n      return $setup.handleTextClick && $setup.handleTextClick(...arguments);\n    }),\n    onMouseenter: _cache[4] || (_cache[4] = function () {\n      return $setup.handleTextHover && $setup.handleTextHover(...arguments);\n    }),\n    onMouseleave: _cache[5] || (_cache[5] = function () {\n      return $setup.resetHover && $setup.resetHover(...arguments);\n    })\n  }, _toDisplayString($setup.formatSimpleText($setup.processedField)), 33 /* TEXT, NEED_HYDRATION */), $setup.isTextHovered ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, \"点击查看详情\")) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","key","ref","_createElementBlock","_hoisted_1","_createCommentVNode","$props","visualization","_Fragment","_createElementVNode","onClick","_cache","$setup","handleTextClick","arguments","onMouseenter","handleTextHover","onMouseleave","resetHover","formatSimpleText","processedField","isTextHovered","_hoisted_2","hasData","isValidPieData","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\SimpleChart.vue"],"sourcesContent":["<template>\r\n\t<div class=\"simple-chart\">\r\n\t\t<!-- 文本显示 -->\r\n\t\t<template v-if=\"visualization === 'text-only'\">\r\n\t\t\t<div\r\n\t\t\t\tclass=\"simple-text\"\r\n\t\t\t\t@click=\"handleTextClick\"\r\n\t\t\t\t@mouseenter=\"handleTextHover\"\r\n\t\t\t\t@mouseleave=\"resetHover\">\r\n\t\t\t\t{{ formatSimpleText(processedField) }}\r\n\t\t\t</div>\r\n\t\t\t<div v-if=\"isTextHovered\" class=\"text-tooltip\">点击查看详情</div>\r\n\t\t</template>\r\n\r\n\t\t<!-- 饼图 (D3实现) -->\r\n\t\t<template v-else-if=\"visualization === 'pie-chart'\">\r\n\t\t\t<div\r\n\t\t\t\tv-if=\"hasData && isValidPieData\"\r\n\t\t\t\tclass=\"d3-chart-container\"\r\n\t\t\t\tref=\"pieContainer\"></div>\r\n\t\t\t<div v-else class=\"no-data\">-</div>\r\n\t\t</template>\r\n\r\n\t\t<!-- 柱状图 (D3实现) -->\r\n\t\t<template v-else-if=\"visualization === 'bar-chart'\">\r\n\t\t\t<div v-if=\"hasData\" class=\"d3-chart-container\" ref=\"barContainer\"></div>\r\n\t\t\t<div v-else class=\"no-data\">-</div>\r\n\t\t</template>\r\n\r\n\t\t<!-- 折线图 (D3实现) -->\r\n\t\t<template v-else-if=\"visualization === 'line-chart'\">\r\n\t\t\t<div v-if=\"hasData\" class=\"d3-chart-container\" ref=\"lineContainer\"></div>\r\n\t\t\t<div v-else class=\"no-data\">-</div>\r\n\t\t</template>\r\n\r\n\t\t<!-- 默认显示 -->\r\n\t\t<template v-else>\r\n\t\t\t<div\r\n\t\t\t\tclass=\"simple-text\"\r\n\t\t\t\t@click=\"handleTextClick\"\r\n\t\t\t\t@mouseenter=\"handleTextHover\"\r\n\t\t\t\t@mouseleave=\"resetHover\">\r\n\t\t\t\t{{ formatSimpleText(processedField) }}\r\n\t\t\t</div>\r\n\t\t\t<div v-if=\"isTextHovered\" class=\"text-tooltip\">点击查看详情</div>\r\n\t\t</template>\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\n\timport { computed, ref, onMounted, watch, nextTick } from \"vue\";\r\n\timport * as d3 from \"d3\";\r\n\r\n\texport default {\r\n\t\tprops: {\r\n\t\t\tfield: {\r\n\t\t\t\ttype: [Object, Array, String, Number],\r\n\t\t\t\tdefault: null\r\n\t\t\t},\r\n\t\t\ttype: {\r\n\t\t\t\ttype: String,\r\n\t\t\t\tdefault: \"\"\r\n\t\t\t},\r\n\t\t\tvisualization: {\r\n\t\t\t\ttype: String,\r\n\t\t\t\tdefault: \"\"\r\n\t\t\t},\r\n\t\t\tfieldKey: {\r\n\t\t\t\t// Added for context in formatting/parsing if needed\r\n\t\t\t\ttype: String,\r\n\t\t\t\tdefault: \"\"\r\n\t\t\t},\r\n\t\t\tyAxisMax: {\r\n\t\t\t\t// For unified Y-axis in bar charts\r\n\t\t\t\ttype: Number,\r\n\t\t\t\tdefault: null\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\temits: [\"chartClick\"],\r\n\r\n\t\tsetup(props, { emit }) {\r\n\t\t\tconst hoveredIndex = ref(null);\r\n\t\t\tconst activeIndex = ref(null);\r\n\t\t\tconst isTextHovered = ref(false);\r\n\r\n\t\t\t// 容器引用\r\n\t\t\tconst pieContainer = ref(null);\r\n\t\t\tconst barContainer = ref(null);\r\n\t\t\tconst lineContainer = ref(null);\r\n\r\n\t\t\t// 颜色定义\r\n\t\t\tconst colors = [\"#3498db\", \"#e74c3c\", \"#2ecc71\", \"#f39c12\", \"#9b59b6\"];\r\n\t\t\tconst remainderColor = \"#f0f0f0\"; // Color for the \"remainder\" part of a single-value pie chart\r\n\r\n\t\t\t// 处理后的字段数据\r\n\t\t\tconst processedField = computed(() => {\r\n\t\t\t\tif (!props.field) return null;\r\n\r\n\t\t\t\tconst processItem = item => {\r\n\t\t\t\t\tif (typeof item === \"object\" && item !== null) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tvalue: item.value ?? item.raw,\r\n\t\t\t\t\t\t\traw: item.raw,\r\n\t\t\t\t\t\t\t...(item.unit && { unit: item.unit }),\r\n\t\t\t\t\t\t\t...(item.currency && { currency: item.currency }),\r\n\t\t\t\t\t\t\t...(item.year && { year: item.year }),\r\n\t\t\t\t\t\t\t...item // spread other properties\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn { value: item, raw: item }; // Wrap primitive for consistency\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif (Array.isArray(props.field)) {\r\n\t\t\t\t\treturn props.field.map(processItem);\r\n\t\t\t\t}\r\n\t\t\t\treturn processItem(props.field);\r\n\t\t\t});\r\n\r\n\t\t\t// 初始化图表\r\n\t\t\tonMounted(() => {\r\n\t\t\t\twatch(\r\n\t\t\t\t\t() => [processedField.value, props.visualization, props.yAxisMax], // Watch yAxisMax for bar charts\r\n\t\t\t\t\t() => {\r\n\t\t\t\t\t\tnextTick(() => {\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tprops.visualization === \"pie-chart\" &&\r\n\t\t\t\t\t\t\t\thasData.value &&\r\n\t\t\t\t\t\t\t\tisValidPieData.value\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\trenderPieChart();\r\n\t\t\t\t\t\t\t} else if (props.visualization === \"bar-chart\" && hasData.value) {\r\n\t\t\t\t\t\t\t\trenderBarChart();\r\n\t\t\t\t\t\t\t} else if (\r\n\t\t\t\t\t\t\t\tprops.visualization === \"line-chart\" &&\r\n\t\t\t\t\t\t\t\thasData.value\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\trenderLineChart();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{ immediate: true, deep: true }\r\n\t\t\t\t);\r\n\t\t\t});\r\n\r\n\t\t\t// 渲染饼图（添加剩余比例）\r\n\t\t\tconst renderPieChart = () => {\r\n\t\t\t\tif (!pieContainer.value) return;\r\n\t\t\t\td3.select(pieContainer.value).selectAll(\"*\").remove();\r\n\r\n\t\t\t\tconst container = d3.select(pieContainer.value);\r\n\t\t\t\tconst containerWidth = pieContainer.value.clientWidth;\r\n\t\t\t\tconst containerHeight = pieContainer.value.clientHeight;\r\n\t\t\t\tconst size = Math.min(containerWidth, containerHeight) * 0.9; // Slightly smaller for padding\r\n\t\t\t\tconst radius = size / 2;\r\n\r\n\t\t\t\tconst svg = container\r\n\t\t\t\t\t.append(\"svg\")\r\n\t\t\t\t\t.attr(\"width\", \"100%\")\r\n\t\t\t\t\t.attr(\"height\", \"100%\")\r\n\t\t\t\t\t.attr(\"viewBox\", `0 0 ${size} ${size}`)\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"transform\", `translate(${radius},${radius})`);\r\n\r\n\t\t\t\tconst currentPieData = pieData.value; // Use the computed pieData\r\n\r\n\t\t\t\t// Process data for pie chart (single value vs multiple)\r\n\t\t\t\tconst processedPieChartData =\r\n\t\t\t\t\tcurrentPieData.length === 1 && currentPieData[0].value < 100 // Only add remainder if not 100%\r\n\t\t\t\t\t\t? [\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t...currentPieData[0],\r\n\t\t\t\t\t\t\t\t\tcolor: colors[0],\r\n\t\t\t\t\t\t\t\t\tisMainValue: true\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tvalue: Math.max(0, 100 - currentPieData[0].value),\r\n\t\t\t\t\t\t\t\t\tname: \"剩余\",\r\n\t\t\t\t\t\t\t\t\tcolor: remainderColor,\r\n\t\t\t\t\t\t\t\t\tisRemainder: true,\r\n\t\t\t\t\t\t\t\t\tindex: 1 // Different index for the remainder\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t  ]\r\n\t\t\t\t\t\t: currentPieData.map((d, i) => ({\r\n\t\t\t\t\t\t\t\t...d,\r\n\t\t\t\t\t\t\t\tcolor: colors[i % colors.length],\r\n\t\t\t\t\t\t\t\tisMainValue: true\r\n\t\t\t\t\t\t  }));\r\n\r\n\t\t\t\tconst pie = d3\r\n\t\t\t\t\t.pie()\r\n\t\t\t\t\t.value(d => d.value)\r\n\t\t\t\t\t.sort(null);\r\n\r\n\t\t\t\tconst arc = d3\r\n\t\t\t\t\t.arc()\r\n\t\t\t\t\t.innerRadius(0) // For a pie chart, not a donut\r\n\t\t\t\t\t.outerRadius(radius * 0.95) // Slightly smaller than radius\r\n\t\t\t\t\t.cornerRadius(2);\r\n\r\n\t\t\t\tconst arcs = svg\r\n\t\t\t\t\t.selectAll(\".arc\")\r\n\t\t\t\t\t.data(pie(processedPieChartData))\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"class\", \"arc\");\r\n\r\n\t\t\t\tarcs\r\n\t\t\t\t\t.append(\"path\")\r\n\t\t\t\t\t.attr(\"d\", arc)\r\n\t\t\t\t\t.attr(\"fill\", d => d.data.color)\r\n\t\t\t\t\t.style(\"opacity\", d => (d.data.isRemainder ? 0.5 : 0.9))\r\n\t\t\t\t\t.style(\"stroke\", \"#fff\")\r\n\t\t\t\t\t.style(\"stroke-width\", 1)\r\n\t\t\t\t\t.on(\"mouseover\", function (event, d) {\r\n\t\t\t\t\t\tif (d.data.isRemainder) return;\r\n\t\t\t\t\t\thoveredIndex.value = d.data.index;\r\n\t\t\t\t\t\td3.select(this)\r\n\t\t\t\t\t\t\t.transition()\r\n\t\t\t\t\t\t\t.duration(150)\r\n\t\t\t\t\t\t\t.style(\"opacity\", 1)\r\n\t\t\t\t\t\t\t.attr(\"transform\", \"scale(1.03)\");\r\n\t\t\t\t\t\ttooltip\r\n\t\t\t\t\t\t\t.style(\"visibility\", \"visible\")\r\n\t\t\t\t\t\t\t.html(\r\n\t\t\t\t\t\t\t\t`${d.data.name}: ${d.data.value.toFixed(1)}${\r\n\t\t\t\t\t\t\t\t\tprops.type === \"percentage\" ? \"%\" : \"\"\r\n\t\t\t\t\t\t\t\t}`\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.on(\"mouseout\", function (event, d) {\r\n\t\t\t\t\t\tif (d.data.isRemainder) return;\r\n\t\t\t\t\t\thoveredIndex.value = null;\r\n\t\t\t\t\t\td3.select(this)\r\n\t\t\t\t\t\t\t.transition()\r\n\t\t\t\t\t\t\t.duration(150)\r\n\t\t\t\t\t\t\t.style(\"opacity\", d.data.isRemainder ? 0.5 : 0.9)\r\n\t\t\t\t\t\t\t.attr(\"transform\", \"scale(1)\");\r\n\t\t\t\t\t\ttooltip.style(\"visibility\", \"hidden\");\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.on(\"click\", function (event, d) {\r\n\t\t\t\t\t\tif (d.data.isRemainder) return;\r\n\t\t\t\t\t\tactiveIndex.value = d.data.index;\r\n\t\t\t\t\t\temit(\"chartClick\", {\r\n\t\t\t\t\t\t\ttype: \"pie\",\r\n\t\t\t\t\t\t\tindex: d.data.index,\r\n\t\t\t\t\t\t\tdata: d.data,\r\n\t\t\t\t\t\t\tvalue: d.data.value\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\tif (currentPieData.length === 1) {\r\n\t\t\t\t\tsvg\r\n\t\t\t\t\t\t.append(\"text\")\r\n\t\t\t\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t\t\t\t.attr(\"dy\", \".3em\")\r\n\t\t\t\t\t\t.text(\r\n\t\t\t\t\t\t\t`${currentPieData[0].value.toFixed(1)}${\r\n\t\t\t\t\t\t\t\tprops.type === \"percentage\" ? \"%\" : \"\"\r\n\t\t\t\t\t\t\t}`\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t.style(\"font-size\", `${Math.max(10, radius / 4)}px`) // Responsive font size\r\n\t\t\t\t\t\t.style(\"fill\", \"#333\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst tooltip = container\r\n\t\t\t\t\t.append(\"div\")\r\n\t\t\t\t\t.attr(\"class\", \"d3-tooltip\")\r\n\t\t\t\t\t.style(\"position\", \"absolute\")\r\n\t\t\t\t\t.style(\"visibility\", \"hidden\")\r\n\t\t\t\t\t.style(\"background\", \"rgba(0,0,0,0.75)\")\r\n\t\t\t\t\t.style(\"color\", \"white\")\r\n\t\t\t\t\t.style(\"padding\", \"5px 10px\")\r\n\t\t\t\t\t.style(\"border-radius\", \"4px\")\r\n\t\t\t\t\t.style(\"font-size\", \"12px\");\r\n\t\t\t};\r\n\r\n\t\t\tconst renderBarChart = () => {\r\n\t\t\t\tif (!barContainer.value || !simpleBarData.value.length) return;\r\n\r\n\t\t\t\td3.select(barContainer.value).selectAll(\"*\").remove();\r\n\r\n\t\t\t\tconst container = d3.select(barContainer.value);\r\n\t\t\t\tconst width = barContainer.value.clientWidth;\r\n\t\t\t\tconst height = barContainer.value.clientHeight;\r\n\t\t\t\tconst margin = { top: 10, right: 5, bottom: 25, left: 5 }; // Adjusted margins for labels\r\n\r\n\t\t\t\tconst svg = container\r\n\t\t\t\t\t.append(\"svg\")\r\n\t\t\t\t\t.attr(\"width\", \"100%\")\r\n\t\t\t\t\t.attr(\"height\", \"100%\")\r\n\t\t\t\t\t.attr(\"viewBox\", `0 0 ${width} ${height}`);\r\n\r\n\t\t\t\tlet yDomainMaxValue;\r\n\t\t\t\tif (\r\n\t\t\t\t\tprops.yAxisMax !== null &&\r\n\t\t\t\t\tprops.yAxisMax !== undefined &&\r\n\t\t\t\t\tprops.yAxisMax >= 0\r\n\t\t\t\t) {\r\n\t\t\t\t\tyDomainMaxValue = props.yAxisMax;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst localMax = d3.max(simpleBarData.value, d => d.value);\r\n\t\t\t\t\tyDomainMaxValue = localMax > 0 ? localMax : 1;\r\n\t\t\t\t}\r\n\t\t\t\tif (yDomainMaxValue === 0) yDomainMaxValue = 1; // Ensure y-axis is not [0,0]\r\n\r\n\t\t\t\tconst y = d3\r\n\t\t\t\t\t.scaleLinear()\r\n\t\t\t\t\t.domain([0, yDomainMaxValue])\r\n\t\t\t\t\t.range([height - margin.bottom, margin.top]);\r\n\r\n\t\t\t\tconst maxBarWidth = 50;\r\n\t\t\t\tconst minSpacing = 8;\r\n\t\t\t\tconst barData = simpleBarData.value;\r\n\t\t\t\tconst barCount = barData.length;\r\n\r\n\t\t\t\tconst availableWidthForBars =\r\n\t\t\t\t\twidth -\r\n\t\t\t\t\tmargin.left -\r\n\t\t\t\t\tmargin.right -\r\n\t\t\t\t\t(barCount > 1 ? minSpacing * (barCount - 1) : 0);\r\n\t\t\t\tlet barWidth = Math.min(maxBarWidth, availableWidthForBars / barCount);\r\n\t\t\t\tbarWidth = Math.max(15, barWidth); // Minimum bar width\r\n\r\n\t\t\t\tconst totalBarsWidth =\r\n\t\t\t\t\tbarWidth * barCount +\r\n\t\t\t\t\t(barCount > 1 ? minSpacing * (barCount - 1) : 0);\r\n\t\t\t\tconst startX =\r\n\t\t\t\t\tmargin.left +\r\n\t\t\t\t\t(width - margin.left - margin.right - totalBarsWidth) / 2;\r\n\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.selectAll(\".bar\")\r\n\t\t\t\t\t.data(barData)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"rect\")\r\n\t\t\t\t\t.attr(\"class\", \"bar\")\r\n\t\t\t\t\t.attr(\r\n\t\t\t\t\t\t\"x\",\r\n\t\t\t\t\t\t(d, i) => startX + i * (barWidth + (barCount > 1 ? minSpacing : 0))\r\n\t\t\t\t\t)\r\n\t\t\t\t\t.attr(\"y\", d => (d.value >= 0 ? y(d.value) : y(0)))\r\n\t\t\t\t\t.attr(\"width\", barWidth)\r\n\t\t\t\t\t.attr(\"height\", d =>\r\n\t\t\t\t\t\tMath.max(\r\n\t\t\t\t\t\t\t0,\r\n\t\t\t\t\t\t\td.value >= 0\r\n\t\t\t\t\t\t\t\t? height - margin.bottom - y(d.value)\r\n\t\t\t\t\t\t\t\t: y(d.value) - y(0)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t\t\t.attr(\"fill\", (d, i) => colors[i % colors.length])\r\n\t\t\t\t\t.style(\"opacity\", 0.85)\r\n\t\t\t\t\t.attr(\"rx\", 2) // Rounded corners for bars\r\n\t\t\t\t\t.attr(\"ry\", 2);\r\n\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.selectAll(\".bar-label\")\r\n\t\t\t\t\t.data(barData)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"text\")\r\n\t\t\t\t\t.attr(\"class\", \"bar-label\")\r\n\t\t\t\t\t.attr(\r\n\t\t\t\t\t\t\"x\",\r\n\t\t\t\t\t\t(d, i) =>\r\n\t\t\t\t\t\t\tstartX +\r\n\t\t\t\t\t\t\ti * (barWidth + (barCount > 1 ? minSpacing : 0)) +\r\n\t\t\t\t\t\t\tbarWidth / 2\r\n\t\t\t\t\t)\r\n\t\t\t\t\t.attr(\"y\", height - margin.bottom + 15) // Position below the bar\r\n\t\t\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t\t\t.attr(\"font-size\", \"10px\")\r\n\t\t\t\t\t.attr(\"fill\", \"#555\")\r\n\t\t\t\t\t.text(d => formatNumber(d.value, props.fieldKey));\r\n\t\t\t};\r\n\r\n\t\t\tconst renderLineChart = () => {\r\n\t\t\t\tif (!lineContainer.value || !lineData.value.length) return;\r\n\r\n\t\t\t\td3.select(lineContainer.value).selectAll(\"*\").remove();\r\n\r\n\t\t\t\tconst container = d3.select(lineContainer.value);\r\n\t\t\t\tconst width = lineContainer.value.clientWidth;\r\n\t\t\t\tconst height = lineContainer.value.clientHeight;\r\n\t\t\t\tconst margin = { top: 10, right: 10, bottom: 25, left: 10 }; // Adjusted for labels\r\n\r\n\t\t\t\tconst svg = container\r\n\t\t\t\t\t.append(\"svg\")\r\n\t\t\t\t\t.attr(\"width\", \"100%\")\r\n\t\t\t\t\t.attr(\"height\", \"100%\")\r\n\t\t\t\t\t.attr(\"viewBox\", `0 0 ${width} ${height}`);\r\n\r\n\t\t\t\tconst currentLineData = lineData.value;\r\n\r\n\t\t\t\tconst x = d3\r\n\t\t\t\t\t.scaleLinear()\r\n\t\t\t\t\t.domain([0, Math.max(0, currentLineData.length - 1)]) // Handle empty or single point data\r\n\t\t\t\t\t.range([margin.left + 5, width - margin.right - 5]); // Add padding for points\r\n\r\n\t\t\t\tconst yMin = d3.min(currentLineData, d => d.y);\r\n\t\t\t\tconst yMax = d3.max(currentLineData, d => d.y);\r\n\t\t\t\tconst yPadding = (yMax - yMin) * 0.1 || 0.1; // Add padding, ensure not 0\r\n\r\n\t\t\t\tconst y = d3\r\n\t\t\t\t\t.scaleLinear()\r\n\t\t\t\t\t.domain([yMin - yPadding, yMax + yPadding])\r\n\t\t\t\t\t.range([height - margin.bottom, margin.top]);\r\n\r\n\t\t\t\tconst line = d3\r\n\t\t\t\t\t.line()\r\n\t\t\t\t\t.x((d, i) => x(i))\r\n\t\t\t\t\t.y(d => y(d.y))\r\n\t\t\t\t\t.curve(d3.curveMonotoneX); // Smoother line\r\n\r\n\t\t\t\tif (currentLineData.length > 0) {\r\n\t\t\t\t\tsvg\r\n\t\t\t\t\t\t.append(\"path\")\r\n\t\t\t\t\t\t.datum(currentLineData)\r\n\t\t\t\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t\t\t\t.attr(\"stroke\", colors[0])\r\n\t\t\t\t\t\t.attr(\"stroke-width\", 2)\r\n\t\t\t\t\t\t.attr(\"d\", line);\r\n\r\n\t\t\t\t\tsvg\r\n\t\t\t\t\t\t.selectAll(\".dot\")\r\n\t\t\t\t\t\t.data(currentLineData)\r\n\t\t\t\t\t\t.enter()\r\n\t\t\t\t\t\t.append(\"circle\")\r\n\t\t\t\t\t\t.attr(\"class\", \"dot\")\r\n\t\t\t\t\t\t.attr(\"cx\", (d, i) => x(i))\r\n\t\t\t\t\t\t.attr(\"cy\", d => y(d.y))\r\n\t\t\t\t\t\t.attr(\"r\", 3.5) // Slightly larger dots\r\n\t\t\t\t\t\t.attr(\"fill\", colors[0])\r\n\t\t\t\t\t\t.style(\"stroke\", \"#fff\")\r\n\t\t\t\t\t\t.style(\"stroke-width\", 1);\r\n\r\n\t\t\t\t\tsvg\r\n\t\t\t\t\t\t.selectAll(\".line-label\")\r\n\t\t\t\t\t\t.data(currentLineData)\r\n\t\t\t\t\t\t.enter()\r\n\t\t\t\t\t\t.append(\"text\")\r\n\t\t\t\t\t\t.attr(\"class\", \"line-label\")\r\n\t\t\t\t\t\t.attr(\"x\", (d, i) => x(i))\r\n\t\t\t\t\t\t.attr(\"y\", height - margin.bottom + 15) // Position below the line/points\r\n\t\t\t\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t\t\t\t.attr(\"font-size\", \"10px\")\r\n\t\t\t\t\t\t.attr(\"fill\", \"#555\")\r\n\t\t\t\t\t\t.text(d => formatNumber(d.y, props.fieldKey));\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t// 交互处理函数\r\n\t\t\tconst handleTextHover = () => {\r\n\t\t\t\tisTextHovered.value = true;\r\n\t\t\t};\r\n\t\t\tconst resetHover = () => {\r\n\t\t\t\thoveredIndex.value = null;\r\n\t\t\t\tisTextHovered.value = false;\r\n\t\t\t};\r\n\t\t\tconst handleTextClick = () => {\r\n\t\t\t\temit(\"chartClick\", {\r\n\t\t\t\t\ttype: \"text\",\r\n\t\t\t\t\tdata: processedField.value,\r\n\t\t\t\t\tvalue: processedField.value?.value\r\n\t\t\t\t});\r\n\t\t\t};\r\n\r\n\t\t\tconst formatNumber = (value, fieldKey) => {\r\n\t\t\t\tconst num = Number(value);\r\n\t\t\t\tif (isNaN(num)) return value?.toString() || \"0\"; // Return original string if not a number\r\n\r\n\t\t\t\tif (props.type === \"percentage\") {\r\n\t\t\t\t\treturn num.toFixed(1) + \"%\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (num >= 100000000) return (num / 100000000).toFixed(2) + \"亿\";\r\n\t\t\t\tif (num >= 10000) return (num / 10000).toFixed(1) + \"万\";\r\n\t\t\t\t// if (num >= 1000) return (num / 1000).toFixed(1) + \"千\"; //千 usually not needed for small charts\r\n\t\t\t\treturn num.toLocaleString(undefined, { maximumFractionDigits: 1 }); // Use locale string for better formatting\r\n\t\t\t};\r\n\r\n\t\t\t// 数据处理函数 & computed properties\r\n\t\t\tconst isYearEntry = value => {\r\n\t\t\t\tif (typeof value !== \"string\") return false;\r\n\t\t\t\tconst trimmedValue = value.trim();\r\n\t\t\t\treturn (\r\n\t\t\t\t\t/^(\\()?\\d{4}(\\))?\\s*:?/.test(trimmedValue) ||\r\n\t\t\t\t\t/^\\(?FY\\s*\\d{4}\\)?\\s*:?/i.test(trimmedValue) ||\r\n\t\t\t\t\t/^(\\()?\\d{4}\\s*[-–]\\s*\\d{2,4}(\\))?\\s*:?/.test(trimmedValue) ||\r\n\t\t\t\t\t/^(Year|Yr|Annual)\\s*\\d{4}/i.test(trimmedValue)\r\n\t\t\t\t);\r\n\t\t\t};\r\n\r\n\t\t\tconst safeToNumber = (value, fieldKeyForContext = props.fieldKey) => {\r\n\t\t\t\tif (value === null || value === undefined) return 0; // Default to 0 for null/undefined\r\n\t\t\t\tif (typeof value === \"number\") return value;\r\n\r\n\t\t\t\tif (typeof value === \"string\") {\r\n\t\t\t\t\tconst sVal = value.trim();\r\n\t\t\t\t\tconst yiMatch = sVal.match(/(-?[\\d.]+)\\s*亿/);\r\n\t\t\t\t\tif (yiMatch) return parseFloat(yiMatch[1]) * 100000000;\r\n\r\n\t\t\t\t\tconst wanMatch = sVal.match(/(-?[\\d.]+)\\s*万/);\r\n\t\t\t\t\tif (wanMatch) return parseFloat(wanMatch[1]) * 10000;\r\n\r\n\t\t\t\t\tconst qianMatch = sVal.match(/(-?[\\d.]+)\\s*千/);\r\n\t\t\t\t\tif (qianMatch) return parseFloat(qianMatch[1]) * 1000;\r\n\r\n\t\t\t\t\t// More robust percentage check, allowing space\r\n\t\t\t\t\tconst percentMatch = sVal.match(/(-?\\d+\\.?\\d*)\\s*%/);\r\n\t\t\t\t\tif (percentMatch) return parseFloat(percentMatch[1]);\r\n\r\n\t\t\t\t\t// Clean common currency symbols and other non-numeric chars for general numbers\r\n\t\t\t\t\tconst num = parseFloat(sVal.replace(/[^\\d.-]/g, \"\"));\r\n\t\t\t\t\treturn isNaN(num) ? 0 : num; // Default to 0 if parsing fails\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If it's an object, try to get 'value' or 'raw'\r\n\t\t\t\tif (typeof value === \"object\" && value !== null) {\r\n\t\t\t\t\treturn safeToNumber(value.value ?? value.raw, fieldKeyForContext);\r\n\t\t\t\t}\r\n\t\t\t\treturn 0; // Default for unhandled types\r\n\t\t\t};\r\n\r\n\t\t\tconst isValidPieData = computed(() => {\r\n\t\t\t\tif (!pieData.value.length) return false;\r\n\t\t\t\treturn pieData.value.every(\r\n\t\t\t\t\titem =>\r\n\t\t\t\t\t\t!isYearEntry(item.name) && !isYearEntry(item.value?.toString())\r\n\t\t\t\t);\r\n\t\t\t});\r\n\r\n\t\t\tconst pieData = computed(() => {\r\n\t\t\t\tif (!processedField.value) return [];\r\n\r\n\t\t\t\tconst processItemForPie = (item, index) => {\r\n\t\t\t\t\tlet rawValueForPie = item?.raw ?? item?.value ?? item;\r\n\t\t\t\t\tif (isYearEntry(rawValueForPie?.toString())) return null;\r\n\r\n\t\t\t\t\tconst valueNum = safeToNumber(rawValueForPie);\r\n\t\t\t\t\tif (valueNum === null || valueNum < 0) return null; // Pie charts usually don't handle negative\r\n\r\n\t\t\t\t\tlet name = \"项目\";\r\n\t\t\t\t\tif (typeof item === \"object\" && item !== null) {\r\n\t\t\t\t\t\tconst rawText =\r\n\t\t\t\t\t\t\titem.raw?.toString() ||\r\n\t\t\t\t\t\t\titem.value?.toString() ||\r\n\t\t\t\t\t\t\tJSON.stringify(item);\r\n\t\t\t\t\t\tname = rawText.replace(/:\\s*\\d+\\.?\\d*%?/g, \"\").trim();\r\n\t\t\t\t\t} else if (typeof item === \"string\") {\r\n\t\t\t\t\t\tname = item.replace(/:\\s*\\d+\\.?\\d*%?/g, \"\").trim();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (isYearEntry(name)) return null;\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tvalue: Math.min(100, valueNum),\r\n\t\t\t\t\t\tname: name || `项 ${index + 1}`,\r\n\t\t\t\t\t\tindex\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif (Array.isArray(processedField.value)) {\r\n\t\t\t\t\treturn processedField.value\r\n\t\t\t\t\t\t.map(processItemForPie)\r\n\t\t\t\t\t\t.filter(item => item !== null && item.value > 0); // Ensure positive value for pie slices\r\n\t\t\t\t}\r\n\t\t\t\tconst result = processItemForPie(processedField.value, 0);\r\n\t\t\t\treturn result && result.value > 0 ? [result] : [];\r\n\t\t\t});\r\n\r\n\t\t\tconst formatSimpleText = fieldValue => {\r\n\t\t\t\tif (!fieldValue) return \"-\";\r\n\r\n\t\t\t\tconst formatSingleItem = item => {\r\n\t\t\t\t\tif (typeof item === \"object\" && item !== null) {\r\n\t\t\t\t\t\tlet text = item.raw?.toString() ?? item.value?.toString() ?? \"-\";\r\n\t\t\t\t\t\t// if (item.unit) text += ` ${item.unit}`; // Units might make it too long for simple text\r\n\t\t\t\t\t\t// if (item.year) text += ` (${item.year})`;\r\n\t\t\t\t\t\treturn text;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn item?.toString() ?? \"-\";\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif (Array.isArray(fieldValue)) {\r\n\t\t\t\t\tconst items = fieldValue.map(formatSingleItem);\r\n\t\t\t\t\tconst joined = items.join(\"; \");\r\n\t\t\t\t\treturn joined.length > 40 ? joined.substring(0, 37) + \"...\" : joined;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst text = formatSingleItem(fieldValue);\r\n\t\t\t\treturn text.length > 50 ? text.substring(0, 47) + \"...\" : text;\r\n\t\t\t};\r\n\r\n\t\t\tconst simpleBarData = computed(() => {\r\n\t\t\t\tif (!processedField.value) return [];\r\n\t\t\t\tlet values = [];\r\n\r\n\t\t\t\tconst processItemForBar = item => {\r\n\t\t\t\t\tconst val = item?.value ?? item?.raw;\r\n\t\t\t\t\tif (val === undefined || val === null || isYearEntry(val?.toString()))\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\treturn safeToNumber(val);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif (Array.isArray(processedField.value)) {\r\n\t\t\t\t\tvalues = processedField.value\r\n\t\t\t\t\t\t.map(processItemForBar)\r\n\t\t\t\t\t\t.filter(v => v !== null);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst singleVal = processItemForBar(processedField.value);\r\n\t\t\t\t\tif (singleVal !== null) values = [singleVal];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (values.length === 0) return [];\r\n\t\t\t\treturn values.map((v, index) => ({ value: v, index }));\r\n\t\t\t});\r\n\r\n\t\t\tconst lineData = computed(() => {\r\n\t\t\t\tif (!processedField.value) return [];\r\n\t\t\t\tlet itemsToProcess = [];\r\n\r\n\t\t\t\tif (Array.isArray(processedField.value)) {\r\n\t\t\t\t\titemsToProcess = processedField.value;\r\n\t\t\t\t} else if (processedField.value !== null) {\r\n\t\t\t\t\titemsToProcess = [processedField.value];\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn itemsToProcess\r\n\t\t\t\t\t.map((item, index) => {\r\n\t\t\t\t\t\tconst rawVal = item?.raw ?? item?.value;\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\trawVal === undefined ||\r\n\t\t\t\t\t\t\trawVal === null ||\r\n\t\t\t\t\t\t\tisYearEntry(rawVal?.toString())\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\tconst valueNum = safeToNumber(rawVal);\r\n\t\t\t\t\t\tif (valueNum === null) return null;\r\n\t\t\t\t\t\treturn { x: index, y: valueNum, raw: rawVal, index };\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.filter(item => item !== null);\r\n\t\t\t});\r\n\r\n\t\t\tconst hasData = computed(() => {\r\n\t\t\t\tif (!processedField.value) return false;\r\n\t\t\t\tif (props.visualization === \"bar-chart\")\r\n\t\t\t\t\treturn simpleBarData.value.length > 0;\r\n\t\t\t\tif (props.visualization === \"line-chart\")\r\n\t\t\t\t\treturn lineData.value.length > 0;\r\n\t\t\t\tif (props.visualization === \"pie-chart\")\r\n\t\t\t\t\treturn pieData.value.length > 0 && isValidPieData.value;\r\n\r\n\t\t\t\t// For text or default\r\n\t\t\t\tif (Array.isArray(processedField.value))\r\n\t\t\t\t\treturn processedField.value.length > 0;\r\n\t\t\t\tif (typeof processedField.value === \"object\")\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\tObject.keys(processedField.value).length > 0 &&\r\n\t\t\t\t\t\tprocessedField.value.value !== undefined\r\n\t\t\t\t\t);\r\n\t\t\t\treturn (\r\n\t\t\t\t\tString(\r\n\t\t\t\t\t\tprocessedField.value?.value ??\r\n\t\t\t\t\t\t\tprocessedField.value?.raw ??\r\n\t\t\t\t\t\t\tprocessedField.value\r\n\t\t\t\t\t).trim().length > 0\r\n\t\t\t\t);\r\n\t\t\t});\r\n\r\n\t\t\treturn {\r\n\t\t\t\thoveredIndex,\r\n\t\t\t\tactiveIndex,\r\n\t\t\t\tisTextHovered,\r\n\t\t\t\tpieContainer,\r\n\t\t\t\tbarContainer,\r\n\t\t\t\tlineContainer,\r\n\t\t\t\thandleTextHover,\r\n\t\t\t\tresetHover,\r\n\t\t\t\thandleTextClick,\r\n\t\t\t\tformatSimpleText,\r\n\t\t\t\thasData,\r\n\t\t\t\tisValidPieData,\r\n\t\t\t\tpieData,\r\n\t\t\t\tsimpleBarData,\r\n\t\t\t\tlineData, // Expose for direct use in render functions\r\n\t\t\t\tformatNumber,\r\n\t\t\t\tprocessedField\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n</script>\r\n\r\n<style scoped>\r\n\t.simple-chart {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tposition: relative;\r\n\t\tfont-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\r\n\t\t\tHelvetica, Arial, sans-serif;\r\n\t\toverflow: hidden; /* Prevent tooltips from making scrollbars appear on the cell */\r\n\t}\r\n\r\n\t/* 文本样式 */\r\n\t.simple-text {\r\n\t\ttext-align: center;\r\n\t\tfont-size: 13px; /* Slightly smaller */\r\n\t\tword-break: break-word;\r\n\t\tpadding: 6px;\r\n\t\tcursor: pointer;\r\n\t\ttransition: all 0.2s ease;\r\n\t\tborder-radius: 4px;\r\n\t\tbackground-color: #f8f9fa;\r\n\t\tmax-width: 100%;\r\n\t\tcolor: #333;\r\n\t\tline-height: 1.4;\r\n\t}\r\n\r\n\t.simple-text:hover {\r\n\t\tbackground-color: #e9ecef;\r\n\t\ttransform: translateY(-1px);\r\n\t\tbox-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);\r\n\t}\r\n\r\n\t.text-tooltip {\r\n\t\tposition: absolute;\r\n\t\tbottom: 105%; /* Position above the text */\r\n\t\tleft: 50%;\r\n\t\ttransform: translateX(-50%);\r\n\t\tbackground-color: rgba(0, 0, 0, 0.75);\r\n\t\tcolor: white;\r\n\t\tpadding: 4px 8px;\r\n\t\tborder-radius: 4px;\r\n\t\tfont-size: 11px;\r\n\t\tpointer-events: none;\r\n\t\twhite-space: nowrap;\r\n\t\tz-index: 10;\r\n\t}\r\n\r\n\t/* D3图表容器 */\r\n\t.d3-chart-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tmin-height: 70px; /* Ensure a minimum drawing area */\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t/* D3 tooltip样式 (defined inline in JS for dynamic positioning) */\r\n\t/* .d3-tooltip {} */\r\n\r\n\t/* 无数据样式 */\r\n\t.no-data {\r\n\t\tcolor: #aaa;\r\n\t\tfont-style: italic;\r\n\t\tpadding: 10px;\r\n\t\tfont-size: 13px;\r\n\t}\r\n\r\n\t/* Bar/Line labels - ensure they are not selectable */\r\n\t:deep(.bar-label),\r\n\t:deep(.line-label) {\r\n\t\tfont-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\r\n\t\t\tHelvetica, Arial, sans-serif;\r\n\t\tpointer-events: none;\r\n\t\tuser-select: none;\r\n\t}\r\n\r\n\t@media (max-width: 768px) {\r\n\t\t.simple-text {\r\n\t\t\tfont-size: 12px;\r\n\t\t}\r\n\t\t.d3-chart-container {\r\n\t\t\tmin-height: 60px;\r\n\t\t}\r\n\t\t:deep(.bar-label),\r\n\t\t:deep(.line-label) {\r\n\t\t\tfont-size: 9px;\r\n\t\t}\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}