{"ast":null,"code":"import { ref, computed, onMounted, onUnmounted } from \"vue\";\nimport * as d3 from \"d3\";\nimport bus from \"@/js/eventBus.js\";\nimport { renderLineChart, renderBarChart, renderPieChart, renderNonVisualChart, renderRadarChart, renderStackedBarChart, renderScatterChart } from \"@/js/chartUtils\";\nexport default {\n  __name: 'TextPopup',\n  props: {\n    visible: Boolean,\n    // 是否显示弹出框\n    content: String,\n    // 弹出框内容\n    containerClass: String,\n    // 图表容器类名\n    containerRef: String\n  },\n  emits: [\"close\"],\n  setup(__props, _ref) {\n    let {\n      expose: __expose,\n      emit: __emit\n    } = _ref;\n    __expose();\n    const props = __props;\n    const emit = __emit; // 定义 close 事件\n\n    const currentView = ref(\"text\"); // 当前视图模式：text 或 visual\n    const loading = ref(false); // 可视化图表加载状态\n    const isChartRendered = ref(false); // 标记图表是否已经渲染\n    const cachedChartData = ref(null); // 缓存图表数据\n    const cachedChartType = ref(null); // 缓存图表类型\n\n    // 判断内容是否是表格\n    const isTable = computed(() => {\n      return /<table.*?>.*?<\\/table>/s.test(props.content);\n    });\n\n    // 关闭弹出框\n    const close = () => {\n      // 清除图表\n      d3.select(`.${props.containerClass}`).html(\"\");\n      isChartRendered.value = false; // 重置图表渲染状态\n      cachedChartData.value = null; // 清除缓存数据\n      cachedChartType.value = null; // 清除缓存类型\n      emit(\"close\");\n    };\n\n    // 切换视图\n    const switchView = async view => {\n      currentView.value = view;\n      if (view === \"visual\") {\n        if (!isChartRendered.value) {\n          // 如果图表未渲染，则触发渲染\n          loading.value = true;\n          await processText();\n          loading.value = false;\n          isChartRendered.value = true; // 标记图表已渲染\n        } else if (cachedChartData.value && cachedChartType.value) {\n          // 如果图表已渲染且有缓存数据，则直接使用缓存数据重新渲染\n          renderChart(cachedChartData.value, cachedChartType.value);\n        }\n      }\n    };\n\n    // 获取可视化 JSON 数据\n    async function processText() {\n      try {\n        api.post(\"process_text\", {\n          text: props.content.toString().trim()\n        }, data => {\n          if (data.error) {\n            console.error(\"后端返回的错误:\", data.error);\n            alert(`处理文章内容时出错: ${data.message}`);\n            return;\n          }\n          const jsonData = data.json_data;\n          console.log(\"后端返回的数据:\", jsonData);\n\n          // 缓存图表数据和类型\n          cachedChartData.value = jsonData;\n          cachedChartType.value = data.chart_classification;\n\n          // 清空之前的图表\n          d3.select(`.${props.containerClass}`).html(\"\");\n          if (data.data_type === \"Non-Visual\") {\n            renderNonVisualChart(`.${props.containerClass}`, data, {\n              message: \"当前数据无法可视化\"\n            });\n          } else {\n            renderChart(jsonData, data.chart_classification);\n          }\n        });\n      } catch (error) {\n        console.error(\"处理文章内容时出错:\", error);\n        alert(\"处理文章内容时出错，请稍后重试\");\n      }\n    }\n\n    // 渲染图表\n    function renderChart(rawJsonData, chartType) {\n      if (!rawJsonData || typeof rawJsonData !== \"object\") {\n        console.log(\"rawJsonData:\", rawJsonData);\n        console.log(\"type_rawJsonData:\", typeof rawJsonData);\n        renderNonVisualChart(`.${props.containerClass}`, rawJsonData, {\n          message: \"JSON 数据无效\"\n        });\n        console.error(\"JSON 数据无效:\", rawJsonData);\n        return;\n      }\n      console.log(\"***rawJsonData:\", rawJsonData);\n      const data = rawJsonData.data;\n      const options = rawJsonData.options || {};\n      console.log(\"***data:\", data);\n\n      // 根据图表类型渲染\n      if (chartType === \"Line Chart\") {\n        renderLineChart(`.${props.containerClass}`, data, options);\n      } else if (chartType === \"Bar Chart\") {\n        renderBarChart(`.${props.containerClass}`, rawJsonData);\n      } else if (chartType === \"Pie Chart\") {\n        renderPieChart(`.${props.containerClass}`, data, options);\n      } else if (chartType === \"Stacked Bar Chart\") {\n        renderStackedBarChart(`.${props.containerClass}`, data, options);\n      } else if (chartType === \"Radar Chart\") {\n        renderRadarChart(`.${props.containerClass}`, rawJsonData);\n      } else if (chartType === \"Scatter Chart\") {\n        renderScatterChart(`.${props.containerClass}`, rawJsonData);\n      } else {\n        console.error(\"未知的图表类型:\", chartType);\n      }\n    }\n\n    // 监听 updateChart 事件\n    onMounted(() => {\n      bus.on(\"updateChart1\", data => {\n        console.log(\"data1:\", data);\n        const jsonData = JSON.parse(JSON.stringify(data.jsonData)); // 深拷贝\n        d3.select(`.${props.containerClass}`).html(\"\");\n        renderChart(jsonData, data.chartType);\n        isChartRendered.value = true;\n        cachedChartData.value = jsonData;\n        cachedChartType.value = data.chartType;\n      });\n      bus.on(\"updateChart3\", data => {\n        console.log(\"data3:\", data);\n        const jsonData = JSON.parse(JSON.stringify(data.jsonData)); // 深拷贝\n        d3.select(`.${props.containerClass}`).html(\"\");\n        renderChart(jsonData, data.chartType);\n        isChartRendered.value = true;\n        cachedChartData.value = jsonData;\n        cachedChartType.value = data.chartType;\n      });\n    });\n\n    // 组件卸载时清除事件监听器\n    onUnmounted(() => {\n      bus.off(\"updateChart1\");\n      bus.off(\"updateChart3\");\n    });\n    const __returned__ = {\n      props,\n      emit,\n      currentView,\n      loading,\n      isChartRendered,\n      cachedChartData,\n      cachedChartType,\n      isTable,\n      close,\n      switchView,\n      processText,\n      renderChart,\n      ref,\n      computed,\n      onMounted,\n      onUnmounted,\n      get d3() {\n        return d3;\n      },\n      get bus() {\n        return bus;\n      },\n      get renderLineChart() {\n        return renderLineChart;\n      },\n      get renderBarChart() {\n        return renderBarChart;\n      },\n      get renderPieChart() {\n        return renderPieChart;\n      },\n      get renderNonVisualChart() {\n        return renderNonVisualChart;\n      },\n      get renderRadarChart() {\n        return renderRadarChart;\n      },\n      get renderStackedBarChart() {\n        return renderStackedBarChart;\n      },\n      get renderScatterChart() {\n        return renderScatterChart;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","onUnmounted","d3","bus","renderLineChart","renderBarChart","renderPieChart","renderNonVisualChart","renderRadarChart","renderStackedBarChart","renderScatterChart","props","__props","emit","__emit","currentView","loading","isChartRendered","cachedChartData","cachedChartType","isTable","test","content","close","select","containerClass","html","value","switchView","view","processText","renderChart","api","post","text","toString","trim","data","error","console","alert","message","jsonData","json_data","log","chart_classification","data_type","rawJsonData","chartType","options","on","JSON","parse","stringify","off"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/TextPopup.vue"],"sourcesContent":["<template>\r\n\t<!-- 遮罩层 -->\r\n\t<div v-if=\"visible\" class=\"overlay\" @click=\"close\"></div>\r\n\r\n\t<!-- 弹出框 -->\r\n\t<div v-if=\"visible\" class=\"text-popup\" @click.stop>\r\n\t\t<!-- 切换视图按钮 -->\r\n\t\t<div class=\"view-switcher\">\r\n\t\t\t<button\r\n\t\t\t\t@click.prevent.stop=\"switchView('text')\"\r\n\t\t\t\t:class=\"{ active: currentView === 'text' }\"\r\n\t\t\t\ttitle=\"文本视图\">\r\n\t\t\t\t<font-awesome-icon :icon=\"['fas', 'align-left']\" />\r\n\t\t\t</button>\r\n\r\n\t\t\t<button\r\n\t\t\t\t@click.prevent.stop=\"switchView('visual')\"\r\n\t\t\t\t:class=\"{ active: currentView === 'visual' }\"\r\n\t\t\t\ttitle=\"可视化视图\">\r\n\t\t\t\t<font-awesome-icon :icon=\"['fas', 'chart-bar']\" />\r\n\t\t\t</button>\r\n\t\t</div>\r\n\r\n\t\t<!-- 文本视图 -->\r\n\t\t<div v-show=\"currentView === 'text'\">\r\n\t\t\t<div v-if=\"isTable\" class=\"table-container\" v-html=\"content\"></div>\r\n\t\t\t<div v-else>\r\n\t\t\t\t<p>{{ content }}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- 可视化视图 -->\r\n\t\t<div v-show=\"currentView === 'visual'\" class=\"visualization-container\">\r\n\t\t\t<div v-if=\"loading\" class=\"loading-spinner\"></div>\r\n\t\t\t<div v-else :class=\"containerClass\"></div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, onMounted, onUnmounted } from \"vue\";\r\n\timport * as d3 from \"d3\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\timport {\r\n\t\trenderLineChart,\r\n\t\trenderBarChart,\r\n\t\trenderPieChart,\r\n\t\trenderNonVisualChart,\r\n\t\trenderRadarChart,\r\n\t\trenderStackedBarChart,\r\n\t\trenderScatterChart\r\n\t} from \"@/js/chartUtils\";\r\n\r\n\tconst props = defineProps({\r\n\t\tvisible: Boolean, // 是否显示弹出框\r\n\t\tcontent: String, // 弹出框内容\r\n\t\tcontainerClass: String, // 图表容器类名\r\n\t\tcontainerRef: String\r\n\t});\r\n\r\n\tconst emit = defineEmits([\"close\"]); // 定义 close 事件\r\n\r\n\tconst currentView = ref(\"text\"); // 当前视图模式：text 或 visual\r\n\tconst loading = ref(false); // 可视化图表加载状态\r\n\tconst isChartRendered = ref(false); // 标记图表是否已经渲染\r\n\tconst cachedChartData = ref(null); // 缓存图表数据\r\n\tconst cachedChartType = ref(null); // 缓存图表类型\r\n\r\n\t// 判断内容是否是表格\r\n\tconst isTable = computed(() => {\r\n\t\treturn /<table.*?>.*?<\\/table>/s.test(props.content);\r\n\t});\r\n\r\n\t// 关闭弹出框\r\n\tconst close = () => {\r\n\t\t// 清除图表\r\n\t\td3.select(`.${props.containerClass}`).html(\"\");\r\n\t\tisChartRendered.value = false; // 重置图表渲染状态\r\n\t\tcachedChartData.value = null; // 清除缓存数据\r\n\t\tcachedChartType.value = null; // 清除缓存类型\r\n\t\temit(\"close\");\r\n\t};\r\n\r\n\t// 切换视图\r\n\tconst switchView = async view => {\r\n\t\tcurrentView.value = view;\r\n\t\tif (view === \"visual\") {\r\n\t\t\tif (!isChartRendered.value) {\r\n\t\t\t\t// 如果图表未渲染，则触发渲染\r\n\t\t\t\tloading.value = true;\r\n\t\t\t\tawait processText();\r\n\t\t\t\tloading.value = false;\r\n\t\t\t\tisChartRendered.value = true; // 标记图表已渲染\r\n\t\t\t} else if (cachedChartData.value && cachedChartType.value) {\r\n\t\t\t\t// 如果图表已渲染且有缓存数据，则直接使用缓存数据重新渲染\r\n\t\t\t\trenderChart(cachedChartData.value, cachedChartType.value);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// 获取可视化 JSON 数据\r\n\tasync function processText() {\r\n\t\ttry {\r\n\t\t\tapi.post(\r\n\t\t\t\t\"process_text\",\r\n\t\t\t\t{ text: props.content.toString().trim() },\r\n\t\t\t\tdata => {\r\n\t\t\t\t\tif (data.error) {\r\n\t\t\t\t\t\tconsole.error(\"后端返回的错误:\", data.error);\r\n\t\t\t\t\t\talert(`处理文章内容时出错: ${data.message}`);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst jsonData = data.json_data;\r\n\t\t\t\t\tconsole.log(\"后端返回的数据:\", jsonData);\r\n\r\n\t\t\t\t\t// 缓存图表数据和类型\r\n\t\t\t\t\tcachedChartData.value = jsonData;\r\n\t\t\t\t\tcachedChartType.value = data.chart_classification;\r\n\r\n\t\t\t\t\t// 清空之前的图表\r\n\t\t\t\t\td3.select(`.${props.containerClass}`).html(\"\");\r\n\r\n\t\t\t\t\tif (data.data_type === \"Non-Visual\") {\r\n\t\t\t\t\t\trenderNonVisualChart(`.${props.containerClass}`, data, {\r\n\t\t\t\t\t\t\tmessage: \"当前数据无法可视化\"\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trenderChart(jsonData, data.chart_classification);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"处理文章内容时出错:\", error);\r\n\t\t\talert(\"处理文章内容时出错，请稍后重试\");\r\n\t\t}\r\n\t}\r\n\r\n\t// 渲染图表\r\n\tfunction renderChart(rawJsonData, chartType) {\r\n\t\tif (!rawJsonData || typeof rawJsonData !== \"object\") {\r\n\t\t\tconsole.log(\"rawJsonData:\", rawJsonData);\r\n\t\t\tconsole.log(\"type_rawJsonData:\", typeof rawJsonData);\r\n\t\t\trenderNonVisualChart(`.${props.containerClass}`, rawJsonData, {\r\n\t\t\t\tmessage: \"JSON 数据无效\"\r\n\t\t\t});\r\n\t\t\tconsole.error(\"JSON 数据无效:\", rawJsonData);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconsole.log(\"***rawJsonData:\", rawJsonData);\r\n\t\tconst data = rawJsonData.data;\r\n\t\tconst options = rawJsonData.options || {};\r\n\t\tconsole.log(\"***data:\", data);\r\n\r\n\t\t// 根据图表类型渲染\r\n\t\tif (chartType === \"Line Chart\") {\r\n\t\t\trenderLineChart(`.${props.containerClass}`, data, options);\r\n\t\t} else if (chartType === \"Bar Chart\") {\r\n\t\t\trenderBarChart(`.${props.containerClass}`, rawJsonData);\r\n\t\t} else if (chartType === \"Pie Chart\") {\r\n\t\t\trenderPieChart(`.${props.containerClass}`, data, options);\r\n\t\t} else if (chartType === \"Stacked Bar Chart\") {\r\n\t\t\trenderStackedBarChart(`.${props.containerClass}`, data, options);\r\n\t\t} else if (chartType === \"Radar Chart\") {\r\n\t\t\trenderRadarChart(`.${props.containerClass}`, rawJsonData);\r\n\t\t} else if (chartType === \"Scatter Chart\") {\r\n\t\t\trenderScatterChart(`.${props.containerClass}`, rawJsonData);\r\n\t\t} else {\r\n\t\t\tconsole.error(\"未知的图表类型:\", chartType);\r\n\t\t}\r\n\t}\r\n\r\n\t// 监听 updateChart 事件\r\n\tonMounted(() => {\r\n\t\tbus.on(\"updateChart1\", data => {\r\n\t\t\tconsole.log(\"data1:\", data);\r\n\t\t\tconst jsonData = JSON.parse(JSON.stringify(data.jsonData)); // 深拷贝\r\n\t\t\td3.select(`.${props.containerClass}`).html(\"\");\r\n\t\t\trenderChart(jsonData, data.chartType);\r\n\t\t\tisChartRendered.value = true;\r\n\t\t\tcachedChartData.value = jsonData;\r\n\t\t\tcachedChartType.value = data.chartType;\r\n\t\t});\r\n\r\n\t\tbus.on(\"updateChart3\", data => {\r\n\t\t\tconsole.log(\"data3:\", data);\r\n\t\t\tconst jsonData = JSON.parse(JSON.stringify(data.jsonData)); // 深拷贝\r\n\t\t\td3.select(`.${props.containerClass}`).html(\"\");\r\n\t\t\trenderChart(jsonData, data.chartType);\r\n\t\t\tisChartRendered.value = true;\r\n\t\t\tcachedChartData.value = jsonData;\r\n\t\t\tcachedChartType.value = data.chartType;\r\n\t\t});\r\n\t});\r\n\r\n\t// 组件卸载时清除事件监听器\r\n\tonUnmounted(() => {\r\n\t\tbus.off(\"updateChart1\");\r\n\t\tbus.off(\"updateChart3\");\r\n\t});\r\n</script>\r\n<style scoped>\r\n\t/* 遮罩层（固定在 Div1 或 Div3 内部） */ /* 遮罩层（固定在 Div1 或 Div3 内部） */\r\n\t.overlay {\r\n\t\tposition: absolute; /* 关键：相对于父容器定位 */\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tbackground: rgba(255, 255, 255, 0.1); /* 半透明背景 */\r\n\t\tbackdrop-filter: blur(10px); /* 背景模糊效果 */\r\n\t\tz-index: 90;\r\n\t\tanimation: fadeIn 0.3s ease-in-out;\r\n\t}\r\n\r\n\t/* 选中内容的弹出框（固定在 Div1 或 Div3 内部） */\r\n\t.text-popup {\r\n\t\tposition: absolute; /* 关键：相对于父容器定位 */\r\n\t\ttop: 50%;\r\n\t\tleft: 50%;\r\n\t\ttransform: translate(-50%, -50%);\r\n\t\twidth: 90%; /* 宽度占 Div1 或 Div3 的 80% */\r\n\t\tmax-height: 80vh; /* 限制最大高度 */\r\n\t\toverflow: auto; /* 添加滚动条 */\r\n\t\tbackground: rgba(255, 255, 255, 0.98); /* 更亮的背景 */\r\n\t\tpadding: 25px; /* 增加内边距 */\r\n\t\tbox-shadow: 0px 10px 30px rgba(0, 0, 0, 0.4); /* 更明显的阴影 */\r\n\t\tborder-radius: 12px; /* 圆角更大 */\r\n\t\ttext-align: center;\r\n\t\tfont-size: 0.8vw; /* 固定字体大小 */\r\n\t\tfont-weight: 500; /* 中等字体粗细 */\r\n\t\tline-height: 1.6; /* 增加行高 */\r\n\t\tcolor: #333; /* 更深的字体颜色 */\r\n\t\tz-index: 100;\r\n\t\tcursor: pointer;\r\n\t\tbackdrop-filter: blur(20px); /* 更强烈的模糊效果 */\r\n\t\tanimation: fadeIn 0.3s ease-in-out;\r\n\t\tborder: 1px solid rgba(255, 255, 255, 0.2); /* 添加边框 */\r\n\t\tmargin: 0;\r\n\t}\r\n\r\n\t/* 视图切换按钮 */\r\n\t.view-switcher {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\tmargin-bottom: 20px;\r\n\t}\r\n\r\n\t.view-switcher button {\r\n\t\tpadding: 25px;\r\n\t\tmargin: 0 5px;\r\n\t\tborder: none;\r\n\t\tborder-radius: 50%;\r\n\t\tbackground-color: #f0f0f0;\r\n\t\tcursor: pointer;\r\n\t\ttransition: background-color 0.3s ease, transform 0.2s ease;\r\n\t\twidth: 36px;\r\n\t\theight: 36px;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t}\r\n\r\n\t.view-switcher button:hover {\r\n\t\tbackground-color: #ddd;\r\n\t\ttransform: scale(1.1);\r\n\t}\r\n\r\n\t.view-switcher button.active {\r\n\t\tbackground-color: #0077b6;\r\n\t\tcolor: white;\r\n\t}\r\n\r\n\t/* 可视化容器 */\r\n\t.visualization-container {\r\n\t\twidth: 100%;\r\n\t\theight: 300px;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t}\r\n\t/* 表格样式 */\r\n\t.table-container {\r\n\t\twidth: 100%;\r\n\t\toverflow: auto;\r\n\t\tfont-family: \"Arial\", sans-serif;\r\n\t}\r\n\r\n\t.text-popup p {\r\n\t\tmargin: 0;\r\n\t\tpadding: 10px 15px;\r\n\t\tfont-size: 1.2rem;\r\n\t\tcolor: #333;\r\n\t\ttext-align: justify;\r\n\t\tline-height: 1.8;\r\n\t\tword-break: break-word;\r\n\t\twhite-space: pre-wrap;\r\n\t\tmax-width: 90%;\r\n\t\tborder-left: 4px solid #3498db;\r\n\t\tbackground: rgba(255, 255, 255, 0.9);\r\n\t\tbox-shadow: inset 2px 2px 8px rgba(0, 0, 0, 0.05);\r\n\t}\r\n\t/* 使用 ::v-deep 穿透 scoped 样式 */\r\n\t::v-deep .custom-table {\r\n\t\twidth: 100%;\r\n\t\tborder-collapse: collapse;\r\n\t\tmargin: 5px auto;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder: 1px solid #0077b6; /* 外边框颜色 */\r\n\t\tborder-radius: 8px;\r\n\t\toverflow: hidden;\r\n\t\tfont-family: \"Arial\", sans-serif;\r\n\t\tfont-size: 16px; /* 设置整体字体大小 */\r\n\t\tcolor: #333333; /* 设置默认文字颜色 */\r\n\t}\r\n\r\n\t/* 表头样式 */\r\n\t::v-deep .custom-table th {\r\n\t\tbackground-color: #0077b6; /* 深蓝色表头 */\r\n\t\tfont-weight: bold;\r\n\t\tcolor: #ffffff; /* 文字白色 */\r\n\t\ttext-align: left;\r\n\t\tpadding: 12px;\r\n\t\tborder: 1px solid #0077b6; /* 表头单元格边框 */\r\n\t\tfont-size: 18px; /* 表头字体稍大，增强层次感 */\r\n\t}\r\n\r\n\t/* 单元格样式 */\r\n\t::v-deep .custom-table th,\r\n\t::v-deep .custom-table td {\r\n\t\tpadding: 12px;\r\n\t\tborder: 1px solid #0077b6; /* 统一的单元格边框 */\r\n\t\tfont-size: 16px; /* 调整字体大小 */\r\n\t}\r\n\r\n\t/* 悬停行高亮 */\r\n\t::v-deep .custom-table tr:hover {\r\n\t\tbackground-color: #cbe8f6; /* 浅蓝色 */\r\n\t\ttransition: background-color 0.3s ease-in-out;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}