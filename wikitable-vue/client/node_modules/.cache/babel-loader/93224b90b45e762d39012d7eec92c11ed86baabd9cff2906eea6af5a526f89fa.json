{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, vModelText as _vModelText, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-2e821d1e\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"chat-container\"\n};\nconst _hoisted_2 = {\n  class: \"chat-history\"\n};\nconst _hoisted_3 = {\n  class: \"message-content\"\n};\nconst _hoisted_4 = {\n  class: \"input-container\"\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"vis\"\n}, [/*#__PURE__*/_createCommentVNode(\" 可用于显示图形或其他内容 \")], -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 历史对话记录 \"), _createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.chatHistory, (message, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass(['message', message.role])\n    }, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"strong\", null, _toDisplayString(message.role === \"user\" ? \"用户\" : \"GPT\") + \":\", 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(message.content), 1 /* TEXT */)])], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" 输入框和操作按钮 \"), _createElementVNode(\"div\", _hoisted_4, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.userQuestion = $event),\n    rows: \"4\",\n    placeholder: \"请输入你想问的问题...\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.userQuestion]]), _createElementVNode(\"div\", {\n    class: \"button-container\"\n  }, [_createElementVNode(\"button\", {\n    onClick: $setup.askQuestion\n  }, \"发送\"), _createElementVNode(\"button\", {\n    onClick: $setup.compareTexts\n  }, \"对比文章\")])]), _createCommentVNode(\" 视觉内容容器 \"), _hoisted_5]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createCommentVNode","_createElementBlock","_hoisted_1","_hoisted_2","_Fragment","_renderList","$setup","chatHistory","message","index","key","_normalizeClass","role","_hoisted_3","_toDisplayString","content","_hoisted_4","_cache","$event","userQuestion","rows","placeholder","onClick","askQuestion","compareTexts","_hoisted_5"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\Div2.vue"],"sourcesContent":["<template>\r\n\t<div class=\"chat-container\">\r\n\t\t<!-- 历史对话记录 -->\r\n\t\t<div class=\"chat-history\">\r\n\t\t\t<div\r\n\t\t\t\tv-for=\"(message, index) in chatHistory\"\r\n\t\t\t\t:key=\"index\"\r\n\t\t\t\t:class=\"['message', message.role]\">\r\n\t\t\t\t<div class=\"message-content\">\r\n\t\t\t\t\t<strong>{{ message.role === \"user\" ? \"用户\" : \"GPT\" }}:</strong>\r\n\t\t\t\t\t<p>{{ message.content }}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- 输入框和操作按钮 -->\r\n\t\t<div class=\"input-container\">\r\n\t\t\t<textarea\r\n\t\t\t\tv-model=\"userQuestion\"\r\n\t\t\t\trows=\"4\"\r\n\t\t\t\tplaceholder=\"请输入你想问的问题...\"></textarea>\r\n\t\t\t<div class=\"button-container\">\r\n\t\t\t\t<button @click=\"askQuestion\">发送</button>\r\n\t\t\t\t<button @click=\"compareTexts\">对比文章</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- 视觉内容容器 -->\r\n\t\t<div class=\"vis\">\r\n\t\t\t<!-- 可用于显示图形或其他内容 -->\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted } from \"vue\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\r\n\tconst userQuestion = ref(\"\"); // 用户输入的问题\r\n\tconst chatHistory = ref([]); // 历史对话记录\r\n\tconst selectText2 = ref(\"\"); // 左侧选中文本\r\n\tconst selectText3 = ref(\"\"); // 右侧选中文本\r\n\r\n\tlet offDiv1, offDiv3;\r\n\r\n\tonMounted(() => {\r\n\t\toffDiv1 = bus.on(\"div1Event\", data => {\r\n\t\t\tconsole.log(\"Received data from div1:\", data); // 确认是否接收到数据\r\n\t\t\thandleSelection(data, \"div1\");\r\n\t\t});\r\n\t\toffDiv3 = bus.on(\"div3Event\", data => handleSelection(data, \"div3\"));\r\n\t});\r\n\r\n\tonUnmounted(() => {\r\n\t\toffDiv1();\r\n\t\toffDiv3();\r\n\t});\r\n\r\n\t// 处理选中文本\r\n\tfunction handleSelection(data, source) {\r\n\t\tconsole.log(\"Received data:\", data); // 调试输出接收到的数据\r\n\t\tconst plainText = getPlainTextFromSelection(data.content);\r\n\t\tif (source === \"div1\") {\r\n\t\t\tselectText2.value = plainText;\r\n\t\t} else if (source === \"div3\") {\r\n\t\t\tselectText3.value = plainText;\r\n\t\t}\r\n\t}\r\n\r\n\t// 从 HTML 内容中提取纯文本\r\n\tfunction getPlainTextFromSelection(htmlContent) {\r\n\t\tconst container = document.createElement(\"div\");\r\n\t\tcontainer.innerHTML = htmlContent;\r\n\t\tconsole.log(\"Extracted text:\", container.innerText); // 输出提取的纯文本\r\n\t\treturn container.innerText || container.textContent || \"\";\r\n\t}\r\n\r\n\t// 向 GPT 提问\r\n\tasync function askQuestion() {\r\n\t\tif (!userQuestion.value) {\r\n\t\t\talert(\"请输入问题！\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 将用户的问题添加到历史记录\r\n\t\tchatHistory.value.push({ role: \"user\", content: userQuestion.value });\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await api.post(\r\n\t\t\t\t\"gpt_ask\",\r\n\t\t\t\t{ question: userQuestion.value },\r\n\t\t\t\tdata => {\r\n\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\t// 将 GPT 的回答添加到历史记录\r\n\t\t\t\t\t\tchatHistory.value.push({ role: \"assistant\", content: data.answer });\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.error(\"提问失败:\", data.error);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"请求失败:\", error);\r\n\t\t}\r\n\r\n\t\t// 清空输入框\r\n\t\tuserQuestion.value = \"\";\r\n\t}\r\n\r\n\t// 对比文章\r\n\tasync function compareTexts() {\r\n\t\tif (!selectText2.value || !selectText3.value) {\r\n\t\t\talert(\"请先选择两段文本！\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tapi.post(\r\n\t\t\t\t\"gpt_compare\",\r\n\t\t\t\t{ text1: selectText2.value, text2: selectText3.value },\r\n\t\t\t\tdata => {\r\n\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\t// 将对比结果添加到历史记录\r\n\t\t\t\t\t\tchatHistory.value.push({ role: \"assistant\", content: data.result });\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.error(\"对比失败:\", data.error);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"请求失败:\", error);\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style scoped>\r\n\t/* 容器样式 */\r\n\t.chat-container {\r\n\t\twidth: 700px; /* 设置初始宽度 */\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\theight: 100%;\r\n\t\tmax-width: 800px;\r\n\t\tmargin: 0 auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #f9f9f9;\r\n\t\tborder-radius: 8px;\r\n\t\tbox-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t/* 历史对话记录 */\r\n\t.chat-history {\r\n\t\tflex: 1;\r\n\t\toverflow-y: auto;\r\n\t\tmargin-bottom: 20px;\r\n\t\tpadding: 10px;\r\n\t\tbackground-color: #fff;\r\n\t\tborder: 1px solid #ddd;\r\n\t\tborder-radius: 8px;\r\n\t}\r\n\r\n\t/* 消息样式 */\r\n\t.message {\r\n\t\tmargin-bottom: 15px;\r\n\t}\r\n\r\n\t.message-content {\r\n\t\tpadding: 10px;\r\n\t\tborder-radius: 8px;\r\n\t\tbackground-color: #e0e0e0;\r\n\t}\r\n\r\n\t.message.user .message-content {\r\n\t\tbackground-color: #d1e7dd;\r\n\t\ttext-align: right;\r\n\t}\r\n\r\n\t.message.assistant .message-content {\r\n\t\tbackground-color: #f8f9fa;\r\n\t\ttext-align: left;\r\n\t}\r\n\r\n\t/* 输入框和按钮容器 */\r\n\t.input-container {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tgap: 5px;\r\n\t}\r\n\r\n\ttextarea {\r\n\t\twidth: 100%;\r\n\t\tresize: none;\r\n\t\tpadding: 10px;\r\n\t\tfont-size: 16px;\r\n\t\tborder: 1px solid #ccc;\r\n\t\tborder-radius: 8px;\r\n\t}\r\n\r\n\t.button-container {\r\n\t\tdisplay: flex;\r\n\t\tgap: 10px;\r\n\t}\r\n\r\n\tbutton {\r\n\t\tpadding: 10px 20px;\r\n\t\tbackground-color: #4caf50;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tborder-radius: 8px;\r\n\t\tcursor: pointer;\r\n\t\tfont-size: 14px;\r\n\t\tflex: 1;\r\n\t}\r\n\r\n\tbutton:hover {\r\n\t\tbackground-color: #45a049;\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,KAAK,EAAC;AAAgB;;EAErBA,KAAK,EAAC;AAAc;;EAKlBA,KAAK,EAAC;AAAiB;;EAQzBA,KAAK,EAAC;AAAiB;gEAY5BC,mBAAA,CAEM;EAFDD,KAAK,EAAC;AAAK,I,aACfE,mBAAA,kBAAqB,C;;uBA5BvBC,mBAAA,CA8BM,OA9BNC,UA8BM,GA7BLF,mBAAA,YAAe,EACfD,mBAAA,CAUM,OAVNI,UAUM,I,kBATLF,mBAAA,CAQMG,SAAA,QAZTC,WAAA,CAK+BC,MAAA,CAAAC,WAAW,EAL1C,CAKYC,OAAO,EAAEC,KAAK;yBADvBR,mBAAA,CAQM;MANJS,GAAG,EAAED,KAAK;MACVX,KAAK,EAPVa,eAAA,aAOwBH,OAAO,CAACI,IAAI;QAChCb,mBAAA,CAGM,OAHNc,UAGM,GAFLd,mBAAA,CAA8D,gBAAAe,gBAAA,CAAnDN,OAAO,CAACI,IAAI,8BAA6B,GAAC,iBACrDb,mBAAA,CAA4B,WAAAe,gBAAA,CAAtBN,OAAO,CAACO,OAAO,iB;oCAKxBf,mBAAA,cAAiB,EACjBD,mBAAA,CASM,OATNiB,UASM,G,gBARLjB,mBAAA,CAGuC;IApB1C,uBAAAkB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAkBaZ,MAAA,CAAAa,YAAY,GAAAD,MAAA;IACrBE,IAAI,EAAC,GAAG;IACRC,WAAW,EAAC;iDAFHf,MAAA,CAAAa,YAAY,E,GAGtBpB,mBAAA,CAGM;IAHDD,KAAK,EAAC;EAAkB,IAC5BC,mBAAA,CAAwC;IAA/BuB,OAAK,EAAEhB,MAAA,CAAAiB;EAAW,GAAE,IAAE,GAC/BxB,mBAAA,CAA2C;IAAlCuB,OAAK,EAAEhB,MAAA,CAAAkB;EAAY,GAAE,MAAI,E,KAIpCxB,mBAAA,YAAe,EACfyB,UAEM,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}