{"ast":null,"code":"/**\r\n * 增强版维基百科信息框解析器\r\n * @param {HTMLElement|null} infoboxElement - 信息框DOM元素\r\n * @returns {Object} 标准化的信息框数据结构\r\n */\nexport function parseGenericInfobox(infoboxElement) {\n  // 默认返回值\n  const defaultResult = {\n    title: \"\",\n    type: \"none\",\n    data: {}\n  };\n\n  // 增强输入验证\n  console.log('原始Infobox元素:', {\n    element: infoboxElement,\n    html: infoboxElement?.outerHTML?.substring(0, 200)\n  });\n  if (!infoboxElement?.querySelector) {\n    console.warn(\"无效的Infobox元素:\", infoboxElement);\n    return defaultResult;\n  }\n  try {\n    // 使用更安全的克隆方式\n    const infobox = infoboxElement.cloneNode(true);\n\n    // 更精确的清理策略\n    const elementsToRemove = ['.reference', '.mw-editsection', 'sup.reference', 'style', 'script', '.noprint', '.hidden', '[style*=\"display:none\"]'];\n    elementsToRemove.forEach(selector => {\n      infobox.querySelectorAll(selector).forEach(el => el.remove());\n    });\n\n    // 提取标题（增强版）\n    const title = extractEnhancedTitle(infobox) || \"\";\n\n    // 检测信息框类型（增强版）\n    const type = detectInfoboxTypeEnhanced(infobox) || \"通用\";\n\n    // 提取数据行（容错处理）\n    const data = {};\n    const rows = Array.from(infobox.querySelectorAll('tr')).filter(tr => {\n      const th = tr.querySelector('th');\n      const td = tr.querySelector('td');\n      return th && td && th.textContent.trim() && td.textContent.trim();\n    });\n    rows.forEach(row => {\n      try {\n        const th = row.querySelector('th');\n        const td = row.querySelector('td');\n        const label = normalizeFieldLabelEnhanced(th.textContent);\n        if (label) {\n          data[label] = extractFieldValueEnhanced(td);\n        }\n      } catch (e) {\n        console.warn(`处理行失败: ${e.message}`, row);\n      }\n    });\n\n    // 处理特殊结构（合并单元格、图像等）\n    processSpecialStructures(infobox, data);\n    const result = {\n      title: title.trim(),\n      type,\n      data: Object.keys(data).length > 0 ? data : {},\n      _rawHtml: infobox.outerHTML.substring(0, 500) // 调试用\n    };\n    console.log('解析结果:', result);\n    return result;\n  } catch (error) {\n    console.error(\"Infobox解析失败:\", error);\n    // 应急处理方案\n    try {\n      return {\n        title: infoboxElement.querySelector('th, caption')?.textContent || \"无标题\",\n        type: \"minimal\",\n        data: {\n          原始内容: infoboxElement.textContent.substring(0, 300)\n        }\n      };\n    } catch (e) {\n      return defaultResult;\n    }\n  }\n}\n\n/* 增强版辅助函数 */\nfunction extractEnhancedTitle(infobox) {\n  const titleSources = [() => infobox.querySelector('caption')?.textContent, () => infobox.querySelector('.infobox-title')?.textContent, () => infobox.querySelector('.infoboxcaption')?.textContent, () => infobox.querySelector('th[colspan=\"2\"]')?.textContent, () => {\n    const prev = infobox.previousElementSibling;\n    return /^h[1-6]$/i.test(prev?.tagName) ? prev.textContent : null;\n  }, () => {\n    const firstTh = infobox.querySelector('th:not(th th)');\n    return firstTh?.textContent;\n  }];\n  for (const source of titleSources) {\n    try {\n      const title = source();\n      if (title?.trim()) return title.trim();\n    } catch (e) {\n      console.warn('标题提取源失败:', e);\n    }\n  }\n  return '';\n}\nfunction detectInfoboxTypeEnhanced(infobox) {\n  const typePatterns = [{\n    pattern: /(country|nation|state|国旗|国歌)/,\n    type: \"国家\"\n  }, {\n    pattern: /(person|people|bio|birth|death|人物|出生)/,\n    type: \"人物\"\n  }, {\n    pattern: /(company|corporation|business|revenue|公司|企业)/,\n    type: \"公司\"\n  }, {\n    pattern: /(film|movie|television|director|runtime|电影|导演)/,\n    type: \"影视\"\n  }, {\n    pattern: /(animal|plant|species|genus|动物|植物)/,\n    type: \"生物\"\n  }, {\n    pattern: /(location|place|settlement|address|地点|位置)/,\n    type: \"地点\"\n  }, {\n    pattern: /(event|occurrence|date|time|事件|日期)/,\n    type: \"事件\"\n  }];\n  const context = `${infobox.className} ${infobox.textContent}`.toLowerCase();\n  for (const {\n    pattern,\n    type\n  } of typePatterns) {\n    if (pattern.test(context)) {\n      return type;\n    }\n  }\n  return \"通用\";\n}\nfunction normalizeFieldLabelEnhanced(label) {\n  return (label || \"\").replace(/[:：]\\s*$/, '').replace(/\\s+/g, ' ').replace(/[[\\]]/g, '').replace(/\\(.*?\\)/g, '').normalize('NFKC') // 标准化Unicode\n  .trim();\n}\nfunction extractFieldValueEnhanced(tdElement) {\n  const td = tdElement.cloneNode(true);\n\n  // 清理内容\n  ['sup', 'span[style*=\"display:none\"]', '.hidden'].forEach(selector => {\n    td.querySelectorAll(selector).forEach(el => el.remove());\n  });\n\n  // 提取文本\n  const textValue = td.textContent.replace(/\\[\\d+\\]/g, '').replace(/\\s+/g, ' ').trim();\n\n  // 提取链接\n  const links = Array.from(td.querySelectorAll('a[href]')).filter(a => a.textContent.trim()).map(a => ({\n    text: a.textContent.trim(),\n    href: a.href,\n    isWikiLink: /wikipedia\\.org\\/wiki\\//.test(a.href)\n  }));\n\n  // 提取图片\n  const image = td.querySelector('img');\n  const imageData = image ? {\n    src: image.src.startsWith('//') ? `https:${image.src}` : image.src,\n    alt: image.alt || '',\n    caption: image.title || ''\n  } : null;\n  return {\n    text: textValue,\n    html: td.innerHTML.trim(),\n    links,\n    image: imageData,\n    dataType: detectValueType(textValue, links, imageData)\n  };\n}\nfunction processSpecialStructures(infobox, data) {\n  // 处理合并单元格\n  infobox.querySelectorAll('tr:has(td[colspan])').forEach(row => {\n    const td = row.querySelector('td[colspan]');\n    if (td?.colSpan > 1) {\n      data[\"备注\"] = extractFieldValueEnhanced(td);\n    }\n  });\n\n  // 处理图像集\n  infobox.querySelectorAll('.infobox-image').forEach(imgContainer => {\n    const img = imgContainer.querySelector('img');\n    if (img) {\n      data[\"主图像\"] = {\n        src: img.src,\n        alt: img.alt,\n        caption: img.title || imgContainer.textContent.trim()\n      };\n    }\n  });\n}\nfunction detectValueType(text, links, image) {\n  if (image) return 'image';\n  if (links.length > 0) {\n    if (/^(参见|见|链接)/.test(text)) return 'link';\n    if (links.length === 1 && text === links[0].text) return 'link';\n  }\n  if (!text) return 'unknown';\n\n  // 日期检测（支持多种格式）\n  if (/(\\d{4}[年\\-]\\d{1,2}[月\\-]\\d{1,2}日?)|(\\d{1,2}[月\\/]\\d{1,2}[日\\/]\\d{4})/.test(text)) {\n    return 'date';\n  }\n\n  // 数值检测\n  if (/^[\\d,\\.]+$/.test(text.replace(/[^\\d,\\.]/g, ''))) {\n    return 'number';\n  }\n  return links.length > 0 ? 'text_with_links' : 'text';\n}","map":{"version":3,"names":["parseGenericInfobox","infoboxElement","defaultResult","title","type","data","console","log","element","html","outerHTML","substring","querySelector","warn","infobox","cloneNode","elementsToRemove","forEach","selector","querySelectorAll","el","remove","extractEnhancedTitle","detectInfoboxTypeEnhanced","rows","Array","from","filter","tr","th","td","textContent","trim","row","label","normalizeFieldLabelEnhanced","extractFieldValueEnhanced","e","message","processSpecialStructures","result","Object","keys","length","_rawHtml","error","原始内容","titleSources","prev","previousElementSibling","test","tagName","firstTh","source","typePatterns","pattern","context","className","toLowerCase","replace","normalize","tdElement","textValue","links","a","map","text","href","isWikiLink","image","imageData","src","startsWith","alt","caption","innerHTML","dataType","detectValueType","colSpan","imgContainer","img"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/js/wikiInfoboxParser.js"],"sourcesContent":["/**\r\n * 增强版维基百科信息框解析器\r\n * @param {HTMLElement|null} infoboxElement - 信息框DOM元素\r\n * @returns {Object} 标准化的信息框数据结构\r\n */\r\nexport function parseGenericInfobox(infoboxElement) {\r\n  // 默认返回值\r\n  const defaultResult = {\r\n    title: \"\",\r\n    type: \"none\",\r\n    data: {}\r\n  };\r\n\r\n  // 增强输入验证\r\n  console.log('原始Infobox元素:', {\r\n    element: infoboxElement,\r\n    html: infoboxElement?.outerHTML?.substring(0, 200)\r\n  });\r\n\r\n  if (!infoboxElement?.querySelector) {\r\n    console.warn(\"无效的Infobox元素:\", infoboxElement);\r\n    return defaultResult;\r\n  }\r\n\r\n  try {\r\n    // 使用更安全的克隆方式\r\n    const infobox = infoboxElement.cloneNode(true);\r\n    \r\n    // 更精确的清理策略\r\n    const elementsToRemove = [\r\n      '.reference', '.mw-editsection', \r\n      'sup.reference', 'style', 'script',\r\n      '.noprint', '.hidden', '[style*=\"display:none\"]'\r\n    ];\r\n    \r\n    elementsToRemove.forEach(selector => {\r\n      infobox.querySelectorAll(selector).forEach(el => el.remove());\r\n    });\r\n\r\n    // 提取标题（增强版）\r\n    const title = extractEnhancedTitle(infobox) || \"\";\r\n\r\n    // 检测信息框类型（增强版）\r\n    const type = detectInfoboxTypeEnhanced(infobox) || \"通用\";\r\n\r\n    // 提取数据行（容错处理）\r\n    const data = {};\r\n    const rows = Array.from(infobox.querySelectorAll('tr')).filter(tr => {\r\n      const th = tr.querySelector('th');\r\n      const td = tr.querySelector('td');\r\n      return th && td && th.textContent.trim() && td.textContent.trim();\r\n    });\r\n\r\n    rows.forEach(row => {\r\n      try {\r\n        const th = row.querySelector('th');\r\n        const td = row.querySelector('td');\r\n        \r\n        const label = normalizeFieldLabelEnhanced(th.textContent);\r\n        if (label) {\r\n          data[label] = extractFieldValueEnhanced(td);\r\n        }\r\n      } catch (e) {\r\n        console.warn(`处理行失败: ${e.message}`, row);\r\n      }\r\n    });\r\n\r\n    // 处理特殊结构（合并单元格、图像等）\r\n    processSpecialStructures(infobox, data);\r\n\r\n    const result = {\r\n      title: title.trim(),\r\n      type,\r\n      data: Object.keys(data).length > 0 ? data : {},\r\n      _rawHtml: infobox.outerHTML.substring(0, 500) // 调试用\r\n    };\r\n\r\n    console.log('解析结果:', result);\r\n    return result;\r\n\r\n  } catch (error) {\r\n    console.error(\"Infobox解析失败:\", error);\r\n    // 应急处理方案\r\n    try {\r\n      return {\r\n        title: infoboxElement.querySelector('th, caption')?.textContent || \"无标题\",\r\n        type: \"minimal\",\r\n        data: {\r\n          原始内容: infoboxElement.textContent.substring(0, 300)\r\n        }\r\n      };\r\n    } catch (e) {\r\n      return defaultResult;\r\n    }\r\n  }\r\n}\r\n\r\n/* 增强版辅助函数 */\r\nfunction extractEnhancedTitle(infobox) {\r\n  const titleSources = [\r\n    () => infobox.querySelector('caption')?.textContent,\r\n    () => infobox.querySelector('.infobox-title')?.textContent,\r\n    () => infobox.querySelector('.infoboxcaption')?.textContent,\r\n    () => infobox.querySelector('th[colspan=\"2\"]')?.textContent,\r\n    () => {\r\n      const prev = infobox.previousElementSibling;\r\n      return /^h[1-6]$/i.test(prev?.tagName) ? prev.textContent : null;\r\n    },\r\n    () => {\r\n      const firstTh = infobox.querySelector('th:not(th th)');\r\n      return firstTh?.textContent;\r\n    }\r\n  ];\r\n\r\n  for (const source of titleSources) {\r\n    try {\r\n      const title = source();\r\n      if (title?.trim()) return title.trim();\r\n    } catch (e) {\r\n      console.warn('标题提取源失败:', e);\r\n    }\r\n  }\r\n  return '';\r\n}\r\n\r\nfunction detectInfoboxTypeEnhanced(infobox) {\r\n  const typePatterns = [\r\n    { pattern: /(country|nation|state|国旗|国歌)/, type: \"国家\" },\r\n    { pattern: /(person|people|bio|birth|death|人物|出生)/, type: \"人物\" },\r\n    { pattern: /(company|corporation|business|revenue|公司|企业)/, type: \"公司\" },\r\n    { pattern: /(film|movie|television|director|runtime|电影|导演)/, type: \"影视\" },\r\n    { pattern: /(animal|plant|species|genus|动物|植物)/, type: \"生物\" },\r\n    { pattern: /(location|place|settlement|address|地点|位置)/, type: \"地点\" },\r\n    { pattern: /(event|occurrence|date|time|事件|日期)/, type: \"事件\" }\r\n  ];\r\n\r\n  const context = `${infobox.className} ${infobox.textContent}`.toLowerCase();\r\n\r\n  for (const { pattern, type } of typePatterns) {\r\n    if (pattern.test(context)) {\r\n      return type;\r\n    }\r\n  }\r\n\r\n  return \"通用\";\r\n}\r\n\r\nfunction normalizeFieldLabelEnhanced(label) {\r\n  return (label || \"\")\r\n    .replace(/[:：]\\s*$/, '')\r\n    .replace(/\\s+/g, ' ')\r\n    .replace(/[[\\]]/g, '')\r\n    .replace(/\\(.*?\\)/g, '')\r\n    .normalize('NFKC') // 标准化Unicode\r\n    .trim();\r\n}\r\n\r\nfunction extractFieldValueEnhanced(tdElement) {\r\n  const td = tdElement.cloneNode(true);\r\n  \r\n  // 清理内容\r\n  ['sup', 'span[style*=\"display:none\"]', '.hidden'].forEach(selector => {\r\n    td.querySelectorAll(selector).forEach(el => el.remove());\r\n  });\r\n\r\n  // 提取文本\r\n  const textValue = td.textContent\r\n    .replace(/\\[\\d+\\]/g, '')\r\n    .replace(/\\s+/g, ' ')\r\n    .trim();\r\n\r\n  // 提取链接\r\n  const links = Array.from(td.querySelectorAll('a[href]'))\r\n    .filter(a => a.textContent.trim())\r\n    .map(a => ({\r\n      text: a.textContent.trim(),\r\n      href: a.href,\r\n      isWikiLink: /wikipedia\\.org\\/wiki\\//.test(a.href)\r\n    }));\r\n\r\n  // 提取图片\r\n  const image = td.querySelector('img');\r\n  const imageData = image ? {\r\n    src: image.src.startsWith('//') ? `https:${image.src}` : image.src,\r\n    alt: image.alt || '',\r\n    caption: image.title || ''\r\n  } : null;\r\n\r\n  return {\r\n    text: textValue,\r\n    html: td.innerHTML.trim(),\r\n    links,\r\n    image: imageData,\r\n    dataType: detectValueType(textValue, links, imageData)\r\n  };\r\n}\r\n\r\nfunction processSpecialStructures(infobox, data) {\r\n  // 处理合并单元格\r\n  infobox.querySelectorAll('tr:has(td[colspan])').forEach(row => {\r\n    const td = row.querySelector('td[colspan]');\r\n    if (td?.colSpan > 1) {\r\n      data[\"备注\"] = extractFieldValueEnhanced(td);\r\n    }\r\n  });\r\n\r\n  // 处理图像集\r\n  infobox.querySelectorAll('.infobox-image').forEach(imgContainer => {\r\n    const img = imgContainer.querySelector('img');\r\n    if (img) {\r\n      data[\"主图像\"] = {\r\n        src: img.src,\r\n        alt: img.alt,\r\n        caption: img.title || imgContainer.textContent.trim()\r\n      };\r\n    }\r\n  });\r\n}\r\n\r\nfunction detectValueType(text, links, image) {\r\n  if (image) return 'image';\r\n  if (links.length > 0) {\r\n    if (/^(参见|见|链接)/.test(text)) return 'link';\r\n    if (links.length === 1 && text === links[0].text) return 'link';\r\n  }\r\n  \r\n  if (!text) return 'unknown';\r\n  \r\n  // 日期检测（支持多种格式）\r\n  if (/(\\d{4}[年\\-]\\d{1,2}[月\\-]\\d{1,2}日?)|(\\d{1,2}[月\\/]\\d{1,2}[日\\/]\\d{4})/.test(text)) {\r\n    return 'date';\r\n  }\r\n  \r\n  // 数值检测\r\n  if (/^[\\d,\\.]+$/.test(text.replace(/[^\\d,\\.]/g, ''))) {\r\n    return 'number';\r\n  }\r\n  \r\n  return links.length > 0 ? 'text_with_links' : 'text';\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}