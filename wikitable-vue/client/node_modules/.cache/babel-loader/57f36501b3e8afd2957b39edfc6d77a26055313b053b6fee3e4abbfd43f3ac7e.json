{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createVNode as _createVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-ea6f3360\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"compare-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"table-grid\"\n};\nconst _hoisted_3 = {\n  class: \"header left-column\"\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"header middle-column\"\n}, \"对比属性\", -1 /* HOISTED */));\nconst _hoisted_5 = {\n  class: \"header right-column\"\n};\nconst _hoisted_6 = {\n  class: \"cell left-column\"\n};\nconst _hoisted_7 = {\n  class: \"stats-summary\"\n};\nconst _hoisted_8 = {\n  key: 1,\n  class: \"no-data\"\n};\nconst _hoisted_9 = {\n  class: \"cell middle-column\"\n};\nconst _hoisted_10 = {\n  class: \"attribute-name\"\n};\nconst _hoisted_11 = {\n  class: \"attribute-desc\"\n};\nconst _hoisted_12 = {\n  class: \"original-field\"\n};\nconst _hoisted_13 = {\n  class: \"cell right-column\"\n};\nconst _hoisted_14 = {\n  class: \"stats-summary\"\n};\nconst _hoisted_15 = {\n  key: 1,\n  class: \"no-data\"\n};\nconst _hoisted_16 = {\n  key: 1,\n  class: \"empty-state\"\n};\nconst _hoisted_17 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", null, \"请先从左/右侧选择两个表格进行对比\", -1 /* HOISTED */));\nconst _hoisted_18 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"format-tip\"\n}, \"支持任意HTML表格格式，自动识别数据结构\", -1 /* HOISTED */));\nconst _hoisted_19 = [_hoisted_17, _hoisted_18];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$setup.hasData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createCommentVNode(\" 表头 \"), _createElementVNode(\"div\", _hoisted_3, _toDisplayString($setup.processedTable1.title), 1 /* TEXT */), _hoisted_4, _createElementVNode(\"div\", _hoisted_5, _toDisplayString($setup.processedTable2.title), 1 /* TEXT */), _createCommentVNode(\" 数据行 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.commonAttributes, attr => {\n    return _openBlock(), _createElementBlock(_Fragment, {\n      key: attr\n    }, [_createElementVNode(\"div\", _hoisted_6, [$setup.hasDataForAttribute($setup.processedTable1, attr) ? (_openBlock(), _createElementBlock(_Fragment, {\n      key: 0\n    }, [_createVNode($setup[\"SparklineChart\"], {\n      data: $setup.getSparklineData($setup.processedTable1, attr)\n    }, null, 8 /* PROPS */, [\"data\"]), _createElementVNode(\"div\", _hoisted_7, \" 平均: \" + _toDisplayString($setup.getAverage($setup.processedTable1, attr)) + \" | 最大: \" + _toDisplayString($setup.getMax($setup.processedTable1, attr)), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_8, \"无数据\"))]), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"div\", _hoisted_10, _toDisplayString(attr), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_11, _toDisplayString($setup.getAttributeDescription(attr)), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_12, \"字段名: \" + _toDisplayString(attr), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_13, [$setup.hasDataForAttribute($setup.processedTable2, attr) ? (_openBlock(), _createElementBlock(_Fragment, {\n      key: 0\n    }, [_createVNode($setup[\"SparklineChart\"], {\n      data: $setup.getSparklineData($setup.processedTable2, attr)\n    }, null, 8 /* PROPS */, [\"data\"]), _createElementVNode(\"div\", _hoisted_14, \" 平均: \" + _toDisplayString($setup.getAverage($setup.processedTable2, attr)) + \" | 最大: \" + _toDisplayString($setup.getMax($setup.processedTable2, attr)), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_15, \"无数据\"))])], 64 /* STABLE_FRAGMENT */);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_16, [..._hoisted_19]))]);\n}","map":{"version":3,"names":["class","key","_createElementVNode","_hoisted_17","_hoisted_18","_createElementBlock","_hoisted_1","$setup","hasData","_hoisted_2","_createCommentVNode","_hoisted_3","_toDisplayString","processedTable1","title","_hoisted_4","_hoisted_5","processedTable2","_Fragment","_renderList","commonAttributes","attr","_hoisted_6","hasDataForAttribute","_createVNode","data","getSparklineData","_hoisted_7","getAverage","getMax","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","getAttributeDescription","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_19"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\CompareTable.vue"],"sourcesContent":["<template>\r\n\t<div class=\"compare-container\">\r\n\t\t<div v-if=\"hasData\" class=\"table-grid\">\r\n\t\t\t<!-- 表头 -->\r\n\t\t\t<div class=\"header left-column\">{{ processedTable1.title }}</div>\r\n\t\t\t<div class=\"header middle-column\">对比属性</div>\r\n\t\t\t<div class=\"header right-column\">{{ processedTable2.title }}</div>\r\n\r\n\t\t\t<!-- 数据行 -->\r\n\t\t\t<template v-for=\"attr in commonAttributes\" :key=\"attr\">\r\n\t\t\t\t<div class=\"cell left-column\">\r\n\t\t\t\t\t<template v-if=\"hasDataForAttribute(processedTable1, attr)\">\r\n\t\t\t\t\t\t<SparklineChart :data=\"getSparklineData(processedTable1, attr)\" />\r\n\t\t\t\t\t\t<div class=\"stats-summary\">\r\n\t\t\t\t\t\t\t平均: {{ getAverage(processedTable1, attr) }} | 最大:\r\n\t\t\t\t\t\t\t{{ getMax(processedTable1, attr) }}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</template>\r\n\t\t\t\t\t<div v-else class=\"no-data\">无数据</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div class=\"cell middle-column\">\r\n\t\t\t\t\t<div class=\"attribute-name\">{{ attr }}</div>\r\n\t\t\t\t\t<div class=\"attribute-desc\">{{ getAttributeDescription(attr) }}</div>\r\n\t\t\t\t\t<div class=\"original-field\">字段名: {{ attr }}</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div class=\"cell right-column\">\r\n\t\t\t\t\t<template v-if=\"hasDataForAttribute(processedTable2, attr)\">\r\n\t\t\t\t\t\t<SparklineChart :data=\"getSparklineData(processedTable2, attr)\" />\r\n\t\t\t\t\t\t<div class=\"stats-summary\">\r\n\t\t\t\t\t\t\t平均: {{ getAverage(processedTable2, attr) }} | 最大:\r\n\t\t\t\t\t\t\t{{ getMax(processedTable2, attr) }}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</template>\r\n\t\t\t\t\t<div v-else class=\"no-data\">无数据</div>\r\n\t\t\t\t</div>\r\n\t\t\t</template>\r\n\t\t</div>\r\n\t\t<div v-else class=\"empty-state\">\r\n\t\t\t<div>请先从左/右侧选择两个表格进行对比</div>\r\n\t\t\t<div class=\"format-tip\">支持任意HTML表格格式，自动识别数据结构</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, watch } from \"vue\";\r\n\timport SparklineChart from \"./SparklineChart.vue\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdiv1RawData: String,\r\n\t\tdiv3RawData: String\r\n\t});\r\n\r\n\t// 标准化表格数据\r\n\tconst processedTable1 = ref({ title: \"表格1\", rows: [], columns: [] });\r\n\tconst processedTable2 = ref({ title: \"表格2\", rows: [], columns: [] });\r\n\r\n\t// 计算属性\r\n\tconst hasData = computed(() => {\r\n\t\treturn (\r\n\t\t\tprops.div1RawData &&\r\n\t\t\tprops.div3RawData &&\r\n\t\t\tprocessedTable1.value.columns.length > 0 &&\r\n\t\t\tprocessedTable2.value.columns.length > 0\r\n\t\t);\r\n\t});\r\n\r\n\tconst commonAttributes = computed(() => {\r\n\t\tconst attrs1 = processedTable1.value.rows || [];\r\n\t\tconst attrs2 = processedTable2.value.rows || [];\r\n\t\treturn attrs1.filter(\r\n\t\t\tattr =>\r\n\t\t\t\tattrs2.includes(attr) &&\r\n\t\t\t\t(hasDataForAttribute(processedTable1.value, attr) ||\r\n\t\t\t\t\thasDataForAttribute(processedTable2.value, attr))\r\n\t\t);\r\n\t});\r\n\r\n\t// 监听数据变化\r\n\twatch(\r\n\t\t() => props.div1RawData,\r\n\t\thtml => {\r\n\t\t\tif (html) {\r\n\t\t\t\tprocessedTable1.value = parseTableToStandardJSON(html, \"表格1\");\r\n\t\t\t\tif (props.div3RawData) sendToBackend();\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\twatch(\r\n\t\t() => props.div3RawData,\r\n\t\thtml => {\r\n\t\t\tif (html) {\r\n\t\t\t\tprocessedTable2.value = parseTableToStandardJSON(html, \"表格2\");\r\n\t\t\t\tif (props.div1RawData) sendToBackend();\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\t/**\r\n\t * 通用表格解析方法\r\n\t */\r\n\tfunction parseTableToStandardJSON(html, defaultTitle = \"未命名表格\") {\r\n\t\tconst result = {\r\n\t\t\ttitle: extractTitleFromHTML(html) || defaultTitle,\r\n\t\t\trows: [],\r\n\t\t\tcolumns: [],\r\n\t\t\ttimeSeriesData: {}\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\t\tconst table = doc.querySelector(\"table\");\r\n\t\t\tif (!table) return result;\r\n\r\n\t\t\t// 提取表头\r\n\t\t\tconst headerCells = table.querySelector(\"tr\")?.children || [];\r\n\t\t\tresult.rows = Array.from(headerCells).map(cell => {\r\n\t\t\t\treturn cell.textContent\r\n\t\t\t\t\t.replace(/[\\n†*]/g, \"\")\r\n\t\t\t\t\t.trim()\r\n\t\t\t\t\t.replace(/\\s+/g, \" \");\r\n\t\t\t});\r\n\r\n\t\t\t// 检查是否有Year列\r\n\t\t\tconst yearColumnIndex = result.rows.findIndex(header =>\r\n\t\t\t\theader.toLowerCase().includes(\"year\")\r\n\t\t\t);\r\n\t\t\tconst hasYearColumn = yearColumnIndex !== -1;\r\n\r\n\t\t\t// 提取数据行\r\n\t\t\tconst dataRows = Array.from(\r\n\t\t\t\ttable.querySelectorAll(\"tr:not(:first-child)\")\r\n\t\t\t);\r\n\r\n\t\t\t// 辅助函数：清理年份格式\r\n\t\t\tconst cleanYear = yearStr => {\r\n\t\t\t\tif (!yearStr) return null;\r\n\r\n\t\t\t\t// 清理特殊字符\r\n\t\t\t\tlet cleaned = yearStr.toString().replace(/[†*]/g, \"\").trim();\r\n\r\n\t\t\t\t// 处理\"2016–17\"这种格式（注意这里的–是en dash，不是普通的-）\r\n\t\t\t\tif (/^\\d{4}[\\u2013\\u2014-]\\d{2}$/.test(cleaned)) {\r\n\t\t\t\t\tconst startYear = cleaned.substring(0, 4);\r\n\t\t\t\t\treturn startYear; // 只取起始年份\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 提取数字部分\r\n\t\t\t\tconst yearMatch = cleaned.match(/\\d{4}/);\r\n\t\t\t\treturn yearMatch ? parseInt(yearMatch[0]) : null;\r\n\t\t\t};\r\n\r\n\t\t\t// 辅助函数：检查是否是合并单元格行\r\n\t\t\tconst isMergedRow = row => {\r\n\t\t\t\tconst cells = Array.from(row.children);\r\n\t\t\t\t// 如果第一列或第二列有rowspan/colspan属性，可能是合并行\r\n\t\t\t\treturn cells.some(\r\n\t\t\t\t\t(cell, index) =>\r\n\t\t\t\t\t\tindex < 2 &&\r\n\t\t\t\t\t\t(cell.hasAttribute(\"rowspan\") || cell.hasAttribute(\"colspan\"))\r\n\t\t\t\t);\r\n\t\t\t};\r\n\r\n\t\t\tdataRows.forEach(row => {\r\n\t\t\t\tconst cells = Array.from(row.children);\r\n\t\t\t\tif (cells.length === 0) return;\r\n\r\n\t\t\t\t// 跳过合并单元格行（通常是汇总行或注释行）\r\n\t\t\t\tif (isMergedRow(row)) {\r\n\t\t\t\t\tconsole.log(\"跳过合并行:\", row.textContent.trim());\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst recordName = cells[0].textContent.trim();\r\n\t\t\t\tconst recordData = {};\r\n\r\n\t\t\t\tresult.rows.forEach((header, index) => {\r\n\t\t\t\t\tif (index < cells.length) {\r\n\t\t\t\t\t\tlet value = cells[index].textContent.trim();\r\n\t\t\t\t\t\t// 特殊处理Year列\r\n\t\t\t\t\t\tif (index === yearColumnIndex) {\r\n\t\t\t\t\t\t\tvalue = cleanYear(value);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvalue = smartValueConversion(value);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\trecordData[header] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// 只有当Year列有有效值时才添加到结果中\r\n\t\t\t\tif (!hasYearColumn || (hasYearColumn && recordData.Year)) {\r\n\t\t\t\t\tresult.columns.push({\r\n\t\t\t\t\t\tname: recordName,\r\n\t\t\t\t\t\tdata: recordData\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// 收集时间序列数据\r\n\t\t\t\t\tif (hasYearColumn && recordData.Year) {\r\n\t\t\t\t\t\tconst year = recordData.Year;\r\n\r\n\t\t\t\t\t\tresult.rows.forEach(header => {\r\n\t\t\t\t\t\t\t// 跳过Year列和非数值属性\r\n\t\t\t\t\t\t\tif (header === \"Year\" || typeof recordData[header] !== \"number\") {\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (!result.timeSeriesData[header]) {\r\n\t\t\t\t\t\t\t\tresult.timeSeriesData[header] = [];\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tresult.timeSeriesData[header].push({\r\n\t\t\t\t\t\t\t\tyear: year,\r\n\t\t\t\t\t\t\t\tvalue: recordData[header],\r\n\t\t\t\t\t\t\t\trecordName: recordName\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log(\"跳过无效Year的行:\", recordName);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// 对每个属性的时间序列数据按年份排序\r\n\t\t\tif (hasYearColumn) {\r\n\t\t\t\tObject.keys(result.timeSeriesData).forEach(attr => {\r\n\t\t\t\t\tresult.timeSeriesData[attr].sort((a, b) => a.year - b.year);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tconsole.log(\"解析后的表格数据:\", result);\r\n\t\t\treturn result;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"表格解析错误:\", error);\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 智能值类型转换\r\n\t */\r\n\tfunction smartValueConversion(rawValue) {\r\n\t\t// 处理空值和特殊占位符\r\n\t\tif (!rawValue || [\"-\", \"—\", \"N/A\"].includes(rawValue)) return null;\r\n\r\n\t\t// 百分比值处理（如 \".472\"）\r\n\t\tif (/^\\.\\d+$/.test(rawValue)) return parseFloat(rawValue);\r\n\r\n\t\t// 常规数字处理（支持千分位逗号）\r\n\t\tconst numericValue = parseFloat(rawValue.replace(/[^\\d.-]/g, \"\"));\r\n\t\tif (!isNaN(numericValue)) return numericValue;\r\n\r\n\t\t// 日期格式检测\r\n\t\tif (/(\\d{4}-\\d{2}-\\d{2})|(\\d{2}\\/\\d{2}\\/\\d{4})/.test(rawValue)) {\r\n\t\t\treturn rawValue; // 保持日期字符串原样\r\n\t\t}\r\n\r\n\t\t// 布尔值检测\r\n\t\tif ([\"true\", \"false\"].includes(rawValue.toLowerCase())) {\r\n\t\t\treturn rawValue.toLowerCase() === \"true\";\r\n\t\t}\r\n\r\n\t\t// 其他情况返回字符串\r\n\t\treturn rawValue;\r\n\t}\r\n\r\n\t/**\r\n\t * 从HTML中提取可能的表格标题\r\n\t */\r\n\tfunction extractTitleFromHTML(html) {\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\treturn (\r\n\t\t\tdoc.querySelector(\"h1, h2, h3, h4, caption\")?.textContent.trim() || null\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * 通用属性描述生成（无硬编码）\r\n\t */\r\n\tfunction getAttributeDescription(attr) {\r\n\t\t// 单位/类型自动识别\r\n\t\tconst hints = {\r\n\t\t\t// 根据后缀推测\r\n\t\t\t\"%\": \"百分比数据\",\r\n\t\t\tRate: \"比率\",\r\n\t\t\tAmount: \"数量\",\r\n\t\t\tTotal: \"总计\",\r\n\t\t\tCount: \"计数\",\r\n\t\t\tDate: \"日期\",\r\n\t\t\tTime: \"时间\",\r\n\r\n\t\t\t// 根据前缀推测\r\n\t\t\tAvg_: \"平均值 \",\r\n\t\t\tMax_: \"最大值 \",\r\n\t\t\tMin_: \"最小值 \",\r\n\r\n\t\t\t// 常见缩写模式\r\n\t\t\tQty: \"数量\",\r\n\t\t\tAmt: \"金额\",\r\n\t\t\tPct: \"百分比\"\r\n\t\t};\r\n\r\n\t\t// 查找匹配的提示\r\n\t\tfor (const [key, hint] of Object.entries(hints)) {\r\n\t\t\tif (attr.includes(key)) {\r\n\t\t\t\treturn hint.startsWith(\" \") ? `${attr}${hint}` : `${hint} (${attr})`;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 默认返回属性名本身\r\n\t\treturn attr;\r\n\t}\r\n\r\n\t// 数据检查方法\r\n\tfunction hasDataForAttribute(table, attr) {\r\n\t\treturn table.columns.some(\r\n\t\t\tcol =>\r\n\t\t\t\tcol.data[attr] !== undefined &&\r\n\t\t\t\tcol.data[attr] !== null &&\r\n\t\t\t\ttypeof col.data[attr] === \"number\"\r\n\t\t);\r\n\t}\r\n\r\n\t// 可视化数据准备\r\n\tfunction getSparklineData(table, attr) {\r\n\t\treturn {\r\n\t\t\tvalues: table.columns\r\n\t\t\t\t.map(col => col.data[attr])\r\n\t\t\t\t.filter(v => typeof v === \"number\"),\r\n\t\t\tlabels: table.columns.map(col => col.name)\r\n\t\t};\r\n\t}\r\n\r\n\t// 统计计算方法\r\n\tfunction getAverage(table, attr) {\r\n\t\tconst values = table.columns\r\n\t\t\t.map(col => col.data[attr])\r\n\t\t\t.filter(v => typeof v === \"number\");\r\n\t\treturn values.length\r\n\t\t\t? (values.reduce((a, b) => a + b, 0) / values.length).toFixed(2)\r\n\t\t\t: \"N/A\";\r\n\t}\r\n\r\n\tfunction getMax(table, attr) {\r\n\t\tconst values = table.columns\r\n\t\t\t.map(col => col.data[attr])\r\n\t\t\t.filter(v => typeof v === \"number\");\r\n\t\treturn values.length ? Math.max(...values).toFixed(2) : \"N/A\";\r\n\t}\r\n\r\n\t// 后端通信\r\n\tasync function sendToBackend() {\r\n\t\ttry {\r\n\t\t\tconst response = await api.post(\"table_attributes\", {\r\n\t\t\t\ttable1: processedTable1.value,\r\n\t\t\t\ttable2: processedTable2.value\r\n\t\t\t});\r\n\t\t\tconsole.log(\"分析结果:\", response);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"API请求失败:\", error);\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style scoped>\r\n\t.compare-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tfont-family: system-ui, -apple-system, sans-serif;\r\n\t}\r\n\r\n\t.table-grid {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: 1fr 1fr 1fr;\r\n\t\tgap: 1px;\r\n\t\tbackground: #e0e0e0;\r\n\t\tflex: 1;\r\n\t\toverflow-y: auto;\r\n\t}\r\n\r\n\t.header {\r\n\t\tpadding: 12px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n\t\tposition: sticky;\r\n\t\ttop: 0;\r\n\t\tz-index: 1;\r\n\t}\r\n\r\n\t.cell {\r\n\t\tpadding: 16px;\r\n\t\tbackground: white;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tmin-height: 120px;\r\n\t\tborder-bottom: 1px solid #f0f0f0;\r\n\t}\r\n\r\n\t.left-column {\r\n\t\tborder-right: 1px solid #e0e0e0;\r\n\t}\r\n\r\n\t.right-column {\r\n\t\tborder-left: 1px solid #e0e0e0;\r\n\t}\r\n\r\n\t.attribute-name {\r\n\t\tfont-weight: 600;\r\n\t\tmargin-bottom: 4px;\r\n\t\tcolor: #2c3e50;\r\n\t\tfont-size: 1.1em;\r\n\t}\r\n\r\n\t.attribute-desc {\r\n\t\tfont-size: 0.9em;\r\n\t\tcolor: #3498db;\r\n\t\tmargin-bottom: 6px;\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t.original-field {\r\n\t\tfont-size: 0.7em;\r\n\t\tcolor: #95a5a6;\r\n\t\tfont-family: monospace;\r\n\t\tmargin-top: 4px;\r\n\t}\r\n\r\n\t.stats-summary {\r\n\t\tmargin-top: 8px;\r\n\t\tfont-size: 0.85em;\r\n\t\tcolor: #34495e;\r\n\t\ttext-align: center;\r\n\t\tline-height: 1.5;\r\n\t}\r\n\r\n\t.no-data {\r\n\t\tcolor: #95a5a6;\r\n\t\tfont-style: italic;\r\n\t\tfont-size: 0.9em;\r\n\t}\r\n\r\n\t.empty-state {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\theight: 100%;\r\n\t\tcolor: #7f8c8d;\r\n\t\tgap: 12px;\r\n\t}\r\n\r\n\t.format-tip {\r\n\t\tfont-size: 0.9em;\r\n\t\tcolor: #bdc3c7;\r\n\t\tmax-width: 300px;\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t/* 滚动条样式 */\r\n\t.table-grid::-webkit-scrollbar {\r\n\t\twidth: 8px;\r\n\t}\r\n\r\n\t.table-grid::-webkit-scrollbar-thumb {\r\n\t\tbackground: #95a5a6;\r\n\t\tborder-radius: 4px;\r\n\t}\r\n\r\n\t.table-grid::-webkit-scrollbar-track {\r\n\t\tbackground: #ecf0f1;\r\n\t}\r\n\r\n\t/* 响应式调整 */\r\n\t@media (max-width: 768px) {\r\n\t\t.table-grid {\r\n\t\t\tgrid-template-columns: 1fr;\r\n\t\t}\r\n\r\n\t\t.header {\r\n\t\t\tdisplay: none;\r\n\t\t}\r\n\r\n\t\t.cell {\r\n\t\t\tmin-height: auto;\r\n\t\t\tpadding: 12px;\r\n\t\t}\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}