{"ast":null,"code":"import { ref, computed, watch } from \"vue\";\nexport default {\n  __name: 'CompareTable',\n  props: {\n    div1Html: String,\n    div3Html: String\n  },\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const props = __props;\n\n    // 表格处理状态\n    const processedTable1 = ref({\n      headers: [],\n      rows: []\n    });\n    const processedTable2 = ref({\n      headers: [],\n      rows: []\n    });\n\n    // 动态解析任意HTML表格\n    const parseDynamicTable = html => {\n      const result = {\n        headers: [],\n        rows: []\n      };\n      if (!html) return result;\n      try {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(html, \"text/html\");\n        const table = doc.querySelector(\"table\");\n        if (!table) return result;\n\n        // 动态提取表头（考虑th或第一行td）\n        const headerCells = table.querySelectorAll(\"th\") || table.querySelector(\"tr:first-child\")?.querySelectorAll(\"td\");\n        if (headerCells) {\n          result.headers = Array.from(headerCells).map(cell => cell.textContent.trim().replace(/\\s+/g, \" \"));\n        }\n\n        // 动态提取行数据（跳过表头行）\n        const rows = Array.from(table.querySelectorAll(\"tr\")).slice(headerCells ? 1 : 0);\n        result.rows = rows.map(tr => {\n          return Array.from(tr.querySelectorAll(\"td\")).map(td => {\n            const content = td.textContent.trim();\n            // 尝试解析数值\n            const num = parseFloat(content.replace(/[^\\d.-]/g, \"\"));\n            return isNaN(num) ? content : num;\n          });\n        });\n        return result;\n      } catch (error) {\n        console.error(\"动态表格解析错误:\", error);\n        return result;\n      }\n    };\n\n    // 获取公共属性（动态匹配表头）\n    const commonAttributes = computed(() => {\n      const headers1 = processedTable1.value.headers;\n      const headers2 = processedTable2.value.headers;\n      return headers1.filter(header => headers2.includes(header) && ![\"Year\", \"Team\", \"Season\"].includes(header) // 排除常见非数据列\n      );\n    });\n\n    // 获取图表数据\n    const getChartData = (table, attr) => {\n      const index = table.headers.indexOf(attr);\n      if (index === -1) return {\n        values: [],\n        labels: []\n      };\n      return {\n        values: table.rows.map(row => {\n          const val = row[index];\n          return typeof val === \"number\" ? val : 0;\n        }),\n        labels: table.rows.map((_, i) => `条目${i + 1}`)\n      };\n    };\n\n    // 监听HTML变化\n    watch(() => props.div1Html, html => {\n      processedTable1.value = parseDynamicTable(html);\n    }, {\n      immediate: true\n    });\n    watch(() => props.div3Html, html => {\n      processedTable2.value = parseDynamicTable(html);\n    }, {\n      immediate: true\n    });\n    const hasData = computed(() => props.div1Html && props.div3Html && commonAttributes.value.length > 0);\n    const __returned__ = {\n      props,\n      processedTable1,\n      processedTable2,\n      parseDynamicTable,\n      commonAttributes,\n      getChartData,\n      hasData,\n      ref,\n      computed,\n      watch\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","watch","props","__props","processedTable1","headers","rows","processedTable2","parseDynamicTable","html","result","parser","DOMParser","doc","parseFromString","table","querySelector","headerCells","querySelectorAll","Array","from","map","cell","textContent","trim","replace","slice","tr","td","content","num","parseFloat","isNaN","error","console","commonAttributes","headers1","value","headers2","filter","header","includes","getChartData","attr","index","indexOf","values","labels","row","val","_","i","div1Html","immediate","div3Html","hasData","length"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/CompareTable.vue"],"sourcesContent":["<template>\r\n\t<div class=\"compare-container\">\r\n\t\t<div v-if=\"hasData\" class=\"table-grid\">\r\n\t\t\t<!-- 动态表头 -->\r\n\t\t\t<div class=\"header left-column\">{{ table1Name }}</div>\r\n\t\t\t<div class=\"header middle-column\">对比属性</div>\r\n\t\t\t<div class=\"header right-column\">{{ table2Name }}</div>\r\n\r\n\t\t\t<!-- 动态数据行 -->\r\n\t\t\t<template v-for=\"attr in commonAttributes\" :key=\"attr\">\r\n\t\t\t\t<div class=\"cell left-column\">\r\n\t\t\t\t\t<DynamicSparkline :data=\"getChartData(processedTable1, attr)\" />\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div class=\"cell middle-column\">\r\n\t\t\t\t\t<div class=\"attribute-name\">{{ attr }}</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div class=\"cell right-column\">\r\n\t\t\t\t\t<DynamicSparkline :data=\"getChartData(processedTable2, attr)\" />\r\n\t\t\t\t</div>\r\n\t\t\t</template>\r\n\t\t</div>\r\n\t\t<div v-else class=\"empty-state\">请先从左/右侧选择两个表格进行对比</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, watch } from \"vue\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdiv1Html: String,\r\n\t\tdiv3Html: String\r\n\t});\r\n\r\n\t// 表格处理状态\r\n\tconst processedTable1 = ref({ headers: [], rows: [] });\r\n\tconst processedTable2 = ref({ headers: [], rows: [] });\r\n\r\n\t// 动态解析任意HTML表格\r\n\tconst parseDynamicTable = html => {\r\n\t\tconst result = { headers: [], rows: [] };\r\n\t\tif (!html) return result;\r\n\r\n\t\ttry {\r\n\t\t\tconst parser = new DOMParser();\r\n\t\t\tconst doc = parser.parseFromString(html, \"text/html\");\r\n\t\t\tconst table = doc.querySelector(\"table\");\r\n\t\t\tif (!table) return result;\r\n\r\n\t\t\t// 动态提取表头（考虑th或第一行td）\r\n\t\t\tconst headerCells =\r\n\t\t\t\ttable.querySelectorAll(\"th\") ||\r\n\t\t\t\ttable.querySelector(\"tr:first-child\")?.querySelectorAll(\"td\");\r\n\r\n\t\t\tif (headerCells) {\r\n\t\t\t\tresult.headers = Array.from(headerCells).map(cell =>\r\n\t\t\t\t\tcell.textContent.trim().replace(/\\s+/g, \" \")\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\t// 动态提取行数据（跳过表头行）\r\n\t\t\tconst rows = Array.from(table.querySelectorAll(\"tr\")).slice(\r\n\t\t\t\theaderCells ? 1 : 0\r\n\t\t\t);\r\n\r\n\t\t\tresult.rows = rows.map(tr => {\r\n\t\t\t\treturn Array.from(tr.querySelectorAll(\"td\")).map(td => {\r\n\t\t\t\t\tconst content = td.textContent.trim();\r\n\t\t\t\t\t// 尝试解析数值\r\n\t\t\t\t\tconst num = parseFloat(content.replace(/[^\\d.-]/g, \"\"));\r\n\t\t\t\t\treturn isNaN(num) ? content : num;\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\treturn result;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"动态表格解析错误:\", error);\r\n\t\t\treturn result;\r\n\t\t}\r\n\t};\r\n\r\n\t// 获取公共属性（动态匹配表头）\r\n\tconst commonAttributes = computed(() => {\r\n\t\tconst headers1 = processedTable1.value.headers;\r\n\t\tconst headers2 = processedTable2.value.headers;\r\n\t\treturn headers1.filter(\r\n\t\t\theader =>\r\n\t\t\t\theaders2.includes(header) &&\r\n\t\t\t\t![\"Year\", \"Team\", \"Season\"].includes(header) // 排除常见非数据列\r\n\t\t);\r\n\t});\r\n\r\n\t// 获取图表数据\r\n\tconst getChartData = (table, attr) => {\r\n\t\tconst index = table.headers.indexOf(attr);\r\n\t\tif (index === -1) return { values: [], labels: [] };\r\n\r\n\t\treturn {\r\n\t\t\tvalues: table.rows.map(row => {\r\n\t\t\t\tconst val = row[index];\r\n\t\t\t\treturn typeof val === \"number\" ? val : 0;\r\n\t\t\t}),\r\n\t\t\tlabels: table.rows.map((_, i) => `条目${i + 1}`)\r\n\t\t};\r\n\t};\r\n\r\n\t// 监听HTML变化\r\n\twatch(\r\n\t\t() => props.div1Html,\r\n\t\thtml => {\r\n\t\t\tprocessedTable1.value = parseDynamicTable(html);\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\twatch(\r\n\t\t() => props.div3Html,\r\n\t\thtml => {\r\n\t\t\tprocessedTable2.value = parseDynamicTable(html);\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\tconst hasData = computed(\r\n\t\t() => props.div1Html && props.div3Html && commonAttributes.value.length > 0\r\n\t);\r\n</script>\r\n\r\n<style scoped>\r\n\t/* 保持原有样式不变 */\r\n\t.compare-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\r\n\t.table-grid {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: 1fr 1fr 1fr;\r\n\t\tgap: 1px;\r\n\t\tbackground: #eee;\r\n\t\tflex: 1;\r\n\t}\r\n\r\n\t/* 其他样式... */\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}