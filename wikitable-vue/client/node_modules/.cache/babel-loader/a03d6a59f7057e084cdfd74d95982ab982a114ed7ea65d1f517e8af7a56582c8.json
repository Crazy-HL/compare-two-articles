{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-201e19b8\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  ref: \"chartContainer\",\n  class: \"full-chart\"\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","_createElementBlock","_hoisted_1"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\FullChart.vue"],"sourcesContent":["<template>\r\n\t<div ref=\"chartContainer\" class=\"full-chart\"></div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, watch } from \"vue\";\r\n\timport * as d3 from \"d3\";\r\n\r\n\tconst props = defineProps({\r\n\t  data: {\r\n\t    type: Object,\r\n\t    default: () => ({\r\n\t      type: \"line\",\r\n\t      data: []\r\n\t    })\r\n\t  },\r\n\t  title: {\r\n\t    type: String,\r\n\t    default: \"\"\r\n\t  },\r\n\t  side: {\r\n\t    type: String,\r\n\t    default: \"left\"\r\n\t  }\r\n\t});\r\n\r\n\tconst chartContainer = ref(null);\r\n\tconst color = props.side === \"left\" ? \"#4a90e2\" : \"#ef4444\";\r\n\r\n\tconst drawChart = () => {\r\n\t  if (!chartContainer.value || props.data.data.length === 0) return;\r\n\r\n\t  d3.select(chartContainer.value).selectAll(\"*\").remove();\r\n\r\n\t  const margin = { top: 30, right: 30, bottom: 50, left: 50 };\r\n\t  const width = 800 - margin.left - margin.right;\r\n\t  const height = 500 - margin.top - margin.bottom;\r\n\r\n\t  const svg = d3\r\n\t    .select(chartContainer.value)\r\n\t    .append(\"svg\")\r\n\t    .attr(\"width\", width + margin.left + margin.right)\r\n\t    .attr(\"height\", height + margin.top + margin.bottom)\r\n\t    .append(\"g\")\r\n\t    .attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n\t  const data = props.data.data.sort((a, b) => a.year - b.year);\r\n\r\n\t  const x = props.data.type === \"bar\"\r\n\t    ? d3.scaleBand()\r\n\t        .domain(data.map(d => d.year.toString()))\r\n\t        .range([0, width])\r\n\t        .padding(0.2)\r\n\t    : d3.scaleLinear()\r\n\t        .domain(d3.extent(data, d => d.year))\r\n\t        .range([0, width]);\r\n\r\n\t  const y = d3\r\n\t    .scaleLinear()\r\n\t    .domain([0, d3.max(data, d => d.value) * 1.1])\r\n\t    .range([height, 0]);\r\n\r\n\t  // 添加网格线\r\n\t  svg\r\n\t    .append(\"g\")\r\n\t    .attr(\"class\", \"grid\")\r\n\t    .call(d3.axisLeft(y).tickSize(-width).tickFormat(\"\"))\r\n\t    .selectAll(\"line\")\r\n\t    .attr(\"stroke\", \"#e2e8f0\")\r\n\t    .attr(\"stroke-dasharray\", \"2,2\");\r\n\r\n\t  // 添加X轴\r\n\t  svg\r\n\t    .append(\"g\")\r\n\t    .attr(\"transform\", `translate(0,${height})`)\r\n\t    .call(props.data.type === \"bar\"\r\n\t      ? d3.axisBottom(x).tickFormat(d => d)\r\n\t      : d3.axisBottom(x).tickFormat(d3.format(\"d\")));\r\n\r\n\t  // 添加Y轴\r\n\t  svg.append(\"g\").call(d3.axisLeft(y));\r\n\r\n\t  // 添加X轴标签\r\n\t  svg\r\n\t    .append(\"text\")\r\n\t    .attr(\"transform\", `translate(${width / 2},${height + margin.top + 10})`)\r\n\t    .style(\"text-anchor\", \"middle\")\r\n\t    .text(\"年份\");\r\n\r\n\t  // 添加Y轴标签\r\n\t  svg\r\n\t    .append(\"text\")\r\n\t    .attr(\"transform\", \"rotate(-90)\")\r\n\t    .attr(\"y\", 0 - margin.left)\r\n\t    .attr(\"x\", 0 - height / 2)\r\n\t    .attr(\"dy\", \"1em\")\r\n\t    .style(\"text-anchor\", \"middle\")\r\n\t    .text(\"数值\");\r\n\r\n\t  // 添加标题\r\n\t  svg\r\n\t    .append(\"text\")\r\n\t    .attr(\"x\", width / 2)\r\n\t    .attr(\"y\", 0 - margin.top / 2)\r\n\t    .attr(\"text-anchor\", \"middle\")\r\n\t    .style(\"font-size\", \"16px\")\r\n\t    .style(\"font-weight\", \"bold\")\r\n\t    .text(props.title);\r\n\r\n\t  if (props.data.type === \"bar\") {\r\n\t    // 绘制柱状图\r\n\t    svg\r\n\t      .selectAll(\".bar\")\r\n\t      .data(data)\r\n\t      .enter()\r\n\t      .append(\"rect\")\r\n\t      .attr(\"class\", \"bar\")\r\n\t      .attr(\"x\", d => x(d.year.toString()))\r\n\t      .attr(\"width\", x.bandwidth())\r\n\t      .attr(\"y\", d => y(d.value))\r\n\t      .attr(\"height\", d => height - y(d.value))\r\n\t      .attr(\"fill\", color)\r\n\t      .attr(\"rx\", 2)\r\n\t      .attr(\"ry\", 2);\r\n\r\n\t    // 添加数值标签\r\n\t    svg\r\n\t      .selectAll(\".bar-label\")\r\n\t      .data(data)\r\n\t      .enter()\r\n\t      .append(\"text\")\r\n\t      .attr(\"class\", \"bar-label\")\r\n\t      .attr(\"x\", d => x(d.year.toString()) + x.bandwidth() / 2)\r\n\t      .attr(\"y\", d => y(d.value) - 5)\r\n\t      .attr(\"text-anchor\", \"middle\")\r\n\t      .text(d => d.value.toLocaleString())\r\n\t      .attr(\"font-size\", \"12px\")\r\n\t      .attr(\"fill\", \"#64748b\")\r\n\t      .style(\"visibility\", d => (height - y(d.value) > 20 ? \"visible\" : \"hidden\");\r\n\t  } else {\r\n\t    // 绘制折线图\r\n\t    const line = d3\r\n\t      .line()\r\n\t      .x(d => x(d.year))\r\n\t      .y(d => y(d.value))\r\n\t      .curve(d3.curveMonotoneX);\r\n\r\n\t    svg\r\n\t      .append(\"path\")\r\n\t      .datum(data)\r\n\t      .attr(\"fill\", \"none\")\r\n\t      .attr(\"stroke\", color)\r\n\t      .attr(\"stroke-width\", 3)\r\n\t      .attr(\"d\", line);\r\n\r\n\t    // 添加数据点\r\n\t    svg\r\n\t      .selectAll(\".dot\")\r\n\t      .data(data)\r\n\t      .enter()\r\n\t      .append(\"circle\")\r\n\t      .attr(\"class\", \"dot\")\r\n\t      .attr(\"cx\", d => x(d.year))\r\n\t      .attr(\"cy\", d => y(d.value))\r\n\t      .attr(\"r\", 6)\r\n\t      .attr(\"fill\", color)\r\n\t      .attr(\"stroke\", \"white\")\r\n\t      .attr(\"stroke-width\", 2);\r\n\r\n\t    // 添加数据标签\r\n\t    svg\r\n\t      .selectAll(\".text\")\r\n\t      .data(data)\r\n\t      .enter()\r\n\t      .append(\"text\")\r\n\t      .attr(\"x\", d => x(d.year))\r\n\t      .attr(\"y\", d => y(d.value) - 12)\r\n\t      .text(d => d.value.toLocaleString())\r\n\t      .attr(\"font-size\", \"12px\")\r\n\t      .attr(\"text-anchor\", \"middle\")\r\n\t      .attr(\"fill\", color);\r\n\t  }\r\n\t};\r\n\r\n\twatch(() => [props.data, props.title, props.side], drawChart);\r\n\tonMounted(drawChart);\r\n</script>\r\n\r\n<style scoped>\r\n\t.full-chart {\r\n\t\twidth: 100%;\r\n\t\theight: 500px;\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,GAAG,EAAC,gBAAgB;EAACC,KAAK,EAAC;;;uBAAhCC,mBAAA,CAAmD,OAAnDC,UAAmD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}