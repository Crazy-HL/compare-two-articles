{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted, onUnmounted } from \"vue\";\nimport bus from \"@/js/eventBus.js\";\nexport default {\n  __name: 'Div2',\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const userQuestion = ref(\"\"); // 用户输入的问题\n    const chatHistory = ref([]); // 历史对话记录\n    const selectText2 = ref(\"\"); // 左侧选中文本\n    const selectText3 = ref(\"\"); // 右侧选中文本\n\n    let offDiv1, offDiv3;\n    onMounted(() => {\n      offDiv1 = bus.on(\"div1Event\", data => handleSelection(data, \"div1\"));\n      offDiv3 = bus.on(\"div3Event\", data => handleSelection(data, \"div3\"));\n    });\n    onUnmounted(() => {\n      offDiv1();\n      offDiv3();\n    });\n\n    // 处理选中文本\n    function handleSelection(data, source) {\n      const plainText = getPlainTextFromSelection(data.content);\n      if (source === \"div1\") {\n        selectText2.value = plainText;\n      } else if (source === \"div3\") {\n        selectText3.value = plainText;\n      }\n    }\n\n    // 从 HTML 内容中提取纯文本\n    function getPlainTextFromSelection(htmlContent) {\n      const container = document.createElement(\"div\");\n      container.innerHTML = htmlContent;\n      return container.innerText || container.textContent || \"\";\n    }\n\n    // 向 GPT 提问\n    async function askQuestion() {\n      if (!userQuestion.value) {\n        alert(\"请输入问题！\");\n        return;\n      }\n\n      // 将用户的问题添加到历史记录\n      chatHistory.value.push({\n        role: \"user\",\n        content: userQuestion.value\n      });\n      try {\n        const response = await api.post(\"gpt_ask\", {\n          question: userQuestion.value\n        }, data => {\n          if (data) {\n            // 将 GPT 的回答添加到历史记录\n            chatHistory.value.push({\n              role: \"assistant\",\n              content: data.answer\n            });\n          } else {\n            console.error(\"提问失败:\", data.error);\n          }\n        });\n      } catch (error) {\n        console.error(\"请求失败:\", error);\n      }\n\n      // 清空输入框\n      userQuestion.value = \"\";\n    }\n\n    // 对比文章\n    async function compareTexts() {\n      if (!selectText2.value || !selectText3.value) {\n        alert(\"请先选择两段文本！\");\n        return;\n      }\n      try {\n        api.post(\"gpt_compare\", {\n          text1: selectText2.value,\n          text2: selectText3.value\n        }, data => {\n          if (data) {\n            // 将对比结果添加到历史记录\n            chatHistory.value.push({\n              role: \"assistant\",\n              content: data.result\n            });\n          } else {\n            console.error(\"对比失败:\", data.error);\n          }\n        });\n      } catch (error) {\n        console.error(\"请求失败:\", error);\n      }\n    }\n    const __returned__ = {\n      userQuestion,\n      chatHistory,\n      selectText2,\n      selectText3,\n      get offDiv1() {\n        return offDiv1;\n      },\n      set offDiv1(v) {\n        offDiv1 = v;\n      },\n      get offDiv3() {\n        return offDiv3;\n      },\n      set offDiv3(v) {\n        offDiv3 = v;\n      },\n      handleSelection,\n      getPlainTextFromSelection,\n      askQuestion,\n      compareTexts,\n      ref,\n      onMounted,\n      onUnmounted,\n      get bus() {\n        return bus;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","bus","userQuestion","chatHistory","selectText2","selectText3","offDiv1","offDiv3","on","data","handleSelection","source","plainText","getPlainTextFromSelection","content","value","htmlContent","container","document","createElement","innerHTML","innerText","textContent","askQuestion","alert","push","role","response","api","post","question","answer","console","error","compareTexts","text1","text2","result"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/Div2.vue"],"sourcesContent":["<template>\r\n\t<div class=\"chat-container\">\r\n\t\t<!-- 历史对话记录 -->\r\n\t\t<div class=\"chat-history\">\r\n\t\t\t<div\r\n\t\t\t\tv-for=\"(message, index) in chatHistory\"\r\n\t\t\t\t:key=\"index\"\r\n\t\t\t\t:class=\"['message', message.role]\">\r\n\t\t\t\t<div class=\"message-content\">\r\n\t\t\t\t\t<strong>{{ message.role === \"user\" ? \"你\" : \"GPT\" }}:</strong>\r\n\t\t\t\t\t<p>{{ message.content }}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- 输入框和操作按钮 -->\r\n\t\t<div class=\"input-container\">\r\n\t\t\t<textarea\r\n\t\t\t\tv-model=\"userQuestion\"\r\n\t\t\t\trows=\"4\"\r\n\t\t\t\tplaceholder=\"请输入你想问的问题...\"></textarea>\r\n\t\t\t<div class=\"button-container\">\r\n\t\t\t\t<button @click=\"askQuestion\">发送</button>\r\n\t\t\t\t<button @click=\"compareTexts\">对比文章</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, onUnmounted } from \"vue\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\r\n\tconst userQuestion = ref(\"\"); // 用户输入的问题\r\n\tconst chatHistory = ref([]); // 历史对话记录\r\n\tconst selectText2 = ref(\"\"); // 左侧选中文本\r\n\tconst selectText3 = ref(\"\"); // 右侧选中文本\r\n\r\n\tlet offDiv1, offDiv3;\r\n\r\n\tonMounted(() => {\r\n\t\toffDiv1 = bus.on(\"div1Event\", data => handleSelection(data, \"div1\"));\r\n\t\toffDiv3 = bus.on(\"div3Event\", data => handleSelection(data, \"div3\"));\r\n\t});\r\n\r\n\tonUnmounted(() => {\r\n\t\toffDiv1();\r\n\t\toffDiv3();\r\n\t});\r\n\r\n\t// 处理选中文本\r\n\tfunction handleSelection(data, source) {\r\n\t\tconst plainText = getPlainTextFromSelection(data.content);\r\n\t\tif (source === \"div1\") {\r\n\t\t\tselectText2.value = plainText;\r\n\t\t} else if (source === \"div3\") {\r\n\t\t\tselectText3.value = plainText;\r\n\t\t}\r\n\t}\r\n\r\n\t// 从 HTML 内容中提取纯文本\r\n\tfunction getPlainTextFromSelection(htmlContent) {\r\n\t\tconst container = document.createElement(\"div\");\r\n\t\tcontainer.innerHTML = htmlContent;\r\n\t\treturn container.innerText || container.textContent || \"\";\r\n\t}\r\n\r\n\t// 向 GPT 提问\r\n\tasync function askQuestion() {\r\n\t\tif (!userQuestion.value) {\r\n\t\t\talert(\"请输入问题！\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 将用户的问题添加到历史记录\r\n\t\tchatHistory.value.push({ role: \"user\", content: userQuestion.value });\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await api.post(\r\n\t\t\t\t\"gpt_ask\",\r\n\t\t\t\t{ question: userQuestion.value },\r\n\t\t\t\tdata => {\r\n\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\t// 将 GPT 的回答添加到历史记录\r\n\t\t\t\t\t\tchatHistory.value.push({ role: \"assistant\", content: data.answer });\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.error(\"提问失败:\", data.error);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"请求失败:\", error);\r\n\t\t}\r\n\r\n\t\t// 清空输入框\r\n\t\tuserQuestion.value = \"\";\r\n\t}\r\n\r\n\t// 对比文章\r\n\tasync function compareTexts() {\r\n\t\tif (!selectText2.value || !selectText3.value) {\r\n\t\t\talert(\"请先选择两段文本！\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tapi.post(\r\n\t\t\t\t\"gpt_compare\",\r\n\t\t\t\t{ text1: selectText2.value, text2: selectText3.value },\r\n\t\t\t\tdata => {\r\n\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\t// 将对比结果添加到历史记录\r\n\t\t\t\t\t\tchatHistory.value.push({ role: \"assistant\", content: data.result });\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.error(\"对比失败:\", data.error);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"请求失败:\", error);\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style scoped>\r\n\t/* 容器样式 */\r\n\t.chat-container {\r\n\t\twidth: 800px; /* 设置初始宽度 */\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\theight: 100%;\r\n\t\tmax-width: 800px;\r\n\t\tmargin: 0 auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground-color: #f9f9f9;\r\n\t\tborder-radius: 8px;\r\n\t\tbox-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t/* 历史对话记录 */\r\n\t.chat-history {\r\n\t\tflex: 1;\r\n\t\toverflow-y: auto;\r\n\t\tmargin-bottom: 20px;\r\n\t\tpadding: 10px;\r\n\t\tbackground-color: #fff;\r\n\t\tborder: 1px solid #ddd;\r\n\t\tborder-radius: 8px;\r\n\t}\r\n\r\n\t/* 消息样式 */\r\n\t.message {\r\n\t\tmargin-bottom: 15px;\r\n\t}\r\n\r\n\t.message-content {\r\n\t\tpadding: 10px;\r\n\t\tborder-radius: 8px;\r\n\t\tbackground-color: #e0e0e0;\r\n\t}\r\n\r\n\t.message.user .message-content {\r\n\t\tbackground-color: #d1e7dd;\r\n\t\ttext-align: right;\r\n\t}\r\n\r\n\t.message.assistant .message-content {\r\n\t\tbackground-color: #f8f9fa;\r\n\t\ttext-align: left;\r\n\t}\r\n\r\n\t/* 输入框和按钮容器 */\r\n\t.input-container {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tgap: 5px;\r\n\t}\r\n\r\n\ttextarea {\r\n\t\twidth: 100%;\r\n\t\tresize: none;\r\n\t\tpadding: 10px;\r\n\t\tfont-size: 16px;\r\n\t\tborder: 1px solid #ccc;\r\n\t\tborder-radius: 8px;\r\n\t}\r\n\r\n\t.button-container {\r\n\t\tdisplay: flex;\r\n\t\tgap: 10px;\r\n\t}\r\n\r\n\tbutton {\r\n\t\tpadding: 10px 20px;\r\n\t\tbackground-color: #4caf50;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tborder-radius: 8px;\r\n\t\tcursor: pointer;\r\n\t\tfont-size: 14px;\r\n\t\tflex: 1;\r\n\t}\r\n\r\n\tbutton:hover {\r\n\t\tbackground-color: #45a049;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}