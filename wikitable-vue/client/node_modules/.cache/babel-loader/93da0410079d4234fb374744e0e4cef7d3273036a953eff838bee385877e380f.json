{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-db33a0a4\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  ref: \"chartEl\",\n  class: \"bar-chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","_createElementBlock","_hoisted_1"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\compoents_base\\charts\\BarChart.vue"],"sourcesContent":["<template>\r\n\t<div ref=\"chartEl\" class=\"bar-chart\"></div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, onMounted, watch } from \"vue\";\r\n\timport * as echarts from \"echarts\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdata: {\r\n\t\t\ttype: Array,\r\n\t\t\tdefault: () => []\r\n\t\t},\r\n\t\tyRange: {\r\n\t\t\ttype: Array,\r\n\t\t\tdefault: null\r\n\t\t},\r\n\t\tcompareData: {\r\n\t\t\ttype: [Array, Object],\r\n\t\t\tdefault: () => []\r\n\t\t}\r\n\t});\r\n\r\n\tconst chartEl = ref(null);\r\n\tlet chartInstance = null;\r\n\r\n\t// 确保compareData是数组\r\n\tconst normalizedCompareData = computed(() => {\r\n\t\tif (Array.isArray(props.compareData)) return props.compareData;\r\n\t\tif (props.compareData && typeof props.compareData === \"object\")\r\n\t\t\treturn [props.compareData];\r\n\t\treturn [];\r\n\t});\r\n\r\n\tconst initChart = () => {\r\n\t\tif (!chartEl.value) return;\r\n\r\n\t\tchartInstance = echarts.init(chartEl.value);\r\n\r\n\t\t// 自动计算Y轴范围\r\n\t\tconst allValues = [\r\n\t\t\t...props.data.map(item => item.value),\r\n\t\t\t...normalizedCompareData.value.map(item => item.value)\r\n\t\t].filter(v => !isNaN(v));\r\n\r\n\t\tconst maxValue = allValues.length ? Math.max(...allValues) : 100;\r\n\t\tconst minValue = allValues.length ? Math.min(0, ...allValues) : 0;\r\n\r\n\t\tconst series = [\r\n\t\t\t{\r\n\t\t\t\tname: \"当前数据\",\r\n\t\t\t\ttype: \"bar\",\r\n\t\t\t\tbarWidth: \"40%\",\r\n\t\t\t\tdata: props.data.map(item => item.value),\r\n\t\t\t\titemStyle: {\r\n\t\t\t\t\tcolor: \"#3498db\"\r\n\t\t\t\t},\r\n\t\t\t\tlabel: {\r\n\t\t\t\t\tshow: true,\r\n\t\t\t\t\tposition: \"top\",\r\n\t\t\t\t\tformatter: params => {\r\n\t\t\t\t\t\tconst value = params.value;\r\n\t\t\t\t\t\tif (value >= 1e12) return `${(value / 1e12).toFixed(2)}T`;\r\n\t\t\t\t\t\tif (value >= 1e9) return `${(value / 1e9).toFixed(2)}B`;\r\n\t\t\t\t\t\tif (value >= 1e6) return `${(value / 1e6).toFixed(2)}M`;\r\n\t\t\t\t\t\treturn value.toFixed(2);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t];\r\n\r\n\t\t// 使用normalizedCompareData\r\n\t\tif (normalizedCompareData.value.length > 0) {\r\n\t\t\tseries.push({\r\n\t\t\t\tname: \"对比数据\",\r\n\t\t\t\ttype: \"bar\",\r\n\t\t\t\tbarWidth: \"40%\",\r\n\t\t\t\tdata: normalizedCompareData.value.map(item => item.value),\r\n\t\t\t\titemStyle: {\r\n\t\t\t\t\tcolor: \"#e74c3c\"\r\n\t\t\t\t},\r\n\t\t\t\tlabel: {\r\n\t\t\t\t\tshow: true,\r\n\t\t\t\t\tposition: \"top\",\r\n\t\t\t\t\tformatter: params => {\r\n\t\t\t\t\t\tconst value = params.value;\r\n\t\t\t\t\t\tif (value >= 1e12) return `${(value / 1e12).toFixed(2)}T`;\r\n\t\t\t\t\t\tif (value >= 1e9) return `${(value / 1e9).toFixed(2)}B`;\r\n\t\t\t\t\t\tif (value >= 1e6) return `${(value / 1e6).toFixed(2)}M`;\r\n\t\t\t\t\t\treturn value.toFixed(2);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tconst option = {\r\n\t\t\ttooltip: {\r\n\t\t\t\ttrigger: \"axis\",\r\n\t\t\t\taxisPointer: {\r\n\t\t\t\t\ttype: \"shadow\"\r\n\t\t\t\t},\r\n\t\t\t\tformatter: params => {\r\n\t\t\t\t\treturn params\r\n\t\t\t\t\t\t.map(param => {\r\n\t\t\t\t\t\t\tconst value = param.value;\r\n\t\t\t\t\t\t\tlet displayValue;\r\n\t\t\t\t\t\t\tif (value >= 1e12)\r\n\t\t\t\t\t\t\t\tdisplayValue = `${(value / 1e12).toFixed(2)} trillion`;\r\n\t\t\t\t\t\t\telse if (value >= 1e9)\r\n\t\t\t\t\t\t\t\tdisplayValue = `${(value / 1e9).toFixed(2)} billion`;\r\n\t\t\t\t\t\t\telse if (value >= 1e6)\r\n\t\t\t\t\t\t\t\tdisplayValue = `${(value / 1e6).toFixed(2)} million`;\r\n\t\t\t\t\t\t\telse displayValue = value.toFixed(2);\r\n\r\n\t\t\t\t\t\t\treturn `${param.seriesName}<br/>${param.name}: ${displayValue}`;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.join(\"<br/>\");\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tgrid: {\r\n\t\t\t\tleft: \"3%\",\r\n\t\t\t\tright: \"4%\",\r\n\t\t\t\tbottom: \"3%\",\r\n\t\t\t\tcontainLabel: true\r\n\t\t\t},\r\n\t\t\txAxis: {\r\n\t\t\t\ttype: \"category\",\r\n\t\t\t\tdata: props.data.map(item => item.name),\r\n\t\t\t\taxisLabel: {\r\n\t\t\t\t\tinterval: 0,\r\n\t\t\t\t\trotate: props.data.length > 3 ? 30 : 0\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tyAxis: {\r\n\t\t\t\ttype: \"value\",\r\n\t\t\t\tmin: props.yRange?.[0] ?? minValue,\r\n\t\t\t\tmax: props.yRange?.[1] ?? maxValue * 1.1,\r\n\t\t\t\taxisLabel: {\r\n\t\t\t\t\tformatter: value => {\r\n\t\t\t\t\t\tif (value >= 1e12) return `${(value / 1e12).toFixed(1)}T`;\r\n\t\t\t\t\t\tif (value >= 1e9) return `${(value / 1e9).toFixed(1)}B`;\r\n\t\t\t\t\t\tif (value >= 1e6) return `${(value / 1e6).toFixed(1)}M`;\r\n\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tseries\r\n\t\t};\r\n\r\n\t\tchartInstance.setOption(option);\r\n\t};\r\n\r\n\tonMounted(() => {\r\n\t\tinitChart();\r\n\t\twindow.addEventListener(\"resize\", () => chartInstance?.resize());\r\n\t});\r\n\r\n\twatch(\r\n\t\t() => [props.data, normalizedCompareData.value, props.yRange],\r\n\t\t() => {\r\n\t\t\tif (chartInstance) {\r\n\t\t\t\tinitChart();\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ deep: true }\r\n\t);\r\n</script>\r\n\r\n<style scoped>\r\n\t.bar-chart {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tmin-height: 150px;\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,GAAG,EAAC,SAAS;EAACC,KAAK,EAAC;;;uBAAzBC,mBAAA,CAA2C,OAA3CC,UAA2C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}