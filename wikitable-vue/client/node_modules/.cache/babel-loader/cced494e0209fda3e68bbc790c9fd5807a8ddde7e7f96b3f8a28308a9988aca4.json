{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, withModifiers as _withModifiers, vModelText as _vModelText, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-2e821d1e\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"main-container\"\n};\nconst _hoisted_2 = {\n  class: \"chat-history\"\n};\nconst _hoisted_3 = {\n  class: \"message-content\"\n};\nconst _hoisted_4 = [\"innerHTML\"];\nconst _hoisted_5 = {\n  class: \"vis-container\"\n};\nconst _hoisted_6 = {\n  class: \"comparison-table\"\n};\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"table-header\"\n}, [/*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"header-cell left-column\"\n}, \"文章1可视化\"), /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"header-cell middle-column\"\n}, \"公共属性\"), /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"header-cell right-column\"\n}, \"文章2可视化\")], -1 /* HOISTED */));\nconst _hoisted_8 = {\n  class: \"table-body\"\n};\nconst _hoisted_9 = {\n  class: \"table-cell left-column chart-cell\"\n};\nconst _hoisted_10 = {\n  key: 1,\n  class: \"empty-chart\"\n};\nconst _hoisted_11 = [\"onClick\"];\nconst _hoisted_12 = {\n  class: \"table-cell right-column chart-cell\"\n};\nconst _hoisted_13 = {\n  key: 1,\n  class: \"empty-chart\"\n};\nconst _hoisted_14 = {\n  class: \"input-area\"\n};\nconst _hoisted_15 = {\n  class: \"action-buttons\"\n};\nconst _hoisted_16 = [\"disabled\"];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 聊天容器 \"), _createElementVNode(\"div\", {\n    class: \"chat-container\",\n    onDragover: _cache[0] || (_cache[0] = _withModifiers(() => {}, [\"prevent\"])),\n    onDrop: _cache[1] || (_cache[1] = _withModifiers(function () {\n      return _ctx.handleDrop && _ctx.handleDrop(...arguments);\n    }, [\"prevent\"]))\n  }, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.chatHistory, (message, index) => {\n    return _openBlock(), _createElementBlock(_Fragment, {\n      key: index\n    }, [message?.content ? (_openBlock(), _createElementBlock(\"div\", {\n      key: 0,\n      class: _normalizeClass(['message', message.role])\n    }, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"strong\", null, _toDisplayString(message.role === \"user\" ? \"用户\" : \"GPT\") + \":\", 1 /* TEXT */), _createElementVNode(\"p\", {\n      innerHTML: message.content\n    }, null, 8 /* PROPS */, _hoisted_4)])], 2 /* CLASS */)) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n  }), 128 /* KEYED_FRAGMENT */))])], 32 /* NEED_HYDRATION */), _createCommentVNode(\" 视觉内容容器 \"), _createElementVNode(\"div\", _hoisted_5, [_createCommentVNode(\" 三列对比表格 \"), _createElementVNode(\"div\", _hoisted_6, [_createCommentVNode(\" 表头 \"), _hoisted_7, _createCommentVNode(\" 表格内容 - 默认显示2行，动态扩展 \"), _createElementVNode(\"div\", _hoisted_8, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(Math.max(2, _ctx.commonAttributes.length), (row, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"table-row\"\n    }, [_createCommentVNode(\" 左侧图表 \"), _createElementVNode(\"div\", _hoisted_9, [index < _ctx.commonAttributes.length ? (_openBlock(), _createElementBlock(\"div\", {\n      key: 0,\n      ref_for: true,\n      ref: el => _ctx.setChartRef(el, index, 'chart1'),\n      class: \"chart-box\"\n    }, null, 512 /* NEED_PATCH */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_10, \"-\"))]), _createCommentVNode(\" 中间属性 \"), _createElementVNode(\"div\", {\n      class: _normalizeClass([\"table-cell middle-column attr-cell\", {\n        clickable: index < _ctx.commonAttributes.length\n      }]),\n      onClick: $event => index < _ctx.commonAttributes.length && _ctx.selectAttribute(index)\n    }, _toDisplayString(index < _ctx.commonAttributes.length ? _ctx.commonAttributes[index] : \"-\"), 11 /* TEXT, CLASS, PROPS */, _hoisted_11), _createCommentVNode(\" 右侧图表 \"), _createElementVNode(\"div\", _hoisted_12, [index < _ctx.commonAttributes.length ? (_openBlock(), _createElementBlock(\"div\", {\n      key: 0,\n      ref_for: true,\n      ref: el => _ctx.setChartRef(el, index, 'chart2'),\n      class: \"chart-box\"\n    }, null, 512 /* NEED_PATCH */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_13, \"-\"))])]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" 输入区域 \"), _createElementVNode(\"div\", _hoisted_14, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.userInput = $event),\n    placeholder: \"请输入问题...\",\n    rows: \"3\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.userInput]]), _createElementVNode(\"div\", _hoisted_15, [_createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = function () {\n      return _ctx.submitQuestion && _ctx.submitQuestion(...arguments);\n    })\n  }, \"发送\"), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = function () {\n      return _ctx.compareAttributes && _ctx.compareAttributes(...arguments);\n    }),\n    disabled: !_ctx.isCompareReady,\n    class: \"compare-btn\"\n  }, \" 对比属性 \", 8 /* PROPS */, _hoisted_16)])])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","key","_createElementBlock","_hoisted_1","_createCommentVNode","onDragover","_cache","_withModifiers","onDrop","_ctx","handleDrop","arguments","_hoisted_2","_Fragment","_renderList","chatHistory","message","index","content","_normalizeClass","role","_hoisted_3","_toDisplayString","innerHTML","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","Math","max","commonAttributes","length","row","_hoisted_9","ref_for","ref","el","setChartRef","_hoisted_10","clickable","onClick","$event","selectAttribute","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","userInput","placeholder","rows","_hoisted_15","submitQuestion","compareAttributes","disabled","isCompareReady","_hoisted_16"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\Div2.vue"],"sourcesContent":["<template>\r\n\t<div class=\"main-container\">\r\n\t\t<!-- 聊天容器 -->\r\n\t\t<div class=\"chat-container\" @dragover.prevent @drop.prevent=\"handleDrop\">\r\n\t\t\t<div class=\"chat-history\">\r\n\t\t\t\t<template v-for=\"(message, index) in chatHistory\" :key=\"index\">\r\n\t\t\t\t\t<div v-if=\"message?.content\" :class=\"['message', message.role]\">\r\n\t\t\t\t\t\t<div class=\"message-content\">\r\n\t\t\t\t\t\t\t<strong>{{ message.role === \"user\" ? \"用户\" : \"GPT\" }}:</strong>\r\n\t\t\t\t\t\t\t<p v-html=\"message.content\"></p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</template>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- 视觉内容容器 -->\r\n\t\t<div class=\"vis-container\">\r\n\t\t\t<!-- 三列对比表格 -->\r\n\t\t\t<div class=\"comparison-table\">\r\n\t\t\t\t<!-- 表头 -->\r\n\t\t\t\t<div class=\"table-header\">\r\n\t\t\t\t\t<div class=\"header-cell left-column\">文章1可视化</div>\r\n\t\t\t\t\t<div class=\"header-cell middle-column\">公共属性</div>\r\n\t\t\t\t\t<div class=\"header-cell right-column\">文章2可视化</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<!-- 表格内容 - 默认显示2行，动态扩展 -->\r\n\t\t\t\t<div class=\"table-body\">\r\n\t\t\t\t\t<template\r\n\t\t\t\t\t\tv-for=\"(row, index) in Math.max(2, commonAttributes.length)\"\r\n\t\t\t\t\t\t:key=\"index\">\r\n\t\t\t\t\t\t<div class=\"table-row\">\r\n\t\t\t\t\t\t\t<!-- 左侧图表 -->\r\n\t\t\t\t\t\t\t<div class=\"table-cell left-column chart-cell\">\r\n\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\tv-if=\"index < commonAttributes.length\"\r\n\t\t\t\t\t\t\t\t\t:ref=\"el => setChartRef(el, index, 'chart1')\"\r\n\t\t\t\t\t\t\t\t\tclass=\"chart-box\"></div>\r\n\t\t\t\t\t\t\t\t<div v-else class=\"empty-chart\">-</div>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<!-- 中间属性 -->\r\n\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\tclass=\"table-cell middle-column attr-cell\"\r\n\t\t\t\t\t\t\t\t:class=\"{ clickable: index < commonAttributes.length }\"\r\n\t\t\t\t\t\t\t\t@click=\"\r\n\t\t\t\t\t\t\t\t\tindex < commonAttributes.length && selectAttribute(index)\r\n\t\t\t\t\t\t\t\t\">\r\n\t\t\t\t\t\t\t\t{{\r\n\t\t\t\t\t\t\t\t\tindex < commonAttributes.length\r\n\t\t\t\t\t\t\t\t\t\t? commonAttributes[index]\r\n\t\t\t\t\t\t\t\t\t\t: \"-\"\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<!-- 右侧图表 -->\r\n\t\t\t\t\t\t\t<div class=\"table-cell right-column chart-cell\">\r\n\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\tv-if=\"index < commonAttributes.length\"\r\n\t\t\t\t\t\t\t\t\t:ref=\"el => setChartRef(el, index, 'chart2')\"\r\n\t\t\t\t\t\t\t\t\tclass=\"chart-box\"></div>\r\n\t\t\t\t\t\t\t\t<div v-else class=\"empty-chart\">-</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</template>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<!-- 输入区域 -->\r\n\t\t\t<div class=\"input-area\">\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tv-model=\"userInput\"\r\n\t\t\t\t\tplaceholder=\"请输入问题...\"\r\n\t\t\t\t\trows=\"3\"></textarea>\r\n\t\t\t\t<div class=\"action-buttons\">\r\n\t\t\t\t\t<button @click=\"submitQuestion\">发送</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\t@click=\"compareAttributes\"\r\n\t\t\t\t\t\t:disabled=\"!isCompareReady\"\r\n\t\t\t\t\t\tclass=\"compare-btn\">\r\n\t\t\t\t\t\t对比属性\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\t\timport { ref, onMounted, onUnmounted, nextTick, computed } from 'vue'\r\n\timport { useChartRenderer } from '@/composables/useChartRenderer'\r\n\r\n\texport default {\r\n\t  setup() {\r\n\t    // 状态管理\r\n\t    const initialized = ref(false)\r\n\t    const userInput = ref('')\r\n\t    const chatHistory = ref([])\r\n\t    const sourceTexts = ref({ text1: '', text2: '' })\r\n\t    const articleData = ref(null)\r\n\t    const commonAttributes = ref([])\r\n\t    const activeAttributeIndex = ref(-1)\r\n\t    const chartRefs = ref({ chart1: [], chart2: [] })\r\n\r\n\t    // 组合式函数\r\n\t    const { renderChart } = useChartRenderer()\r\n\r\n\t    // 计算属性\r\n\t    const emptyTableMessage = computed(() => {\r\n\t      if (!sourceTexts.value.text1 && !sourceTexts.value.text2) return '请选择两篇文章'\r\n\t      if (!sourceTexts.value.text1) return '请选择文章1'\r\n\t      if (!sourceTexts.value.text2) return '请选择文章2'\r\n\t      return '没有公共属性'\r\n\t    })\r\n\r\n\t    const isCompareReady = computed(() => (\r\n\t      sourceTexts.value.text1 && sourceTexts.value.text2\r\n\t    ))\r\n\r\n\t    // 方法定义\r\n\t    const setChartRef = (el, index, type) => {\r\n\t      if (el) {\r\n\t        chartRefs.value[type][index] = el\r\n\t      }\r\n\t    }\r\n\r\n\t    const selectAttribute = (index) => {\r\n\t      if (index < 0 || index >= commonAttributes.value.length) return\r\n\t      activeAttributeIndex.value = index\r\n\t      renderSelectedCharts()\r\n\t    }\r\n\r\n\t    const renderSelectedCharts = () => {\r\n\t      const index = activeAttributeIndex.value\r\n\t      if (index === -1) return\r\n\r\n\t      const attr = commonAttributes.value[index]\r\n\t      if (!attr) return\r\n\r\n\t      const chartData1 = articleData.value?.article1?.[attr]\r\n\t      const chartData2 = articleData.value?.article2?.[attr]\r\n\r\n\t      if (chartData1 && chartRefs.value.chart1[index]) {\r\n\t        renderChart(chartRefs.value.chart1[index], chartData1)\r\n\t      }\r\n\r\n\t      if (chartData2 && chartRefs.value.chart2[index]) {\r\n\t        renderChart(chartRefs.value.chart2[index], chartData2)\r\n\t      }\r\n\t    }\r\n\r\n\t    const compareAttributes = async () => {\r\n\t      if (!isCompareReady.value) return\r\n\r\n\t      try {\r\n\t        const response = await api.post('/compare', {\r\n\t          texts: sourceTexts.value\r\n\t        })\r\n\r\n\t        if (response.success) {\r\n\t          commonAttributes.value = response.data.attributes || []\r\n\t          articleData.value = response.data.chartData\r\n\t          activeAttributeIndex.value = -1\r\n\r\n\t          nextTick(() => {\r\n\t            if (commonAttributes.value.length > 0) {\r\n\t              selectAttribute(0)\r\n\t            }\r\n\t          })\r\n\t        }\r\n\t      } catch (error) {\r\n\t        console.error('对比失败:', error)\r\n\t        chatHistory.value.push({\r\n\t          role: 'assistant',\r\n\t          content: `对比失败: ${error.message}`\r\n\t        })\r\n\t      }\r\n\t    }\r\n\r\n\r\n\t\t// 定义回调函数\r\n\t\tconst handleDiv1Event = data => handleSelection(data, \"div1\");\r\n\t\tconst handleDiv3Event = data => handleSelection(data, \"div3\");\r\n\r\n\t\tonMounted(() => {\r\n\t\t\tbus.on(\"div1_Event\", handleDiv1Event);\r\n\t\t\tbus.on(\"div3_Event\", handleDiv3Event);\r\n\t\t});\r\n\r\n\t\tonUnmounted(() => {\r\n\t\t\t// 解绑事件\r\n\t\t\tbus.off(\"div1_Event\", handleDiv1Event);\r\n\t\t\tbus.off(\"div3_Event\", handleDiv3Event);\r\n\t\t});\r\n\r\n\t\t// 处理选中文本\r\n\t\tfunction handleSelection(data, source) {\r\n\t\t\tconsole.log(\"Received data:\", data); // 调试输出接收到的数据\r\n\t\t\tconst plainText = getPlainTextFromSelection(data.content);\r\n\t\t\tif (source === \"div1\") {\r\n\t\t\t\tselectText2.value = plainText;\r\n\t\t\t} else if (source === \"div3\") {\r\n\t\t\t\tselectText3.value = plainText;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 从 HTML 内容中提取纯文本\r\n\t\tfunction getPlainTextFromSelection(htmlContent) {\r\n\t\t\tconst container = document.createElement(\"div\");\r\n\t\t\tcontainer.innerHTML = htmlContent;\r\n\t\t\tconsole.log(\"Extracted text:\", container.innerText); // 输出提取的纯文本\r\n\t\t\treturn container.innerText || container.textContent || \"\";\r\n\t\t}\r\n\r\n\t\t// 处理拖拽开始事件\r\n\t\tconst handleDragStart = event => {\r\n\t\t\t// 将图表数据传递给拖拽事件\r\n\t\t\tevent.dataTransfer.setData(\r\n\t\t\t\t\"application/json\",\r\n\t\t\t\tJSON.stringify({\r\n\t\t\t\t\tchartData: currentChartData.value,\r\n\t\t\t\t\tchartType: currentChartType.value\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t\tconsole.log(\"拖拽数据已设置:\", currentChartData.value); // 调试日志\r\n\t\t};\r\n\r\n\t\t// 处理拖拽释放事件\r\n\t\tconst handleDrop = event => {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tconst data = event.dataTransfer.getData(\"application/json\");\r\n\t\t\tconsole.log(\"接收到的拖拽数据:\", data); // 调试日志\r\n\r\n\t\t\tif (data) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst { chartData, chartType } = JSON.parse(data);\r\n\t\t\t\t\tconsole.log(\"解析后的图表数据:\", chartData); // 调试日志\r\n\t\t\t\t\tconsole.log(\"解析后的图表类型:\", chartType); // 调试日志\r\n\r\n\t\t\t\t\tcurrentChartData.value = chartData;\r\n\t\t\t\t\tcurrentChartType.value = chartType;\r\n\t\t\t\t\tanalyzeChart(chartData, chartType); // 调用大模型分析图表\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tconsole.error(\"解析拖拽数据失败:\", error);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconsole.error(\"未接收到拖拽数据\");\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// 分析图表\r\n\t\tconst analyzeChart = (chartData, chartType) => {\r\n\t\t\tconsole.log(\"正在调用后端接口...\"); // 调试日志\r\n\r\n\t\t\t// 调用大模型分析图表\r\n\t\t\tapi.post(\r\n\t\t\t\t\"analyze_chart\",\r\n\t\t\t\t{ chartData, chartType },\r\n\t\t\t\tresponse => {\r\n\t\t\t\t\tconsole.log(\"后端接口返回的数据:\", response); // 调试日志\r\n\r\n\t\t\t\t\t// 检查 response 是否存在且包含 analysis 字段\r\n\t\t\t\t\tif (response && response.analysis) {\r\n\t\t\t\t\t\t// 格式化分析结果\r\n\t\t\t\t\t\tconst formattedAnalysis = formatAnalysisResult(response.analysis);\r\n\r\n\t\t\t\t\t\t// 将分析结果添加到聊天记录\r\n\t\t\t\t\t\tchatHistory.value.push({\r\n\t\t\t\t\t\t\trole: \"assistant\",\r\n\t\t\t\t\t\t\tcontent: formattedAnalysis // 使用格式化后的 HTML 内容\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.error(\"后端返回的数据格式不正确:\", response);\r\n\t\t\t\t\t\tchatHistory.value.push({\r\n\t\t\t\t\t\t\trole: \"assistant\",\r\n\t\t\t\t\t\t\tcontent: \"图表分析失败，后端返回的数据格式不正确。\"\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\terror => {\r\n\t\t\t\t\t// 处理错误\r\n\t\t\t\t\tconsole.error(\"图表分析失败:\", error);\r\n\t\t\t\t\tchatHistory.value.push({\r\n\t\t\t\t\t\trole: \"assistant\",\r\n\t\t\t\t\t\tcontent: \"图表分析失败，请稍后重试。\"\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t};\r\n\r\n\t\tconst formatAnalysisResult = text => {\r\n\t\t\t// 转换 Markdown 标题\r\n\t\t\ttext = text.replace(/### (.*)/g, \"<h3>$1</h3>\");\r\n\r\n\t\t\t// 转换加粗文本\r\n\t\t\ttext = text.replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\");\r\n\r\n\t\t\t// 处理换行符\r\n\t\t\ttext = text.replace(/\\n/g, \"<br>\");\r\n\r\n\t\t\t// 处理列表项（数字编号和短横线）\r\n\t\t\ttext = text.replace(/(?:^|\\n)(\\d+\\.\\s+.*)/g, \"<li>$1</li>\");\r\n\t\t\ttext = text.replace(/(?:^|\\n)-\\s+(.*)/g, \"<li>$1</li>\");\r\n\r\n\t\t\t// 统一包裹列表项\r\n\t\t\ttext = text.replace(/(<li>.*<\\/li>)/gs, \"<ul>$1</ul>\");\r\n\r\n\t\t\treturn text;\r\n\t\t};\r\n\r\n\t\t// 向 GPT 提问\r\n\t\tconst askQuestion = () => {\r\n\t\t\tif (!userQuestion.value) {\r\n\t\t\t\talert(\"请输入问题！\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// 将用户的问题添加到历史记录\r\n\t\t\tchatHistory.value.push({ role: \"user\", content: userQuestion.value });\r\n\r\n\t\t\t// 调用 GPT 提问接口\r\n\t\t\tapi.post(\r\n\t\t\t\t\"gpt_ask_chart\",\r\n\t\t\t\t{\r\n\t\t\t\t\tquestion: userQuestion.value,\r\n\t\t\t\t\tchartData: currentChartData.value,\r\n\t\t\t\t\tchartType: currentChartType.value\r\n\t\t\t\t},\r\n\t\t\t\tresponse => {\r\n\t\t\t\t\t// 成功回调\r\n\t\t\t\t\tconsole.log(\"后端接口返回的数据:\", response); // 调试日志\r\n\r\n\t\t\t\t\t// 格式化 GPT 的回答\r\n\t\t\t\t\tconst formattedAnswer = formatAnalysisResult(response.answer);\r\n\r\n\t\t\t\t\t// 将 GPT 的回答添加到历史记录\r\n\t\t\t\t\tchatHistory.value.push({ role: \"assistant\", content: formattedAnswer });\r\n\t\t\t\t},\r\n\t\t\t\terror => {\r\n\t\t\t\t\t// 错误回调\r\n\t\t\t\t\tconsole.error(\"请求失败:\", error);\r\n\t\t\t\t\tchatHistory.value.push({\r\n\t\t\t\t\t\trole: \"assistant\",\r\n\t\t\t\t\t\tcontent: \"请求失败，请稍后重试。\"\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\t// 清空输入框\r\n\t\t\tuserQuestion.value = \"\";\r\n\t\t};\r\n\r\n\t\t// 对比文章\r\n\t\tasync function compareTexts() {\r\n\t\t\tif (!selectText2.value || !selectText3.value) {\r\n\t\t\t\talert(\"请先选择两段文本！\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tapi.post(\r\n\t\t\t\t\t\"gpt_compare\",\r\n\t\t\t\t\t{ text1: selectText2.value, text2: selectText3.value },\r\n\t\t\t\t\tdata => {\r\n\t\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\t\t// 将对比结果添加到历史记录\r\n\t\t\t\t\t\t\tchatHistory.value.push({ role: \"assistant\", content: data.result });\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconsole.error(\"对比失败:\", data.error);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(\"请求失败:\", error);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 合并数据\r\n\t\tasync function mergedJson() {\r\n\t\t\tif (!selectText2.value || !selectText3.value) {\r\n\t\t\t\talert(\"请先选择两段文本！\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tapi.post(\r\n\t\t\t\t\t\"merged_json\",\r\n\t\t\t\t\t{ text1: selectText2.value, text2: selectText3.value },\r\n\t\t\t\t\tdata => {\r\n\t\t\t\t\t\tif (data.error) {\r\n\t\t\t\t\t\t\tconsole.error(\"后端返回的错误:\", data.error);\r\n\t\t\t\t\t\t\talert(`处理文章内容时出错: ${data.message}`);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconst jsonData = data.json_data;\r\n\t\t\t\t\t\tcurrentChartData.value = jsonData;\r\n\t\t\t\t\t\tcurrentChartType.value = data.chart_classification;\r\n\t\t\t\t\t\tconsole.log(\"后端返回的数据:\", jsonData);\r\n\t\t\t\t\t\tif (data.yes_no === \"no\" || !jsonData) {\r\n\t\t\t\t\t\t\trenderNonVisualChart(\".chart-container\", data, {\r\n\t\t\t\t\t\t\t\tmessage: \"当前数据无法合并\"\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\trenderChart(jsonData, data.chart_classification);\r\n\t\t\t\t\t\t// 通过事件总线将 Div1 和 Div3 的 JSON 数据传递给 TextPopup.vue\r\n\t\t\t\t\t\tconsole.log(\"触发 updateChart1 事件\");\r\n\t\t\t\t\t\tbus.emit(\"updateChart1\", {\r\n\t\t\t\t\t\t\tdivId: \"div1\",\r\n\t\t\t\t\t\t\tjsonData: data.div1_json,\r\n\t\t\t\t\t\t\tchartType: data.chart_classification\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tconsole.log(\"触发 updateChart3 事件\");\r\n\t\t\t\t\t\tbus.emit(\"updateChart3\", {\r\n\t\t\t\t\t\t\tdivId: \"div3\",\r\n\t\t\t\t\t\t\tjsonData: data.div3_json,\r\n\t\t\t\t\t\t\tchartType: data.chart_classification\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(\"处理JSON时出错:\", error);\r\n\t\t\t\talert(\"处理JSON时出错，请稍后重试\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 渲染图表\r\n\t\tfunction renderChart(rawJsonData, chartType) {\r\n\t\t\tif (!rawJsonData || typeof rawJsonData !== \"object\") {\r\n\t\t\t\tconsole.log(\"rawJsonData:\", rawJsonData);\r\n\t\t\t\tconsole.log(\"type_rawJsonData:\", typeof rawJsonData);\r\n\t\t\t\trenderNonVisualChart(`.${props.containerClass}`, rawJsonData, {\r\n\t\t\t\t\tmessage: \"JSON 数据无效\"\r\n\t\t\t\t});\r\n\t\t\t\tconsole.error(\"JSON 数据无效:\", rawJsonData);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst data = rawJsonData.data;\r\n\t\t\tconst options = rawJsonData.options || {};\r\n\t\t\t// 获取 chart-container 的 DOM 元素\r\n\t\t\tconst chartContainer = document.querySelector(\".chart-container\");\r\n\r\n\t\t\t// 根据图表类型渲染\r\n\t\t\tif (chartType === \"Line Chart\") {\r\n\t\t\t\trenderLineChart(chartContainer, data, options);\r\n\t\t\t} else if (chartType === \"Bar Chart\") {\r\n\t\t\t\trenderBarChart(chartContainer, rawJsonData);\r\n\t\t\t} else if (chartType === \"Pie Chart\") {\r\n\t\t\t\trenderPieChart(chartContainer, data, options);\r\n\t\t\t} else if (chartType === \"Stacked Bar Chart\") {\r\n\t\t\t\trenderStackedBarChart(chartContainer, data, options);\r\n\t\t\t} else if (chartType === \"Radar Chart\") {\r\n\t\t\t\trenderRadarChart(chartContainer, rawJsonData);\r\n\t\t\t} else if (chartType === \"Scatter Chart\") {\r\n\t\t\t\trenderScatterChart(chartContainer, rawJsonData);\r\n\t\t\t} else {\r\n\t\t\t\tconsole.error(\"未知的图表类型:\", chartType);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t     initialized,\r\n\t     userInput,\r\n\t     chatHistory,\r\n\t     commonAttributes,\r\n\t     emptyTableMessage,\r\n\t     isCompareReady,\r\n\t     setChartRef,\r\n\t     selectAttribute,\r\n\t     compareAttributes\r\n\t   }\r\n</script>\r\n\r\n<style scoped>\r\n\t/* 主容器 */\r\n\t.main-container {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\twidth: 100%; /* 固定宽度 */\r\n\t\theight: 100vh;\r\n\t\tmargin: 0 auto;\r\n\t\tpadding: 5px;\r\n\t\tbackground-color: #f5f5f5;\r\n\t}\r\n\r\n\t/* 聊天容器 */\r\n\t.chat-container {\r\n\t\tflex: 0.5;\r\n\t\tbackground-color: #ffffff;\r\n\t\tpadding: 20px;\r\n\t\tborder-radius: 12px;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t\tmargin-bottom: 10px;\r\n\t}\r\n\r\n\t/* 历史对话记录 */\r\n\t.chat-history {\r\n\t\tflex: 0.5;\r\n\t\toverflow-y: auto;\r\n\t\theight: 95%;\r\n\t\t/* max-height: 200px; */\r\n\t\tpadding: 10px;\r\n\t\tbackground-color: #fafafa;\r\n\t\tborder-radius: 8px;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t\tmargin-bottom: 20px;\r\n\t}\r\n\r\n\t/* 消息样式 */\r\n\t.message {\r\n\t\tmargin-bottom: 15px;\r\n\t}\r\n\r\n\t.message-content {\r\n\t\tpadding: 12px;\r\n\t\tborder-radius: 8px;\r\n\t\tbackground-color: #f0f0f0;\r\n\t\tline-height: 1.5;\r\n\t}\r\n\r\n\t.message.user .message-content {\r\n\t\tbackground-color: #e3f2fd;\r\n\t\ttext-align: right;\r\n\t}\r\n\r\n\t.message.assistant .message-content {\r\n\t\tbackground-color: #f5f5f5;\r\n\t\ttext-align: left;\r\n\t}\r\n\r\n\t/* 分析结果的样式 */\r\n\t.message-content p {\r\n\t\tfont-family: Arial, sans-serif;\r\n\t\tline-height: 1.6;\r\n\t\tcolor: #333;\r\n\t}\r\n\r\n\t.message-content h3 {\r\n\t\tfont-size: 1.2em;\r\n\t\tfont-weight: bold;\r\n\t\tmargin: 10px 0;\r\n\t\tcolor: #0077b6;\r\n\t}\r\n\r\n\t.message-content strong {\r\n\t\tfont-weight: bold;\r\n\t\tcolor: #d90429;\r\n\t}\r\n\r\n\t.message-content ul {\r\n\t\tmargin: 10px 0;\r\n\t\tpadding-left: 20px;\r\n\t}\r\n\r\n\t.message-content li {\r\n\t\tmargin-bottom: 5px;\r\n\t}\r\n\r\n\t.message-content br {\r\n\t\tdisplay: block;\r\n\t\tmargin: 10px 0;\r\n\t}\r\n\t/* 视觉内容容器 */\r\n\t.vis-container {\r\n\t\tflex: 1;\r\n\t\tbackground-color: #ffffff;\r\n\t\tborder-radius: 12px;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t\tpadding: 20px;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tgap: 20px;\r\n\t}\r\n\r\n\t.chart-container {\r\n\t\tflex: 1;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t}\r\n\r\n\t/* 输入框和按钮容器 */\r\n\t.input-container {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tgap: 10px;\r\n\t}\r\n\r\n\ttextarea {\r\n\t\twidth: 100%;\r\n\t\theight: 80px;\r\n\t\tresize: none;\r\n\t\tpadding: 12px;\r\n\t\tfont-size: 14px;\r\n\t\tborder: 1px solid #ddd;\r\n\t\tborder-radius: 8px;\r\n\t\tbackground-color: #fafafa;\r\n\t\ttransition: border-color 0.3s ease;\r\n\t}\r\n\r\n\ttextarea:focus {\r\n\t\toutline: none;\r\n\t\tborder-color: #4caf50;\r\n\t}\r\n\r\n\t.button-container {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t\tgap: 10px;\r\n\t}\r\n\r\n\tbutton {\r\n\t\tflex: 1; /* 按钮宽度占满容器 */\r\n\t\tpadding: 10px 20px;\r\n\t\tbackground-color: #4caf50;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tborder-radius: 8px;\r\n\t\tcursor: pointer;\r\n\t\tfont-size: 14px;\r\n\t\ttransition: background-color 0.3s ease;\r\n\t}\r\n\r\n\tbutton:hover {\r\n\t\tbackground-color: #45a049;\r\n\t}\r\n\r\n\tbutton:active {\r\n\t\tbackground-color: #3d8b40;\r\n\t}\r\n\r\n\t/* 新增提交按钮样式 */\r\n\t.submit-btn {\r\n\t\tbackground-color: #ff9800;\r\n\t}\r\n\r\n\t.submit-btn:hover {\r\n\t\tbackground-color: #fb8c00;\r\n\t}\r\n\r\n\t.submit-btn:active {\r\n\t\tbackground-color: #f57c00;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}