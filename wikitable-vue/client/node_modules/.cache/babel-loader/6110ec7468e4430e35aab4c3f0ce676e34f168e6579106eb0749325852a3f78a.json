{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"chart\",\n  class: \"chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","_createElementBlock","_hoisted_1"],"sources":["D:\\vue_frame\\vue_frame\\wikitable-vue\\client\\src\\components\\text.vue"],"sourcesContent":["<template>\r\n\t<div ref=\"chart\" class=\"chart\"></div>\r\n</template>\r\n\r\n<script>\r\n\timport * as d3 from \"d3\";\r\n\timport { ref, onMounted } from \"vue\";\r\n\r\n\texport default {\r\n\t\tsetup() {\r\n\t\t\tconst chart = ref(null);\r\n\r\n\t\t\t// 固定数据\r\n\t\t\tconst json = {\r\n\t\t\t\ttype: \"stackedBar\",\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tlabels: [\"2021\", \"2023\", \"2024\", \"Career\"],\r\n\t\t\t\t\tvalues: [\r\n\t\t\t\t\t\t{ GP: 1, GS: 1, MPG: 34.9, PPG: 22.0 },\r\n\t\t\t\t\t\t{ GP: 1, GS: 1, MPG: 45.3, PPG: 30.0 },\r\n\t\t\t\t\t\t{ GP: 1, GS: 1, MPG: 40.9, PPG: 23.0 },\r\n\t\t\t\t\t\t{ GP: 3, GS: 3, MPG: 40.4, PPG: 25.0 }\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\toptions: { colors: [\"#ff5733\", \"#33ff57\", \"#3377ff\"] }\r\n\t\t\t};\r\n\r\n\t\t\tfunction renderChart() {\r\n\t\t\t\tif (!chart.value) return console.error(\"图表容器未找到\");\r\n\r\n\t\t\t\tconst { labels, values } = json.data;\r\n\t\t\t\tconst keys = Object.keys(values[0]); // 获取数据项名称\r\n\r\n\t\t\t\tconst margin = { top: 20, right: 50, bottom: 50, left: 50 };\r\n\t\t\t\tconst width = 800 - margin.left - margin.right;\r\n\t\t\t\tconst height = 400 - margin.top - margin.bottom;\r\n\r\n\t\t\t\t// 清空之前的图表\r\n\t\t\t\td3.select(chart.value).html(\"\");\r\n\r\n\t\t\t\t// 创建 SVG 容器\r\n\t\t\t\tconst svg = d3\r\n\t\t\t\t\t.select(chart.value)\r\n\t\t\t\t\t.append(\"svg\")\r\n\t\t\t\t\t.attr(\"width\", width + margin.left + margin.right)\r\n\t\t\t\t\t.attr(\"height\", height + margin.top + margin.bottom)\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n\t\t\t\t// X 轴比例尺\r\n\t\t\t\tconst x = d3.scaleBand().domain(labels).range([0, width]).padding(0.2);\r\n\r\n\t\t\t\t// Y 轴比例尺\r\n\t\t\t\tconst y = d3\r\n\t\t\t\t\t.scaleLinear()\r\n\t\t\t\t\t.domain([0, d3.max(values.flatMap(d => Object.values(d)))])\r\n\t\t\t\t\t.nice()\r\n\t\t\t\t\t.range([height, 0]);\r\n\r\n\t\t\t\t// 颜色比例尺\r\n\t\t\t\tconst color = d3.scaleOrdinal().domain(keys).range(json.options.colors);\r\n\r\n\t\t\t\t// 堆叠数据转换\r\n\t\t\t\tconst stack = d3.stack().keys(keys);\r\n\t\t\t\tconst stackedData = stack(values);\r\n\r\n\t\t\t\t// 绘制堆叠柱形图\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.selectAll(\".layer\")\r\n\t\t\t\t\t.data(stackedData)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"fill\", d => color(d.key))\r\n\t\t\t\t\t.selectAll(\"rect\")\r\n\t\t\t\t\t.data(d => d)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"rect\")\r\n\t\t\t\t\t.attr(\"x\", (_, i) => x(labels[i]))\r\n\t\t\t\t\t.attr(\"y\", d => y(d[1]))\r\n\t\t\t\t\t.attr(\"height\", d => y(d[0]) - y(d[1]))\r\n\t\t\t\t\t.attr(\"width\", x.bandwidth());\r\n\r\n\t\t\t\t// 添加 X 轴\r\n\t\t\t\tsvg\r\n\t\t\t\t\t.append(\"g\")\r\n\t\t\t\t\t.attr(\"transform\", `translate(0,${height})`)\r\n\t\t\t\t\t.call(d3.axisBottom(x));\r\n\r\n\t\t\t\t// 添加 Y 轴\r\n\t\t\t\tsvg.append(\"g\").call(d3.axisLeft(y));\r\n\t\t\t}\r\n\r\n\t\t\tonMounted(renderChart);\r\n\r\n\t\t\treturn { chart };\r\n\t\t}\r\n\t};\r\n</script>\r\n\r\n<style>\r\n\t.chart {\r\n\t\twidth: 800px;\r\n\t\theight: 400px;\r\n\t}\r\n</style>\r\n"],"mappings":";;EACMA,GAAG,EAAC,OAAO;EAACC,KAAK,EAAC;;;uBAAvBC,mBAAA,CAAqC,OAArCC,UAAqC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}