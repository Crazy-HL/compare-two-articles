{"ast":null,"code":"import { ref, computed, onMounted } from \"vue\";\nimport SimpleChart from \"./SimpleChart.vue\";\nimport FullChart from \"./FullChart.vue\";\nimport bus from \"@/js/eventBus.js\";\nexport default {\n  __name: 'CompareTable',\n  props: {\n    div1RawData: Object,\n    div3RawData: Object\n  },\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const props = __props;\n    const leftInfobox = ref({\n      title: \"\",\n      type: \"\",\n      data: {}\n    });\n    const rightInfobox = ref({\n      title: \"\",\n      type: \"\",\n      data: {}\n    });\n    const showFullChartModal = ref(false);\n    const currentChart = ref({\n      title: \"\",\n      field: {},\n      data: []\n    });\n    const COMPARABLE_FIELDS = [{\n      key: \"GDP\",\n      type: \"number\",\n      typeLabel: \"数值(万亿美元)\",\n      visualization: \"bar-chart\",\n      legend: \"国内生产总值（单位：万亿美元）\"\n    }, {\n      key: \"Population\",\n      type: \"number\",\n      typeLabel: \"数值(人)\",\n      visualization: \"bar-chart\",\n      legend: \"人口数量（单位：亿人）\"\n    }, {\n      key: \"GDP growth\",\n      type: \"percentage\",\n      typeLabel: \"百分比(%)\",\n      visualization: \"line-chart\",\n      legend: \"GDP年增长率（%）\"\n    }, {\n      key: \"Inflation (CPI)\",\n      type: \"percentage\",\n      typeLabel: \"百分比(%)\",\n      visualization: \"pie-chart\",\n      legend: \"消费者价格指数变化\"\n    }, {\n      key: \"Labor force by occupation\",\n      type: \"percentage\",\n      typeLabel: \"百分比(%)\",\n      visualization: \"pie-chart\",\n      legend: \"劳动力分布比例\"\n    }, {\n      key: \"GDP rank\",\n      type: \"text\",\n      typeLabel: \"文本\",\n      visualization: \"text-only\",\n      legend: \"全球GDP排名\"\n    }];\n    const showFullChart = (infobox, field) => {\n      currentChart.value = {\n        title: infobox.title,\n        field: field,\n        data: getField(infobox, field.key)\n      };\n      showFullChartModal.value = true;\n    };\n    const closeFullChart = () => {\n      showFullChartModal.value = false;\n    };\n    const hoverInfobox = (infobox, fieldKey, side) => {\n      bus.emit(`hover-${side}-infobox`, {\n        fieldKey,\n        infoboxTitle: infobox.title\n      });\n    };\n    const unhoverInfobox = side => {\n      bus.emit(`unhover-${side}-infobox`);\n    };\n    const hoverBothInfoboxes = fieldKey => {\n      hoverInfobox(leftInfobox.value, fieldKey, \"left\");\n      hoverInfobox(rightInfobox.value, fieldKey, \"right\");\n    };\n    const unhoverBothInfoboxes = () => {\n      unhoverInfobox(\"left\");\n      unhoverInfobox(\"right\");\n    };\n\n    // 新增：计算所有可比数据的统一范围\n    const unifiedRanges = computed(() => {\n      const ranges = {};\n      COMPARABLE_FIELDS.forEach(field => {\n        if (field.visualization === \"bar-chart\") {\n          const leftData = getField(leftInfobox.value, field.key);\n          const rightData = getField(rightInfobox.value, field.key);\n\n          // 处理左侧数据\n          const leftValues = Array.isArray(leftData) ? leftData.map(item => convertToNumber(item, field.key)) : [convertToNumber(leftData, field.key)];\n\n          // 处理右侧数据\n          const rightValues = Array.isArray(rightData) ? rightData.map(item => convertToNumber(item, field.key)) : [convertToNumber(rightData, field.key)];\n\n          // 合并所有有效值\n          const allValues = [...leftValues, ...rightValues].filter(v => !isNaN(v));\n\n          // 计算统一范围\n          if (allValues.length > 0) {\n            const max = Math.max(...allValues);\n            const min = Math.min(...allValues);\n            ranges[field.key] = {\n              min: min > 0 ? min * 0.9 : min * 1.1,\n              // 留出10%的边距\n              max: max * 1.1 // 留出10%的边距\n            };\n          } else {\n            ranges[field.key] = {\n              min: 0,\n              max: 1\n            }; // 默认范围\n          }\n        }\n      });\n      return ranges;\n    });\n\n    // 辅助函数：转换为数字并处理单位\n    const convertToNumber = (value, fieldKey) => {\n      if (!value) return NaN;\n\n      // 处理对象形式的数据\n      let rawValue = typeof value === \"object\" ? value.value || value.raw : value;\n      if (rawValue === undefined) return NaN;\n\n      // 转换为字符串处理\n      const strValue = String(rawValue);\n\n      // 特殊字段处理\n      if (fieldKey === \"GDP\") {\n        // GDP转换为万亿美元单位\n        const num = parseFloat(strValue.replace(/[^0-9.-]/g, \"\")) / 1000000000000;\n        return isNaN(num) ? NaN : num;\n      } else if (fieldKey === \"Population\") {\n        // 人口转换为亿人单位\n        const num = parseFloat(strValue.replace(/[^0-9.-]/g, \"\")) / 100000000;\n        return isNaN(num) ? NaN : num;\n      } else if (props.type === \"percentage\") {\n        // 百分比处理\n        const percentMatch = strValue.match(/(\\d+\\.?\\d*)%/);\n        return percentMatch ? parseFloat(percentMatch[1]) : NaN;\n      } else {\n        // 普通数值处理\n        const num = parseFloat(strValue.replace(/[^0-9.-]/g, \"\"));\n        return isNaN(num) ? NaN : num;\n      }\n    };\n\n    // 修改getField函数，确保返回统一格式\n    const getField = (infobox, fieldKey) => {\n      if (!infobox?.data) return [];\n      for (const section of Object.values(infobox.data)) {\n        if (section[fieldKey] !== undefined) {\n          const data = section[fieldKey];\n          if (Array.isArray(data)) {\n            return data.map(item => ({\n              raw: item.raw || item.value || item,\n              value: convertToNumber(item, fieldKey)\n            }));\n          } else {\n            return [{\n              raw: data.raw || data.value || data,\n              value: convertToNumber(data, fieldKey)\n            }];\n          }\n        }\n      }\n      return [];\n    };\n    const comparableFields = computed(() => {\n      return COMPARABLE_FIELDS.filter(field => {\n        const leftVal = getField(leftInfobox.value, field.key);\n        const rightVal = getField(rightInfobox.value, field.key);\n        return leftVal.length > 0 || rightVal.length > 0;\n      });\n    });\n    const processInfoboxData = data => {\n      if (!data) return {\n        title: \"\",\n        type: \"\",\n        data: {}\n      };\n      return {\n        title: data.title || \"无标题\",\n        type: data.type || \"未知类型\",\n        data: data.sections || {}\n      };\n    };\n    onMounted(() => {\n      bus.on(\"div1_InfoboxData\", data => {\n        leftInfobox.value = processInfoboxData(data);\n      });\n      bus.on(\"div3_InfoboxData\", data => {\n        rightInfobox.value = processInfoboxData(data);\n      });\n    });\n    const __returned__ = {\n      props,\n      leftInfobox,\n      rightInfobox,\n      showFullChartModal,\n      currentChart,\n      COMPARABLE_FIELDS,\n      showFullChart,\n      closeFullChart,\n      hoverInfobox,\n      unhoverInfobox,\n      hoverBothInfoboxes,\n      unhoverBothInfoboxes,\n      unifiedRanges,\n      convertToNumber,\n      getField,\n      comparableFields,\n      processInfoboxData,\n      ref,\n      computed,\n      onMounted,\n      SimpleChart,\n      FullChart,\n      get bus() {\n        return bus;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","SimpleChart","FullChart","bus","props","__props","leftInfobox","title","type","data","rightInfobox","showFullChartModal","currentChart","field","COMPARABLE_FIELDS","key","typeLabel","visualization","legend","showFullChart","infobox","value","getField","closeFullChart","hoverInfobox","fieldKey","side","emit","infoboxTitle","unhoverInfobox","hoverBothInfoboxes","unhoverBothInfoboxes","unifiedRanges","ranges","forEach","leftData","rightData","leftValues","Array","isArray","map","item","convertToNumber","rightValues","allValues","filter","v","isNaN","length","max","Math","min","NaN","rawValue","raw","undefined","strValue","String","num","parseFloat","replace","percentMatch","match","section","Object","values","comparableFields","leftVal","rightVal","processInfoboxData","sections","on"],"sources":["D:/vue_frame/vue_frame/wikitable-vue/client/src/components/compoents_base/CompareTable.vue"],"sourcesContent":["<template>\r\n\t<div class=\"compare-container\">\r\n\t\t<div class=\"comparison-grid\">\r\n\t\t\t<div class=\"header left-column\">\r\n\t\t\t\t{{ leftInfobox.title }}\r\n\t\t\t</div>\r\n\t\t\t<div class=\"header middle-column\">对比属性</div>\r\n\t\t\t<div class=\"header right-column\">\r\n\t\t\t\t{{ rightInfobox.title }}\r\n\t\t\t</div>\r\n\r\n\t\t\t<template v-for=\"field in comparableFields\" :key=\"field.key\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell left-column\"\r\n\t\t\t\t\t@mouseover=\"hoverInfobox(leftInfobox, field.key, 'left')\"\r\n\t\t\t\t\t@mouseout=\"unhoverInfobox('left')\"\r\n\t\t\t\t\t@click=\"showFullChart(leftInfobox, field)\">\r\n\t\t\t\t\t<SimpleChart\r\n\t\t\t\t\t\t:field=\"getField(leftInfobox, field.key)\"\r\n\t\t\t\t\t\t:type=\"field.type\"\r\n\t\t\t\t\t\t:visualization=\"field.visualization\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell middle-column\"\r\n\t\t\t\t\t@mouseover=\"hoverBothInfoboxes(field.key)\"\r\n\t\t\t\t\t@mouseout=\"unhoverBothInfoboxes()\">\r\n\t\t\t\t\t<div class=\"field-name\">{{ field.key }}</div>\r\n\t\t\t\t\t<div class=\"field-type\">{{ field.typeLabel }}</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"cell right-column\"\r\n\t\t\t\t\t@mouseover=\"hoverInfobox(rightInfobox, field.key, 'right')\"\r\n\t\t\t\t\t@mouseout=\"unhoverInfobox('right')\"\r\n\t\t\t\t\t@click=\"showFullChart(rightInfobox, field)\">\r\n\t\t\t\t\t<SimpleChart\r\n\t\t\t\t\t\t:field=\"getField(rightInfobox, field.key)\"\r\n\t\t\t\t\t\t:type=\"field.type\"\r\n\t\t\t\t\t\t:visualization=\"field.visualization\" />\r\n\t\t\t\t</div>\r\n\t\t\t</template>\r\n\t\t</div>\r\n\r\n\t\t<!-- 全屏图表模态框 -->\r\n\t\t<div\r\n\t\t\tv-if=\"showFullChartModal\"\r\n\t\t\tclass=\"full-chart-modal\"\r\n\t\t\t@click.self=\"closeFullChart\">\r\n\t\t\t<div class=\"modal-content\">\r\n\t\t\t\t<button class=\"close-btn\" @click=\"closeFullChart\">×</button>\r\n\t\t\t\t<h3>{{ currentChart.title }} - {{ currentChart.field.key }}</h3>\r\n\t\t\t\t<div class=\"chart-container\">\r\n\t\t\t\t\t<FullChart\r\n\t\t\t\t\t\t:field=\"currentChart.data\"\r\n\t\t\t\t\t\t:type=\"currentChart.field.type\"\r\n\t\t\t\t\t\t:visualization=\"currentChart.field.visualization\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"chart-legend\" v-if=\"currentChart.field.legend\">\r\n\t\t\t\t\t{{ currentChart.field.legend }}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, onMounted } from \"vue\";\r\n\timport SimpleChart from \"./SimpleChart.vue\";\r\n\timport FullChart from \"./FullChart.vue\";\r\n\timport bus from \"@/js/eventBus.js\";\r\n\r\n\tconst props = defineProps({\r\n\t\tdiv1RawData: Object,\r\n\t\tdiv3RawData: Object\r\n\t});\r\n\r\n\tconst leftInfobox = ref({ title: \"\", type: \"\", data: {} });\r\n\tconst rightInfobox = ref({ title: \"\", type: \"\", data: {} });\r\n\tconst showFullChartModal = ref(false);\r\n\tconst currentChart = ref({\r\n\t\ttitle: \"\",\r\n\t\tfield: {},\r\n\t\tdata: []\r\n\t});\r\n\r\n\tconst COMPARABLE_FIELDS = [\r\n\t\t{\r\n\t\t\tkey: \"GDP\",\r\n\t\t\ttype: \"number\",\r\n\t\t\ttypeLabel: \"数值(万亿美元)\",\r\n\t\t\tvisualization: \"bar-chart\",\r\n\t\t\tlegend: \"国内生产总值（单位：万亿美元）\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Population\",\r\n\t\t\ttype: \"number\",\r\n\t\t\ttypeLabel: \"数值(人)\",\r\n\t\t\tvisualization: \"bar-chart\",\r\n\t\t\tlegend: \"人口数量（单位：亿人）\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"GDP growth\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"line-chart\",\r\n\t\t\tlegend: \"GDP年增长率（%）\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Inflation (CPI)\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"pie-chart\",\r\n\t\t\tlegend: \"消费者价格指数变化\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"Labor force by occupation\",\r\n\t\t\ttype: \"percentage\",\r\n\t\t\ttypeLabel: \"百分比(%)\",\r\n\t\t\tvisualization: \"pie-chart\",\r\n\t\t\tlegend: \"劳动力分布比例\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: \"GDP rank\",\r\n\t\t\ttype: \"text\",\r\n\t\t\ttypeLabel: \"文本\",\r\n\t\t\tvisualization: \"text-only\",\r\n\t\t\tlegend: \"全球GDP排名\"\r\n\t\t}\r\n\t];\r\n\r\n\tconst showFullChart = (infobox, field) => {\r\n\t\tcurrentChart.value = {\r\n\t\t\ttitle: infobox.title,\r\n\t\t\tfield: field,\r\n\t\t\tdata: getField(infobox, field.key)\r\n\t\t};\r\n\t\tshowFullChartModal.value = true;\r\n\t};\r\n\r\n\tconst closeFullChart = () => {\r\n\t\tshowFullChartModal.value = false;\r\n\t};\r\n\r\n\tconst hoverInfobox = (infobox, fieldKey, side) => {\r\n\t\tbus.emit(`hover-${side}-infobox`, {\r\n\t\t\tfieldKey,\r\n\t\t\tinfoboxTitle: infobox.title\r\n\t\t});\r\n\t};\r\n\r\n\tconst unhoverInfobox = side => {\r\n\t\tbus.emit(`unhover-${side}-infobox`);\r\n\t};\r\n\r\n\tconst hoverBothInfoboxes = fieldKey => {\r\n\t\thoverInfobox(leftInfobox.value, fieldKey, \"left\");\r\n\t\thoverInfobox(rightInfobox.value, fieldKey, \"right\");\r\n\t};\r\n\r\n\tconst unhoverBothInfoboxes = () => {\r\n\t\tunhoverInfobox(\"left\");\r\n\t\tunhoverInfobox(\"right\");\r\n\t};\r\n\r\n\t// 新增：计算所有可比数据的统一范围\r\n\tconst unifiedRanges = computed(() => {\r\n\t\tconst ranges = {};\r\n\r\n\t\tCOMPARABLE_FIELDS.forEach(field => {\r\n\t\t\tif (field.visualization === \"bar-chart\") {\r\n\t\t\t\tconst leftData = getField(leftInfobox.value, field.key);\r\n\t\t\t\tconst rightData = getField(rightInfobox.value, field.key);\r\n\r\n\t\t\t\t// 处理左侧数据\r\n\t\t\t\tconst leftValues = Array.isArray(leftData)\r\n\t\t\t\t\t? leftData.map(item => convertToNumber(item, field.key))\r\n\t\t\t\t\t: [convertToNumber(leftData, field.key)];\r\n\r\n\t\t\t\t// 处理右侧数据\r\n\t\t\t\tconst rightValues = Array.isArray(rightData)\r\n\t\t\t\t\t? rightData.map(item => convertToNumber(item, field.key))\r\n\t\t\t\t\t: [convertToNumber(rightData, field.key)];\r\n\r\n\t\t\t\t// 合并所有有效值\r\n\t\t\t\tconst allValues = [...leftValues, ...rightValues].filter(\r\n\t\t\t\t\tv => !isNaN(v)\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// 计算统一范围\r\n\t\t\t\tif (allValues.length > 0) {\r\n\t\t\t\t\tconst max = Math.max(...allValues);\r\n\t\t\t\t\tconst min = Math.min(...allValues);\r\n\t\t\t\t\tranges[field.key] = {\r\n\t\t\t\t\t\tmin: min > 0 ? min * 0.9 : min * 1.1, // 留出10%的边距\r\n\t\t\t\t\t\tmax: max * 1.1 // 留出10%的边距\r\n\t\t\t\t\t};\r\n\t\t\t\t} else {\r\n\t\t\t\t\tranges[field.key] = { min: 0, max: 1 }; // 默认范围\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn ranges;\r\n\t});\r\n\r\n\t// 辅助函数：转换为数字并处理单位\r\n\tconst convertToNumber = (value, fieldKey) => {\r\n\t\tif (!value) return NaN;\r\n\r\n\t\t// 处理对象形式的数据\r\n\t\tlet rawValue = typeof value === \"object\" ? value.value || value.raw : value;\r\n\t\tif (rawValue === undefined) return NaN;\r\n\r\n\t\t// 转换为字符串处理\r\n\t\tconst strValue = String(rawValue);\r\n\r\n\t\t// 特殊字段处理\r\n\t\tif (fieldKey === \"GDP\") {\r\n\t\t\t// GDP转换为万亿美元单位\r\n\t\t\tconst num = parseFloat(strValue.replace(/[^0-9.-]/g, \"\")) / 1000000000000;\r\n\t\t\treturn isNaN(num) ? NaN : num;\r\n\t\t} else if (fieldKey === \"Population\") {\r\n\t\t\t// 人口转换为亿人单位\r\n\t\t\tconst num = parseFloat(strValue.replace(/[^0-9.-]/g, \"\")) / 100000000;\r\n\t\t\treturn isNaN(num) ? NaN : num;\r\n\t\t} else if (props.type === \"percentage\") {\r\n\t\t\t// 百分比处理\r\n\t\t\tconst percentMatch = strValue.match(/(\\d+\\.?\\d*)%/);\r\n\t\t\treturn percentMatch ? parseFloat(percentMatch[1]) : NaN;\r\n\t\t} else {\r\n\t\t\t// 普通数值处理\r\n\t\t\tconst num = parseFloat(strValue.replace(/[^0-9.-]/g, \"\"));\r\n\t\t\treturn isNaN(num) ? NaN : num;\r\n\t\t}\r\n\t};\r\n\r\n\t// 修改getField函数，确保返回统一格式\r\n\tconst getField = (infobox, fieldKey) => {\r\n\t\tif (!infobox?.data) return [];\r\n\r\n\t\tfor (const section of Object.values(infobox.data)) {\r\n\t\t\tif (section[fieldKey] !== undefined) {\r\n\t\t\t\tconst data = section[fieldKey];\r\n\t\t\t\tif (Array.isArray(data)) {\r\n\t\t\t\t\treturn data.map(item => ({\r\n\t\t\t\t\t\traw: item.raw || item.value || item,\r\n\t\t\t\t\t\tvalue: convertToNumber(item, fieldKey)\r\n\t\t\t\t\t}));\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\traw: data.raw || data.value || data,\r\n\t\t\t\t\t\t\tvalue: convertToNumber(data, fieldKey)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn [];\r\n\t};\r\n\r\n\tconst comparableFields = computed(() => {\r\n\t\treturn COMPARABLE_FIELDS.filter(field => {\r\n\t\t\tconst leftVal = getField(leftInfobox.value, field.key);\r\n\t\t\tconst rightVal = getField(rightInfobox.value, field.key);\r\n\t\t\treturn leftVal.length > 0 || rightVal.length > 0;\r\n\t\t});\r\n\t});\r\n\r\n\tconst processInfoboxData = data => {\r\n\t\tif (!data) return { title: \"\", type: \"\", data: {} };\r\n\t\treturn {\r\n\t\t\ttitle: data.title || \"无标题\",\r\n\t\t\ttype: data.type || \"未知类型\",\r\n\t\t\tdata: data.sections || {}\r\n\t\t};\r\n\t};\r\n\r\n\tonMounted(() => {\r\n\t\tbus.on(\"div1_InfoboxData\", data => {\r\n\t\t\tleftInfobox.value = processInfoboxData(data);\r\n\t\t});\r\n\r\n\t\tbus.on(\"div3_InfoboxData\", data => {\r\n\t\t\trightInfobox.value = processInfoboxData(data);\r\n\t\t});\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.compare-container {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tpadding: 8px;\r\n\t\tbox-sizing: border-box;\r\n\t}\r\n\r\n\t.comparison-grid {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns:\r\n\t\t\tminmax(120px, 1fr)\r\n\t\t\tminmax(80px, 100px)\r\n\t\t\tminmax(120px, 1fr);\r\n\t\twidth: 100%;\r\n\t\tborder: 1px solid #e0e0e0;\r\n\t\tborder-radius: 4px;\r\n\t\toverflow: hidden;\r\n\t}\r\n\r\n\t.header {\r\n\t\tpadding: 8px 6px;\r\n\t\tbackground: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n\t\tposition: sticky;\r\n\t\ttop: 0;\r\n\t\tz-index: 1;\r\n\t\tborder-right: 1px solid #475569;\r\n\t\tmin-height: 36px;\r\n\t\tfont-size: 13px;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t}\r\n\r\n\t.header.middle-column {\r\n\t\tpadding: 8px 4px;\r\n\t\tbackground: #1e293b;\r\n\t}\r\n\r\n\t.cell {\r\n\t\tpadding: 8px;\r\n\t\theight: 110px;\r\n\t\tborder-bottom: 1px solid #e0e0e0;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tjustify-content: center;\r\n\t\tposition: relative;\r\n\t\tcursor: pointer;\r\n\t\ttransition: all 0.3s ease;\r\n\t\tmin-width: 0;\r\n\t}\r\n\r\n\t.left-column,\r\n\t.right-column {\r\n\t\tmax-width: 100%;\r\n\t}\r\n\r\n\t.cell:hover {\r\n\t\tbackground-color: #f5f5f5;\r\n\t}\r\n\r\n\t.left-column:hover {\r\n\t\tbackground-color: #fff8e1;\r\n\t}\r\n\r\n\t.right-column:hover {\r\n\t\tbackground-color: #fff8e1;\r\n\t}\r\n\r\n\t.middle-column:hover {\r\n\t\tbackground-color: #e3f2fd;\r\n\t}\r\n\r\n\t.field-name {\r\n\t\tfont-weight: bold;\r\n\t\tmargin-bottom: 4px;\r\n\t\tfont-size: 12px;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t}\r\n\r\n\t.field-type {\r\n\t\tcolor: #666;\r\n\t\tfont-size: 11px;\r\n\t\tfont-style: italic;\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t}\r\n\r\n\t.full-chart-modal {\r\n\t\tposition: fixed;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\tbottom: 0;\r\n\t\tbackground-color: rgba(0, 0, 0, 0.8);\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t\tz-index: 1000;\r\n\t}\r\n\r\n\t.modal-content {\r\n\t\tbackground: white;\r\n\t\tpadding: 16px;\r\n\t\tborder-radius: 8px;\r\n\t\twidth: 85%;\r\n\t\tmax-width: 800px;\r\n\t\tmax-height: 85vh;\r\n\t\tposition: relative;\r\n\t\toverflow-y: auto;\r\n\t}\r\n\r\n\t.chart-container {\r\n\t\theight: 60vh;\r\n\t\twidth: 100%;\r\n\t\tmargin: 16px 0;\r\n\t}\r\n\r\n\t.chart-legend {\r\n\t\tfont-size: 13px;\r\n\t\tcolor: #666;\r\n\t\ttext-align: center;\r\n\t\tmargin-top: 12px;\r\n\t\tpadding-top: 12px;\r\n\t\tborder-top: 1px solid #eee;\r\n\t}\r\n\r\n\t.close-btn {\r\n\t\tposition: absolute;\r\n\t\ttop: 8px;\r\n\t\tright: 8px;\r\n\t\tfont-size: 20px;\r\n\t\tbackground: none;\r\n\t\tborder: none;\r\n\t\tcursor: pointer;\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.close-btn:hover {\r\n\t\tcolor: #333;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}